{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/minima/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/minima/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/minima/source/css/prism-dark.css","path":"css/prism-dark.css","modified":0,"renderable":1},{"_id":"themes/minima/source/css/prism-line-numbers.css","path":"css/prism-line-numbers.css","modified":0,"renderable":1},{"_id":"themes/minima/source/css/skeleton.css","path":"css/skeleton.css","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.eot","path":"fonts/dm-serif-display-v4-latin-regular.eot","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.svg","path":"fonts/dm-serif-display-v4-latin-regular.svg","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.ttf","path":"fonts/dm-serif-display-v4-latin-regular.ttf","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.woff","path":"fonts/dm-serif-display-v4-latin-regular.woff","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.woff2","path":"fonts/dm-serif-display-v4-latin-regular.woff2","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.eot","path":"fonts/inter-v2-latin-regular.eot","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.svg","path":"fonts/inter-v2-latin-regular.svg","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.ttf","path":"fonts/inter-v2-latin-regular.ttf","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.woff","path":"fonts/inter-v2-latin-regular.woff","modified":0,"renderable":1},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.woff2","path":"fonts/inter-v2-latin-regular.woff2","modified":0,"renderable":1},{"_id":"themes/minima/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/minima/source/images/thumbnail.jpg","path":"images/thumbnail.jpg","modified":0,"renderable":1},{"_id":"themes/minima/source/js/nanobar.min.js","path":"js/nanobar.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/minima/LICENSE","hash":"d31e0df078ff6f9bc2923196d9aae1cd50516159","modified":1634895938000},{"_id":"themes/minima/README.md","hash":"4dbaa7bb7697a0e984450c1497ad949f3165da9d","modified":1634895938000},{"_id":"themes/minima/_config.yml","hash":"2f45fde46fb78b3ae0d165205d41c41789a1a507","modified":1634896381000},{"_id":"themes/minima/layout/archive.ejs","hash":"3ba1f33ed739039930b987b4c0f0977a46d63310","modified":1634895938000},{"_id":"themes/minima/layout/index.ejs","hash":"7727731d02313066a91a6b942d07065447ba01cb","modified":1634895938000},{"_id":"themes/minima/layout/layout.ejs","hash":"7362dec846b67d65bc01f36fa1765cfdf05a3603","modified":1634895938000},{"_id":"themes/minima/layout/page.ejs","hash":"ba59ed3ac4edd762029b31686f2d3b60ef7b943d","modified":1634895938000},{"_id":"themes/minima/layout/post.ejs","hash":"4ee26327a088fc043c5c8bfc3a4d44f4155364cb","modified":1634895938000},{"_id":"themes/minima/layout/tag.ejs","hash":"c3a378abd79bc5d7b42af801845055e141e80fa1","modified":1634895938000},{"_id":"themes/minima/layout/partial/comments.ejs","hash":"827bced78b4ef972d1b70e4cb5b5171da6b0ed35","modified":1634895938000},{"_id":"themes/minima/layout/partial/google_analytics.ejs","hash":"0f9b2ebd8053e33c2a11976290dca5012f44cd46","modified":1634895938000},{"_id":"themes/minima/layout/partial/footer.ejs","hash":"3d41559e5bfde5b366979a77fbaa9bfeca580e24","modified":1634895938000},{"_id":"themes/minima/layout/partial/header.ejs","hash":"9760ae03ba19b925e5c88d0012e45fc876a18598","modified":1634895938000},{"_id":"themes/minima/layout/partial/tcolor.ejs","hash":"badfacb7abd8ab2e4732777177526a63b9b776f3","modified":1634895938000},{"_id":"themes/minima/layout/partial/pagination.ejs","hash":"bce484c6ec05b3120c1aba49b64cd00b7a0afb2b","modified":1634895938000},{"_id":"themes/minima/source/css/custom.css","hash":"f926256dce07e5acdb6a6547d0727768761e70c9","modified":1634895938000},{"_id":"themes/minima/source/css/normalize.css","hash":"dd1976308129df19afb1a0dfdc9cc5d2aee7aec2","modified":1634895938000},{"_id":"themes/minima/source/css/prism-dark.css","hash":"6eae920ef9ee996f71a88bf2725e6e385d3e8b79","modified":1634895938000},{"_id":"themes/minima/source/css/prism-line-numbers.css","hash":"c632c3fa3fd97d05a0f74c6a87e1e93ee60ee57f","modified":1634895938000},{"_id":"themes/minima/source/css/skeleton.css","hash":"46633c4f03fc8de882077a141775a83f2dd6acc0","modified":1634895938000},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.eot","hash":"7c5138328e9d4d2e231408c00eb879d1508a6f4e","modified":1634895938000},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.woff","hash":"61692ca29e433827e7c227e7d19a70037ff87273","modified":1634895938000},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.ttf","hash":"1eaeb5d2d0a01f02cfd1313903b35bcef224d379","modified":1634895938000},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.woff2","hash":"c104f19b6f5176eae39be527c43742a236b9ac29","modified":1634895938000},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.eot","hash":"b18f1e7b093bf71d833ddfd81676bdfbf165e810","modified":1634895938000},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.svg","hash":"ca639a580d3dd7c1a023d489cd818af95883b52b","modified":1634895938000},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.woff","hash":"7f36fa1af7da1caa31a37e7b96c1772b75494726","modified":1634895938000},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.ttf","hash":"d96f19bfb5bd9e7b85f590c20960d0cb8a1fffcd","modified":1634895938000},{"_id":"themes/minima/source/fonts/inter-v2-latin-regular.woff2","hash":"99ad803462294f0cfce54995572d6caf8d955028","modified":1634895938000},{"_id":"themes/minima/source/images/thumbnail.jpg","hash":"80248d23872a62ae51080920487adada35d3f5a2","modified":1634895938000},{"_id":"themes/minima/source/js/nanobar.min.js","hash":"fc30e613dbce5b1b5602907c0966739480456875","modified":1634895938000},{"_id":"themes/minima/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1634898638638},{"_id":"themes/minima/source/.DS_Store","hash":"4ce5c19045457e4e4bd9fce4a41fa5380a6845a3","modified":1634896448000},{"_id":"themes/minima/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1634896358000},{"_id":"themes/minima/source/fonts/dm-serif-display-v4-latin-regular.svg","hash":"b650647a506978c3617a12cb50ba3c4c596ee6e7","modified":1634895938000},{"_id":"themes/minima/source/images/favicon.png","hash":"7e8ad0c10cd34ea74dae2c4b2c5e1c09dd12e412","modified":1623139388000},{"_id":"source/_drafts/centOs服务器部署nodejs和mysql.md","hash":"923ab803da52dbfd419fe3524a8b87421a958175","modified":1634895516326},{"_id":"source/_drafts/nginx服务器部署vue配置.md","hash":"4b512f4e51e3f0a74c313c703229982ba2c2f112","modified":1634895516441},{"_id":"source/_drafts/uglifyJs-webpack-plugin在vue中的使用.md","hash":"1a4d84e96fec0119e1530b0cdabf5c14de1855d0","modified":1634895516441},{"_id":"source/_drafts/黑洞是什么.md","hash":"a00ebe1d1a209c2c81618e592eb28ccc27073c0b","modified":1634895516449},{"_id":"source/_drafts/vue和nginx服务器配置gzip.md","hash":"5d05afe7ee733136d85fc2060c38fc48776cca4f","modified":1634895516441},{"_id":"source/_posts/Linux中内存交换空间(Swap)的介绍和使用.md","hash":"6026ebb95f99dd51cc2a7138c00e2a29c757dbe5","modified":1634895516450},{"_id":"source/_posts/diff算法简介.md","hash":"5a41b455487265854b5c420ff30fe8f4b0ab121a","modified":1634895516450},{"_id":"source/_posts/flex布局.md","hash":"19ab596c3746fc05f66704a4290371bc41e8cd90","modified":1634895516452},{"_id":"source/_posts/js常用4种排序介绍.md","hash":"8c1664c3acf73d8df1b8e9e05e423d67cc417e3d","modified":1634895516453},{"_id":"source/_posts/promise简单实现.md","hash":"44ecd719b4e6d00d0cb3901b915e071206302969","modified":1634895516467},{"_id":"source/_posts/vue原理mvvm简单实现.md","hash":"dbd0314e66733cd4c23a7940b01ec6c5ea659c27","modified":1634895516467},{"_id":"source/_posts/webpack使用指南.md","hash":"7ae2d4f7e25bc7a50ffd62a114ede741f825bb9f","modified":1634895516467},{"_id":"source/_posts/使用css实现环状进度.md","hash":"7beed8dfcaa477c29dcf054c0ef04d63b672e5f8","modified":1634895516469},{"_id":"source/_posts/使用jarsigner重新签名apk包.md","hash":"c34a45760f3b54d8ebf57738b50d30ccb748027c","modified":1634895516471},{"_id":"source/_posts/函数柯里化(curring).md","hash":"f274a48973bd087c795719e92105586b6c0e5f3c","modified":1634895516471},{"_id":"source/_posts/函数的防抖和节流.md","hash":"8df26b6254cf1820c948f3d6e690914dbacbc6f4","modified":1634895516471},{"_id":"source/_posts/手写代码面试题记录.md","hash":"d3aaf62a541edd5aa378a593e2c02f1f8e4f30e4","modified":1634895516471},{"_id":"source/_posts/旅行者1号.md","hash":"367e283f2e7b848e14a48a147ad2b09527ce3696","modified":1634895516472},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程.md","hash":"61b87b6a21058dbb1e3ff71590be6102ac4800b2","modified":1634895516499},{"_id":"source/_posts/记发布订阅和观察者模式.md","hash":"00aad36c4490719ce0abc12955f0056d84eefe89","modified":1634895516503},{"_id":"source/_posts/面试题总结.md","hash":"a42465652dc660e01d95927172ec281d736734f9","modified":1634895516503},{"_id":"source/_drafts/centOs服务器部署nodejs和mysql/tsJyucP4eSFO8zH.png","hash":"3c8243c30778c5f961bb006160cc62787866cf0b","modified":1634895516326},{"_id":"source/_drafts/last/README.md","hash":"901234b43bdb78909ec7adebdb3a7e5657120682","modified":1634895516326},{"_id":"source/_drafts/last/index.html","hash":"3074fdd6c581c263e189081e95bad16cf03a0c41","modified":1634895516430},{"_id":"source/_posts/flex布局/WBQ8RSuH7norCs4.png","hash":"847209841854cbd0d7861311abc1d4f665aa8d49","modified":1634895516452},{"_id":"source/_posts/面试题总结/FvAIM258yHCTQba.png","hash":"fd52fe629f72fd6d508f699b4e0c13309e0892bb","modified":1634895516503},{"_id":"source/_drafts/last/images/static.gif","hash":"4d033399edc1d6f1960b10be79cf2c99de38b768","modified":1634895516430},{"_id":"source/_drafts/last/docs/CentOs服务器部署nodejs和mysql.md","hash":"be14e30c34556d1b89b4f419ac32b27be1449acb","modified":1634895516327},{"_id":"source/_drafts/last/docs/Linux中内存交换空间(Swap)的介绍和使用.md","hash":"f7dab2fa11c3ee60f996b6f4168c3dc195011dc3","modified":1634895516327},{"_id":"source/_drafts/last/docs/diff算法简介.md","hash":"530c617a5a4d10eb9c88e861c17562e62e572e16","modified":1634895516327},{"_id":"source/_drafts/last/docs/flex布局.md","hash":"2dc4d604d6b33b5f2dd57f69fc12a3ea642f98b6","modified":1634895516328},{"_id":"source/_drafts/last/docs/js常用4种排序介绍.md","hash":"44717be19b4ecff1c7a6330e24b807677143bb8c","modified":1634895516423},{"_id":"source/_drafts/last/docs/nginx服务器部署vue配置.md","hash":"43bee45719b4ed7028446dfd655e23e4bf3bdad3","modified":1634895516423},{"_id":"source/_drafts/last/docs/uglifyJs-webpack-plugin在vue中的使用.md","hash":"01170544fcda9ac68f06a134c828e73923c3b7cc","modified":1634895516423},{"_id":"source/_drafts/last/docs/promise简单实现.md","hash":"7297ccd96343db59babd9b710ca39ceb75edde1e","modified":1634895516423},{"_id":"source/_drafts/last/docs/vue原理mvvm简单实现.md","hash":"5cdf4354afab3343e59e18f30c0d53d2777a1ef2","modified":1634895516424},{"_id":"source/_drafts/last/docs/vue和nginx服务器配置gzip.md","hash":"9201c3a62e6b9f121d7eb86275c2f01e2213b5ca","modified":1634895516424},{"_id":"source/_drafts/last/docs/webpack使用指南.md","hash":"9745e57679e86c4cefea06db09ff91f962e1cda2","modified":1634895516424},{"_id":"source/_drafts/last/docs/使用css实现环状进度.md","hash":"7bc55c3567dd26d82753389c1a695d1ca98d2a2e","modified":1634895516424},{"_id":"source/_drafts/last/docs/函数柯里化(curring).md","hash":"ca1f8fe06942340651c89e895008fed4b1b40979","modified":1634895516425},{"_id":"source/_drafts/last/docs/使用jarsigner重新签名apk包.md","hash":"8cc9fe0520dbbcf72b38d52a55424c468674c9ea","modified":1634895516424},{"_id":"source/_drafts/last/docs/函数的防抖和节流.md","hash":"b4091e0e2b28c73d024ef29af727b032329ac27a","modified":1634895516425},{"_id":"source/_drafts/last/docs/手写代码面试题记录.md","hash":"c9a9260a8031a8e606bd56209b519fe98f375e74","modified":1634895516425},{"_id":"source/_drafts/last/docs/旅行者1号.md","hash":"85ec2b1fd375fbb296326cd24bd8e54fb73c1db4","modified":1634895516425},{"_id":"source/_drafts/last/docs/真睡后收入-以太坊挖矿教程.md","hash":"5994bb2ffd40d648959cb9a3824dc276b9ffb52c","modified":1634895516426},{"_id":"source/_drafts/last/docs/记发布订阅和观察者模式.md","hash":"366ad3ddfec5bd73fd9905a1771dda0b77b3327e","modified":1634895516426},{"_id":"source/_drafts/last/docs/面试题总结.md","hash":"7f3f76e2205cff100524858d342e3aed959f91f7","modified":1634895516427},{"_id":"source/_drafts/last/docs/黑洞是什么.md","hash":"43b8dc06eda427b3f4af782eabcd31c21af0e435","modified":1634895516427},{"_id":"source/_drafts/last/ohmybox/index.html","hash":"344dd201ac0a387bf87a3bd73efb82c2b5ed600c","modified":1634895516432},{"_id":"source/_drafts/last/ohmybox/favicon.ico","hash":"c0605efed936ee2600284e6480521d06fa64f872","modified":1634895516432},{"_id":"source/_drafts/last/ohmybox/css/index.64e3982f.css","hash":"a0dab166cc245dd0c034cf9ba1ed742e3258b648","modified":1634895516431},{"_id":"source/_drafts/last/ohmybox/js/index.e8ace4ad.js","hash":"5a4b6e3f641d92e1ba57c6582edfaba05b12dc33","modified":1634895516439},{"_id":"source/_drafts/last/ohmybox/js/index.e8ace4ad.js.map","hash":"a776ae6ad7434379e9000040963e4fd958c17f8d","modified":1634895516441},{"_id":"source/_drafts/last/docs/img/deploy-nodejs-and-mysql-on-centos/tsJyucP4eSFO8zH.png","hash":"3c8243c30778c5f961bb006160cc62787866cf0b","modified":1634895516387},{"_id":"source/_drafts/last/docs/img/flex-layout/WBQ8RSuH7norCs4.png","hash":"847209841854cbd0d7861311abc1d4f665aa8d49","modified":1634895516396},{"_id":"source/_drafts/last/docs/img/interview/FvAIM258yHCTQba.png","hash":"fd52fe629f72fd6d508f699b4e0c13309e0892bb","modified":1634895516407},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程/YA4dIRbSgNVsvKE.png","hash":"cc6d613a2aa73fd42bddb2f4b1e57ff74b192496","modified":1634895516500},{"_id":"source/_posts/面试题总结/bB3Sj9h8nyoOIVs.png","hash":"71c3e633e291d66690ba41f840e1d1b523be7951","modified":1634895516504},{"_id":"source/_drafts/last/images/deep-bg.jpg","hash":"aa5dc2afcb19f201d66fad1c614d64391fbb2253","modified":1634895516429},{"_id":"source/_drafts/last/ohmybox/js/chunk-vendors.854fd5c2.js","hash":"40edd6788508e51eb6070680fcd621d436205b13","modified":1634895516434},{"_id":"source/_drafts/last/docs/img/eth-miner/YA4dIRbSgNVsvKE.png","hash":"cc6d613a2aa73fd42bddb2f4b1e57ff74b192496","modified":1634895516390},{"_id":"source/_drafts/last/docs/img/interview/bB3Sj9h8nyoOIVs.png","hash":"71c3e633e291d66690ba41f840e1d1b523be7951","modified":1634895516410},{"_id":"source/_posts/webpack使用指南/EOzt1WTKBaXkgIr.png","hash":"41b4b5b4b18d1f685a2004f76fefe882b9293847","modified":1634895516469},{"_id":"source/_posts/使用css实现环状进度/E8CM6WZ1hRv7piy.gif","hash":"33993ef5148a5720a1d1cc3b41a3854f5c493876","modified":1634895516470},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程/ZD6ML8tjkGXdeWf.png","hash":"570834fd150e917ff5b18723c9667f3f0ec5f0cc","modified":1634895516500},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程/rhvAF538ynVWtlY.png","hash":"d8837577f5b728bd49fe1cd3b2a3facc392635f4","modified":1634895516502},{"_id":"source/_drafts/last/docs/img/eth-miner/ZD6ML8tjkGXdeWf.png","hash":"570834fd150e917ff5b18723c9667f3f0ec5f0cc","modified":1634895516392},{"_id":"source/_drafts/last/docs/img/eth-miner/rhvAF538ynVWtlY.png","hash":"d8837577f5b728bd49fe1cd3b2a3facc392635f4","modified":1634895516395},{"_id":"source/_drafts/last/docs/img/how-to-use-webpack/EOzt1WTKBaXkgIr.png","hash":"41b4b5b4b18d1f685a2004f76fefe882b9293847","modified":1634895516402},{"_id":"source/_drafts/last/docs/img/realize-circle-loadingi-in-css/E8CM6WZ1hRv7piy.gif","hash":"33993ef5148a5720a1d1cc3b41a3854f5c493876","modified":1634895516423},{"_id":"source/_posts/旅行者1号/TewXOIzalCK5Egh.png","hash":"4dcf6733483c786c6c2128709a9bbeca5ee5088d","modified":1634895516491},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程/grXvl26PoEtMFpa.png","hash":"5f0c660ccd32ce9e02e7c4e5eac133e983a25c46","modified":1634895516502},{"_id":"source/_drafts/last/docs/img/about-traveller/TewXOIzalCK5Egh.png","hash":"4dcf6733483c786c6c2128709a9bbeca5ee5088d","modified":1634895516355},{"_id":"source/_drafts/last/docs/img/eth-miner/grXvl26PoEtMFpa.png","hash":"5f0c660ccd32ce9e02e7c4e5eac133e983a25c46","modified":1634895516394},{"_id":"source/_drafts/vue和nginx服务器配置gzip/FS6bBWiJQIjuHTz.png","hash":"4d62a5d3d7b84fb9bb250e225e8151715d1c0182","modified":1634895516443},{"_id":"source/_posts/旅行者1号/Ia7qdlQ4PT1ws3j.png","hash":"0cf059ac4d3b67cd1945716b4481c020f1ff9a9f","modified":1634895516481},{"_id":"source/_drafts/last/docs/img/about-traveller/Ia7qdlQ4PT1ws3j.png","hash":"0cf059ac4d3b67cd1945716b4481c020f1ff9a9f","modified":1634895516342},{"_id":"source/_drafts/last/docs/img/about-traveller/p5kXGl2DtbcaSnW.png","hash":"7084417e1c140f9cf952519b6107478e3c4661e0","modified":1634895516363},{"_id":"source/_drafts/last/docs/img/configure-gzip-on-nginx-with-vue/FS6bBWiJQIjuHTz.png","hash":"4d62a5d3d7b84fb9bb250e225e8151715d1c0182","modified":1634895516370},{"_id":"source/_posts/js常用4种排序介绍/DzWckAlLmVU9JuN.gif","hash":"4d3667b99cc9c3287d639fc47ee0aa764c58577e","modified":1634895516458},{"_id":"source/_posts/旅行者1号/n3kxjOqDQASw4Wz.png","hash":"8eb39b842f5e06c87192b468c079c9f4ef27bc92","modified":1634895516496},{"_id":"source/_posts/旅行者1号/p5kXGl2DtbcaSnW.png","hash":"7084417e1c140f9cf952519b6107478e3c4661e0","modified":1634895516497},{"_id":"source/_posts/旅行者1号/vTfbrW8JKkQFRcP.png","hash":"ad38e9bc7c07f7d195e30ff0a9b1023cb2cd79a8","modified":1634895516499},{"_id":"source/_drafts/last/docs/img/about-traveller/KJPlgxfCpuGHndB.png","hash":"57a70e8d3ada5547c1e4de70a9500f5d1c8bf582","modified":1634895516344},{"_id":"source/_drafts/last/docs/img/about-traveller/n3kxjOqDQASw4Wz.png","hash":"8eb39b842f5e06c87192b468c079c9f4ef27bc92","modified":1634895516361},{"_id":"source/_drafts/last/docs/img/about-traveller/upB4hvTydZ9IP1r.png","hash":"1214028672ee3d54e014c30c495323de16f052a0","modified":1634895516366},{"_id":"source/_drafts/last/docs/img/about-traveller/vTfbrW8JKkQFRcP.png","hash":"ad38e9bc7c07f7d195e30ff0a9b1023cb2cd79a8","modified":1634895516367},{"_id":"source/_drafts/last/docs/img/javascript-array-sort-introduce/DzWckAlLmVU9JuN.gif","hash":"4d3667b99cc9c3287d639fc47ee0aa764c58577e","modified":1634895516415},{"_id":"source/_posts/js常用4种排序介绍/5z82iWpVIJbLfu7.gif","hash":"b7b52c58512cc244f49368fa51f32642d41ed28f","modified":1634895516455},{"_id":"source/_posts/旅行者1号/KJPlgxfCpuGHndB.png","hash":"57a70e8d3ada5547c1e4de70a9500f5d1c8bf582","modified":1634895516482},{"_id":"source/_posts/旅行者1号/upB4hvTydZ9IP1r.png","hash":"1214028672ee3d54e014c30c495323de16f052a0","modified":1634895516498},{"_id":"source/_drafts/last/docs/img/about-traveller/bszNOfBKhiYaQv7.png","hash":"172c881462b7741fece6d7454e95cea3c0b2ee84","modified":1634895516358},{"_id":"source/_posts/js常用4种排序介绍/KWrN6slZTEFAuhv.gif","hash":"e1ae2675be2a7f48bf7473b20b8d108cce253da7","modified":1634895516461},{"_id":"source/_posts/旅行者1号/bszNOfBKhiYaQv7.png","hash":"172c881462b7741fece6d7454e95cea3c0b2ee84","modified":1634895516494},{"_id":"source/_drafts/last/docs/img/about-traveller/BvYORyZgq9amV7A.png","hash":"3e96ca7e9ab0e8bd55583b0ab0ccbdaa883351bd","modified":1634895516339},{"_id":"source/_posts/diff算法简介/HrGjhDp8ebSt62R.png","hash":"5b55431537df0155357cae07344880e9c67a536f","modified":1634895516452},{"_id":"source/_posts/旅行者1号/BvYORyZgq9amV7A.png","hash":"3e96ca7e9ab0e8bd55583b0ab0ccbdaa883351bd","modified":1634895516480},{"_id":"source/_drafts/last/docs/img/about-traveller/NqjhKXn3kgIrDlS.png","hash":"bfd0493204dead5bb97c5dd3e82b1e4e2e9c01ae","modified":1634895516354},{"_id":"source/_drafts/last/docs/img/javascript-array-sort-introduce/5z82iWpVIJbLfu7.gif","hash":"b7b52c58512cc244f49368fa51f32642d41ed28f","modified":1634895516412},{"_id":"source/_drafts/last/docs/img/javascript-array-sort-introduce/KWrN6slZTEFAuhv.gif","hash":"e1ae2675be2a7f48bf7473b20b8d108cce253da7","modified":1634895516417},{"_id":"source/_posts/旅行者1号/Mi9vh214uZgD8z5.png","hash":"880d1a426538f8e9b6cbeda8767eadc146902617","modified":1634895516487},{"_id":"source/_posts/旅行者1号/NqjhKXn3kgIrDlS.png","hash":"bfd0493204dead5bb97c5dd3e82b1e4e2e9c01ae","modified":1634895516490},{"_id":"source/_drafts/last/docs/img/about-traveller/Mi9vh214uZgD8z5.png","hash":"880d1a426538f8e9b6cbeda8767eadc146902617","modified":1634895516350},{"_id":"source/_drafts/last/docs/img/diff-arithmetic/HrGjhDp8ebSt62R.png","hash":"5b55431537df0155357cae07344880e9c67a536f","modified":1634895516389},{"_id":"source/_drafts/last/docs/img/javascript-array-sort-introduce/ibLoIgDEnRJrUas.gif","hash":"324c0a33c3c4e3e29e29b7396779bcfc881e1e22","modified":1634895516421},{"_id":"source/_posts/旅行者1号/2d6MCQ3TKquiVyF.png","hash":"d491c902d41ebb84def105903bc91664d6a42660","modified":1634895516473},{"_id":"source/_posts/旅行者1号/4Wa2eSdZ3X98BfK.png","hash":"0fcae70b2e7693cdcda0d223e5b58f3882c9854c","modified":1634895516477},{"_id":"source/_posts/旅行者1号/MgVjFXxtsENKv4l.png","hash":"c90d1e985f29b653f2138fcd3f2eac1251a6ba50","modified":1634895516485},{"_id":"source/_drafts/last/ohmybox/js/chunk-vendors.854fd5c2.js.map","hash":"5135113b2af58fb0d5116a6dcba7aa631c92a9b7","modified":1634895516439},{"_id":"source/_drafts/last/docs/img/about-traveller/4Wa2eSdZ3X98BfK.png","hash":"0fcae70b2e7693cdcda0d223e5b58f3882c9854c","modified":1634895516335},{"_id":"source/_drafts/last/docs/img/about-traveller/MgVjFXxtsENKv4l.png","hash":"c90d1e985f29b653f2138fcd3f2eac1251a6ba50","modified":1634895516347},{"_id":"source/_drafts/last/docs/img/about-traveller/2d6MCQ3TKquiVyF.png","hash":"d491c902d41ebb84def105903bc91664d6a42660","modified":1634895516330},{"_id":"source/_posts/js常用4种排序介绍/ibLoIgDEnRJrUas.gif","hash":"324c0a33c3c4e3e29e29b7396779bcfc881e1e22","modified":1634895516466},{"_id":"source/_drafts/vue和nginx服务器配置gzip/vW36BFrLUA85bGe.png","hash":"122b1d179b9d1f8db698cf34783a0da9ce2c5d24","modified":1634895516449},{"_id":"source/_drafts/last/docs/img/configure-gzip-on-nginx-with-vue/vW36BFrLUA85bGe.png","hash":"122b1d179b9d1f8db698cf34783a0da9ce2c5d24","modified":1634895516386},{"_id":"public/2020/10/26/使用jarsigner重新签名apk包/index.html","hash":"2a49932ac174dc25a2c5adae51b62dc794de53dd","modified":1634898948616},{"_id":"public/2020/10/04/使用css实现环状进度/index.html","hash":"d49a5df13ec9e6ff6e447b68d567fdccbdcb5bf6","modified":1634898948616},{"_id":"public/2020/09/21/Linux中内存交换空间(Swap)的介绍和使用/index.html","hash":"d11ce44d8e12fe66ff6134364557e40c703ee564","modified":1634898948616},{"_id":"public/archives/index.html","hash":"97a278599866f41c1d71c4b39c0154c9d2abb148","modified":1634898948616},{"_id":"public/archives/page/2/index.html","hash":"be0d9fe83c76b53d2255cb00780864147ea37f62","modified":1634898948616},{"_id":"public/archives/2020/index.html","hash":"04c49a861b4fc5e748db07e744753ba26cd2ad9d","modified":1634898948616},{"_id":"public/archives/2020/page/2/index.html","hash":"246db4653a996ef9b98f49e27ef14f4cd2481194","modified":1634898948616},{"_id":"public/archives/2020/09/index.html","hash":"1edaa19eb7f62b9c535677b5ffa0f3a9f9069b63","modified":1634898948616},{"_id":"public/archives/2020/10/index.html","hash":"d99d0d2ce81e5a82bdf39cd8f31d6efda6671127","modified":1634898948616},{"_id":"public/archives/2020/11/index.html","hash":"ef9cff51864eccaaecc66ba049ba5a328afe7c46","modified":1634898948616},{"_id":"public/archives/2020/12/index.html","hash":"9137dca94e0d4bb2d4b9bef944a30e89a93a7a1d","modified":1634898948616},{"_id":"public/archives/2021/index.html","hash":"493c7c08d8fad1fde1c1f16f54e3c69ddb7aede1","modified":1634898948616},{"_id":"public/archives/2021/04/index.html","hash":"103060d25c2e98b0a694bc182e34355cb9f6209e","modified":1634898948616},{"_id":"public/archives/2021/05/index.html","hash":"e769f9bab519c398a2a65ac5befd3e4e5423a5d2","modified":1634898948616},{"_id":"public/archives/2021/06/index.html","hash":"55de0147af5167557f55728f1b5880c8bd135edd","modified":1634898948616},{"_id":"public/index.html","hash":"372503f5f665c49445d99988812e47ec680b998d","modified":1634898948616},{"_id":"public/page/2/index.html","hash":"24c23d94f3656da714913ef1ac4b2779ca20de5d","modified":1634898948616},{"_id":"public/tags/前端/index.html","hash":"bcf9dc982311fe7a000fa2e2643b518997fb6c57","modified":1634898948616},{"_id":"public/tags/天文/index.html","hash":"e130b80a721e0c2dc51e2f37752519be6c1782f4","modified":1634898948616},{"_id":"public/tags/Linux/index.html","hash":"62edf6324dd15c5dab5c7fb84d2caba64bac304c","modified":1634898948616},{"_id":"public/tags/css/index.html","hash":"baf217cf1abe4e0df29f2b156a69dc280a89a8a7","modified":1634898948616},{"_id":"public/tags/其他/index.html","hash":"076efb803dbd2e412d8311c4d1b650ddcf56109f","modified":1634898948616},{"_id":"public/tags/虚拟货币/index.html","hash":"e6e2b8e7fbf1a36611a027913bceb1380464b488","modified":1634898948616},{"_id":"public/tags/设计模式/index.html","hash":"16e26ccfc195bc683b6fae962eb82c6cf46a6c3b","modified":1634898948616},{"_id":"public/2021/06/01/记发布订阅和观察者模式/index.html","hash":"0adf088c4a5f2245639047a13353f08d714b38ef","modified":1634898948616},{"_id":"public/2021/04/30/手写代码面试题记录/index.html","hash":"218161bc049e8993e2c6eb64ec56495da237cf0c","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/index.html","hash":"966bd625e3495e895078cfb15929656d70da10f8","modified":1634898948616},{"_id":"public/2021/04/05/真睡后收入-以太坊挖矿教程/index.html","hash":"931555c0e27b1037648dd9b9b1510abe5e2dbce0","modified":1634898948616},{"_id":"public/2020/11/05/diff算法简介/index.html","hash":"19b7104a1e64ae5a59d1060f10c0043098710adb","modified":1634898948616},{"_id":"public/2020/12/21/面试题总结/index.html","hash":"dc9ba648b48ee92af1c0d3016990d4e0b568f33e","modified":1634898948616},{"_id":"public/2020/10/30/promise简单实现/index.html","hash":"defa5e415f5c4c4c435719a21332d85309f02bd0","modified":1634898948616},{"_id":"public/2020/10/27/vue原理mvvm简单实现/index.html","hash":"fadebcd6f18b8673623ffe5e826e604bd3f618c7","modified":1634898948616},{"_id":"public/2020/10/20/函数的防抖和节流/index.html","hash":"a1fa8be2f3f98d3eb43bed05664d3203f10322d9","modified":1634898948616},{"_id":"public/2020/10/15/flex布局/index.html","hash":"1ec78c455166d09a6b034aeed6ac49274da21399","modified":1634898948616},{"_id":"public/2020/10/14/函数柯里化(curring)/index.html","hash":"b2bc26fe9064314390200cbe6c90fd06f80b9404","modified":1634898948616},{"_id":"public/2020/10/09/js常用4种排序介绍/index.html","hash":"c3c7fda86b7144613543365e344dd9815e9a9539","modified":1634898948616},{"_id":"public/2020/09/24/webpack使用指南/index.html","hash":"f2bebdc055eea52d07761bc042cb660f4c322efd","modified":1634898948616},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.ttf","hash":"1eaeb5d2d0a01f02cfd1313903b35bcef224d379","modified":1634898948616},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.woff","hash":"61692ca29e433827e7c227e7d19a70037ff87273","modified":1634898948616},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.woff2","hash":"c104f19b6f5176eae39be527c43742a236b9ac29","modified":1634898948616},{"_id":"public/fonts/inter-v2-latin-regular.eot","hash":"b18f1e7b093bf71d833ddfd81676bdfbf165e810","modified":1634898948616},{"_id":"public/fonts/inter-v2-latin-regular.svg","hash":"ca639a580d3dd7c1a023d489cd818af95883b52b","modified":1634898948616},{"_id":"public/fonts/inter-v2-latin-regular.ttf","hash":"d96f19bfb5bd9e7b85f590c20960d0cb8a1fffcd","modified":1634898948616},{"_id":"public/fonts/inter-v2-latin-regular.woff","hash":"7f36fa1af7da1caa31a37e7b96c1772b75494726","modified":1634898948616},{"_id":"public/fonts/inter-v2-latin-regular.woff2","hash":"99ad803462294f0cfce54995572d6caf8d955028","modified":1634898948616},{"_id":"public/images/thumbnail.jpg","hash":"80248d23872a62ae51080920487adada35d3f5a2","modified":1634898948616},{"_id":"public/2020/10/15/flex布局/WBQ8RSuH7norCs4.png","hash":"847209841854cbd0d7861311abc1d4f665aa8d49","modified":1634898948616},{"_id":"public/2020/12/21/面试题总结/FvAIM258yHCTQba.png","hash":"fd52fe629f72fd6d508f699b4e0c13309e0892bb","modified":1634898948616},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.eot","hash":"7c5138328e9d4d2e231408c00eb879d1508a6f4e","modified":1634898948616},{"_id":"public/fonts/dm-serif-display-v4-latin-regular.svg","hash":"b650647a506978c3617a12cb50ba3c4c596ee6e7","modified":1634898948616},{"_id":"public/images/favicon.png","hash":"7e8ad0c10cd34ea74dae2c4b2c5e1c09dd12e412","modified":1634898948616},{"_id":"public/2021/04/05/真睡后收入-以太坊挖矿教程/YA4dIRbSgNVsvKE.png","hash":"cc6d613a2aa73fd42bddb2f4b1e57ff74b192496","modified":1634898948616},{"_id":"public/2020/12/21/面试题总结/bB3Sj9h8nyoOIVs.png","hash":"71c3e633e291d66690ba41f840e1d1b523be7951","modified":1634898948616},{"_id":"public/2020/10/04/使用css实现环状进度/E8CM6WZ1hRv7piy.gif","hash":"33993ef5148a5720a1d1cc3b41a3854f5c493876","modified":1634898948616},{"_id":"public/2021/04/05/真睡后收入-以太坊挖矿教程/ZD6ML8tjkGXdeWf.png","hash":"570834fd150e917ff5b18723c9667f3f0ec5f0cc","modified":1634898948616},{"_id":"public/2021/04/05/真睡后收入-以太坊挖矿教程/rhvAF538ynVWtlY.png","hash":"d8837577f5b728bd49fe1cd3b2a3facc392635f4","modified":1634898948616},{"_id":"public/css/custom.css","hash":"f926256dce07e5acdb6a6547d0727768761e70c9","modified":1634898948616},{"_id":"public/css/normalize.css","hash":"dd1976308129df19afb1a0dfdc9cc5d2aee7aec2","modified":1634898948616},{"_id":"public/css/prism-dark.css","hash":"6eae920ef9ee996f71a88bf2725e6e385d3e8b79","modified":1634898948616},{"_id":"public/css/prism-line-numbers.css","hash":"c632c3fa3fd97d05a0f74c6a87e1e93ee60ee57f","modified":1634898948616},{"_id":"public/css/skeleton.css","hash":"46633c4f03fc8de882077a141775a83f2dd6acc0","modified":1634898948616},{"_id":"public/js/nanobar.min.js","hash":"fc30e613dbce5b1b5602907c0966739480456875","modified":1634898948616},{"_id":"public/2020/09/24/webpack使用指南/EOzt1WTKBaXkgIr.png","hash":"41b4b5b4b18d1f685a2004f76fefe882b9293847","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/TewXOIzalCK5Egh.png","hash":"4dcf6733483c786c6c2128709a9bbeca5ee5088d","modified":1634898948616},{"_id":"public/2021/04/05/真睡后收入-以太坊挖矿教程/grXvl26PoEtMFpa.png","hash":"5f0c660ccd32ce9e02e7c4e5eac133e983a25c46","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/Ia7qdlQ4PT1ws3j.png","hash":"0cf059ac4d3b67cd1945716b4481c020f1ff9a9f","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/p5kXGl2DtbcaSnW.png","hash":"7084417e1c140f9cf952519b6107478e3c4661e0","modified":1634898948616},{"_id":"public/2020/10/09/js常用4种排序介绍/DzWckAlLmVU9JuN.gif","hash":"4d3667b99cc9c3287d639fc47ee0aa764c58577e","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/KJPlgxfCpuGHndB.png","hash":"57a70e8d3ada5547c1e4de70a9500f5d1c8bf582","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/n3kxjOqDQASw4Wz.png","hash":"8eb39b842f5e06c87192b468c079c9f4ef27bc92","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/upB4hvTydZ9IP1r.png","hash":"1214028672ee3d54e014c30c495323de16f052a0","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/vTfbrW8JKkQFRcP.png","hash":"ad38e9bc7c07f7d195e30ff0a9b1023cb2cd79a8","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/bszNOfBKhiYaQv7.png","hash":"172c881462b7741fece6d7454e95cea3c0b2ee84","modified":1634898948616},{"_id":"public/2020/10/09/js常用4种排序介绍/5z82iWpVIJbLfu7.gif","hash":"b7b52c58512cc244f49368fa51f32642d41ed28f","modified":1634898948616},{"_id":"public/2020/10/09/js常用4种排序介绍/KWrN6slZTEFAuhv.gif","hash":"e1ae2675be2a7f48bf7473b20b8d108cce253da7","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/BvYORyZgq9amV7A.png","hash":"3e96ca7e9ab0e8bd55583b0ab0ccbdaa883351bd","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/NqjhKXn3kgIrDlS.png","hash":"bfd0493204dead5bb97c5dd3e82b1e4e2e9c01ae","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/Mi9vh214uZgD8z5.png","hash":"880d1a426538f8e9b6cbeda8767eadc146902617","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/2d6MCQ3TKquiVyF.png","hash":"d491c902d41ebb84def105903bc91664d6a42660","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/4Wa2eSdZ3X98BfK.png","hash":"0fcae70b2e7693cdcda0d223e5b58f3882c9854c","modified":1634898948616},{"_id":"public/2021/05/15/旅行者1号/MgVjFXxtsENKv4l.png","hash":"c90d1e985f29b653f2138fcd3f2eac1251a6ba50","modified":1634898948616},{"_id":"public/2020/10/09/js常用4种排序介绍/ibLoIgDEnRJrUas.gif","hash":"324c0a33c3c4e3e29e29b7396779bcfc881e1e22","modified":1634898948616},{"_id":"public/2020/11/05/diff算法简介/HrGjhDp8ebSt62R.png","hash":"5b55431537df0155357cae07344880e9c67a536f","modified":1634898948616}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"centOS服务器部署nodejs和mysql","date":"2020-09-01T09:09:13.000Z","_content":"\n## 环境\n - CentOS 7.6 64位 \n - 阿里云学生机最低配置: 1核 1G 1M \n\n## 安装nodeJs和npm\n通过SSH连接到服务器。进入要安装的目录，笔者这里用的`/usr/local/src`，你也可以在`/opt`下。\n这里下载的二进制包，需要编译后使用，或还可以用CentOs的包管理工具`yum`安装。这里下载的node是`10.13.0`版本的，因为本地开发就是用这个版本，你也可以安装 [nrm](https://www.npmjs.com/package/nvm) 来管理node版本\n\n```shell\ncd /usr/local/src \nwget http://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gz\n```\n\n完成后得到node-v10.13.0.tar.gz ，解压缩并进入目录。\n\n```shell\ntar -xzvf node-v10.13.0.tar.gz\ncd node-v10.13.0\n```\n\n编译前环境监测\n\n```shell\n./configure\n```\n\n如果没报错忽略这条。新服务器这里会报错，提示需要安装`g++`，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行`./configure`。\n\n```shell\nyum groupinstall \"Development Tools\"\n...\n./configure\n```\n编译并安装。由于服务器配置不高，我大概等了五分钟左右。\n\n```shell\nmake && make install\n```\n创建node和npm软连接 `ln -s 源文件 目标文件`，执行目标文件就相当于执行源文件。完成后全局可以使用node和npm命令 \n\n```shell\nln -s /usr/local/src/node-v10.13.0/bin/node /usr/local/bin/node\nln -s /usr/local/src/node-v10.13.0/bin/npm /usr/local/bin/npm\n```\n检查软链接是否配置成功，得到版本为成功配置：\n\n```shell\nnode -v \n10.13.0\nnpm -v\n6.4.1\n```\n## 安装mysql\n- 版本5.7  \n\n由于`yum`的源中没`mysql`，需要去[mysql官网](https://dev.mysql.com/downloads/repo/yum/)找到源地址下载。\n\n```shell\nwget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\n```\n安装源，完成后会在`/etc/yum.repos.d/`目录下增加两个文件`mysql-community.repo`和`mysql-community-source.repo`\n\n```shell\nrpm -ivh mysql57-community-release-el7-9.noarch.rpm\n```\n安装`mysql`:\n\n```shell\nyum install mysql-server\n```\n启动`msyql`：\n\n```shell\nsystemctl start mysqld\n```\n获取临时mysql密码，并登陆\n\n```shell\ngrep 'temporary password' /var/log/mysqld.log\n...\nmysql -u root -p\n```\n\n登陆成功后先修改密码：  \n\n```shell\n> ALTER USER 'root'@'localhost' IDENTIFIED BY '你的新密码';\n```\n\n授权其他机器进行登陆本机`mysql`:\n\n```shell\n> ALTER GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '你的新密码' WITH GRANT OPTION;\n  ...\n> FLUSH  PRIVILEGES;\n```\n\n退出，至此，完成mysql安装。 \n\n```shell\n> exit;\n```\n## 配置git拉取项目 \n\n设置git账号信息:\n\n```shell\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的邮箱\"\n```\n\n查看git账号信息:\n\n```shell\ngit config user.name\ngit config user.email\n```\n\n生成公钥和密钥，它会在`~/.ssh/`生成三个文件，其中`known_hosts`为访问记录，`id_rsa`是私钥，`id_rsa_pub`是公钥。\n\n```shell\nssh-keygen -t rsa -C \"你的邮箱\"\n```\n\n复制公钥内容，添加到[Github](https://github.com/settings/ssh/new)用于鉴权。   \n位置：Github Profile > `setting` > `SSH and GPC keys` > `New SSH Key` > `Title为备注，把内容粘贴到Key表单中` > `Add SSH Key`   \n   \n```shell\ncd ~/.ssh\nvim id_rsa.pub\n```\n\n至此服务器有权限从github获取项目了，进入/opt克隆你的项目  \n \n```shell\ncd /opt\ngit clone 你的项目ssh地址\n```\n## 部署  \n>常规启动项目在遇到服务器重启或其他意外会直接停止服务，这非常不方便。笔者这里推荐使用[pm2](https://pm2.keymetrics.io/)来完善操作，它是一个node守护进程管理器，可利用它简化node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，很通用而且使用非常简单。  \n\n安装他:\n\n```shell\nnpm install -g pm2\n...\npm2 --version\n4.4.1\n```\n\n安装依赖，并使用`pm2`启动node项目：\n\n```shell\ncd node\nnpm install\n...\npm2 start main.js --watch\n```\n\n查看`pm2`列表：  \n\n```shell\npm2 list\n```\n\n![WechatIMG2774.png](./CentOs服务器部署nodejs和mysql/tsJyucP4eSFO8zH.png)  \n  \n这是启动node项目下main.js示例。在本例中app_name默认为main，若要指定名称，在后面使用--name参数，更多参数请看下段。\n\n```shell\npm2 start node/main.js\n```\n\n更多参数: \n\n```shell\n# 指定应用名称\n--name <app_name>\n\n# 当文件改变时，监听并重启应用(开启)\n--watch\n\n# 当文件改变时，监听并重启应用(停止)\n--watch 0\n\n# 设置应用程序重新加载的内存阈值\n--max-memory-restart <200MB>\n\n# 指定日志文件路径\n--log <log_path>\n\n# 重启延迟\n--restart-delay <delay in ms>\n```\n\n常用命令： \n\n - `pm2 start <file_name>` 开启应用\n - `pm2 stop all  ` \t停止所有pm2应用\n - `pm2 stop <app_name> ` \t停止单个pm2应用\n - `pm2 list` \t\t查看所有应用状态\n - `pm2 restart <file_name>` 重启 \n - `pm2 descripe <app_name>` 查看单个应用状态\n \n\n[更多pm2命令](https://pm2.keymetrics.io/docs/usage/quick-start/#options)  \n  \n至此，部署成功了。现在开放你的node端口供公网访问，进入购买服务器官网控制台，例如笔者服务器是阿里云的，进入阿里云控制台增加安全组，添加你的node端口，保存即可。enjoy it。\n\n\n","source":"_drafts/centOs服务器部署nodejs和mysql.md","raw":"---\ntitle: centOS服务器部署nodejs和mysql\ndate: 2020/09/01 17:09:13\ntags: [运维]\n---\n\n## 环境\n - CentOS 7.6 64位 \n - 阿里云学生机最低配置: 1核 1G 1M \n\n## 安装nodeJs和npm\n通过SSH连接到服务器。进入要安装的目录，笔者这里用的`/usr/local/src`，你也可以在`/opt`下。\n这里下载的二进制包，需要编译后使用，或还可以用CentOs的包管理工具`yum`安装。这里下载的node是`10.13.0`版本的，因为本地开发就是用这个版本，你也可以安装 [nrm](https://www.npmjs.com/package/nvm) 来管理node版本\n\n```shell\ncd /usr/local/src \nwget http://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gz\n```\n\n完成后得到node-v10.13.0.tar.gz ，解压缩并进入目录。\n\n```shell\ntar -xzvf node-v10.13.0.tar.gz\ncd node-v10.13.0\n```\n\n编译前环境监测\n\n```shell\n./configure\n```\n\n如果没报错忽略这条。新服务器这里会报错，提示需要安装`g++`，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行`./configure`。\n\n```shell\nyum groupinstall \"Development Tools\"\n...\n./configure\n```\n编译并安装。由于服务器配置不高，我大概等了五分钟左右。\n\n```shell\nmake && make install\n```\n创建node和npm软连接 `ln -s 源文件 目标文件`，执行目标文件就相当于执行源文件。完成后全局可以使用node和npm命令 \n\n```shell\nln -s /usr/local/src/node-v10.13.0/bin/node /usr/local/bin/node\nln -s /usr/local/src/node-v10.13.0/bin/npm /usr/local/bin/npm\n```\n检查软链接是否配置成功，得到版本为成功配置：\n\n```shell\nnode -v \n10.13.0\nnpm -v\n6.4.1\n```\n## 安装mysql\n- 版本5.7  \n\n由于`yum`的源中没`mysql`，需要去[mysql官网](https://dev.mysql.com/downloads/repo/yum/)找到源地址下载。\n\n```shell\nwget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\n```\n安装源，完成后会在`/etc/yum.repos.d/`目录下增加两个文件`mysql-community.repo`和`mysql-community-source.repo`\n\n```shell\nrpm -ivh mysql57-community-release-el7-9.noarch.rpm\n```\n安装`mysql`:\n\n```shell\nyum install mysql-server\n```\n启动`msyql`：\n\n```shell\nsystemctl start mysqld\n```\n获取临时mysql密码，并登陆\n\n```shell\ngrep 'temporary password' /var/log/mysqld.log\n...\nmysql -u root -p\n```\n\n登陆成功后先修改密码：  \n\n```shell\n> ALTER USER 'root'@'localhost' IDENTIFIED BY '你的新密码';\n```\n\n授权其他机器进行登陆本机`mysql`:\n\n```shell\n> ALTER GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '你的新密码' WITH GRANT OPTION;\n  ...\n> FLUSH  PRIVILEGES;\n```\n\n退出，至此，完成mysql安装。 \n\n```shell\n> exit;\n```\n## 配置git拉取项目 \n\n设置git账号信息:\n\n```shell\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的邮箱\"\n```\n\n查看git账号信息:\n\n```shell\ngit config user.name\ngit config user.email\n```\n\n生成公钥和密钥，它会在`~/.ssh/`生成三个文件，其中`known_hosts`为访问记录，`id_rsa`是私钥，`id_rsa_pub`是公钥。\n\n```shell\nssh-keygen -t rsa -C \"你的邮箱\"\n```\n\n复制公钥内容，添加到[Github](https://github.com/settings/ssh/new)用于鉴权。   \n位置：Github Profile > `setting` > `SSH and GPC keys` > `New SSH Key` > `Title为备注，把内容粘贴到Key表单中` > `Add SSH Key`   \n   \n```shell\ncd ~/.ssh\nvim id_rsa.pub\n```\n\n至此服务器有权限从github获取项目了，进入/opt克隆你的项目  \n \n```shell\ncd /opt\ngit clone 你的项目ssh地址\n```\n## 部署  \n>常规启动项目在遇到服务器重启或其他意外会直接停止服务，这非常不方便。笔者这里推荐使用[pm2](https://pm2.keymetrics.io/)来完善操作，它是一个node守护进程管理器，可利用它简化node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，很通用而且使用非常简单。  \n\n安装他:\n\n```shell\nnpm install -g pm2\n...\npm2 --version\n4.4.1\n```\n\n安装依赖，并使用`pm2`启动node项目：\n\n```shell\ncd node\nnpm install\n...\npm2 start main.js --watch\n```\n\n查看`pm2`列表：  \n\n```shell\npm2 list\n```\n\n![WechatIMG2774.png](./CentOs服务器部署nodejs和mysql/tsJyucP4eSFO8zH.png)  \n  \n这是启动node项目下main.js示例。在本例中app_name默认为main，若要指定名称，在后面使用--name参数，更多参数请看下段。\n\n```shell\npm2 start node/main.js\n```\n\n更多参数: \n\n```shell\n# 指定应用名称\n--name <app_name>\n\n# 当文件改变时，监听并重启应用(开启)\n--watch\n\n# 当文件改变时，监听并重启应用(停止)\n--watch 0\n\n# 设置应用程序重新加载的内存阈值\n--max-memory-restart <200MB>\n\n# 指定日志文件路径\n--log <log_path>\n\n# 重启延迟\n--restart-delay <delay in ms>\n```\n\n常用命令： \n\n - `pm2 start <file_name>` 开启应用\n - `pm2 stop all  ` \t停止所有pm2应用\n - `pm2 stop <app_name> ` \t停止单个pm2应用\n - `pm2 list` \t\t查看所有应用状态\n - `pm2 restart <file_name>` 重启 \n - `pm2 descripe <app_name>` 查看单个应用状态\n \n\n[更多pm2命令](https://pm2.keymetrics.io/docs/usage/quick-start/#options)  \n  \n至此，部署成功了。现在开放你的node端口供公网访问，进入购买服务器官网控制台，例如笔者服务器是阿里云的，进入阿里云控制台增加安全组，添加你的node端口，保存即可。enjoy it。\n\n\n","slug":"centOs服务器部署nodejs和mysql","published":0,"updated":"2021-10-22T09:38:36.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meq30000h7vm5rn3gk6e","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>CentOS 7.6 64位 </li>\n<li>阿里云学生机最低配置: 1核 1G 1M </li>\n</ul>\n<h2 id=\"安装nodeJs和npm\"><a href=\"#安装nodeJs和npm\" class=\"headerlink\" title=\"安装nodeJs和npm\"></a>安装nodeJs和npm</h2><p>通过SSH连接到服务器。进入要安装的目录，笔者这里用的<code>/usr/local/src</code>，你也可以在<code>/opt</code>下。<br>这里下载的二进制包，需要编译后使用，或还可以用CentOs的包管理工具<code>yum</code>安装。这里下载的node是<code>10.13.0</code>版本的，因为本地开发就是用这个版本，你也可以安装 <a href=\"https://www.npmjs.com/package/nvm\">nrm</a> 来管理node版本</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;usr&#x2F;local&#x2F;src \nwget http:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v10.13.0&#x2F;node-v10.13.0.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>完成后得到node-v10.13.0.tar.gz ，解压缩并进入目录。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tar -xzvf node-v10.13.0.tar.gz\ncd node-v10.13.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>编译前环境监测</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">.&#x2F;configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果没报错忽略这条。新服务器这里会报错，提示需要安装<code>g++</code>，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行<code>./configure</code>。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum groupinstall &quot;Development Tools&quot;\n...\n.&#x2F;configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编译并安装。由于服务器配置不高，我大概等了五分钟左右。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">make &amp;&amp; make install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建node和npm软连接 <code>ln -s 源文件 目标文件</code>，执行目标文件就相当于执行源文件。完成后全局可以使用node和npm命令 </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ln -s &#x2F;usr&#x2F;local&#x2F;src&#x2F;node-v10.13.0&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node\nln -s &#x2F;usr&#x2F;local&#x2F;src&#x2F;node-v10.13.0&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>检查软链接是否配置成功，得到版本为成功配置：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">node -v \n10.13.0\nnpm -v\n6.4.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><ul>\n<li>版本5.7  </li>\n</ul>\n<p>由于<code>yum</code>的源中没<code>mysql</code>，需要去<a href=\"https://dev.mysql.com/downloads/repo/yum/\">mysql官网</a>找到源地址下载。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-9.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装源，完成后会在<code>/etc/yum.repos.d/</code>目录下增加两个文件<code>mysql-community.repo</code>和<code>mysql-community-source.repo</code></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">rpm -ivh mysql57-community-release-el7-9.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装<code>mysql</code>:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum install mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>启动<code>msyql</code>：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl start mysqld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>获取临时mysql密码，并登陆</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log\n...\nmysql -u root -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>登陆成功后先修改密码：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;你的新密码&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>授权其他机器进行登陆本机<code>mysql</code>:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt; ALTER GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;你的新密码&#39; WITH GRANT OPTION;\n  ...\n&gt; FLUSH  PRIVILEGES;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>退出，至此，完成mysql安装。 </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt; exit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"配置git拉取项目\"><a href=\"#配置git拉取项目\" class=\"headerlink\" title=\"配置git拉取项目\"></a>配置git拉取项目</h2><p>设置git账号信息:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git config --global user.name &quot;你的用户名&quot;\ngit config --global user.email &quot;你的邮箱&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>查看git账号信息:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git config user.name\ngit config user.email<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>生成公钥和密钥，它会在<code>~/.ssh/</code>生成三个文件，其中<code>known_hosts</code>为访问记录，<code>id_rsa</code>是私钥，<code>id_rsa_pub</code>是公钥。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ssh-keygen -t rsa -C &quot;你的邮箱&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>复制公钥内容，添加到<a href=\"https://github.com/settings/ssh/new\">Github</a>用于鉴权。<br>位置：Github Profile &gt; <code>setting</code> &gt; <code>SSH and GPC keys</code> &gt; <code>New SSH Key</code> &gt; <code>Title为备注，把内容粘贴到Key表单中</code> &gt; <code>Add SSH Key</code>   </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd ~&#x2F;.ssh\nvim id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>至此服务器有权限从github获取项目了，进入/opt克隆你的项目  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;opt\ngit clone 你的项目ssh地址<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><blockquote>\n<p>常规启动项目在遇到服务器重启或其他意外会直接停止服务，这非常不方便。笔者这里推荐使用<a href=\"https://pm2.keymetrics.io/\">pm2</a>来完善操作，它是一个node守护进程管理器，可利用它简化node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，很通用而且使用非常简单。  </p>\n</blockquote>\n<p>安装他:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">npm install -g pm2\n...\npm2 --version\n4.4.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装依赖，并使用<code>pm2</code>启动node项目：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd node\nnpm install\n...\npm2 start main.js --watch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查看<code>pm2</code>列表：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">pm2 list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/2020/09/01/centOs%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2nodejs%E5%92%8Cmysql/tsJyucP4eSFO8zH.png\" alt=\"WechatIMG2774.png\">  </p>\n<p>这是启动node项目下main.js示例。在本例中app_name默认为main，若要指定名称，在后面使用–name参数，更多参数请看下段。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">pm2 start node&#x2F;main.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>更多参数: </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 指定应用名称\n--name &lt;app_name&gt;\n\n# 当文件改变时，监听并重启应用(开启)\n--watch\n\n# 当文件改变时，监听并重启应用(停止)\n--watch 0\n\n# 设置应用程序重新加载的内存阈值\n--max-memory-restart &lt;200MB&gt;\n\n# 指定日志文件路径\n--log &lt;log_path&gt;\n\n# 重启延迟\n--restart-delay &lt;delay in ms&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>常用命令： </p>\n<ul>\n<li><code>pm2 start &lt;file_name&gt;</code> 开启应用</li>\n<li><code>pm2 stop all  </code>     停止所有pm2应用</li>\n<li><code>pm2 stop &lt;app_name&gt; </code>     停止单个pm2应用</li>\n<li><code>pm2 list</code>         查看所有应用状态</li>\n<li><code>pm2 restart &lt;file_name&gt;</code> 重启 </li>\n<li><code>pm2 descripe &lt;app_name&gt;</code> 查看单个应用状态</li>\n</ul>\n<p><a href=\"https://pm2.keymetrics.io/docs/usage/quick-start/#options\">更多pm2命令</a>  </p>\n<p>至此，部署成功了。现在开放你的node端口供公网访问，进入购买服务器官网控制台，例如笔者服务器是阿里云的，进入阿里云控制台增加安全组，添加你的node端口，保存即可。enjoy it。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>CentOS 7.6 64位 </li>\n<li>阿里云学生机最低配置: 1核 1G 1M </li>\n</ul>\n<h2 id=\"安装nodeJs和npm\"><a href=\"#安装nodeJs和npm\" class=\"headerlink\" title=\"安装nodeJs和npm\"></a>安装nodeJs和npm</h2><p>通过SSH连接到服务器。进入要安装的目录，笔者这里用的<code>/usr/local/src</code>，你也可以在<code>/opt</code>下。<br>这里下载的二进制包，需要编译后使用，或还可以用CentOs的包管理工具<code>yum</code>安装。这里下载的node是<code>10.13.0</code>版本的，因为本地开发就是用这个版本，你也可以安装 <a href=\"https://www.npmjs.com/package/nvm\">nrm</a> 来管理node版本</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;usr&#x2F;local&#x2F;src \nwget http:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v10.13.0&#x2F;node-v10.13.0.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>完成后得到node-v10.13.0.tar.gz ，解压缩并进入目录。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tar -xzvf node-v10.13.0.tar.gz\ncd node-v10.13.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>编译前环境监测</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">.&#x2F;configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果没报错忽略这条。新服务器这里会报错，提示需要安装<code>g++</code>，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行<code>./configure</code>。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum groupinstall &quot;Development Tools&quot;\n...\n.&#x2F;configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编译并安装。由于服务器配置不高，我大概等了五分钟左右。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">make &amp;&amp; make install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建node和npm软连接 <code>ln -s 源文件 目标文件</code>，执行目标文件就相当于执行源文件。完成后全局可以使用node和npm命令 </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ln -s &#x2F;usr&#x2F;local&#x2F;src&#x2F;node-v10.13.0&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node\nln -s &#x2F;usr&#x2F;local&#x2F;src&#x2F;node-v10.13.0&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>检查软链接是否配置成功，得到版本为成功配置：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">node -v \n10.13.0\nnpm -v\n6.4.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><ul>\n<li>版本5.7  </li>\n</ul>\n<p>由于<code>yum</code>的源中没<code>mysql</code>，需要去<a href=\"https://dev.mysql.com/downloads/repo/yum/\">mysql官网</a>找到源地址下载。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-9.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装源，完成后会在<code>/etc/yum.repos.d/</code>目录下增加两个文件<code>mysql-community.repo</code>和<code>mysql-community-source.repo</code></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">rpm -ivh mysql57-community-release-el7-9.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装<code>mysql</code>:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum install mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>启动<code>msyql</code>：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl start mysqld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>获取临时mysql密码，并登陆</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log\n...\nmysql -u root -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>登陆成功后先修改密码：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;你的新密码&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>授权其他机器进行登陆本机<code>mysql</code>:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt; ALTER GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;你的新密码&#39; WITH GRANT OPTION;\n  ...\n&gt; FLUSH  PRIVILEGES;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>退出，至此，完成mysql安装。 </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&gt; exit;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"配置git拉取项目\"><a href=\"#配置git拉取项目\" class=\"headerlink\" title=\"配置git拉取项目\"></a>配置git拉取项目</h2><p>设置git账号信息:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git config --global user.name &quot;你的用户名&quot;\ngit config --global user.email &quot;你的邮箱&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>查看git账号信息:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git config user.name\ngit config user.email<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>生成公钥和密钥，它会在<code>~/.ssh/</code>生成三个文件，其中<code>known_hosts</code>为访问记录，<code>id_rsa</code>是私钥，<code>id_rsa_pub</code>是公钥。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ssh-keygen -t rsa -C &quot;你的邮箱&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>复制公钥内容，添加到<a href=\"https://github.com/settings/ssh/new\">Github</a>用于鉴权。<br>位置：Github Profile &gt; <code>setting</code> &gt; <code>SSH and GPC keys</code> &gt; <code>New SSH Key</code> &gt; <code>Title为备注，把内容粘贴到Key表单中</code> &gt; <code>Add SSH Key</code>   </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd ~&#x2F;.ssh\nvim id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>至此服务器有权限从github获取项目了，进入/opt克隆你的项目  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;opt\ngit clone 你的项目ssh地址<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><blockquote>\n<p>常规启动项目在遇到服务器重启或其他意外会直接停止服务，这非常不方便。笔者这里推荐使用<a href=\"https://pm2.keymetrics.io/\">pm2</a>来完善操作，它是一个node守护进程管理器，可利用它简化node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，很通用而且使用非常简单。  </p>\n</blockquote>\n<p>安装他:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">npm install -g pm2\n...\npm2 --version\n4.4.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装依赖，并使用<code>pm2</code>启动node项目：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd node\nnpm install\n...\npm2 start main.js --watch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查看<code>pm2</code>列表：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">pm2 list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/2020/09/01/centOs%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2nodejs%E5%92%8Cmysql/tsJyucP4eSFO8zH.png\" alt=\"WechatIMG2774.png\">  </p>\n<p>这是启动node项目下main.js示例。在本例中app_name默认为main，若要指定名称，在后面使用–name参数，更多参数请看下段。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">pm2 start node&#x2F;main.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>更多参数: </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 指定应用名称\n--name &lt;app_name&gt;\n\n# 当文件改变时，监听并重启应用(开启)\n--watch\n\n# 当文件改变时，监听并重启应用(停止)\n--watch 0\n\n# 设置应用程序重新加载的内存阈值\n--max-memory-restart &lt;200MB&gt;\n\n# 指定日志文件路径\n--log &lt;log_path&gt;\n\n# 重启延迟\n--restart-delay &lt;delay in ms&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>常用命令： </p>\n<ul>\n<li><code>pm2 start &lt;file_name&gt;</code> 开启应用</li>\n<li><code>pm2 stop all  </code>     停止所有pm2应用</li>\n<li><code>pm2 stop &lt;app_name&gt; </code>     停止单个pm2应用</li>\n<li><code>pm2 list</code>         查看所有应用状态</li>\n<li><code>pm2 restart &lt;file_name&gt;</code> 重启 </li>\n<li><code>pm2 descripe &lt;app_name&gt;</code> 查看单个应用状态</li>\n</ul>\n<p><a href=\"https://pm2.keymetrics.io/docs/usage/quick-start/#options\">更多pm2命令</a>  </p>\n<p>至此，部署成功了。现在开放你的node端口供公网访问，进入购买服务器官网控制台，例如笔者服务器是阿里云的，进入阿里云控制台增加安全组，添加你的node端口，保存即可。enjoy it。</p>\n"},{"title":"nginx服务器部署vue资源","date":"2020-09-12T06:43:56.000Z","_content":"\n## 环境\n - CentOS 7.6 64位\n - nginx@1.19.2\n - vue-cli@4.5.0  \n \n## nginx配置\n连接服务器，进入要下载的目录，这里用的`/usr/local/src`，你也可以在`/opt`下，这两种算约定俗称的目录结构，便于统一管理。\n\n下载`nginx`，这是使用的是二进制包，你可以通过`yum`包管理安装。   \n我这里用的最新的`1.19.2`版本。[更多版本](http://nginx.org/en/download.html)\n\n```shell\nwget -c https://nginx.org/download/nginx-1.19.2.tar.gz \n```\n解压缩并进入`nginx`文件夹：  \n\n```shell\ntar -zxvf nginx-1.19.2.tar.gz\n...\ncd nginx-1.19.2\n```\n\n编译前环境监测：\n\n```shell\n./configure\n```\n如果没报错忽略这条。新服务器这里会报错，提示需要安装`g++`，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行`./configure`。  \n\n```shell\nyum groupinstall \"Development Tools\"\n...  \n```\n编译并安装：\n\n```shell\nmake && make install\n```\n启动它：  \n\n```shell\ncd /usr/local/nginx/sbin\n./nginx\n```\n更多常用命令：  \n\n```shell\n./nginx -s stop // 停止\n./nginx -s reload // 重启\n```\n默认`nginx`在`80端口`运行，记得到服务器购买网站控制台开放一下公网`80端口`权限。   \n \n要想修改配置：  \n\n```shell\ncd /usr/local/nginx/config\nvi ./nginx.config\n```\n## 配置vue\n克隆你的vue项目，我是在`/opt/vue/`目录下： \n\n```shell\ncd /opt/vue\ngit clone xxx\nnpm install\nnpm run build\n```\n\n找到`http`块中的`server`块。\n\n```shell\nserver {\n    listen       80;  #监听端口\n    server_name  127.0.0.1; #监听地址    \n    location / {\n        root   /opt/vue/dist; # 资源目录，我这里是vue构建后的目录\n        index  index.html index.htm; #首页文件设置\n        try_files $uri $uri/ /index.html; #vue-router history 路由设置\n    }\n    # 以下是指定错误时展示的文件文件\n    #error_page  404              /404.html; \n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n}\n```\n[更多nginx配置参考](https://www.runoob.com/w3cnote/nginx-setup-intro.html)\n##### 其中 \n\n - 设置`localtion`块的`root`属性为你的vue构建后文件    \n - 如果 vue 使用`history`路由，设置`try_files`为`$uri $uri/ /index.html`，用来告诉`nginx`前端路由交给前端的`index`文件去处理了，不用你处理了\n\n\n","source":"_drafts/nginx服务器部署vue配置.md","raw":"---\ntitle: nginx服务器部署vue资源\ndate: 2020/09/12 14:43:56\ntags: [运维]\n---\n\n## 环境\n - CentOS 7.6 64位\n - nginx@1.19.2\n - vue-cli@4.5.0  \n \n## nginx配置\n连接服务器，进入要下载的目录，这里用的`/usr/local/src`，你也可以在`/opt`下，这两种算约定俗称的目录结构，便于统一管理。\n\n下载`nginx`，这是使用的是二进制包，你可以通过`yum`包管理安装。   \n我这里用的最新的`1.19.2`版本。[更多版本](http://nginx.org/en/download.html)\n\n```shell\nwget -c https://nginx.org/download/nginx-1.19.2.tar.gz \n```\n解压缩并进入`nginx`文件夹：  \n\n```shell\ntar -zxvf nginx-1.19.2.tar.gz\n...\ncd nginx-1.19.2\n```\n\n编译前环境监测：\n\n```shell\n./configure\n```\n如果没报错忽略这条。新服务器这里会报错，提示需要安装`g++`，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行`./configure`。  \n\n```shell\nyum groupinstall \"Development Tools\"\n...  \n```\n编译并安装：\n\n```shell\nmake && make install\n```\n启动它：  \n\n```shell\ncd /usr/local/nginx/sbin\n./nginx\n```\n更多常用命令：  \n\n```shell\n./nginx -s stop // 停止\n./nginx -s reload // 重启\n```\n默认`nginx`在`80端口`运行，记得到服务器购买网站控制台开放一下公网`80端口`权限。   \n \n要想修改配置：  \n\n```shell\ncd /usr/local/nginx/config\nvi ./nginx.config\n```\n## 配置vue\n克隆你的vue项目，我是在`/opt/vue/`目录下： \n\n```shell\ncd /opt/vue\ngit clone xxx\nnpm install\nnpm run build\n```\n\n找到`http`块中的`server`块。\n\n```shell\nserver {\n    listen       80;  #监听端口\n    server_name  127.0.0.1; #监听地址    \n    location / {\n        root   /opt/vue/dist; # 资源目录，我这里是vue构建后的目录\n        index  index.html index.htm; #首页文件设置\n        try_files $uri $uri/ /index.html; #vue-router history 路由设置\n    }\n    # 以下是指定错误时展示的文件文件\n    #error_page  404              /404.html; \n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n}\n```\n[更多nginx配置参考](https://www.runoob.com/w3cnote/nginx-setup-intro.html)\n##### 其中 \n\n - 设置`localtion`块的`root`属性为你的vue构建后文件    \n - 如果 vue 使用`history`路由，设置`try_files`为`$uri $uri/ /index.html`，用来告诉`nginx`前端路由交给前端的`index`文件去处理了，不用你处理了\n\n\n","slug":"nginx服务器部署vue配置","published":0,"updated":"2021-10-22T09:38:36.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meq90001h7vmf1jdgxqx","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>CentOS 7.6 64位</li>\n<li><a href=\"mailto:&#110;&#103;&#105;&#110;&#120;&#x40;&#49;&#46;&#x31;&#57;&#x2e;&#50;\">&#110;&#103;&#105;&#110;&#120;&#x40;&#49;&#46;&#x31;&#57;&#x2e;&#50;</a></li>\n<li><a href=\"mailto:&#x76;&#117;&#x65;&#x2d;&#x63;&#108;&#105;&#64;&#x34;&#x2e;&#53;&#x2e;&#48;\">&#x76;&#117;&#x65;&#x2d;&#x63;&#108;&#105;&#64;&#x34;&#x2e;&#53;&#x2e;&#48;</a>  </li>\n</ul>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>连接服务器，进入要下载的目录，这里用的<code>/usr/local/src</code>，你也可以在<code>/opt</code>下，这两种算约定俗称的目录结构，便于统一管理。</p>\n<p>下载<code>nginx</code>，这是使用的是二进制包，你可以通过<code>yum</code>包管理安装。<br>我这里用的最新的<code>1.19.2</code>版本。<a href=\"http://nginx.org/en/download.html\">更多版本</a></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.19.2.tar.gz <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解压缩并进入<code>nginx</code>文件夹：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tar -zxvf nginx-1.19.2.tar.gz\n...\ncd nginx-1.19.2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>编译前环境监测：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">.&#x2F;configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果没报错忽略这条。新服务器这里会报错，提示需要安装<code>g++</code>，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行<code>./configure</code>。  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum groupinstall &quot;Development Tools&quot;\n...  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>编译并安装：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">make &amp;&amp; make install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>启动它：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin\n.&#x2F;nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>更多常用命令：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">.&#x2F;nginx -s stop &#x2F;&#x2F; 停止\n.&#x2F;nginx -s reload &#x2F;&#x2F; 重启<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>默认<code>nginx</code>在<code>80端口</code>运行，记得到服务器购买网站控制台开放一下公网<code>80端口</code>权限。   </p>\n<p>要想修改配置：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;config\nvi .&#x2F;nginx.config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"配置vue\"><a href=\"#配置vue\" class=\"headerlink\" title=\"配置vue\"></a>配置vue</h2><p>克隆你的vue项目，我是在<code>/opt/vue/</code>目录下： </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;opt&#x2F;vue\ngit clone xxx\nnpm install\nnpm run build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>找到<code>http</code>块中的<code>server</code>块。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">server &#123;\n    listen       80;  #监听端口\n    server_name  127.0.0.1; #监听地址    \n    location &#x2F; &#123;\n        root   &#x2F;opt&#x2F;vue&#x2F;dist; # 资源目录，我这里是vue构建后的目录\n        index  index.html index.htm; #首页文件设置\n        try_files $uri $uri&#x2F; &#x2F;index.html; #vue-router history 路由设置\n    &#125;\n    # 以下是指定错误时展示的文件文件\n    #error_page  404              &#x2F;404.html; \n    # redirect server error pages to the static page &#x2F;50x.html\n    #\n    error_page   500 502 503 504  &#x2F;50x.html;\n    location &#x3D; &#x2F;50x.html &#123;\n        root   html;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://www.runoob.com/w3cnote/nginx-setup-intro.html\">更多nginx配置参考</a></p>\n<h5 id=\"其中\"><a href=\"#其中\" class=\"headerlink\" title=\"其中\"></a>其中</h5><ul>\n<li>设置<code>localtion</code>块的<code>root</code>属性为你的vue构建后文件    </li>\n<li>如果 vue 使用<code>history</code>路由，设置<code>try_files</code>为<code>$uri $uri/ /index.html</code>，用来告诉<code>nginx</code>前端路由交给前端的<code>index</code>文件去处理了，不用你处理了</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>CentOS 7.6 64位</li>\n<li><a href=\"mailto:&#110;&#103;&#105;&#110;&#120;&#x40;&#49;&#46;&#x31;&#57;&#x2e;&#50;\">&#110;&#103;&#105;&#110;&#120;&#x40;&#49;&#46;&#x31;&#57;&#x2e;&#50;</a></li>\n<li><a href=\"mailto:&#x76;&#117;&#x65;&#x2d;&#x63;&#108;&#105;&#64;&#x34;&#x2e;&#53;&#x2e;&#48;\">&#x76;&#117;&#x65;&#x2d;&#x63;&#108;&#105;&#64;&#x34;&#x2e;&#53;&#x2e;&#48;</a>  </li>\n</ul>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>连接服务器，进入要下载的目录，这里用的<code>/usr/local/src</code>，你也可以在<code>/opt</code>下，这两种算约定俗称的目录结构，便于统一管理。</p>\n<p>下载<code>nginx</code>，这是使用的是二进制包，你可以通过<code>yum</code>包管理安装。<br>我这里用的最新的<code>1.19.2</code>版本。<a href=\"http://nginx.org/en/download.html\">更多版本</a></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.19.2.tar.gz <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解压缩并进入<code>nginx</code>文件夹：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tar -zxvf nginx-1.19.2.tar.gz\n...\ncd nginx-1.19.2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>编译前环境监测：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">.&#x2F;configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果没报错忽略这条。新服务器这里会报错，提示需要安装<code>g++</code>，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行<code>./configure</code>。  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum groupinstall &quot;Development Tools&quot;\n...  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>编译并安装：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">make &amp;&amp; make install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>启动它：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin\n.&#x2F;nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>更多常用命令：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">.&#x2F;nginx -s stop &#x2F;&#x2F; 停止\n.&#x2F;nginx -s reload &#x2F;&#x2F; 重启<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>默认<code>nginx</code>在<code>80端口</code>运行，记得到服务器购买网站控制台开放一下公网<code>80端口</code>权限。   </p>\n<p>要想修改配置：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;config\nvi .&#x2F;nginx.config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"配置vue\"><a href=\"#配置vue\" class=\"headerlink\" title=\"配置vue\"></a>配置vue</h2><p>克隆你的vue项目，我是在<code>/opt/vue/</code>目录下： </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;opt&#x2F;vue\ngit clone xxx\nnpm install\nnpm run build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>找到<code>http</code>块中的<code>server</code>块。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">server &#123;\n    listen       80;  #监听端口\n    server_name  127.0.0.1; #监听地址    \n    location &#x2F; &#123;\n        root   &#x2F;opt&#x2F;vue&#x2F;dist; # 资源目录，我这里是vue构建后的目录\n        index  index.html index.htm; #首页文件设置\n        try_files $uri $uri&#x2F; &#x2F;index.html; #vue-router history 路由设置\n    &#125;\n    # 以下是指定错误时展示的文件文件\n    #error_page  404              &#x2F;404.html; \n    # redirect server error pages to the static page &#x2F;50x.html\n    #\n    error_page   500 502 503 504  &#x2F;50x.html;\n    location &#x3D; &#x2F;50x.html &#123;\n        root   html;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://www.runoob.com/w3cnote/nginx-setup-intro.html\">更多nginx配置参考</a></p>\n<h5 id=\"其中\"><a href=\"#其中\" class=\"headerlink\" title=\"其中\"></a>其中</h5><ul>\n<li>设置<code>localtion</code>块的<code>root</code>属性为你的vue构建后文件    </li>\n<li>如果 vue 使用<code>history</code>路由，设置<code>try_files</code>为<code>$uri $uri/ /index.html</code>，用来告诉<code>nginx</code>前端路由交给前端的<code>index</code>文件去处理了，不用你处理了</li>\n</ul>\n"},{"title":"uglifyJs-webpack-plugin在vue中的使用","date":"2020-09-13T10:10:25.000Z","_content":"\n## 环境\n - vue@2.6.10\n - vue-cli@4.10  \n \n## UglifyJS Webpack Plugin  \n\n> 一个依赖[ Uglify.js ](https://github.com/mishoo/UglifyJS)来优化和压缩`javascript`代码的`webpack`插件，此插件要求的最小版本为`Node@6.9.0`和`Webpack@4.0.0`版本。  \n\n#### 安装  \n\n```shell\nnpm install --save-dev uglifyjs-webpack-plugin\n```\n\n#### 使用  \n\n```javascript\n// vue.config.js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n\nmodule.exports = {\n\t...\n\tconfigureWebpack: config => {\n\t\tconfig.plugins.push(\n\t      new UglifyJsPlugin({\n\t        uglifyOptions: {\n\t          compress: { // 参Uglify.js参数\n\t            warnings: true, // 警示存在安全风险的代码\n\t            drop_debugger: true, // 是否过滤调试(debugger)代码\n\t            drop_console: true, // 是否过滤输出(console)代码\n\t          },\n\t        },\n\t        sourceMap: false, // 是否启用文件缓存\n\t        parallel: true  // 使用多进程并行运行来提高构建速度\n\t      })       \n\t \t)\n}\n```\n\n[更多`compress`参数](http://lisperator.net/uglifyjs/compress)  \n\n[官方参数文档](https://www.html.cn/doc/webpack2/plugins/uglifyjs-webpack-plugin/)","source":"_drafts/uglifyJs-webpack-plugin在vue中的使用.md","raw":"---\ntitle: uglifyJs-webpack-plugin在vue中的使用\ndate: 2020/09/13 18:10:25\ntags: [前端]\n---\n\n## 环境\n - vue@2.6.10\n - vue-cli@4.10  \n \n## UglifyJS Webpack Plugin  \n\n> 一个依赖[ Uglify.js ](https://github.com/mishoo/UglifyJS)来优化和压缩`javascript`代码的`webpack`插件，此插件要求的最小版本为`Node@6.9.0`和`Webpack@4.0.0`版本。  \n\n#### 安装  \n\n```shell\nnpm install --save-dev uglifyjs-webpack-plugin\n```\n\n#### 使用  \n\n```javascript\n// vue.config.js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n\nmodule.exports = {\n\t...\n\tconfigureWebpack: config => {\n\t\tconfig.plugins.push(\n\t      new UglifyJsPlugin({\n\t        uglifyOptions: {\n\t          compress: { // 参Uglify.js参数\n\t            warnings: true, // 警示存在安全风险的代码\n\t            drop_debugger: true, // 是否过滤调试(debugger)代码\n\t            drop_console: true, // 是否过滤输出(console)代码\n\t          },\n\t        },\n\t        sourceMap: false, // 是否启用文件缓存\n\t        parallel: true  // 使用多进程并行运行来提高构建速度\n\t      })       \n\t \t)\n}\n```\n\n[更多`compress`参数](http://lisperator.net/uglifyjs/compress)  \n\n[官方参数文档](https://www.html.cn/doc/webpack2/plugins/uglifyjs-webpack-plugin/)","slug":"uglifyJs-webpack-plugin在vue中的使用","published":0,"updated":"2021-10-22T09:38:36.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqc0003h7vm99l5d130","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"mailto:&#118;&#x75;&#101;&#64;&#50;&#x2e;&#54;&#x2e;&#x31;&#48;\">&#118;&#x75;&#101;&#64;&#50;&#x2e;&#54;&#x2e;&#x31;&#48;</a></li>\n<li><a href=\"mailto:&#x76;&#117;&#101;&#x2d;&#99;&#108;&#105;&#64;&#x34;&#46;&#49;&#x30;\">&#x76;&#117;&#101;&#x2d;&#99;&#108;&#105;&#64;&#x34;&#46;&#49;&#x30;</a>  </li>\n</ul>\n<h2 id=\"UglifyJS-Webpack-Plugin\"><a href=\"#UglifyJS-Webpack-Plugin\" class=\"headerlink\" title=\"UglifyJS Webpack Plugin\"></a>UglifyJS Webpack Plugin</h2><blockquote>\n<p>一个依赖<a href=\"https://github.com/mishoo/UglifyJS\"> Uglify.js </a>来优化和压缩<code>javascript</code>代码的<code>webpack</code>插件，此插件要求的最小版本为<code>Node@6.9.0</code>和<code>Webpack@4.0.0</code>版本。  </p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">npm install --save-dev uglifyjs-webpack-plugin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// vue.config.js</span>\n<span class=\"token keyword\">const</span> UglifyJsPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uglifyjs-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token function-variable function\">configureWebpack</span><span class=\"token operator\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t\tconfig<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n\t      <span class=\"token keyword\">new</span> <span class=\"token class-name\">UglifyJsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t        uglifyOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t          compress<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 参Uglify.js参数</span>\n\t            warnings<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 警示存在安全风险的代码</span>\n\t            drop_debugger<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否过滤调试(debugger)代码</span>\n\t            drop_console<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否过滤输出(console)代码</span>\n\t          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t        sourceMap<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否启用文件缓存</span>\n\t        parallel<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>  <span class=\"token comment\">// 使用多进程并行运行来提高构建速度</span>\n\t      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>       \n\t \t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"http://lisperator.net/uglifyjs/compress\">更多<code>compress</code>参数</a>  </p>\n<p><a href=\"https://www.html.cn/doc/webpack2/plugins/uglifyjs-webpack-plugin/\">官方参数文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"mailto:&#118;&#x75;&#101;&#64;&#50;&#x2e;&#54;&#x2e;&#x31;&#48;\">&#118;&#x75;&#101;&#64;&#50;&#x2e;&#54;&#x2e;&#x31;&#48;</a></li>\n<li><a href=\"mailto:&#x76;&#117;&#101;&#x2d;&#99;&#108;&#105;&#64;&#x34;&#46;&#49;&#x30;\">&#x76;&#117;&#101;&#x2d;&#99;&#108;&#105;&#64;&#x34;&#46;&#49;&#x30;</a>  </li>\n</ul>\n<h2 id=\"UglifyJS-Webpack-Plugin\"><a href=\"#UglifyJS-Webpack-Plugin\" class=\"headerlink\" title=\"UglifyJS Webpack Plugin\"></a>UglifyJS Webpack Plugin</h2><blockquote>\n<p>一个依赖<a href=\"https://github.com/mishoo/UglifyJS\"> Uglify.js </a>来优化和压缩<code>javascript</code>代码的<code>webpack</code>插件，此插件要求的最小版本为<code>Node@6.9.0</code>和<code>Webpack@4.0.0</code>版本。  </p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">npm install --save-dev uglifyjs-webpack-plugin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// vue.config.js</span>\n<span class=\"token keyword\">const</span> UglifyJsPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uglifyjs-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token function-variable function\">configureWebpack</span><span class=\"token operator\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t\tconfig<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n\t      <span class=\"token keyword\">new</span> <span class=\"token class-name\">UglifyJsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t        uglifyOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t          compress<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 参Uglify.js参数</span>\n\t            warnings<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 警示存在安全风险的代码</span>\n\t            drop_debugger<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否过滤调试(debugger)代码</span>\n\t            drop_console<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否过滤输出(console)代码</span>\n\t          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t        sourceMap<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否启用文件缓存</span>\n\t        parallel<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>  <span class=\"token comment\">// 使用多进程并行运行来提高构建速度</span>\n\t      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>       \n\t \t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"http://lisperator.net/uglifyjs/compress\">更多<code>compress</code>参数</a>  </p>\n<p><a href=\"https://www.html.cn/doc/webpack2/plugins/uglifyjs-webpack-plugin/\">官方参数文档</a></p>\n"},{"title":"vue和nginx配置gzip","date":"2020-09-10T10:19:37.000Z","_content":"\n## 环境\n - nginx@1.19.2\n - vue-cli@4.5.0  \n \n## vue实现gzip构建配置\n安装依赖，它的作用是提供带`Content-Encoding`编码的压缩资源。\n\n```shell\nnpm install compression-webpack-plugin --save-dev\n```\n\nwebpack配置，由于`vue-cli@2`以后隐藏`webpack.config.js`，也就是webpack的构建配置。它在内部编写了基础配置。  \n[vue-cli 文档](https://cli.vuejs.org/zh/guide/)  \n\n如果您想修改，你需要在vue根目录创建`vue.config.js`文件，像css一样，会自动覆盖隐藏的基础配置。gizp配置如下:  \n[更多参数](https://www.webpackjs.com/plugins/compression-webpack-plugin/)\n\n```javascript\n// vue.config.js\nconst CompressionWebpackPlugin = require('compression-webpack-plugin'); \nconst isProduction = process.env.NODE_ENV === 'production'; // 环境判断\nconst productionGzipExtensions = ['js', 'css']; // 需要gzip的文件类型\n\nmodule.exports = {\n  configureWebpack: config => {\n    if (isProduction) { // 只有生产环境才压缩gzip\n      config.plugins.push(new CompressionWebpackPlugin({\n        // 压缩算法\n        algorithm: 'gzip', \n        // 资源匹配\n        test: new RegExp('\\\\.(' + productionGzipExtensions.join('|') + ')$'), \n        // 只有大于这个大小(byte)的资源才会被处理        \n        threshold: 10240, \n        // 只有压缩率比这个值小的资源才会被处理\n        minRatio: 0.8\n      }))\n    }\n  }\n}\n```\n#### vue-cli 3.0以下配置\n> 需要注意的是需要安装1.x.x版本，2+版本的配置项`asset`更换成了`filename`。  \n> \n> 如果你要安装2+版本到`/build/webpack.prod.conf.js`中`new CompressionWebpackPlugin`的第一个参数从`asset`修改成`filename`。\n\n```javascript\n// 安装依赖\nnpm install compression-webpack-plugin@1.1.9 --save-dev\n\n// 进入/config/index.js, productionGzip参数改成true\nbuild: {\n\t...\n\tproductionGzip: true\n}\n\n// 更多参数配置在/build/webpack.prod.conf.js\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      ...\n    })\n  )\n}\n```\n\n## nginx配置\n编辑nginx配置文件，我的在`/usr/local/nginx/conf/nginx.config`, 或使用`whereis nginx`查找, 得到地址找到 `conf/nginx.config`，打开配置文件，作用全局在`http块`中添加，作用单个服务在`server块`中添加。  \n\nnginx.config: \n\n```shell\ngzip  on; // on表示开启，off表示关闭；\n\n# 需要压缩的MIME类型\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n```  \n[参考更多参数](https://segmentfault.com/a/1190000012694104)  \n\n编辑保存后，重启nginx来更新配置:\n\n```shell\ncd /usr/local/nginx/sbin // 进入你的nginx下sbin目录\n\n./nginx -s reload // 重启\n```\n\n## 结果\n重新构建vue并部署到nginx。\n打开浏览器控制台，network面板，右键表头。  \n\n\n勾选`Content-Encoding`  \n\n![WechatIMG2793.png](./vue和nginx服务器配置gzip/vW36BFrLUA85bGe.png)    \n\n看到 `gzip` 即成功。\n\n![WechatIMG2794.png](./vue和nginx服务器配置gzip/FS6bBWiJQIjuHTz.png)\n","source":"_drafts/vue和nginx服务器配置gzip.md","raw":"\n---\ntitle: vue和nginx配置gzip\ndate: 2020/09/10 18:19:37\ntags: [前端]\n---\n\n## 环境\n - nginx@1.19.2\n - vue-cli@4.5.0  \n \n## vue实现gzip构建配置\n安装依赖，它的作用是提供带`Content-Encoding`编码的压缩资源。\n\n```shell\nnpm install compression-webpack-plugin --save-dev\n```\n\nwebpack配置，由于`vue-cli@2`以后隐藏`webpack.config.js`，也就是webpack的构建配置。它在内部编写了基础配置。  \n[vue-cli 文档](https://cli.vuejs.org/zh/guide/)  \n\n如果您想修改，你需要在vue根目录创建`vue.config.js`文件，像css一样，会自动覆盖隐藏的基础配置。gizp配置如下:  \n[更多参数](https://www.webpackjs.com/plugins/compression-webpack-plugin/)\n\n```javascript\n// vue.config.js\nconst CompressionWebpackPlugin = require('compression-webpack-plugin'); \nconst isProduction = process.env.NODE_ENV === 'production'; // 环境判断\nconst productionGzipExtensions = ['js', 'css']; // 需要gzip的文件类型\n\nmodule.exports = {\n  configureWebpack: config => {\n    if (isProduction) { // 只有生产环境才压缩gzip\n      config.plugins.push(new CompressionWebpackPlugin({\n        // 压缩算法\n        algorithm: 'gzip', \n        // 资源匹配\n        test: new RegExp('\\\\.(' + productionGzipExtensions.join('|') + ')$'), \n        // 只有大于这个大小(byte)的资源才会被处理        \n        threshold: 10240, \n        // 只有压缩率比这个值小的资源才会被处理\n        minRatio: 0.8\n      }))\n    }\n  }\n}\n```\n#### vue-cli 3.0以下配置\n> 需要注意的是需要安装1.x.x版本，2+版本的配置项`asset`更换成了`filename`。  \n> \n> 如果你要安装2+版本到`/build/webpack.prod.conf.js`中`new CompressionWebpackPlugin`的第一个参数从`asset`修改成`filename`。\n\n```javascript\n// 安装依赖\nnpm install compression-webpack-plugin@1.1.9 --save-dev\n\n// 进入/config/index.js, productionGzip参数改成true\nbuild: {\n\t...\n\tproductionGzip: true\n}\n\n// 更多参数配置在/build/webpack.prod.conf.js\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      ...\n    })\n  )\n}\n```\n\n## nginx配置\n编辑nginx配置文件，我的在`/usr/local/nginx/conf/nginx.config`, 或使用`whereis nginx`查找, 得到地址找到 `conf/nginx.config`，打开配置文件，作用全局在`http块`中添加，作用单个服务在`server块`中添加。  \n\nnginx.config: \n\n```shell\ngzip  on; // on表示开启，off表示关闭；\n\n# 需要压缩的MIME类型\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n```  \n[参考更多参数](https://segmentfault.com/a/1190000012694104)  \n\n编辑保存后，重启nginx来更新配置:\n\n```shell\ncd /usr/local/nginx/sbin // 进入你的nginx下sbin目录\n\n./nginx -s reload // 重启\n```\n\n## 结果\n重新构建vue并部署到nginx。\n打开浏览器控制台，network面板，右键表头。  \n\n\n勾选`Content-Encoding`  \n\n![WechatIMG2793.png](./vue和nginx服务器配置gzip/vW36BFrLUA85bGe.png)    \n\n看到 `gzip` 即成功。\n\n![WechatIMG2794.png](./vue和nginx服务器配置gzip/FS6bBWiJQIjuHTz.png)\n","slug":"vue和nginx服务器配置gzip","published":0,"updated":"2021-10-22T09:38:36.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqd0004h7vmbamohlwl","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"mailto:&#x6e;&#103;&#x69;&#110;&#x78;&#x40;&#x31;&#x2e;&#49;&#x39;&#46;&#50;\">&#x6e;&#103;&#x69;&#110;&#x78;&#x40;&#x31;&#x2e;&#49;&#x39;&#46;&#50;</a></li>\n<li><a href=\"mailto:&#x76;&#x75;&#101;&#x2d;&#x63;&#x6c;&#x69;&#64;&#52;&#46;&#x35;&#x2e;&#48;\">&#x76;&#x75;&#101;&#x2d;&#x63;&#x6c;&#x69;&#64;&#52;&#46;&#x35;&#x2e;&#48;</a>  </li>\n</ul>\n<h2 id=\"vue实现gzip构建配置\"><a href=\"#vue实现gzip构建配置\" class=\"headerlink\" title=\"vue实现gzip构建配置\"></a>vue实现gzip构建配置</h2><p>安装依赖，它的作用是提供带<code>Content-Encoding</code>编码的压缩资源。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">npm install compression-webpack-plugin --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>webpack配置，由于<code>vue-cli@2</code>以后隐藏<code>webpack.config.js</code>，也就是webpack的构建配置。它在内部编写了基础配置。<br><a href=\"https://cli.vuejs.org/zh/guide/\">vue-cli 文档</a>  </p>\n<p>如果您想修改，你需要在vue根目录创建<code>vue.config.js</code>文件，像css一样，会自动覆盖隐藏的基础配置。gizp配置如下:<br><a href=\"https://www.webpackjs.com/plugins/compression-webpack-plugin/\">更多参数</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// vue.config.js</span>\n<span class=\"token keyword\">const</span> CompressionWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'compression-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> isProduction <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 环境判断</span>\n<span class=\"token keyword\">const</span> productionGzipExtensions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要gzip的文件类型</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">configureWebpack</span><span class=\"token operator\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 只有生产环境才压缩gzip</span>\n      config<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressionWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 压缩算法</span>\n        algorithm<span class=\"token operator\">:</span> <span class=\"token string\">'gzip'</span><span class=\"token punctuation\">,</span> \n        <span class=\"token comment\">// 资源匹配</span>\n        test<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\.('</span> <span class=\"token operator\">+</span> productionGzipExtensions<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        <span class=\"token comment\">// 只有大于这个大小(byte)的资源才会被处理        </span>\n        threshold<span class=\"token operator\">:</span> <span class=\"token number\">10240</span><span class=\"token punctuation\">,</span> \n        <span class=\"token comment\">// 只有压缩率比这个值小的资源才会被处理</span>\n        minRatio<span class=\"token operator\">:</span> <span class=\"token number\">0.8</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"vue-cli-3-0以下配置\"><a href=\"#vue-cli-3-0以下配置\" class=\"headerlink\" title=\"vue-cli 3.0以下配置\"></a>vue-cli 3.0以下配置</h4><blockquote>\n<p>需要注意的是需要安装1.x.x版本，2+版本的配置项<code>asset</code>更换成了<code>filename</code>。  </p>\n<p>如果你要安装2+版本到<code>/build/webpack.prod.conf.js</code>中<code>new CompressionWebpackPlugin</code>的第一个参数从<code>asset</code>修改成<code>filename</code>。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 安装依赖</span>\nnpm install compression<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin@<span class=\"token number\">1.1</span><span class=\"token number\">.9</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev\n\n<span class=\"token comment\">// 进入/config/index.js, productionGzip参数改成true</span>\nbuild<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span>\n\tproductionGzip<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 更多参数配置在/build/webpack.prod.conf.js</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>productionGzip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> CompressionWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'compression-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n  webpackConfig<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressionWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>编辑nginx配置文件，我的在<code>/usr/local/nginx/conf/nginx.config</code>, 或使用<code>whereis nginx</code>查找, 得到地址找到 <code>conf/nginx.config</code>，打开配置文件，作用全局在<code>http块</code>中添加，作用单个服务在<code>server块</code>中添加。  </p>\n<p>nginx.config: </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">gzip  on; &#x2F;&#x2F; on表示开启，off表示关闭；\n\n# 需要压缩的MIME类型\ngzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;\n&#96;&#96;&#96;  \n[参考更多参数](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000012694104)  \n\n编辑保存后，重启nginx来更新配置:\n\n&#96;&#96;&#96;shell\ncd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin &#x2F;&#x2F; 进入你的nginx下sbin目录\n\n.&#x2F;nginx -s reload &#x2F;&#x2F; 重启<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>重新构建vue并部署到nginx。<br>打开浏览器控制台，network面板，右键表头。  </p>\n<p>勾选<code>Content-Encoding</code>  </p>\n<p><img src=\"/2020/09/10/vue%E5%92%8Cnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEgzip/vW36BFrLUA85bGe.png\" alt=\"WechatIMG2793.png\">    </p>\n<p>看到 <code>gzip</code> 即成功。</p>\n<p><img src=\"/2020/09/10/vue%E5%92%8Cnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEgzip/FS6bBWiJQIjuHTz.png\" alt=\"WechatIMG2794.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"mailto:&#x6e;&#103;&#x69;&#110;&#x78;&#x40;&#x31;&#x2e;&#49;&#x39;&#46;&#50;\">&#x6e;&#103;&#x69;&#110;&#x78;&#x40;&#x31;&#x2e;&#49;&#x39;&#46;&#50;</a></li>\n<li><a href=\"mailto:&#x76;&#x75;&#101;&#x2d;&#x63;&#x6c;&#x69;&#64;&#52;&#46;&#x35;&#x2e;&#48;\">&#x76;&#x75;&#101;&#x2d;&#x63;&#x6c;&#x69;&#64;&#52;&#46;&#x35;&#x2e;&#48;</a>  </li>\n</ul>\n<h2 id=\"vue实现gzip构建配置\"><a href=\"#vue实现gzip构建配置\" class=\"headerlink\" title=\"vue实现gzip构建配置\"></a>vue实现gzip构建配置</h2><p>安装依赖，它的作用是提供带<code>Content-Encoding</code>编码的压缩资源。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">npm install compression-webpack-plugin --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>webpack配置，由于<code>vue-cli@2</code>以后隐藏<code>webpack.config.js</code>，也就是webpack的构建配置。它在内部编写了基础配置。<br><a href=\"https://cli.vuejs.org/zh/guide/\">vue-cli 文档</a>  </p>\n<p>如果您想修改，你需要在vue根目录创建<code>vue.config.js</code>文件，像css一样，会自动覆盖隐藏的基础配置。gizp配置如下:<br><a href=\"https://www.webpackjs.com/plugins/compression-webpack-plugin/\">更多参数</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// vue.config.js</span>\n<span class=\"token keyword\">const</span> CompressionWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'compression-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> isProduction <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 环境判断</span>\n<span class=\"token keyword\">const</span> productionGzipExtensions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要gzip的文件类型</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">configureWebpack</span><span class=\"token operator\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 只有生产环境才压缩gzip</span>\n      config<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressionWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 压缩算法</span>\n        algorithm<span class=\"token operator\">:</span> <span class=\"token string\">'gzip'</span><span class=\"token punctuation\">,</span> \n        <span class=\"token comment\">// 资源匹配</span>\n        test<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\.('</span> <span class=\"token operator\">+</span> productionGzipExtensions<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        <span class=\"token comment\">// 只有大于这个大小(byte)的资源才会被处理        </span>\n        threshold<span class=\"token operator\">:</span> <span class=\"token number\">10240</span><span class=\"token punctuation\">,</span> \n        <span class=\"token comment\">// 只有压缩率比这个值小的资源才会被处理</span>\n        minRatio<span class=\"token operator\">:</span> <span class=\"token number\">0.8</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"vue-cli-3-0以下配置\"><a href=\"#vue-cli-3-0以下配置\" class=\"headerlink\" title=\"vue-cli 3.0以下配置\"></a>vue-cli 3.0以下配置</h4><blockquote>\n<p>需要注意的是需要安装1.x.x版本，2+版本的配置项<code>asset</code>更换成了<code>filename</code>。  </p>\n<p>如果你要安装2+版本到<code>/build/webpack.prod.conf.js</code>中<code>new CompressionWebpackPlugin</code>的第一个参数从<code>asset</code>修改成<code>filename</code>。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 安装依赖</span>\nnpm install compression<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin@<span class=\"token number\">1.1</span><span class=\"token number\">.9</span> <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev\n\n<span class=\"token comment\">// 进入/config/index.js, productionGzip参数改成true</span>\nbuild<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span>\n\tproductionGzip<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 更多参数配置在/build/webpack.prod.conf.js</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>productionGzip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> CompressionWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'compression-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n  webpackConfig<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressionWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>编辑nginx配置文件，我的在<code>/usr/local/nginx/conf/nginx.config</code>, 或使用<code>whereis nginx</code>查找, 得到地址找到 <code>conf/nginx.config</code>，打开配置文件，作用全局在<code>http块</code>中添加，作用单个服务在<code>server块</code>中添加。  </p>\n<p>nginx.config: </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">gzip  on; &#x2F;&#x2F; on表示开启，off表示关闭；\n\n# 需要压缩的MIME类型\ngzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;\n&#96;&#96;&#96;  \n[参考更多参数](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000012694104)  \n\n编辑保存后，重启nginx来更新配置:\n\n&#96;&#96;&#96;shell\ncd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin &#x2F;&#x2F; 进入你的nginx下sbin目录\n\n.&#x2F;nginx -s reload &#x2F;&#x2F; 重启<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>重新构建vue并部署到nginx。<br>打开浏览器控制台，network面板，右键表头。  </p>\n<p>勾选<code>Content-Encoding</code>  </p>\n<p><img src=\"/2020/09/10/vue%E5%92%8Cnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEgzip/vW36BFrLUA85bGe.png\" alt=\"WechatIMG2793.png\">    </p>\n<p>看到 <code>gzip</code> 即成功。</p>\n<p><img src=\"/2020/09/10/vue%E5%92%8Cnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEgzip/FS6bBWiJQIjuHTz.png\" alt=\"WechatIMG2794.png\"></p>\n"},{"title":"黑洞到底是什么","date":"2021-06-14T05:13:04.000Z","_content":"\n## 黑洞\n- 爱因斯坦在了广义相对论中提出了引力场方程\n- 史瓦西在求解引力场方程时，发现一个特别的解，这个解被他叫做黑洞\n- 霍金在爱因斯坦的广义相对论的基础上，又引入了量子场论，霍金对黑洞性质有更加细致的描述\n\n## 黑洞性质\n - 质量非常大，光都无法逃逸\n\n...","source":"_drafts/黑洞是什么.md","raw":"---\ntitle: 黑洞到底是什么\ndate: 2021/06/14 13:13:04\ntags: [天文]\n---\n\n## 黑洞\n- 爱因斯坦在了广义相对论中提出了引力场方程\n- 史瓦西在求解引力场方程时，发现一个特别的解，这个解被他叫做黑洞\n- 霍金在爱因斯坦的广义相对论的基础上，又引入了量子场论，霍金对黑洞性质有更加细致的描述\n\n## 黑洞性质\n - 质量非常大，光都无法逃逸\n\n...","slug":"黑洞是什么","published":0,"updated":"2021-10-22T09:38:36.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqd0005h7vmhe3m7dgl","content":"<h2 id=\"黑洞\"><a href=\"#黑洞\" class=\"headerlink\" title=\"黑洞\"></a>黑洞</h2><ul>\n<li>爱因斯坦在了广义相对论中提出了引力场方程</li>\n<li>史瓦西在求解引力场方程时，发现一个特别的解，这个解被他叫做黑洞</li>\n<li>霍金在爱因斯坦的广义相对论的基础上，又引入了量子场论，霍金对黑洞性质有更加细致的描述</li>\n</ul>\n<h2 id=\"黑洞性质\"><a href=\"#黑洞性质\" class=\"headerlink\" title=\"黑洞性质\"></a>黑洞性质</h2><ul>\n<li>质量非常大，光都无法逃逸</li>\n</ul>\n<p>…</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"黑洞\"><a href=\"#黑洞\" class=\"headerlink\" title=\"黑洞\"></a>黑洞</h2><ul>\n<li>爱因斯坦在了广义相对论中提出了引力场方程</li>\n<li>史瓦西在求解引力场方程时，发现一个特别的解，这个解被他叫做黑洞</li>\n<li>霍金在爱因斯坦的广义相对论的基础上，又引入了量子场论，霍金对黑洞性质有更加细致的描述</li>\n</ul>\n<h2 id=\"黑洞性质\"><a href=\"#黑洞性质\" class=\"headerlink\" title=\"黑洞性质\"></a>黑洞性质</h2><ul>\n<li>质量非常大，光都无法逃逸</li>\n</ul>\n<p>…</p>\n"},{"title":"Linux中内存交换空间(swap)的使用","date":"2020-09-21T08:48:04.000Z","_content":"\n## 什么是swap\n`swap`分区是`Linux`中特殊的一种存储，他在安装系统时被自动创建。  \n\n用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到`swap`分区中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问`swap`空间上的的数据时，`swap`会把数据放回内存中供操作系统使用。\n\n类似`windows`中的虚拟内存。每个操作系统都有这种内存调度处理，当内存不够用，还想跑点东西，可以临时选择增加`swap`空间。以达到`实际使用内存`超过`物理内存`。由于`swap`的读取速度远不如内存，最好的办法还是`加物理内存`。\n## swap分区类型\n - **swap 文件**\n - **swap 分区**  \n\n速度比较：物理内存 > swap分区 > swap文件。\n\n由于`swap`分区需要一个新的磁盘，当你的磁盘已经装了不少内容，不方便重新规划的话，也只好使用swap文件了。本文使用swap文件方式。\n\n## 查看swap信息\n> 基于Cent OS 7.6 \n\n 使用`swapon -s`命令查看系统中当前`swap`信息：  \n\n```shell\nswapon -s\n\nFilename            Type        Size     Used        Priority\n/swapfile           file        1048572  199668      -2\n``` \n - **Filename**：swap 分区/文件所在的位置\n - **Type**：swap类型；`partition`为分区类型，`file`为文件类型\n - **Size**：总容量，单位是KB\n - **Used**：已被使用的容量\n - **Priority**：优先级，越高越优先被操作系统使用\n \n若查不到 swap 信息，使用`free -h`命令，查看内存使用情况：\n\n```shell\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M\n```\n## 操作swap\n>\n\n创建`swap文件`， `fallocate`命令可以为文件预分配物理空间，和touch、vim的区别就是可瞬间创建超大的文件。快速创建的原因是通过分配块并将它们标记为未初始化，无需对数据块进行IO，可以快速完成预分配。当使用时再使用物理内存。`-l`后加大小，可以是k、m、g。再后面是保存位置和名称。\n   \n```shell\n# 创建一个1g文件swapfile保存到/\nsudo fallocate -l 1G /swapfile\n``` \n\n修改权限，仅允许文件所有者进行读写操作：\n\n```shell\nsudo chmod 600 /swapfile\n``` \n将这个文件设为 Linux 交换区：\n\n```shell\nsudo mkswap /swapfile\n``` \n激活交换区：\n\n```shell  \nsudo swapon /swapfile\n``` \n修改`/etc/fstab`，实现系统重启自动加载swap文件：  \n\n```shell\necho '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab\n```\n至此完成swap文件增加。使用`free -h`查看 swap 使用情况：  \n\n```shell\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M\n```\n停止所有swap：  \n\n```shell\nsudo swapoff -a\n\n# 查看内存使用情况，可以看到 Swap 信息都变成0，说明操作成功了\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M        261M         92M        484K        134M        201M\nSwap:     \t      0           0           0\n```\n\n","source":"_posts/Linux中内存交换空间(Swap)的介绍和使用.md","raw":"---\ntitle: Linux中内存交换空间(swap)的使用\ndate: 2020/09/21 16:48:04\ntags: [Linux]\n---\n\n## 什么是swap\n`swap`分区是`Linux`中特殊的一种存储，他在安装系统时被自动创建。  \n\n用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到`swap`分区中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问`swap`空间上的的数据时，`swap`会把数据放回内存中供操作系统使用。\n\n类似`windows`中的虚拟内存。每个操作系统都有这种内存调度处理，当内存不够用，还想跑点东西，可以临时选择增加`swap`空间。以达到`实际使用内存`超过`物理内存`。由于`swap`的读取速度远不如内存，最好的办法还是`加物理内存`。\n## swap分区类型\n - **swap 文件**\n - **swap 分区**  \n\n速度比较：物理内存 > swap分区 > swap文件。\n\n由于`swap`分区需要一个新的磁盘，当你的磁盘已经装了不少内容，不方便重新规划的话，也只好使用swap文件了。本文使用swap文件方式。\n\n## 查看swap信息\n> 基于Cent OS 7.6 \n\n 使用`swapon -s`命令查看系统中当前`swap`信息：  \n\n```shell\nswapon -s\n\nFilename            Type        Size     Used        Priority\n/swapfile           file        1048572  199668      -2\n``` \n - **Filename**：swap 分区/文件所在的位置\n - **Type**：swap类型；`partition`为分区类型，`file`为文件类型\n - **Size**：总容量，单位是KB\n - **Used**：已被使用的容量\n - **Priority**：优先级，越高越优先被操作系统使用\n \n若查不到 swap 信息，使用`free -h`命令，查看内存使用情况：\n\n```shell\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M\n```\n## 操作swap\n>\n\n创建`swap文件`， `fallocate`命令可以为文件预分配物理空间，和touch、vim的区别就是可瞬间创建超大的文件。快速创建的原因是通过分配块并将它们标记为未初始化，无需对数据块进行IO，可以快速完成预分配。当使用时再使用物理内存。`-l`后加大小，可以是k、m、g。再后面是保存位置和名称。\n   \n```shell\n# 创建一个1g文件swapfile保存到/\nsudo fallocate -l 1G /swapfile\n``` \n\n修改权限，仅允许文件所有者进行读写操作：\n\n```shell\nsudo chmod 600 /swapfile\n``` \n将这个文件设为 Linux 交换区：\n\n```shell\nsudo mkswap /swapfile\n``` \n激活交换区：\n\n```shell  \nsudo swapon /swapfile\n``` \n修改`/etc/fstab`，实现系统重启自动加载swap文件：  \n\n```shell\necho '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab\n```\n至此完成swap文件增加。使用`free -h`查看 swap 使用情况：  \n\n```shell\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M\n```\n停止所有swap：  \n\n```shell\nsudo swapoff -a\n\n# 查看内存使用情况，可以看到 Swap 信息都变成0，说明操作成功了\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M        261M         92M        484K        134M        201M\nSwap:     \t      0           0           0\n```\n\n","slug":"Linux中内存交换空间(Swap)的介绍和使用","published":1,"updated":"2021-10-22T09:38:36.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqg0008h7vm3zoueve7","content":"<h2 id=\"什么是swap\"><a href=\"#什么是swap\" class=\"headerlink\" title=\"什么是swap\"></a>什么是swap</h2><p><code>swap</code>分区是<code>Linux</code>中特殊的一种存储，他在安装系统时被自动创建。  </p>\n<p>用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到<code>swap</code>分区中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问<code>swap</code>空间上的的数据时，<code>swap</code>会把数据放回内存中供操作系统使用。</p>\n<p>类似<code>windows</code>中的虚拟内存。每个操作系统都有这种内存调度处理，当内存不够用，还想跑点东西，可以临时选择增加<code>swap</code>空间。以达到<code>实际使用内存</code>超过<code>物理内存</code>。由于<code>swap</code>的读取速度远不如内存，最好的办法还是<code>加物理内存</code>。</p>\n<h2 id=\"swap分区类型\"><a href=\"#swap分区类型\" class=\"headerlink\" title=\"swap分区类型\"></a>swap分区类型</h2><ul>\n<li><strong>swap 文件</strong></li>\n<li><strong>swap 分区</strong>  </li>\n</ul>\n<p>速度比较：物理内存 &gt; swap分区 &gt; swap文件。</p>\n<p>由于<code>swap</code>分区需要一个新的磁盘，当你的磁盘已经装了不少内容，不方便重新规划的话，也只好使用swap文件了。本文使用swap文件方式。</p>\n<h2 id=\"查看swap信息\"><a href=\"#查看swap信息\" class=\"headerlink\" title=\"查看swap信息\"></a>查看swap信息</h2><blockquote>\n<p>基于Cent OS 7.6 </p>\n</blockquote>\n<p> 使用<code>swapon -s</code>命令查看系统中当前<code>swap</code>信息：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">swapon -s\n\nFilename            Type        Size     Used        Priority\n&#x2F;swapfile           file        1048572  199668      -2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>Filename</strong>：swap 分区/文件所在的位置</li>\n<li><strong>Type</strong>：swap类型；<code>partition</code>为分区类型，<code>file</code>为文件类型</li>\n<li><strong>Size</strong>：总容量，单位是KB</li>\n<li><strong>Used</strong>：已被使用的容量</li>\n<li><strong>Priority</strong>：优先级，越高越优先被操作系统使用</li>\n</ul>\n<p>若查不到 swap 信息，使用<code>free -h</code>命令，查看内存使用情况：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">free -h\n              total        used        free      shared  buff&#x2F;cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"操作swap\"><a href=\"#操作swap\" class=\"headerlink\" title=\"操作swap\"></a>操作swap</h2><blockquote>\n</blockquote>\n<p>创建<code>swap文件</code>， <code>fallocate</code>命令可以为文件预分配物理空间，和touch、vim的区别就是可瞬间创建超大的文件。快速创建的原因是通过分配块并将它们标记为未初始化，无需对数据块进行IO，可以快速完成预分配。当使用时再使用物理内存。<code>-l</code>后加大小，可以是k、m、g。再后面是保存位置和名称。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 创建一个1g文件swapfile保存到&#x2F;\nsudo fallocate -l 1G &#x2F;swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改权限，仅允许文件所有者进行读写操作：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo chmod 600 &#x2F;swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将这个文件设为 Linux 交换区：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo mkswap &#x2F;swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>激活交换区：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo swapon &#x2F;swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改<code>/etc/fstab</code>，实现系统重启自动加载swap文件：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo &#39;&#x2F;swapfile none swap sw 0 0&#39; | sudo tee -a &#x2F;etc&#x2F;fstab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>至此完成swap文件增加。使用<code>free -h</code>查看 swap 使用情况：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">free -h\n              total        used        free      shared  buff&#x2F;cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>停止所有swap：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo swapoff -a\n\n# 查看内存使用情况，可以看到 Swap 信息都变成0，说明操作成功了\nfree -h\n              total        used        free      shared  buff&#x2F;cache   available\nMem:           487M        261M         92M        484K        134M        201M\nSwap:     \t      0           0           0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是swap\"><a href=\"#什么是swap\" class=\"headerlink\" title=\"什么是swap\"></a>什么是swap</h2><p><code>swap</code>分区是<code>Linux</code>中特殊的一种存储，他在安装系统时被自动创建。  </p>\n<p>用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到<code>swap</code>分区中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问<code>swap</code>空间上的的数据时，<code>swap</code>会把数据放回内存中供操作系统使用。</p>\n<p>类似<code>windows</code>中的虚拟内存。每个操作系统都有这种内存调度处理，当内存不够用，还想跑点东西，可以临时选择增加<code>swap</code>空间。以达到<code>实际使用内存</code>超过<code>物理内存</code>。由于<code>swap</code>的读取速度远不如内存，最好的办法还是<code>加物理内存</code>。</p>\n<h2 id=\"swap分区类型\"><a href=\"#swap分区类型\" class=\"headerlink\" title=\"swap分区类型\"></a>swap分区类型</h2><ul>\n<li><strong>swap 文件</strong></li>\n<li><strong>swap 分区</strong>  </li>\n</ul>\n<p>速度比较：物理内存 &gt; swap分区 &gt; swap文件。</p>\n<p>由于<code>swap</code>分区需要一个新的磁盘，当你的磁盘已经装了不少内容，不方便重新规划的话，也只好使用swap文件了。本文使用swap文件方式。</p>\n<h2 id=\"查看swap信息\"><a href=\"#查看swap信息\" class=\"headerlink\" title=\"查看swap信息\"></a>查看swap信息</h2><blockquote>\n<p>基于Cent OS 7.6 </p>\n</blockquote>\n<p> 使用<code>swapon -s</code>命令查看系统中当前<code>swap</code>信息：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">swapon -s\n\nFilename            Type        Size     Used        Priority\n&#x2F;swapfile           file        1048572  199668      -2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>Filename</strong>：swap 分区/文件所在的位置</li>\n<li><strong>Type</strong>：swap类型；<code>partition</code>为分区类型，<code>file</code>为文件类型</li>\n<li><strong>Size</strong>：总容量，单位是KB</li>\n<li><strong>Used</strong>：已被使用的容量</li>\n<li><strong>Priority</strong>：优先级，越高越优先被操作系统使用</li>\n</ul>\n<p>若查不到 swap 信息，使用<code>free -h</code>命令，查看内存使用情况：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">free -h\n              total        used        free      shared  buff&#x2F;cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"操作swap\"><a href=\"#操作swap\" class=\"headerlink\" title=\"操作swap\"></a>操作swap</h2><blockquote>\n</blockquote>\n<p>创建<code>swap文件</code>， <code>fallocate</code>命令可以为文件预分配物理空间，和touch、vim的区别就是可瞬间创建超大的文件。快速创建的原因是通过分配块并将它们标记为未初始化，无需对数据块进行IO，可以快速完成预分配。当使用时再使用物理内存。<code>-l</code>后加大小，可以是k、m、g。再后面是保存位置和名称。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 创建一个1g文件swapfile保存到&#x2F;\nsudo fallocate -l 1G &#x2F;swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改权限，仅允许文件所有者进行读写操作：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo chmod 600 &#x2F;swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将这个文件设为 Linux 交换区：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo mkswap &#x2F;swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>激活交换区：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo swapon &#x2F;swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改<code>/etc/fstab</code>，实现系统重启自动加载swap文件：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">echo &#39;&#x2F;swapfile none swap sw 0 0&#39; | sudo tee -a &#x2F;etc&#x2F;fstab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>至此完成swap文件增加。使用<code>free -h</code>查看 swap 使用情况：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">free -h\n              total        used        free      shared  buff&#x2F;cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>停止所有swap：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sudo swapoff -a\n\n# 查看内存使用情况，可以看到 Swap 信息都变成0，说明操作成功了\nfree -h\n              total        used        free      shared  buff&#x2F;cache   available\nMem:           487M        261M         92M        484K        134M        201M\nSwap:     \t      0           0           0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"diff算法简介","date":"2020-11-05T10:36:39.000Z","_content":"\n## diff算法和virtual dom\n\n![WechatIMG3177.png](./diff算法简介/HrGjhDp8ebSt62R.png)  \n\n在现代`mvvm`框架`react`和`vue`中，因为直接操作dom相对是要耗费更多性能的，所以`react`和`vue`都使用了`virtual dom`来替代处理dom，大致的过程是：按照dom结构生成一份`virtual dom`为`js`对象树状格式。如果数据有更新，需要表现在dom上，那么先把变化表现在`virtual dom`，再通过`diff`算法比对数据更新前后两次`virtual dom`找到差别。最后把仅仅改变的这部分更新到dom上，不用重新渲染整个页面。  \n\n总结：`diff`算法就是找到两个`virtual dom`树结构的不同  \n\n## diff原理 \n首先传入新旧`vnode`到`patch`函数开始比较:  \n\n```javascript\nfunction patch (oldVnode, vnode) {\n    if (sameVnode(oldVnode, vnode)) {\n        patchVnode(oldVnode, vnode) // 如果两个vnode值得比较，调用patchVnode\n    } else {\n        const oEl = oldVnode.el // oldVnode.el为对应的真实dom元素\n        let parentEle = api.parentNode(oEl)\n        createEle(vnode) // 按照vnode结构创建真实dom插入父元素，直接替换oldVnode\n        if (parentEle !== null) {\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\n            api.removeChild(parentEle, oldVnode.el)\n            oldVnode = null\n        }\n    }\n    return vnode\n}\n```\n首先使用`sameVnode`方法判断两个`vnode`是否值得比较，代码如下\n\n```javascript\nfunction sameVnode(oldVnode, vnode){\n\t//  key代表当前节点数据的key属性，大概的意思就是div和span为不同标签。p.class1和p.class2为不同标签\n\treturn vnode.key === oldVnode.key && vnode.sel === oldVnode.sel\n}\n```\n\n一致就按照上步骤，继续往下处理。执行`patchVnode`方法，如不一致，直接用新元素**直接替换**到旧元素。  \n\n如果两个`vnode`值得比较，调用`patchVnode`:\n\n```javascript\npatchVnode (oldVnode, vnode) {\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return // 引用相同，就说明相同，直接return\n    if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\n    \t // 如果有文本内容，比较，如果不同直接设置，用新的替换旧的文本\n        api.setTextContent(el, vnode.text)\n    }else {\n        updateEle(el, vnode, oldVnode)\n        if (oldCh && ch && oldCh !== ch) { // 如果都有子节点，且不同，开始比较子节点\n            updateChildren(el, oldCh, ch)\n        }else if (ch){\n        \t  // 如果只有新vnode上有子节点，直接新建\n            createEle(vnode)\n        }else if (oldCh){\n        \t  // 如果新vnode没子子节，而老vnode有，则删除老节点的子节点\n            api.removeChildren(el)\n        }\n    }\n}\n```\n\n如果都有子节点，且不同，开始比较子节点，调用`updateChildren`函数开始比较子节点:\n\n```javascript\nupdateChildren (parentElm, oldCh, newCh) { // parentElm：真是dom节点。oldCh：老vnode的所有子节点。newCh：新vnode的所有子节点。\n\t // 通过下标，设置新旧vnode的前后两个元素，\n    let oldStartIdx = 0, newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n   \t // 设置一些比较过程需要的变量\n    let oldKeyToIdx\n    let idxInOld\n    let elmToMove\n    let before\n    // 两对节点，分别从头和尾向中间循环靠拢依次比对，如果起始下标大于结尾下标，证明比对结束，作为循环结束条件\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {   //对于vnode.key的比较，会把oldVnode = null\n                oldStartVnode = oldCh[++oldStartIdx] \n            }else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx]\n            }else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx]\n            }else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode)\n                oldStartVnode = oldCh[++oldStartIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode)\n                api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n                oldStartVnode = oldCh[++oldStartIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode)\n                api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }else {\n               // 使用key时的比较\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key]\n                if (!idxInOld) {\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    newStartVnode = newCh[++newStartIdx]\n                }\n                else {\n                    elmToMove = oldCh[idxInOld]\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    }else {\n                        patchVnode(elmToMove, newStartVnode)\n                        oldCh[idxInOld] = null\n                        api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                    }\n                    newStartVnode = newCh[++newStartIdx]\n                }\n            }\n        }\n        if (oldStartIdx > oldEndIdx) {\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n        }else if (newStartIdx > newEndIdx) {\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n        }\n}\n```\n\n\n总结：    \n\n - **调用patch**：传入`新旧vnode`，调用`sameVnode`，返回`true`说明值得比较，则调用`patchVnode`，否则直接使用新节点替换旧节点  \n\n - **调用patchVnode**：更详细的对比新旧vnode，分几种情况：  \n \t- 1: 对于新旧vnode的.el真实dom属性，并对比，如果===那就证明是同一个，直接return\n \t- 2: 如果存在文本节点，直接用新vnode内文本替换旧vnode文本\n \t- 3: 判断子节点，如果新vnode有，旧vnode没有，则直接把新vnode的子节点加入到真实dom，相反就删除掉真实dom子节点\n \t- 4: 如果都有子节点，且不同，调用updateChildren，详细对比\n - **调用updateChildren**： 从两边向中间收拢循环两个新旧vnode的每个子节点，以此对比，头头，尾尾，头尾，尾头。如果这四种比对调用sameVnode，得到true，证明值得对比，那么就调用第二步骤的`patchVnode`递归继续比，除了这四种情况。如果有key，则会对比key。否则直接替换新元素到真实dom。","source":"_posts/diff算法简介.md","raw":"---\ntitle: diff算法简介\ndate: 2020/11/05 18:36:39\ntags: [前端]\n---\n\n## diff算法和virtual dom\n\n![WechatIMG3177.png](./diff算法简介/HrGjhDp8ebSt62R.png)  \n\n在现代`mvvm`框架`react`和`vue`中，因为直接操作dom相对是要耗费更多性能的，所以`react`和`vue`都使用了`virtual dom`来替代处理dom，大致的过程是：按照dom结构生成一份`virtual dom`为`js`对象树状格式。如果数据有更新，需要表现在dom上，那么先把变化表现在`virtual dom`，再通过`diff`算法比对数据更新前后两次`virtual dom`找到差别。最后把仅仅改变的这部分更新到dom上，不用重新渲染整个页面。  \n\n总结：`diff`算法就是找到两个`virtual dom`树结构的不同  \n\n## diff原理 \n首先传入新旧`vnode`到`patch`函数开始比较:  \n\n```javascript\nfunction patch (oldVnode, vnode) {\n    if (sameVnode(oldVnode, vnode)) {\n        patchVnode(oldVnode, vnode) // 如果两个vnode值得比较，调用patchVnode\n    } else {\n        const oEl = oldVnode.el // oldVnode.el为对应的真实dom元素\n        let parentEle = api.parentNode(oEl)\n        createEle(vnode) // 按照vnode结构创建真实dom插入父元素，直接替换oldVnode\n        if (parentEle !== null) {\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\n            api.removeChild(parentEle, oldVnode.el)\n            oldVnode = null\n        }\n    }\n    return vnode\n}\n```\n首先使用`sameVnode`方法判断两个`vnode`是否值得比较，代码如下\n\n```javascript\nfunction sameVnode(oldVnode, vnode){\n\t//  key代表当前节点数据的key属性，大概的意思就是div和span为不同标签。p.class1和p.class2为不同标签\n\treturn vnode.key === oldVnode.key && vnode.sel === oldVnode.sel\n}\n```\n\n一致就按照上步骤，继续往下处理。执行`patchVnode`方法，如不一致，直接用新元素**直接替换**到旧元素。  \n\n如果两个`vnode`值得比较，调用`patchVnode`:\n\n```javascript\npatchVnode (oldVnode, vnode) {\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return // 引用相同，就说明相同，直接return\n    if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\n    \t // 如果有文本内容，比较，如果不同直接设置，用新的替换旧的文本\n        api.setTextContent(el, vnode.text)\n    }else {\n        updateEle(el, vnode, oldVnode)\n        if (oldCh && ch && oldCh !== ch) { // 如果都有子节点，且不同，开始比较子节点\n            updateChildren(el, oldCh, ch)\n        }else if (ch){\n        \t  // 如果只有新vnode上有子节点，直接新建\n            createEle(vnode)\n        }else if (oldCh){\n        \t  // 如果新vnode没子子节，而老vnode有，则删除老节点的子节点\n            api.removeChildren(el)\n        }\n    }\n}\n```\n\n如果都有子节点，且不同，开始比较子节点，调用`updateChildren`函数开始比较子节点:\n\n```javascript\nupdateChildren (parentElm, oldCh, newCh) { // parentElm：真是dom节点。oldCh：老vnode的所有子节点。newCh：新vnode的所有子节点。\n\t // 通过下标，设置新旧vnode的前后两个元素，\n    let oldStartIdx = 0, newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n   \t // 设置一些比较过程需要的变量\n    let oldKeyToIdx\n    let idxInOld\n    let elmToMove\n    let before\n    // 两对节点，分别从头和尾向中间循环靠拢依次比对，如果起始下标大于结尾下标，证明比对结束，作为循环结束条件\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {   //对于vnode.key的比较，会把oldVnode = null\n                oldStartVnode = oldCh[++oldStartIdx] \n            }else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx]\n            }else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx]\n            }else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode)\n                oldStartVnode = oldCh[++oldStartIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode)\n                api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n                oldStartVnode = oldCh[++oldStartIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode)\n                api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }else {\n               // 使用key时的比较\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key]\n                if (!idxInOld) {\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    newStartVnode = newCh[++newStartIdx]\n                }\n                else {\n                    elmToMove = oldCh[idxInOld]\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    }else {\n                        patchVnode(elmToMove, newStartVnode)\n                        oldCh[idxInOld] = null\n                        api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                    }\n                    newStartVnode = newCh[++newStartIdx]\n                }\n            }\n        }\n        if (oldStartIdx > oldEndIdx) {\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n        }else if (newStartIdx > newEndIdx) {\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n        }\n}\n```\n\n\n总结：    \n\n - **调用patch**：传入`新旧vnode`，调用`sameVnode`，返回`true`说明值得比较，则调用`patchVnode`，否则直接使用新节点替换旧节点  \n\n - **调用patchVnode**：更详细的对比新旧vnode，分几种情况：  \n \t- 1: 对于新旧vnode的.el真实dom属性，并对比，如果===那就证明是同一个，直接return\n \t- 2: 如果存在文本节点，直接用新vnode内文本替换旧vnode文本\n \t- 3: 判断子节点，如果新vnode有，旧vnode没有，则直接把新vnode的子节点加入到真实dom，相反就删除掉真实dom子节点\n \t- 4: 如果都有子节点，且不同，调用updateChildren，详细对比\n - **调用updateChildren**： 从两边向中间收拢循环两个新旧vnode的每个子节点，以此对比，头头，尾尾，头尾，尾头。如果这四种比对调用sameVnode，得到true，证明值得对比，那么就调用第二步骤的`patchVnode`递归继续比，除了这四种情况。如果有key，则会对比key。否则直接替换新元素到真实dom。","slug":"diff算法简介","published":1,"updated":"2021-10-22T09:38:36.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqg0009h7vm1k1h3x74","content":"<h2 id=\"diff算法和virtual-dom\"><a href=\"#diff算法和virtual-dom\" class=\"headerlink\" title=\"diff算法和virtual dom\"></a>diff算法和virtual dom</h2><p><img src=\"/2020/11/05/diff%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/HrGjhDp8ebSt62R.png\" alt=\"WechatIMG3177.png\">  </p>\n<p>在现代<code>mvvm</code>框架<code>react</code>和<code>vue</code>中，因为直接操作dom相对是要耗费更多性能的，所以<code>react</code>和<code>vue</code>都使用了<code>virtual dom</code>来替代处理dom，大致的过程是：按照dom结构生成一份<code>virtual dom</code>为<code>js</code>对象树状格式。如果数据有更新，需要表现在dom上，那么先把变化表现在<code>virtual dom</code>，再通过<code>diff</code>算法比对数据更新前后两次<code>virtual dom</code>找到差别。最后把仅仅改变的这部分更新到dom上，不用重新渲染整个页面。  </p>\n<p>总结：<code>diff</code>算法就是找到两个<code>virtual dom</code>树结构的不同  </p>\n<h2 id=\"diff原理\"><a href=\"#diff原理\" class=\"headerlink\" title=\"diff原理\"></a>diff原理</h2><p>首先传入新旧<code>vnode</code>到<code>patch</code>函数开始比较:  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">patch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span> vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果两个vnode值得比较，调用patchVnode</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> oEl <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>el <span class=\"token comment\">// oldVnode.el为对应的真实dom元素</span>\n        <span class=\"token keyword\">let</span> parentEle <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span>oEl<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">createEle</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 按照vnode结构创建真实dom插入父元素，直接替换oldVnode</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentEle <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentEle<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span>oEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            api<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>parentEle<span class=\"token punctuation\">,</span> oldVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n            oldVnode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> vnode\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先使用<code>sameVnode</code>方法判断两个<code>vnode</code>是否值得比较，代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span> vnode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//  key代表当前节点数据的key属性，大概的意思就是div和span为不同标签。p.class1和p.class2为不同标签</span>\n\t<span class=\"token keyword\">return</span> vnode<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> oldVnode<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&amp;&amp;</span> vnode<span class=\"token punctuation\">.</span>sel <span class=\"token operator\">===</span> oldVnode<span class=\"token punctuation\">.</span>sel\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一致就按照上步骤，继续往下处理。执行<code>patchVnode</code>方法，如不一致，直接用新元素<strong>直接替换</strong>到旧元素。  </p>\n<p>如果两个<code>vnode</code>值得比较，调用<code>patchVnode</code>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">patchVnode</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span> vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>el\n    <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">,</span> oldCh <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> ch <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>children\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVnode <span class=\"token operator\">===</span> vnode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token comment\">// 引用相同，就说明相同，直接return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> vnode<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> oldVnode<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> vnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t <span class=\"token comment\">// 如果有文本内容，比较，如果不同直接设置，用新的替换旧的文本</span>\n        api<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">updateEle</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> oldVnode<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCh <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&amp;&amp;</span> oldCh <span class=\"token operator\">!==</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果都有子节点，且不同，开始比较子节点</span>\n            <span class=\"token function\">updateChildren</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t  <span class=\"token comment\">// 如果只有新vnode上有子节点，直接新建</span>\n            <span class=\"token function\">createEle</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t  <span class=\"token comment\">// 如果新vnode没子子节，而老vnode有，则删除老节点的子节点</span>\n            api<span class=\"token punctuation\">.</span><span class=\"token function\">removeChildren</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果都有子节点，且不同，开始比较子节点，调用<code>updateChildren</code>函数开始比较子节点:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">updateChildren</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentElm<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> newCh</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// parentElm：真是dom节点。oldCh：老vnode的所有子节点。newCh：新vnode的所有子节点。</span>\n\t <span class=\"token comment\">// 通过下标，设置新旧vnode的前后两个元素，</span>\n    <span class=\"token keyword\">let</span> oldStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> oldEndIdx <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span>oldEndIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> newEndIdx <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span>newEndIdx<span class=\"token punctuation\">]</span>\n   \t <span class=\"token comment\">// 设置一些比较过程需要的变量</span>\n    <span class=\"token keyword\">let</span> oldKeyToIdx\n    <span class=\"token keyword\">let</span> idxInOld\n    <span class=\"token keyword\">let</span> elmToMove\n    <span class=\"token keyword\">let</span> before\n    <span class=\"token comment\">// 两对节点，分别从头和尾向中间循环靠拢依次比对，如果起始下标大于结尾下标，证明比对结束，作为循环结束条件</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>oldStartIdx <span class=\"token operator\">&lt;=</span> oldEndIdx <span class=\"token operator\">&amp;&amp;</span> newStartIdx <span class=\"token operator\">&lt;=</span> newEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldStartVnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//对于vnode.key的比较，会把oldVnode = null</span>\n                oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span> \n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldEndVnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newStartVnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newEndVnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span>\n                oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span>\n                newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span>\n                oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n                newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span>\n                api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span>\n                newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span>\n                api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldEndVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n                oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n                newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token comment\">// 使用key时的比较</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldKeyToIdx <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    oldKeyToIdx <span class=\"token operator\">=</span> <span class=\"token function\">createKeyToOldIdx</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 有key生成index表</span>\n                <span class=\"token punctuation\">&#125;</span>\n                idxInOld <span class=\"token operator\">=</span> oldKeyToIdx<span class=\"token punctuation\">[</span>newStartVnode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>idxInOld<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> <span class=\"token function\">createEle</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n                    newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    elmToMove <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span>idxInOld<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elmToMove<span class=\"token punctuation\">.</span>sel <span class=\"token operator\">!==</span> newStartVnode<span class=\"token punctuation\">.</span>sel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> <span class=\"token function\">createEle</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>elmToMove<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span>\n                        oldCh<span class=\"token punctuation\">[</span>idxInOld<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n                        api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> elmToMove<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldStartIdx <span class=\"token operator\">></span> oldEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            before <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span>newEndIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> newCh<span class=\"token punctuation\">[</span>newEndIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>el\n            <span class=\"token function\">addVnodes</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> before<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">,</span> newEndIdx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newStartIdx <span class=\"token operator\">></span> newEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">removeVnodes</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>总结：    </p>\n<ul>\n<li><p><strong>调用patch</strong>：传入<code>新旧vnode</code>，调用<code>sameVnode</code>，返回<code>true</code>说明值得比较，则调用<code>patchVnode</code>，否则直接使用新节点替换旧节点  </p>\n</li>\n<li><p><strong>调用patchVnode</strong>：更详细的对比新旧vnode，分几种情况：  </p>\n<ul>\n<li>1: 对于新旧vnode的.el真实dom属性，并对比，如果===那就证明是同一个，直接return</li>\n<li>2: 如果存在文本节点，直接用新vnode内文本替换旧vnode文本</li>\n<li>3: 判断子节点，如果新vnode有，旧vnode没有，则直接把新vnode的子节点加入到真实dom，相反就删除掉真实dom子节点</li>\n<li>4: 如果都有子节点，且不同，调用updateChildren，详细对比</li>\n</ul>\n</li>\n<li><p><strong>调用updateChildren</strong>： 从两边向中间收拢循环两个新旧vnode的每个子节点，以此对比，头头，尾尾，头尾，尾头。如果这四种比对调用sameVnode，得到true，证明值得对比，那么就调用第二步骤的<code>patchVnode</code>递归继续比，除了这四种情况。如果有key，则会对比key。否则直接替换新元素到真实dom。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"diff算法和virtual-dom\"><a href=\"#diff算法和virtual-dom\" class=\"headerlink\" title=\"diff算法和virtual dom\"></a>diff算法和virtual dom</h2><p><img src=\"/2020/11/05/diff%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/HrGjhDp8ebSt62R.png\" alt=\"WechatIMG3177.png\">  </p>\n<p>在现代<code>mvvm</code>框架<code>react</code>和<code>vue</code>中，因为直接操作dom相对是要耗费更多性能的，所以<code>react</code>和<code>vue</code>都使用了<code>virtual dom</code>来替代处理dom，大致的过程是：按照dom结构生成一份<code>virtual dom</code>为<code>js</code>对象树状格式。如果数据有更新，需要表现在dom上，那么先把变化表现在<code>virtual dom</code>，再通过<code>diff</code>算法比对数据更新前后两次<code>virtual dom</code>找到差别。最后把仅仅改变的这部分更新到dom上，不用重新渲染整个页面。  </p>\n<p>总结：<code>diff</code>算法就是找到两个<code>virtual dom</code>树结构的不同  </p>\n<h2 id=\"diff原理\"><a href=\"#diff原理\" class=\"headerlink\" title=\"diff原理\"></a>diff原理</h2><p>首先传入新旧<code>vnode</code>到<code>patch</code>函数开始比较:  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">patch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span> vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果两个vnode值得比较，调用patchVnode</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> oEl <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>el <span class=\"token comment\">// oldVnode.el为对应的真实dom元素</span>\n        <span class=\"token keyword\">let</span> parentEle <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span>oEl<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">createEle</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 按照vnode结构创建真实dom插入父元素，直接替换oldVnode</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentEle <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentEle<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span>oEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            api<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>parentEle<span class=\"token punctuation\">,</span> oldVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n            oldVnode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> vnode\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先使用<code>sameVnode</code>方法判断两个<code>vnode</code>是否值得比较，代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span> vnode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//  key代表当前节点数据的key属性，大概的意思就是div和span为不同标签。p.class1和p.class2为不同标签</span>\n\t<span class=\"token keyword\">return</span> vnode<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> oldVnode<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&amp;&amp;</span> vnode<span class=\"token punctuation\">.</span>sel <span class=\"token operator\">===</span> oldVnode<span class=\"token punctuation\">.</span>sel\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一致就按照上步骤，继续往下处理。执行<code>patchVnode</code>方法，如不一致，直接用新元素<strong>直接替换</strong>到旧元素。  </p>\n<p>如果两个<code>vnode</code>值得比较，调用<code>patchVnode</code>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">patchVnode</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span> vnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>el\n    <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">,</span> oldCh <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> ch <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>children\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVnode <span class=\"token operator\">===</span> vnode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token comment\">// 引用相同，就说明相同，直接return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> vnode<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> oldVnode<span class=\"token punctuation\">.</span>text <span class=\"token operator\">!==</span> vnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t <span class=\"token comment\">// 如果有文本内容，比较，如果不同直接设置，用新的替换旧的文本</span>\n        api<span class=\"token punctuation\">.</span><span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">updateEle</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> oldVnode<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCh <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&amp;&amp;</span> oldCh <span class=\"token operator\">!==</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果都有子节点，且不同，开始比较子节点</span>\n            <span class=\"token function\">updateChildren</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t  <span class=\"token comment\">// 如果只有新vnode上有子节点，直接新建</span>\n            <span class=\"token function\">createEle</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t  <span class=\"token comment\">// 如果新vnode没子子节，而老vnode有，则删除老节点的子节点</span>\n            api<span class=\"token punctuation\">.</span><span class=\"token function\">removeChildren</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果都有子节点，且不同，开始比较子节点，调用<code>updateChildren</code>函数开始比较子节点:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">updateChildren</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentElm<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> newCh</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// parentElm：真是dom节点。oldCh：老vnode的所有子节点。newCh：新vnode的所有子节点。</span>\n\t <span class=\"token comment\">// 通过下标，设置新旧vnode的前后两个元素，</span>\n    <span class=\"token keyword\">let</span> oldStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> oldEndIdx <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span>oldEndIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> newEndIdx <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span>newEndIdx<span class=\"token punctuation\">]</span>\n   \t <span class=\"token comment\">// 设置一些比较过程需要的变量</span>\n    <span class=\"token keyword\">let</span> oldKeyToIdx\n    <span class=\"token keyword\">let</span> idxInOld\n    <span class=\"token keyword\">let</span> elmToMove\n    <span class=\"token keyword\">let</span> before\n    <span class=\"token comment\">// 两对节点，分别从头和尾向中间循环靠拢依次比对，如果起始下标大于结尾下标，证明比对结束，作为循环结束条件</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>oldStartIdx <span class=\"token operator\">&lt;=</span> oldEndIdx <span class=\"token operator\">&amp;&amp;</span> newStartIdx <span class=\"token operator\">&lt;=</span> newEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldStartVnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//对于vnode.key的比较，会把oldVnode = null</span>\n                oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span> \n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldEndVnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newStartVnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newEndVnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span>\n                oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span>\n                newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span>\n                oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n                newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span>\n                api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span>\n                newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span>\n                api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldEndVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n                oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n                newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token comment\">// 使用key时的比较</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldKeyToIdx <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    oldKeyToIdx <span class=\"token operator\">=</span> <span class=\"token function\">createKeyToOldIdx</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 有key生成index表</span>\n                <span class=\"token punctuation\">&#125;</span>\n                idxInOld <span class=\"token operator\">=</span> oldKeyToIdx<span class=\"token punctuation\">[</span>newStartVnode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>idxInOld<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> <span class=\"token function\">createEle</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n                    newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    elmToMove <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span>idxInOld<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elmToMove<span class=\"token punctuation\">.</span>sel <span class=\"token operator\">!==</span> newStartVnode<span class=\"token punctuation\">.</span>sel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> <span class=\"token function\">createEle</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>elmToMove<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span>\n                        oldCh<span class=\"token punctuation\">[</span>idxInOld<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n                        api<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> elmToMove<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldStartIdx <span class=\"token operator\">></span> oldEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            before <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span>newEndIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> newCh<span class=\"token punctuation\">[</span>newEndIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>el\n            <span class=\"token function\">addVnodes</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> before<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">,</span> newEndIdx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newStartIdx <span class=\"token operator\">></span> newEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">removeVnodes</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>总结：    </p>\n<ul>\n<li><p><strong>调用patch</strong>：传入<code>新旧vnode</code>，调用<code>sameVnode</code>，返回<code>true</code>说明值得比较，则调用<code>patchVnode</code>，否则直接使用新节点替换旧节点  </p>\n</li>\n<li><p><strong>调用patchVnode</strong>：更详细的对比新旧vnode，分几种情况：  </p>\n<ul>\n<li>1: 对于新旧vnode的.el真实dom属性，并对比，如果===那就证明是同一个，直接return</li>\n<li>2: 如果存在文本节点，直接用新vnode内文本替换旧vnode文本</li>\n<li>3: 判断子节点，如果新vnode有，旧vnode没有，则直接把新vnode的子节点加入到真实dom，相反就删除掉真实dom子节点</li>\n<li>4: 如果都有子节点，且不同，调用updateChildren，详细对比</li>\n</ul>\n</li>\n<li><p><strong>调用updateChildren</strong>： 从两边向中间收拢循环两个新旧vnode的每个子节点，以此对比，头头，尾尾，头尾，尾头。如果这四种比对调用sameVnode，得到true，证明值得对比，那么就调用第二步骤的<code>patchVnode</code>递归继续比，除了这四种情况。如果有key，则会对比key。否则直接替换新元素到真实dom。</p>\n</li>\n</ul>\n"},{"title":"flex布局介绍","date":"2020-10-15T06:03:49.000Z","_content":"\n## flex布局概念  \n> `flex`布局通常被叫做`flex box`，也叫`弹性盒子`或`容器`，是一种一维的`布局模型`，它能子元素(`flex item`)之间提供了强大的空间分布和对齐能力。   \n   \n![v2-54a0fc96ef4f455aefb8ee4bc133291b_720w.png](./flex布局/WBQ8RSuH7norCs4.png)    \n\n`flex容器`中存在两个轴，一个`水平方向`main axis，一个`竖直方向`cross axis，这是`flex`布局最重要的点，内部元素`flex item`都是根据这个轴来排列对齐的。  \n\n## flex布局好处    \n在一个`html元素`和内部`多个子元`的组合中。要实现子元素有序的，高度自定义的布局，在传统布局方式中，会使用`position`，`float`方式实现，比如多个子元素在父元素中`垂直水平居中`，比较困难。这个时候就可以用`flex`布局，只需要简单几句代码就可以优雅的实现。    \n\n## flex容器属性    \n> 设置一个盒子为`flex`容器，首先设置`display: flex`;  \n\n - **flex-direction**\n - **flex-wrap**\n - **justify-content**\n - **align-items**\n - **align-content**  \n \n### flex-direction   \n`flex-direction`属性规定所有`flex item`在`flex`容器从 **第一个元素** 开始的排列方式\n  \n```css  \nflex-direction: row(默认) | row-reverse | column | column-reverse\n```  \n**row**： 从左往右水平展示    \n**row-reverse**： 从右向左(反向)水平展示    \n**column**： 从上往下垂直展示  \n**column-reverse**： 从下往上(反向)垂直展示\n\n### flex-wrap   \n`flex-wrap`属性规定`flex`容器内所有`flex item`总宽度超出`flex`容器时换行方式    \n\n```css  \nflex-wrap: nowrap(默认) | wrap | wrap-reverse\n```  \n**nowrap**： 不换行，只展示一行。如果容器不够宽，平均缩小每个`item`的宽度  \n**wrap**： 换行，向下换行  \n**wrap-reverse**： 以相反方向换行，向上换行\n   \n### justify-content  \n`justify-content`属性规定所有`flex item`作为一个整体在`flex`容器在主轴(默认为水平轴，通过`flex-direcation`设置)上的排列方式\n\n```css  \njustify-content: flex-start(默认值) | flex-end | center | space-between | space-around\n```  \n**flex-start**： 整体位于容器开头  \n**flex-end**： 整体位于容器结尾  \n**center**： 整体位于容器中心  \n**space-between**： 每个`flex item`平均分布在容器内； `第一个item`和`容器开头`，`最后一个item`和`容器结尾`都无间距  \n**space-around**： 每个`flex item`平均分布在容器内， `第一个item`和`容器开头`，`最后一个item`和`容器结尾`的间距都为`每个item`间距的一半    \n\n### align-items \n`align-items`属性规定所有`flex item`作为一个整体在`flex`容器在副轴(非主轴，和`justify-content`相反)上的排列方式\n\n```css  \nalign-items: stretch(默认值) | center | flex-start | flex-end | baseline\n```  \n**stretch**： 整体占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效  \n**center**： 整体位于主轴中心   \n**flex-start**： 整体位于主轴开头    \n**flex-end**： 整体位于主轴结尾  \n**baseline**： 主轴位于`item`中第一行文字 *基线* 对齐    \n\n> 基线的概念：英文中大概就是一个小写字母 *x* 的最底部，*f* 的中下部；而中文大概就汉字中下部，不太准确，我没深入了解，有兴趣可以网上了解。\n   \n### align-content  \n`align-content`属性规定了多条主轴的情况下(只有`item`换行了，才会产生多条主轴)，这些主轴作为一个整体在他们的排列方向中的排列方式；注意：只有一条主轴(`item`不换行)不生效\n\n```css  \nalign-content: stretch(默认) | center | flex-start | flex-end | space-between | space-around\n```  \n**stretch**： 整体被拉伸以适应容器  \n**center**： 整体内各个轴紧靠，并且位于容器中心，头尾留白   \n**flex-start**： 整体内各个轴紧靠，并且位于容器头部    \n**flex-end**： 整体内各个轴紧靠，并且位于容器尾部  \n**space-between**： 整体平分，其中头尾和容器头尾紧靠，中间间隙平分  \n**space-around**：  整体平分，其中头尾和容器头尾距离为中间item的空隙的一半，中间间隙平分 \n\n## flex item属性  \n - order\n - flex-basis\n - flex-grow\n - flex-shrink\n - align-self  \n\n### order \n`order `属性规定了当前`flex item`排列前后顺序，越小排列越靠前，可以为负数\n\n```css  \norder: 0(默认值) | <number>  \n```      \n\n### flex-basis  \n`flex-basis `属性规定了当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的伸缩比例或大小\n\n```css  \nflex-basis: auto(默认) | number\n```  \n**number**： 可以是具体的像素值，如30px；也可以是auto大小百分比\n  \n### flex-grow    \n\n`flex-grow`属性 前提在所有项目以`flex-basis`的值排列完如有剩余空间，则规定当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的剩余空间份比例  \n\n```css  \nflex-grow: 0(默认值) | <number>;\n```  \n**number**：当剩余空间足够时，如果值为`1`那么高度(宽度)`放大剩余空间1份`，如果只有一个元素设置了此属性，那么剩余全部全部分给他；如果多个元素设置了此属性，比如`a:1` `b:2` `c:3`则会把剩余空间分成`6份`，a在本身的大小基础上增加剩余空间的`1/6份` a则是`2/6份` c则是`3/6份`，如果剩余空间不足，则取`剩余空间最大值`，不支持负数\n \n### flex-shrink    \n\n`flex-shrink`属性规定了当剩余空间不足时候，当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的缩小超出空间份比例，和上面的`flex-grow`是相反的，一个放大，一个缩小\n\n```css  \nflex-shrink: 1(默认值) | <number>;\n``` \n**number**：当剩余空间不足时，默认按照比例1缩小，如果值为`2`那么高度(宽度)`缩小超出空间2份`\n  \n### align-self     \n\n`flex-shrink`属性规定当前`flex item`作为一个整体在`flex`容器在副轴(非主轴，和`justify-content`相反)上的排列方式    \n\n>注意：这个属性和`align-item`的区别是`align-item`影响全部`flex item`，而`align-self`只影响当前`flex item`  \n\n```css  \nalign-self: auto(默认值) | stretch | center | flex-start | flex-end | baseline\n``` \n**auto**：继承父亲`align-item`的`value`  \n**stretch**： 占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效  \n**center**： 位于主轴中心   \n**flex-start**： 位于主轴开头    \n**flex-end**： 位于主轴结尾  \n**baseline**： 位于`item`中第一行文字 *基线* 对齐  \n     \n## 扩展一道面试题  \n#### 一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：  \n  \n```html \n<div class='flex2'>\n\t<p>1</p>\n\t<p>2</p>\n</div>\n```  \n\n```css\ndiv.flex2{\n\tdisplay:flex;\n\tborder:1px solid red;\n\twidth:100%;\n\theight:300px;\n}\n.flex2 p{\n\twidth:100px;\n\theight:100px;\n\tbackground-color: skyblue;\n\tline-height: 100px;\n\ttext-align: center;\n\tfont-size: 80px;\n\tborder:1px solid blue;\n}\n.flex2 p:nth-child(1){\n\twidth:200px;// 左侧元素固定为200px宽\n}\n.flex2 p:nth-child(2){\n\tflex-grow:1; // 右侧元素自适应\n}\n```","source":"_posts/flex布局.md","raw":"---\ntitle: flex布局介绍\ndate: 2020/10/15 14:03:49\ntags: [css]\n---\n\n## flex布局概念  \n> `flex`布局通常被叫做`flex box`，也叫`弹性盒子`或`容器`，是一种一维的`布局模型`，它能子元素(`flex item`)之间提供了强大的空间分布和对齐能力。   \n   \n![v2-54a0fc96ef4f455aefb8ee4bc133291b_720w.png](./flex布局/WBQ8RSuH7norCs4.png)    \n\n`flex容器`中存在两个轴，一个`水平方向`main axis，一个`竖直方向`cross axis，这是`flex`布局最重要的点，内部元素`flex item`都是根据这个轴来排列对齐的。  \n\n## flex布局好处    \n在一个`html元素`和内部`多个子元`的组合中。要实现子元素有序的，高度自定义的布局，在传统布局方式中，会使用`position`，`float`方式实现，比如多个子元素在父元素中`垂直水平居中`，比较困难。这个时候就可以用`flex`布局，只需要简单几句代码就可以优雅的实现。    \n\n## flex容器属性    \n> 设置一个盒子为`flex`容器，首先设置`display: flex`;  \n\n - **flex-direction**\n - **flex-wrap**\n - **justify-content**\n - **align-items**\n - **align-content**  \n \n### flex-direction   \n`flex-direction`属性规定所有`flex item`在`flex`容器从 **第一个元素** 开始的排列方式\n  \n```css  \nflex-direction: row(默认) | row-reverse | column | column-reverse\n```  \n**row**： 从左往右水平展示    \n**row-reverse**： 从右向左(反向)水平展示    \n**column**： 从上往下垂直展示  \n**column-reverse**： 从下往上(反向)垂直展示\n\n### flex-wrap   \n`flex-wrap`属性规定`flex`容器内所有`flex item`总宽度超出`flex`容器时换行方式    \n\n```css  \nflex-wrap: nowrap(默认) | wrap | wrap-reverse\n```  \n**nowrap**： 不换行，只展示一行。如果容器不够宽，平均缩小每个`item`的宽度  \n**wrap**： 换行，向下换行  \n**wrap-reverse**： 以相反方向换行，向上换行\n   \n### justify-content  \n`justify-content`属性规定所有`flex item`作为一个整体在`flex`容器在主轴(默认为水平轴，通过`flex-direcation`设置)上的排列方式\n\n```css  \njustify-content: flex-start(默认值) | flex-end | center | space-between | space-around\n```  \n**flex-start**： 整体位于容器开头  \n**flex-end**： 整体位于容器结尾  \n**center**： 整体位于容器中心  \n**space-between**： 每个`flex item`平均分布在容器内； `第一个item`和`容器开头`，`最后一个item`和`容器结尾`都无间距  \n**space-around**： 每个`flex item`平均分布在容器内， `第一个item`和`容器开头`，`最后一个item`和`容器结尾`的间距都为`每个item`间距的一半    \n\n### align-items \n`align-items`属性规定所有`flex item`作为一个整体在`flex`容器在副轴(非主轴，和`justify-content`相反)上的排列方式\n\n```css  \nalign-items: stretch(默认值) | center | flex-start | flex-end | baseline\n```  \n**stretch**： 整体占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效  \n**center**： 整体位于主轴中心   \n**flex-start**： 整体位于主轴开头    \n**flex-end**： 整体位于主轴结尾  \n**baseline**： 主轴位于`item`中第一行文字 *基线* 对齐    \n\n> 基线的概念：英文中大概就是一个小写字母 *x* 的最底部，*f* 的中下部；而中文大概就汉字中下部，不太准确，我没深入了解，有兴趣可以网上了解。\n   \n### align-content  \n`align-content`属性规定了多条主轴的情况下(只有`item`换行了，才会产生多条主轴)，这些主轴作为一个整体在他们的排列方向中的排列方式；注意：只有一条主轴(`item`不换行)不生效\n\n```css  \nalign-content: stretch(默认) | center | flex-start | flex-end | space-between | space-around\n```  \n**stretch**： 整体被拉伸以适应容器  \n**center**： 整体内各个轴紧靠，并且位于容器中心，头尾留白   \n**flex-start**： 整体内各个轴紧靠，并且位于容器头部    \n**flex-end**： 整体内各个轴紧靠，并且位于容器尾部  \n**space-between**： 整体平分，其中头尾和容器头尾紧靠，中间间隙平分  \n**space-around**：  整体平分，其中头尾和容器头尾距离为中间item的空隙的一半，中间间隙平分 \n\n## flex item属性  \n - order\n - flex-basis\n - flex-grow\n - flex-shrink\n - align-self  \n\n### order \n`order `属性规定了当前`flex item`排列前后顺序，越小排列越靠前，可以为负数\n\n```css  \norder: 0(默认值) | <number>  \n```      \n\n### flex-basis  \n`flex-basis `属性规定了当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的伸缩比例或大小\n\n```css  \nflex-basis: auto(默认) | number\n```  \n**number**： 可以是具体的像素值，如30px；也可以是auto大小百分比\n  \n### flex-grow    \n\n`flex-grow`属性 前提在所有项目以`flex-basis`的值排列完如有剩余空间，则规定当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的剩余空间份比例  \n\n```css  \nflex-grow: 0(默认值) | <number>;\n```  \n**number**：当剩余空间足够时，如果值为`1`那么高度(宽度)`放大剩余空间1份`，如果只有一个元素设置了此属性，那么剩余全部全部分给他；如果多个元素设置了此属性，比如`a:1` `b:2` `c:3`则会把剩余空间分成`6份`，a在本身的大小基础上增加剩余空间的`1/6份` a则是`2/6份` c则是`3/6份`，如果剩余空间不足，则取`剩余空间最大值`，不支持负数\n \n### flex-shrink    \n\n`flex-shrink`属性规定了当剩余空间不足时候，当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的缩小超出空间份比例，和上面的`flex-grow`是相反的，一个放大，一个缩小\n\n```css  \nflex-shrink: 1(默认值) | <number>;\n``` \n**number**：当剩余空间不足时，默认按照比例1缩小，如果值为`2`那么高度(宽度)`缩小超出空间2份`\n  \n### align-self     \n\n`flex-shrink`属性规定当前`flex item`作为一个整体在`flex`容器在副轴(非主轴，和`justify-content`相反)上的排列方式    \n\n>注意：这个属性和`align-item`的区别是`align-item`影响全部`flex item`，而`align-self`只影响当前`flex item`  \n\n```css  \nalign-self: auto(默认值) | stretch | center | flex-start | flex-end | baseline\n``` \n**auto**：继承父亲`align-item`的`value`  \n**stretch**： 占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效  \n**center**： 位于主轴中心   \n**flex-start**： 位于主轴开头    \n**flex-end**： 位于主轴结尾  \n**baseline**： 位于`item`中第一行文字 *基线* 对齐  \n     \n## 扩展一道面试题  \n#### 一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：  \n  \n```html \n<div class='flex2'>\n\t<p>1</p>\n\t<p>2</p>\n</div>\n```  \n\n```css\ndiv.flex2{\n\tdisplay:flex;\n\tborder:1px solid red;\n\twidth:100%;\n\theight:300px;\n}\n.flex2 p{\n\twidth:100px;\n\theight:100px;\n\tbackground-color: skyblue;\n\tline-height: 100px;\n\ttext-align: center;\n\tfont-size: 80px;\n\tborder:1px solid blue;\n}\n.flex2 p:nth-child(1){\n\twidth:200px;// 左侧元素固定为200px宽\n}\n.flex2 p:nth-child(2){\n\tflex-grow:1; // 右侧元素自适应\n}\n```","slug":"flex布局","published":1,"updated":"2021-10-22T09:38:36.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqi000ch7vm5lp89zrw","content":"<h2 id=\"flex布局概念\"><a href=\"#flex布局概念\" class=\"headerlink\" title=\"flex布局概念\"></a>flex布局概念</h2><blockquote>\n<p><code>flex</code>布局通常被叫做<code>flex box</code>，也叫<code>弹性盒子</code>或<code>容器</code>，是一种一维的<code>布局模型</code>，它能子元素(<code>flex item</code>)之间提供了强大的空间分布和对齐能力。   </p>\n</blockquote>\n<p><img src=\"/2020/10/15/flex%E5%B8%83%E5%B1%80/WBQ8RSuH7norCs4.png\" alt=\"v2-54a0fc96ef4f455aefb8ee4bc133291b_720w.png\">    </p>\n<p><code>flex容器</code>中存在两个轴，一个<code>水平方向</code>main axis，一个<code>竖直方向</code>cross axis，这是<code>flex</code>布局最重要的点，内部元素<code>flex item</code>都是根据这个轴来排列对齐的。  </p>\n<h2 id=\"flex布局好处\"><a href=\"#flex布局好处\" class=\"headerlink\" title=\"flex布局好处\"></a>flex布局好处</h2><p>在一个<code>html元素</code>和内部<code>多个子元</code>的组合中。要实现子元素有序的，高度自定义的布局，在传统布局方式中，会使用<code>position</code>，<code>float</code>方式实现，比如多个子元素在父元素中<code>垂直水平居中</code>，比较困难。这个时候就可以用<code>flex</code>布局，只需要简单几句代码就可以优雅的实现。    </p>\n<h2 id=\"flex容器属性\"><a href=\"#flex容器属性\" class=\"headerlink\" title=\"flex容器属性\"></a>flex容器属性</h2><blockquote>\n<p>设置一个盒子为<code>flex</code>容器，首先设置<code>display: flex</code>;  </p>\n</blockquote>\n<ul>\n<li><strong>flex-direction</strong></li>\n<li><strong>flex-wrap</strong></li>\n<li><strong>justify-content</strong></li>\n<li><strong>align-items</strong></li>\n<li><strong>align-content</strong>  </li>\n</ul>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p><code>flex-direction</code>属性规定所有<code>flex item</code>在<code>flex</code>容器从 <strong>第一个元素</strong> 开始的排列方式</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> <span class=\"token function\">row</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | row-reverse | column | column-reverse\n```  \n**row**： 从左往右水平展示    \n**row-reverse**： 从右向左<span class=\"token punctuation\">(</span>反向<span class=\"token punctuation\">)</span>水平展示    \n**column**： 从上往下垂直展示  \n**column-reverse**： 从下往上<span class=\"token punctuation\">(</span>反向<span class=\"token punctuation\">)</span>垂直展示\n\n### flex-wrap   \n`flex-wrap`属性规定`flex`容器内所有`flex item`总宽度超出`flex`容器时换行方式    \n\n```css  \n<span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> <span class=\"token function\">nowrap</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | wrap | wrap-reverse\n```  \n**nowrap**： 不换行，只展示一行。如果容器不够宽，平均缩小每个`item`的宽度  \n**wrap**： 换行，向下换行  \n**wrap-reverse**： 以相反方向换行，向上换行\n   \n### justify-content  \n`justify-content`属性规定所有`flex item`作为一个整体在`flex`容器在主轴<span class=\"token punctuation\">(</span>默认为水平轴，通过`flex-direcation`设置<span class=\"token punctuation\">)</span>上的排列方式\n\n```css  \n<span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">flex-start</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | flex-end | center | space-between | space-around\n```  \n**flex-start**： 整体位于容器开头  \n**flex-end**： 整体位于容器结尾  \n**center**： 整体位于容器中心  \n**space-between**： 每个`flex item`平均分布在容器内； `第一个item`和`容器开头`，`最后一个item`和`容器结尾`都无间距  \n**space-around**： 每个`flex item`平均分布在容器内， `第一个item`和`容器开头`，`最后一个item`和`容器结尾`的间距都为`每个item`间距的一半    \n\n### align-items \n`align-items`属性规定所有`flex item`作为一个整体在`flex`容器在副轴<span class=\"token punctuation\">(</span>非主轴，和`justify-content`相反<span class=\"token punctuation\">)</span>上的排列方式\n\n```css  \n<span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> <span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | center | flex-start | flex-end | baseline\n```  \n**stretch**： 整体占满整个主轴的高度<span class=\"token punctuation\">,</span> 前提必须是你没有设置item的高度<span class=\"token punctuation\">(</span>宽度<span class=\"token punctuation\">)</span>，否则不生效  \n**center**： 整体位于主轴中心   \n**flex-start**： 整体位于主轴开头    \n**flex-end**： 整体位于主轴结尾  \n**baseline**： 主轴位于`item`中第一行文字 *基线* 对齐    \n\n> 基线的概念：英文中大概就是一个小写字母 *x* 的最底部，*f* 的中下部；而中文大概就汉字中下部，不太准确，我没深入了解，有兴趣可以网上了解。\n   \n### align-content  \n`align-content`属性规定了多条主轴的情况下<span class=\"token punctuation\">(</span>只有`item`换行了，才会产生多条主轴<span class=\"token punctuation\">)</span>，这些主轴作为一个整体在他们的排列方向中的排列方式；注意：只有一条主轴<span class=\"token punctuation\">(</span>`item`不换行<span class=\"token punctuation\">)</span>不生效\n\n```css  \n<span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | center | flex-start | flex-end | space-between | space-around\n```  \n**stretch**： 整体被拉伸以适应容器  \n**center**： 整体内各个轴紧靠，并且位于容器中心，头尾留白   \n**flex-start**： 整体内各个轴紧靠，并且位于容器头部    \n**flex-end**： 整体内各个轴紧靠，并且位于容器尾部  \n**space-between**： 整体平分，其中头尾和容器头尾紧靠，中间间隙平分  \n**space-around**：  整体平分，其中头尾和容器头尾距离为中间item的空隙的一半，中间间隙平分 \n\n## flex item属性  \n - order\n - flex-basis\n - flex-grow\n - flex-shrink\n - align-self  \n\n### order \n`order `属性规定了当前`flex item`排列前后顺序，越小排列越靠前，可以为负数\n\n```css  \n<span class=\"token property\">order</span><span class=\"token punctuation\">:</span> <span class=\"token function\">0</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number>  \n```      \n\n### flex-basis  \n`flex-basis `属性规定了当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的伸缩比例或大小\n\n```css  \n<span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | number\n```  \n**number**： 可以是具体的像素值，如30px；也可以是auto大小百分比\n  \n### flex-grow    \n\n`flex-grow`属性 前提在所有项目以`flex-basis`的值排列完如有剩余空间，则规定当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的剩余空间份比例  \n\n```css  \n<span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">0</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number><span class=\"token punctuation\">;</span>\n```  \n**number**：当剩余空间足够时，如果值为`1`那么高度<span class=\"token punctuation\">(</span>宽度<span class=\"token punctuation\">)</span>`放大剩余空间1份`，如果只有一个元素设置了此属性，那么剩余全部全部分给他；如果多个元素设置了此属性，比如`<span class=\"token property\">a</span><span class=\"token punctuation\">:</span>1` `<span class=\"token property\">b</span><span class=\"token punctuation\">:</span>2` `<span class=\"token property\">c</span><span class=\"token punctuation\">:</span>3`则会把剩余空间分成`6份`，a在本身的大小基础上增加剩余空间的`1/6份` a则是`2/6份` c则是`3/6份`，如果剩余空间不足，则取`剩余空间最大值`，不支持负数\n \n### flex-shrink    \n\n`flex-shrink`属性规定了当剩余空间不足时候，当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的缩小超出空间份比例，和上面的`flex-grow`是相反的，一个放大，一个缩小\n\n```css  \n<span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> <span class=\"token function\">1</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>number</strong>：当剩余空间不足时，默认按照比例1缩小，如果值为<code>2</code>那么高度(宽度)<code>缩小超出空间2份</code></p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p><code>flex-shrink</code>属性规定当前<code>flex item</code>作为一个整体在<code>flex</code>容器在副轴(非主轴，和<code>justify-content</code>相反)上的排列方式    </p>\n<blockquote>\n<p>注意：这个属性和<code>align-item</code>的区别是<code>align-item</code>影响全部<code>flex item</code>，而<code>align-self</code>只影响当前<code>flex item</code>  </p>\n</blockquote>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | stretch | center | flex-start | flex-end | baseline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>auto</strong>：继承父亲<code>align-item</code>的<code>value</code><br><strong>stretch</strong>： 占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效<br><strong>center</strong>： 位于主轴中心<br><strong>flex-start</strong>： 位于主轴开头<br><strong>flex-end</strong>： 位于主轴结尾<br><strong>baseline</strong>： 位于<code>item</code>中第一行文字 <em>基线</em> 对齐  </p>\n<h2 id=\"扩展一道面试题\"><a href=\"#扩展一道面试题\" class=\"headerlink\" title=\"扩展一道面试题\"></a>扩展一道面试题</h2><h4 id=\"一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\"><a href=\"#一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\" class=\"headerlink\" title=\"一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\"></a>一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>flex2<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n```  \n\n```css\ndiv.flex2&#123;\n\tdisplay:flex;\n\tborder:1px solid red;\n\twidth:100%;\n\theight:300px;\n&#125;\n.flex2 p&#123;\n\twidth:100px;\n\theight:100px;\n\tbackground-color: skyblue;\n\tline-height: 100px;\n\ttext-align: center;\n\tfont-size: 80px;\n\tborder:1px solid blue;\n&#125;\n.flex2 p:nth-child(1)&#123;\n\twidth:200px;// 左侧元素固定为200px宽\n&#125;\n.flex2 p:nth-child(2)&#123;\n\tflex-grow:1; // 右侧元素自适应\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"flex布局概念\"><a href=\"#flex布局概念\" class=\"headerlink\" title=\"flex布局概念\"></a>flex布局概念</h2><blockquote>\n<p><code>flex</code>布局通常被叫做<code>flex box</code>，也叫<code>弹性盒子</code>或<code>容器</code>，是一种一维的<code>布局模型</code>，它能子元素(<code>flex item</code>)之间提供了强大的空间分布和对齐能力。   </p>\n</blockquote>\n<p><img src=\"/2020/10/15/flex%E5%B8%83%E5%B1%80/WBQ8RSuH7norCs4.png\" alt=\"v2-54a0fc96ef4f455aefb8ee4bc133291b_720w.png\">    </p>\n<p><code>flex容器</code>中存在两个轴，一个<code>水平方向</code>main axis，一个<code>竖直方向</code>cross axis，这是<code>flex</code>布局最重要的点，内部元素<code>flex item</code>都是根据这个轴来排列对齐的。  </p>\n<h2 id=\"flex布局好处\"><a href=\"#flex布局好处\" class=\"headerlink\" title=\"flex布局好处\"></a>flex布局好处</h2><p>在一个<code>html元素</code>和内部<code>多个子元</code>的组合中。要实现子元素有序的，高度自定义的布局，在传统布局方式中，会使用<code>position</code>，<code>float</code>方式实现，比如多个子元素在父元素中<code>垂直水平居中</code>，比较困难。这个时候就可以用<code>flex</code>布局，只需要简单几句代码就可以优雅的实现。    </p>\n<h2 id=\"flex容器属性\"><a href=\"#flex容器属性\" class=\"headerlink\" title=\"flex容器属性\"></a>flex容器属性</h2><blockquote>\n<p>设置一个盒子为<code>flex</code>容器，首先设置<code>display: flex</code>;  </p>\n</blockquote>\n<ul>\n<li><strong>flex-direction</strong></li>\n<li><strong>flex-wrap</strong></li>\n<li><strong>justify-content</strong></li>\n<li><strong>align-items</strong></li>\n<li><strong>align-content</strong>  </li>\n</ul>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p><code>flex-direction</code>属性规定所有<code>flex item</code>在<code>flex</code>容器从 <strong>第一个元素</strong> 开始的排列方式</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> <span class=\"token function\">row</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | row-reverse | column | column-reverse\n```  \n**row**： 从左往右水平展示    \n**row-reverse**： 从右向左<span class=\"token punctuation\">(</span>反向<span class=\"token punctuation\">)</span>水平展示    \n**column**： 从上往下垂直展示  \n**column-reverse**： 从下往上<span class=\"token punctuation\">(</span>反向<span class=\"token punctuation\">)</span>垂直展示\n\n### flex-wrap   \n`flex-wrap`属性规定`flex`容器内所有`flex item`总宽度超出`flex`容器时换行方式    \n\n```css  \n<span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> <span class=\"token function\">nowrap</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | wrap | wrap-reverse\n```  \n**nowrap**： 不换行，只展示一行。如果容器不够宽，平均缩小每个`item`的宽度  \n**wrap**： 换行，向下换行  \n**wrap-reverse**： 以相反方向换行，向上换行\n   \n### justify-content  \n`justify-content`属性规定所有`flex item`作为一个整体在`flex`容器在主轴<span class=\"token punctuation\">(</span>默认为水平轴，通过`flex-direcation`设置<span class=\"token punctuation\">)</span>上的排列方式\n\n```css  \n<span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">flex-start</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | flex-end | center | space-between | space-around\n```  \n**flex-start**： 整体位于容器开头  \n**flex-end**： 整体位于容器结尾  \n**center**： 整体位于容器中心  \n**space-between**： 每个`flex item`平均分布在容器内； `第一个item`和`容器开头`，`最后一个item`和`容器结尾`都无间距  \n**space-around**： 每个`flex item`平均分布在容器内， `第一个item`和`容器开头`，`最后一个item`和`容器结尾`的间距都为`每个item`间距的一半    \n\n### align-items \n`align-items`属性规定所有`flex item`作为一个整体在`flex`容器在副轴<span class=\"token punctuation\">(</span>非主轴，和`justify-content`相反<span class=\"token punctuation\">)</span>上的排列方式\n\n```css  \n<span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> <span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | center | flex-start | flex-end | baseline\n```  \n**stretch**： 整体占满整个主轴的高度<span class=\"token punctuation\">,</span> 前提必须是你没有设置item的高度<span class=\"token punctuation\">(</span>宽度<span class=\"token punctuation\">)</span>，否则不生效  \n**center**： 整体位于主轴中心   \n**flex-start**： 整体位于主轴开头    \n**flex-end**： 整体位于主轴结尾  \n**baseline**： 主轴位于`item`中第一行文字 *基线* 对齐    \n\n> 基线的概念：英文中大概就是一个小写字母 *x* 的最底部，*f* 的中下部；而中文大概就汉字中下部，不太准确，我没深入了解，有兴趣可以网上了解。\n   \n### align-content  \n`align-content`属性规定了多条主轴的情况下<span class=\"token punctuation\">(</span>只有`item`换行了，才会产生多条主轴<span class=\"token punctuation\">)</span>，这些主轴作为一个整体在他们的排列方向中的排列方式；注意：只有一条主轴<span class=\"token punctuation\">(</span>`item`不换行<span class=\"token punctuation\">)</span>不生效\n\n```css  \n<span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | center | flex-start | flex-end | space-between | space-around\n```  \n**stretch**： 整体被拉伸以适应容器  \n**center**： 整体内各个轴紧靠，并且位于容器中心，头尾留白   \n**flex-start**： 整体内各个轴紧靠，并且位于容器头部    \n**flex-end**： 整体内各个轴紧靠，并且位于容器尾部  \n**space-between**： 整体平分，其中头尾和容器头尾紧靠，中间间隙平分  \n**space-around**：  整体平分，其中头尾和容器头尾距离为中间item的空隙的一半，中间间隙平分 \n\n## flex item属性  \n - order\n - flex-basis\n - flex-grow\n - flex-shrink\n - align-self  \n\n### order \n`order `属性规定了当前`flex item`排列前后顺序，越小排列越靠前，可以为负数\n\n```css  \n<span class=\"token property\">order</span><span class=\"token punctuation\">:</span> <span class=\"token function\">0</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number>  \n```      \n\n### flex-basis  \n`flex-basis `属性规定了当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的伸缩比例或大小\n\n```css  \n<span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | number\n```  \n**number**： 可以是具体的像素值，如30px；也可以是auto大小百分比\n  \n### flex-grow    \n\n`flex-grow`属性 前提在所有项目以`flex-basis`的值排列完如有剩余空间，则规定当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的剩余空间份比例  \n\n```css  \n<span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">0</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number><span class=\"token punctuation\">;</span>\n```  \n**number**：当剩余空间足够时，如果值为`1`那么高度<span class=\"token punctuation\">(</span>宽度<span class=\"token punctuation\">)</span>`放大剩余空间1份`，如果只有一个元素设置了此属性，那么剩余全部全部分给他；如果多个元素设置了此属性，比如`<span class=\"token property\">a</span><span class=\"token punctuation\">:</span>1` `<span class=\"token property\">b</span><span class=\"token punctuation\">:</span>2` `<span class=\"token property\">c</span><span class=\"token punctuation\">:</span>3`则会把剩余空间分成`6份`，a在本身的大小基础上增加剩余空间的`1/6份` a则是`2/6份` c则是`3/6份`，如果剩余空间不足，则取`剩余空间最大值`，不支持负数\n \n### flex-shrink    \n\n`flex-shrink`属性规定了当剩余空间不足时候，当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的缩小超出空间份比例，和上面的`flex-grow`是相反的，一个放大，一个缩小\n\n```css  \n<span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> <span class=\"token function\">1</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>number</strong>：当剩余空间不足时，默认按照比例1缩小，如果值为<code>2</code>那么高度(宽度)<code>缩小超出空间2份</code></p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p><code>flex-shrink</code>属性规定当前<code>flex item</code>作为一个整体在<code>flex</code>容器在副轴(非主轴，和<code>justify-content</code>相反)上的排列方式    </p>\n<blockquote>\n<p>注意：这个属性和<code>align-item</code>的区别是<code>align-item</code>影响全部<code>flex item</code>，而<code>align-self</code>只影响当前<code>flex item</code>  </p>\n</blockquote>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | stretch | center | flex-start | flex-end | baseline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>auto</strong>：继承父亲<code>align-item</code>的<code>value</code><br><strong>stretch</strong>： 占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效<br><strong>center</strong>： 位于主轴中心<br><strong>flex-start</strong>： 位于主轴开头<br><strong>flex-end</strong>： 位于主轴结尾<br><strong>baseline</strong>： 位于<code>item</code>中第一行文字 <em>基线</em> 对齐  </p>\n<h2 id=\"扩展一道面试题\"><a href=\"#扩展一道面试题\" class=\"headerlink\" title=\"扩展一道面试题\"></a>扩展一道面试题</h2><h4 id=\"一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\"><a href=\"#一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\" class=\"headerlink\" title=\"一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\"></a>一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>flex2<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n```  \n\n```css\ndiv.flex2&#123;\n\tdisplay:flex;\n\tborder:1px solid red;\n\twidth:100%;\n\theight:300px;\n&#125;\n.flex2 p&#123;\n\twidth:100px;\n\theight:100px;\n\tbackground-color: skyblue;\n\tline-height: 100px;\n\ttext-align: center;\n\tfont-size: 80px;\n\tborder:1px solid blue;\n&#125;\n.flex2 p:nth-child(1)&#123;\n\twidth:200px;// 左侧元素固定为200px宽\n&#125;\n.flex2 p:nth-child(2)&#123;\n\tflex-grow:1; // 右侧元素自适应\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"promsie简单实现","date":"2020-10-30T08:59:53.000Z","_content":"\n## promise类\n\n```javascript\nclass Pro {\n  callbacks = [];\n  state = 'pending';\n  value = null;\n  constructor(fn) {\n      // 初始化，把resolve作为参数传入，等待调用\n      fn(this.resolve.bind(this)); \n  }\n  // callback为回调，先注册，也就是放入callbacks数组中\n  then(callback) {\n    if(this.state === 'pending'){\n      this.callbacks.push(callback);\n    }else{\n      // 由于state不是pending, 遵循promise状态只能改一次的要求，我们直接操作回调传入参数执行\n      callback(this.value)\n    }\n    return this;\n  }\n  // resolve也就是fn的第一次参数，循环执行所有callback\n  resolve(value) {\n    this.state = 'fulfilled';\n    // setTimeout使内部变成异步，在同步执行完最后执行这里，处理fn是同步的情况下then中的回调函数已经注册，然后在这里去执行，不会出现callbacks是空数组的情况\n    setTimeout(() => {\n      this.value= value;\n      this.callbacks.forEach(callback => callback(value));\n    });\n  }\n}\n```\n## 使用  \n\n```javascript\nnew Pro(resolve => {\n  setTimeout(() => {\n      console.log(0);\n      resolve('resolve');\n  }, 2000);\n}).then((tip) => {\n  console.log(1)\n  console.log(tip);\n}).then((tip)=>{\n  console.log(2)\n  console.log(tip)\n})\n```\n\n## promise.all 实现\n```javascript\nPromise.prototype.all = function(promises) {\n  let results = [];\n  let promiseCount = 0;\n  let promisesLength = promises.length;\n  return new Promise(function(resolve, reject) {\n    for (let item of promises) {\n      // 执行每个item\n      Promise.resolve(item).then(function(res) {\n        promiseCount++;\n        // 按照顺序插入结果\n        results[i] = res;\n        // 如果全部执行成功，返回成功\n        if (promiseCount === promisesLength) {\n          return resolve(results);\n        }\n      }, function(err) {\n        return reject(err);\n      });\n    }\n  });\n};\n```\n## promise.race 实现\n```javascript\nPromise.prototype.race = function(promises) {\n  return new Promise((resolve,reject) => {\n    for(let item of promises) {\n      Promise.resolve(item).then((res)=> {\n        return resolve(res)\n      }).catch((err)=> {\n        return reject(err)\n      })\n    }\n   })\n};\n```\n\n简单来说就是声明 promise 时，会执行 promise 第一个函数参数和 then 的参数函数。\n`then` 用来把回调传入 callback 数组中，相当于注册，规定好了 reslove 时，回调的执行，然后等待 resolve 调用，resolve 就会把 callback 数组中的函数全部执行\n - then 中 `return this`，用于实现 then 的链式调用\n - 如果 promise 是同步的，则执行 resolve 的时候 callback 还没注册\n","source":"_posts/promise简单实现.md","raw":"---\ntitle: promsie简单实现\ndate: 2020/10/30 16:59:53\ntags: [前端]\n---\n\n## promise类\n\n```javascript\nclass Pro {\n  callbacks = [];\n  state = 'pending';\n  value = null;\n  constructor(fn) {\n      // 初始化，把resolve作为参数传入，等待调用\n      fn(this.resolve.bind(this)); \n  }\n  // callback为回调，先注册，也就是放入callbacks数组中\n  then(callback) {\n    if(this.state === 'pending'){\n      this.callbacks.push(callback);\n    }else{\n      // 由于state不是pending, 遵循promise状态只能改一次的要求，我们直接操作回调传入参数执行\n      callback(this.value)\n    }\n    return this;\n  }\n  // resolve也就是fn的第一次参数，循环执行所有callback\n  resolve(value) {\n    this.state = 'fulfilled';\n    // setTimeout使内部变成异步，在同步执行完最后执行这里，处理fn是同步的情况下then中的回调函数已经注册，然后在这里去执行，不会出现callbacks是空数组的情况\n    setTimeout(() => {\n      this.value= value;\n      this.callbacks.forEach(callback => callback(value));\n    });\n  }\n}\n```\n## 使用  \n\n```javascript\nnew Pro(resolve => {\n  setTimeout(() => {\n      console.log(0);\n      resolve('resolve');\n  }, 2000);\n}).then((tip) => {\n  console.log(1)\n  console.log(tip);\n}).then((tip)=>{\n  console.log(2)\n  console.log(tip)\n})\n```\n\n## promise.all 实现\n```javascript\nPromise.prototype.all = function(promises) {\n  let results = [];\n  let promiseCount = 0;\n  let promisesLength = promises.length;\n  return new Promise(function(resolve, reject) {\n    for (let item of promises) {\n      // 执行每个item\n      Promise.resolve(item).then(function(res) {\n        promiseCount++;\n        // 按照顺序插入结果\n        results[i] = res;\n        // 如果全部执行成功，返回成功\n        if (promiseCount === promisesLength) {\n          return resolve(results);\n        }\n      }, function(err) {\n        return reject(err);\n      });\n    }\n  });\n};\n```\n## promise.race 实现\n```javascript\nPromise.prototype.race = function(promises) {\n  return new Promise((resolve,reject) => {\n    for(let item of promises) {\n      Promise.resolve(item).then((res)=> {\n        return resolve(res)\n      }).catch((err)=> {\n        return reject(err)\n      })\n    }\n   })\n};\n```\n\n简单来说就是声明 promise 时，会执行 promise 第一个函数参数和 then 的参数函数。\n`then` 用来把回调传入 callback 数组中，相当于注册，规定好了 reslove 时，回调的执行，然后等待 resolve 调用，resolve 就会把 callback 数组中的函数全部执行\n - then 中 `return this`，用于实现 then 的链式调用\n - 如果 promise 是同步的，则执行 resolve 的时候 callback 还没注册\n","slug":"promise简单实现","published":1,"updated":"2021-10-22T09:38:36.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqi000dh7vm5ski2k4b","content":"<h2 id=\"promise类\"><a href=\"#promise类\" class=\"headerlink\" title=\"promise类\"></a>promise类</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pro</span> <span class=\"token punctuation\">&#123;</span>\n  callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">;</span>\n  value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 初始化，把resolve作为参数传入，等待调用</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// callback为回调，先注册，也就是放入callbacks数组中</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 由于state不是pending, 遵循promise状态只能改一次的要求，我们直接操作回调传入参数执行</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// resolve也就是fn的第一次参数，循环执行所有callback</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setTimeout使内部变成异步，在同步执行完最后执行这里，处理fn是同步的情况下then中的回调函数已经注册，然后在这里去执行，不会出现callbacks是空数组的情况</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tip</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tip</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"promise-all-实现\"><a href=\"#promise-all-实现\" class=\"headerlink\" title=\"promise.all 实现\"></a>promise.all 实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promiseCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promisesLength <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 执行每个item</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        promiseCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 按照顺序插入结果</span>\n        results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果全部执行成功，返回成功</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promiseCount <span class=\"token operator\">===</span> promisesLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"promise-race-实现\"><a href=\"#promise-race-实现\" class=\"headerlink\" title=\"promise.race 实现\"></a>promise.race 实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">race</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>简单来说就是声明 promise 时，会执行 promise 第一个函数参数和 then 的参数函数。<br><code>then</code> 用来把回调传入 callback 数组中，相当于注册，规定好了 reslove 时，回调的执行，然后等待 resolve 调用，resolve 就会把 callback 数组中的函数全部执行</p>\n<ul>\n<li>then 中 <code>return this</code>，用于实现 then 的链式调用</li>\n<li>如果 promise 是同步的，则执行 resolve 的时候 callback 还没注册</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"promise类\"><a href=\"#promise类\" class=\"headerlink\" title=\"promise类\"></a>promise类</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pro</span> <span class=\"token punctuation\">&#123;</span>\n  callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">;</span>\n  value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 初始化，把resolve作为参数传入，等待调用</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// callback为回调，先注册，也就是放入callbacks数组中</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 由于state不是pending, 遵循promise状态只能改一次的要求，我们直接操作回调传入参数执行</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// resolve也就是fn的第一次参数，循环执行所有callback</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setTimeout使内部变成异步，在同步执行完最后执行这里，处理fn是同步的情况下then中的回调函数已经注册，然后在这里去执行，不会出现callbacks是空数组的情况</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tip</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tip</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"promise-all-实现\"><a href=\"#promise-all-实现\" class=\"headerlink\" title=\"promise.all 实现\"></a>promise.all 实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promiseCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promisesLength <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 执行每个item</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        promiseCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 按照顺序插入结果</span>\n        results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果全部执行成功，返回成功</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promiseCount <span class=\"token operator\">===</span> promisesLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"promise-race-实现\"><a href=\"#promise-race-实现\" class=\"headerlink\" title=\"promise.race 实现\"></a>promise.race 实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">race</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>简单来说就是声明 promise 时，会执行 promise 第一个函数参数和 then 的参数函数。<br><code>then</code> 用来把回调传入 callback 数组中，相当于注册，规定好了 reslove 时，回调的执行，然后等待 resolve 调用，resolve 就会把 callback 数组中的函数全部执行</p>\n<ul>\n<li>then 中 <code>return this</code>，用于实现 then 的链式调用</li>\n<li>如果 promise 是同步的，则执行 resolve 的时候 callback 还没注册</li>\n</ul>\n"},{"title":"js常用4种排序介绍","date":"2020-10-09T08:07:43.000Z","_content":"\n## 冒泡排序（Bubble sort）\n#### 原理和演示：  \n - 依次比较数组中相邻的每一对值，如果前面的值 **大于** 后面的值，则交换他们俩的位置。如果数组中`5`个数字(length为5)，由于比较 **两个一组** 的数字，那么只需要`4次`(length - 1)比较，就可以实现把数组中最大的一个数放到最后。 \n ```javascript\n  function bubbleSort(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n      if (arr[i] > arr[i+1]) {\n        let temp = arr[i];\n        arr[i] = arr[i+1];\n        arr[i+1] = temp;\n      }\n      console.log(`执行${i+1}次`)\n    }\n    return arr;\n  }\n ```\n - 通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，`j`对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数`- 1`也就是下面例子中的`- j`。\n \n\t```javascript\n\t function bubbleSort(arr) {\n\t  for(let j = 0; j < arr.length - 1; j++) {\n\t    for (let i = 0; i < arr.length - 1 - j; i++) {\n\t      if (arr[i] > arr[i+1]) {\n\t        let temp = arr[i];\n\t        arr[i] = arr[i+1];\n\t        arr[i+1] = temp;\n\t      }\n\t      console.log(`执行${i+1}次`)\n\t    }\n\t  }\n\t  return arr;\n\t}\n  ```\n\n - 两个变量互换值可以使用`es6`的解构语法，省去使用`temp`缓存，语法为`[a, b] = [b, a]`，即可交换`变量a`和`变量b`的值。复杂数据类型`Object`和`Array`都适用；如果第二个循环中的大小判断，一次都没有执行，说明当前这组数据是正序无需排序，用一个变量`isOk`标记下配合`break`，实现方法优化。  \n \n#### 完整代码：\n \n```javascript\n  function bubbleSort(arr) {\n    console.time('耗时');\n    for (let j = 0; j < arr.length - 1; j++) {\n      let isOk = true;\n      for (let i = 0; i < arr.length - 1 - j; i++) {\n        if (arr[i] > arr[i+1]) {\n          [arr[i], arr[i+1]] = [arr[i+1], arr[i]];\n          isOk = false;\n        }\n      }\n      if (isOk) {\n        break;\n      }\n    }\n    console.timeEnd('耗时');\n    return arr;\n  }\n```\n#### 冒泡排序动画演示：  \n![bubble sort.gif](./js常用4种排序介绍/KWrN6slZTEFAuhv.gif)  \n \n## 选择排序（Selection Sort）  \n#### 原理：  \n - 循环整个数组，找到**最小**的值，放在数组**第一位**(和第一位交换位置）。\n - 从数组**第二位**开始重新循环，依旧找到**最小**的值，放在数组第二位，重复此步骤，直到对比完最后一组数据。    \n \n#### 完整代码：    \n\n```javascript\nfunction selectionSort(arr) {\n  for (let i = 0; i < arr.length - 1; i++) { // arr.length - 1是因为假定数组中n个数，比较需要两个数，所以只需要比较n-1次\n    let minIndex = i; // 记录每次循环开始位置，等待和最小值交换位置\n    for (let j = i+1; j < arr.length; j++) { // j+1 是避免比较自身，j永远是i的后一项，让他们俩做比较\n      if (arr[j] < arr[minIndex]) { // 如果后面的值小于前面的值，需要调换他们俩位置\n        minIndex = j; // 保存最小值的下标\n      }\n    }\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]] // 使用es6的结构语法交换值，把最小值放到数组最前面\n  }\n  return arr;\n}\n```\n#### 选择排序动画演示：  \n![section sort.gif](./js常用4种排序介绍/ibLoIgDEnRJrUas.gif)\n\n## 插入排序（Insertion Sort）\n#### 原理：  \n- 将数组分成**两部分**，一部分为**已排序**(默认为数组第一个元素且只有这一个元素)，另一部分为**未排序**。\n- 依次从未排序数组中取值，和已排序中的值**依次做对**比，如果**未排序元素**比**已排序元素**中某个元素**小**，那就将**已排序元素**向**后移**一位，使他本来位置变成一个**空位**，再将**待排序数据**插入空位。   \n \n#### 完整代码：\n\n```javascript\nfunction insertionSort(arr) {\n  let len = arr.length\n  for (let i = 1; i < len; i++) { // 循环未排序部分, i=1而不是0是因为默认0项为已排序部分\n    let cur = i // 每次插入后，arr[i]会发生改变，先存下来\n    let j = i - 1\n    while (j >= 0) { // 循环已排序部分，默认数组第一项有且只有第一项，下标范围为(0 - (未排序元素下标-1))，也就是例子中的i-1\n      if (arr[cur] < arr[j]) { // 如果未排序元素比已排序元素小，\n        [arr[cur], arr[j]] = [arr[j], arr[cur]] // 交换\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      }\n      j--\n    }\n  }\n  return arr\n}\n```\n#### 插入排序动画演示：  \n![insertion sort.gif](./js常用4种排序介绍/5z82iWpVIJbLfu7.gif)    \n\n## 快速排序（Quick Sort）  \n#### 原理：\n - 选择数组中的一个元素作为**基准值**，用两个新数组**分别存储**原数组比基准值**大**的值，和**小**的值。  \n - 继续**递归处理**这两个新数组，最终用concat合并到一起，效果为：比基准值小的数组+基准值+比基准值小的数组。  \n   \n > 快速排序有其它种实现方法，这是一种简单的实现，非原地排序，由于新建了多个新的数组，会增加空间复杂度，好处再于非常容易理解，可读性强，适合面试手写代码。    \n \n#### 完整代码：  \n```javascript\nfunction quickSort(arr) { \n  if(arr.length <= 1) {return arr} // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i < len; i++) {\n    if(arr[i] < point) { // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    }else{\n      right.push(arr[i]) \n    }\n  }\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n}  \n```\n#### 快速排序动画演示：  \n![quick sort.gif](./js常用4种排序介绍/DzWckAlLmVU9JuN.gif)   \n\n<hr>     \n\n另外说一下，js的原生提供的 `sort` 排序方法原理：如果数组长度`小于10`，使用插入排序，否则使用快速排序。如其名，快速排序的性能还是很好的。\n\n<hr>\n\n本文动画参考：[掘金](https://juejin.im/post/6844903444365443080)    \n本文例子查看：[GitHub](https://github.com/codedance98/docs/tree/main/javascript_sort)","source":"_posts/js常用4种排序介绍.md","raw":"---\ntitle: js常用4种排序介绍\ndate: 2020/10/09 16:07:43\ntags: [前端]\n---\n\n## 冒泡排序（Bubble sort）\n#### 原理和演示：  \n - 依次比较数组中相邻的每一对值，如果前面的值 **大于** 后面的值，则交换他们俩的位置。如果数组中`5`个数字(length为5)，由于比较 **两个一组** 的数字，那么只需要`4次`(length - 1)比较，就可以实现把数组中最大的一个数放到最后。 \n ```javascript\n  function bubbleSort(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n      if (arr[i] > arr[i+1]) {\n        let temp = arr[i];\n        arr[i] = arr[i+1];\n        arr[i+1] = temp;\n      }\n      console.log(`执行${i+1}次`)\n    }\n    return arr;\n  }\n ```\n - 通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，`j`对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数`- 1`也就是下面例子中的`- j`。\n \n\t```javascript\n\t function bubbleSort(arr) {\n\t  for(let j = 0; j < arr.length - 1; j++) {\n\t    for (let i = 0; i < arr.length - 1 - j; i++) {\n\t      if (arr[i] > arr[i+1]) {\n\t        let temp = arr[i];\n\t        arr[i] = arr[i+1];\n\t        arr[i+1] = temp;\n\t      }\n\t      console.log(`执行${i+1}次`)\n\t    }\n\t  }\n\t  return arr;\n\t}\n  ```\n\n - 两个变量互换值可以使用`es6`的解构语法，省去使用`temp`缓存，语法为`[a, b] = [b, a]`，即可交换`变量a`和`变量b`的值。复杂数据类型`Object`和`Array`都适用；如果第二个循环中的大小判断，一次都没有执行，说明当前这组数据是正序无需排序，用一个变量`isOk`标记下配合`break`，实现方法优化。  \n \n#### 完整代码：\n \n```javascript\n  function bubbleSort(arr) {\n    console.time('耗时');\n    for (let j = 0; j < arr.length - 1; j++) {\n      let isOk = true;\n      for (let i = 0; i < arr.length - 1 - j; i++) {\n        if (arr[i] > arr[i+1]) {\n          [arr[i], arr[i+1]] = [arr[i+1], arr[i]];\n          isOk = false;\n        }\n      }\n      if (isOk) {\n        break;\n      }\n    }\n    console.timeEnd('耗时');\n    return arr;\n  }\n```\n#### 冒泡排序动画演示：  \n![bubble sort.gif](./js常用4种排序介绍/KWrN6slZTEFAuhv.gif)  \n \n## 选择排序（Selection Sort）  \n#### 原理：  \n - 循环整个数组，找到**最小**的值，放在数组**第一位**(和第一位交换位置）。\n - 从数组**第二位**开始重新循环，依旧找到**最小**的值，放在数组第二位，重复此步骤，直到对比完最后一组数据。    \n \n#### 完整代码：    \n\n```javascript\nfunction selectionSort(arr) {\n  for (let i = 0; i < arr.length - 1; i++) { // arr.length - 1是因为假定数组中n个数，比较需要两个数，所以只需要比较n-1次\n    let minIndex = i; // 记录每次循环开始位置，等待和最小值交换位置\n    for (let j = i+1; j < arr.length; j++) { // j+1 是避免比较自身，j永远是i的后一项，让他们俩做比较\n      if (arr[j] < arr[minIndex]) { // 如果后面的值小于前面的值，需要调换他们俩位置\n        minIndex = j; // 保存最小值的下标\n      }\n    }\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]] // 使用es6的结构语法交换值，把最小值放到数组最前面\n  }\n  return arr;\n}\n```\n#### 选择排序动画演示：  \n![section sort.gif](./js常用4种排序介绍/ibLoIgDEnRJrUas.gif)\n\n## 插入排序（Insertion Sort）\n#### 原理：  \n- 将数组分成**两部分**，一部分为**已排序**(默认为数组第一个元素且只有这一个元素)，另一部分为**未排序**。\n- 依次从未排序数组中取值，和已排序中的值**依次做对**比，如果**未排序元素**比**已排序元素**中某个元素**小**，那就将**已排序元素**向**后移**一位，使他本来位置变成一个**空位**，再将**待排序数据**插入空位。   \n \n#### 完整代码：\n\n```javascript\nfunction insertionSort(arr) {\n  let len = arr.length\n  for (let i = 1; i < len; i++) { // 循环未排序部分, i=1而不是0是因为默认0项为已排序部分\n    let cur = i // 每次插入后，arr[i]会发生改变，先存下来\n    let j = i - 1\n    while (j >= 0) { // 循环已排序部分，默认数组第一项有且只有第一项，下标范围为(0 - (未排序元素下标-1))，也就是例子中的i-1\n      if (arr[cur] < arr[j]) { // 如果未排序元素比已排序元素小，\n        [arr[cur], arr[j]] = [arr[j], arr[cur]] // 交换\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      }\n      j--\n    }\n  }\n  return arr\n}\n```\n#### 插入排序动画演示：  \n![insertion sort.gif](./js常用4种排序介绍/5z82iWpVIJbLfu7.gif)    \n\n## 快速排序（Quick Sort）  \n#### 原理：\n - 选择数组中的一个元素作为**基准值**，用两个新数组**分别存储**原数组比基准值**大**的值，和**小**的值。  \n - 继续**递归处理**这两个新数组，最终用concat合并到一起，效果为：比基准值小的数组+基准值+比基准值小的数组。  \n   \n > 快速排序有其它种实现方法，这是一种简单的实现，非原地排序，由于新建了多个新的数组，会增加空间复杂度，好处再于非常容易理解，可读性强，适合面试手写代码。    \n \n#### 完整代码：  \n```javascript\nfunction quickSort(arr) { \n  if(arr.length <= 1) {return arr} // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i < len; i++) {\n    if(arr[i] < point) { // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    }else{\n      right.push(arr[i]) \n    }\n  }\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n}  \n```\n#### 快速排序动画演示：  \n![quick sort.gif](./js常用4种排序介绍/DzWckAlLmVU9JuN.gif)   \n\n<hr>     \n\n另外说一下，js的原生提供的 `sort` 排序方法原理：如果数组长度`小于10`，使用插入排序，否则使用快速排序。如其名，快速排序的性能还是很好的。\n\n<hr>\n\n本文动画参考：[掘金](https://juejin.im/post/6844903444365443080)    \n本文例子查看：[GitHub](https://github.com/codedance98/docs/tree/main/javascript_sort)","slug":"js常用4种排序介绍","published":1,"updated":"2021-10-22T09:38:36.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqj000fh7vmdb237flh","content":"<h2 id=\"冒泡排序（Bubble-sort）\"><a href=\"#冒泡排序（Bubble-sort）\" class=\"headerlink\" title=\"冒泡排序（Bubble sort）\"></a>冒泡排序（Bubble sort）</h2><h4 id=\"原理和演示：\"><a href=\"#原理和演示：\" class=\"headerlink\" title=\"原理和演示：\"></a>原理和演示：</h4><ul>\n<li><p>依次比较数组中相邻的每一对值，如果前面的值 <strong>大于</strong> 后面的值，则交换他们俩的位置。如果数组中<code>5</code>个数字(length为5)，由于比较 <strong>两个一组</strong> 的数字，那么只需要<code>4次</code>(length - 1)比较，就可以实现把数组中最大的一个数放到最后。 </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，<code>j</code>对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数<code>- 1</code>也就是下面例子中的<code>- j</code>。</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>两个变量互换值可以使用<code>es6</code>的解构语法，省去使用<code>temp</code>缓存，语法为<code>[a, b] = [b, a]</code>，即可交换<code>变量a</code>和<code>变量b</code>的值。复杂数据类型<code>Object</code>和<code>Array</code>都适用；如果第二个循环中的大小判断，一次都没有执行，说明当前这组数据是正序无需排序，用一个变量<code>isOk</code>标记下配合<code>break</code>，实现方法优化。  </p>\n</li>\n</ul>\n<h4 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耗时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> isOk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        isOk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耗时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"冒泡排序动画演示：\"><a href=\"#冒泡排序动画演示：\" class=\"headerlink\" title=\"冒泡排序动画演示：\"></a>冒泡排序动画演示：</h4><p><img src=\"/2020/10/09/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/KWrN6slZTEFAuhv.gif\" alt=\"bubble sort.gif\">  </p>\n<h2 id=\"选择排序（Selection-Sort）\"><a href=\"#选择排序（Selection-Sort）\" class=\"headerlink\" title=\"选择排序（Selection Sort）\"></a>选择排序（Selection Sort）</h2><h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>循环整个数组，找到<strong>最小</strong>的值，放在数组<strong>第一位</strong>(和第一位交换位置）。</li>\n<li>从数组<strong>第二位</strong>开始重新循环，依旧找到<strong>最小</strong>的值，放在数组第二位，重复此步骤，直到对比完最后一组数据。    </li>\n</ul>\n<h4 id=\"完整代码：-1\"><a href=\"#完整代码：-1\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// arr.length - 1是因为假定数组中n个数，比较需要两个数，所以只需要比较n-1次</span>\n    <span class=\"token keyword\">let</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录每次循环开始位置，等待和最小值交换位置</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// j+1 是避免比较自身，j永远是i的后一项，让他们俩做比较</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果后面的值小于前面的值，需要调换他们俩位置</span>\n        minIndex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存最小值的下标</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 使用es6的结构语法交换值，把最小值放到数组最前面</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"选择排序动画演示：\"><a href=\"#选择排序动画演示：\" class=\"headerlink\" title=\"选择排序动画演示：\"></a>选择排序动画演示：</h4><p><img src=\"/2020/10/09/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/ibLoIgDEnRJrUas.gif\" alt=\"section sort.gif\"></p>\n<h2 id=\"插入排序（Insertion-Sort）\"><a href=\"#插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"插入排序（Insertion Sort）\"></a>插入排序（Insertion Sort）</h2><h4 id=\"原理：-1\"><a href=\"#原理：-1\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>将数组分成<strong>两部分</strong>，一部分为<strong>已排序</strong>(默认为数组第一个元素且只有这一个元素)，另一部分为<strong>未排序</strong>。</li>\n<li>依次从未排序数组中取值，和已排序中的值<strong>依次做对</strong>比，如果<strong>未排序元素</strong>比<strong>已排序元素</strong>中某个元素<strong>小</strong>，那就将<strong>已排序元素</strong>向<strong>后移</strong>一位，使他本来位置变成一个<strong>空位</strong>，再将<strong>待排序数据</strong>插入空位。   </li>\n</ul>\n<h4 id=\"完整代码：-2\"><a href=\"#完整代码：-2\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环未排序部分, i=1而不是0是因为默认0项为已排序部分</span>\n    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> i <span class=\"token comment\">// 每次插入后，arr[i]会发生改变，先存下来</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环已排序部分，默认数组第一项有且只有第一项，下标范围为(0 - (未排序元素下标-1))，也就是例子中的i-1</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果未排序元素比已排序元素小，</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 交换</span>\n        cur <span class=\"token operator\">=</span> j <span class=\"token comment\">// 交换后i值变了，那把交换后的i找回来就可以了</span>\n      <span class=\"token punctuation\">&#125;</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"插入排序动画演示：\"><a href=\"#插入排序动画演示：\" class=\"headerlink\" title=\"插入排序动画演示：\"></a>插入排序动画演示：</h4><p><img src=\"/2020/10/09/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/5z82iWpVIJbLfu7.gif\" alt=\"insertion sort.gif\">    </p>\n<h2 id=\"快速排序（Quick-Sort）\"><a href=\"#快速排序（Quick-Sort）\" class=\"headerlink\" title=\"快速排序（Quick Sort）\"></a>快速排序（Quick Sort）</h2><h4 id=\"原理：-2\"><a href=\"#原理：-2\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>选择数组中的一个元素作为<strong>基准值</strong>，用两个新数组<strong>分别存储</strong>原数组比基准值<strong>大</strong>的值，和<strong>小</strong>的值。  </li>\n<li>继续<strong>递归处理</strong>这两个新数组，最终用concat合并到一起，效果为：比基准值小的数组+基准值+比基准值小的数组。  </li>\n</ul>\n<blockquote>\n<p>快速排序有其它种实现方法，这是一种简单的实现，非原地排序，由于新建了多个新的数组，会增加空间复杂度，好处再于非常容易理解，可读性强，适合面试手写代码。    </p>\n</blockquote>\n<h4 id=\"完整代码：-3\"><a href=\"#完整代码：-3\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 递归边界条件</span>\n  <span class=\"token keyword\">let</span> pointIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在数组中间位置取一个基准点</span>\n  <span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pointIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 通过基准点找到这个值</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环数组，小于point的放在left中，大的放在right中</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 递归，让每一个left和right继续排序，直到left或right只有一项为止</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"快速排序动画演示：\"><a href=\"#快速排序动画演示：\" class=\"headerlink\" title=\"快速排序动画演示：\"></a>快速排序动画演示：</h4><p><img src=\"/2020/10/09/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/DzWckAlLmVU9JuN.gif\" alt=\"quick sort.gif\">   </p>\n<hr>     \n\n<p>另外说一下，js的原生提供的 <code>sort</code> 排序方法原理：如果数组长度<code>小于10</code>，使用插入排序，否则使用快速排序。如其名，快速排序的性能还是很好的。</p>\n<hr>\n\n<p>本文动画参考：<a href=\"https://juejin.im/post/6844903444365443080\">掘金</a><br>本文例子查看：<a href=\"https://github.com/codedance98/docs/tree/main/javascript_sort\">GitHub</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"冒泡排序（Bubble-sort）\"><a href=\"#冒泡排序（Bubble-sort）\" class=\"headerlink\" title=\"冒泡排序（Bubble sort）\"></a>冒泡排序（Bubble sort）</h2><h4 id=\"原理和演示：\"><a href=\"#原理和演示：\" class=\"headerlink\" title=\"原理和演示：\"></a>原理和演示：</h4><ul>\n<li><p>依次比较数组中相邻的每一对值，如果前面的值 <strong>大于</strong> 后面的值，则交换他们俩的位置。如果数组中<code>5</code>个数字(length为5)，由于比较 <strong>两个一组</strong> 的数字，那么只需要<code>4次</code>(length - 1)比较，就可以实现把数组中最大的一个数放到最后。 </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，<code>j</code>对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数<code>- 1</code>也就是下面例子中的<code>- j</code>。</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>两个变量互换值可以使用<code>es6</code>的解构语法，省去使用<code>temp</code>缓存，语法为<code>[a, b] = [b, a]</code>，即可交换<code>变量a</code>和<code>变量b</code>的值。复杂数据类型<code>Object</code>和<code>Array</code>都适用；如果第二个循环中的大小判断，一次都没有执行，说明当前这组数据是正序无需排序，用一个变量<code>isOk</code>标记下配合<code>break</code>，实现方法优化。  </p>\n</li>\n</ul>\n<h4 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耗时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> isOk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        isOk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耗时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"冒泡排序动画演示：\"><a href=\"#冒泡排序动画演示：\" class=\"headerlink\" title=\"冒泡排序动画演示：\"></a>冒泡排序动画演示：</h4><p><img src=\"/2020/10/09/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/KWrN6slZTEFAuhv.gif\" alt=\"bubble sort.gif\">  </p>\n<h2 id=\"选择排序（Selection-Sort）\"><a href=\"#选择排序（Selection-Sort）\" class=\"headerlink\" title=\"选择排序（Selection Sort）\"></a>选择排序（Selection Sort）</h2><h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>循环整个数组，找到<strong>最小</strong>的值，放在数组<strong>第一位</strong>(和第一位交换位置）。</li>\n<li>从数组<strong>第二位</strong>开始重新循环，依旧找到<strong>最小</strong>的值，放在数组第二位，重复此步骤，直到对比完最后一组数据。    </li>\n</ul>\n<h4 id=\"完整代码：-1\"><a href=\"#完整代码：-1\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// arr.length - 1是因为假定数组中n个数，比较需要两个数，所以只需要比较n-1次</span>\n    <span class=\"token keyword\">let</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录每次循环开始位置，等待和最小值交换位置</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// j+1 是避免比较自身，j永远是i的后一项，让他们俩做比较</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果后面的值小于前面的值，需要调换他们俩位置</span>\n        minIndex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存最小值的下标</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 使用es6的结构语法交换值，把最小值放到数组最前面</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"选择排序动画演示：\"><a href=\"#选择排序动画演示：\" class=\"headerlink\" title=\"选择排序动画演示：\"></a>选择排序动画演示：</h4><p><img src=\"/2020/10/09/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/ibLoIgDEnRJrUas.gif\" alt=\"section sort.gif\"></p>\n<h2 id=\"插入排序（Insertion-Sort）\"><a href=\"#插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"插入排序（Insertion Sort）\"></a>插入排序（Insertion Sort）</h2><h4 id=\"原理：-1\"><a href=\"#原理：-1\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>将数组分成<strong>两部分</strong>，一部分为<strong>已排序</strong>(默认为数组第一个元素且只有这一个元素)，另一部分为<strong>未排序</strong>。</li>\n<li>依次从未排序数组中取值，和已排序中的值<strong>依次做对</strong>比，如果<strong>未排序元素</strong>比<strong>已排序元素</strong>中某个元素<strong>小</strong>，那就将<strong>已排序元素</strong>向<strong>后移</strong>一位，使他本来位置变成一个<strong>空位</strong>，再将<strong>待排序数据</strong>插入空位。   </li>\n</ul>\n<h4 id=\"完整代码：-2\"><a href=\"#完整代码：-2\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环未排序部分, i=1而不是0是因为默认0项为已排序部分</span>\n    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> i <span class=\"token comment\">// 每次插入后，arr[i]会发生改变，先存下来</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环已排序部分，默认数组第一项有且只有第一项，下标范围为(0 - (未排序元素下标-1))，也就是例子中的i-1</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果未排序元素比已排序元素小，</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 交换</span>\n        cur <span class=\"token operator\">=</span> j <span class=\"token comment\">// 交换后i值变了，那把交换后的i找回来就可以了</span>\n      <span class=\"token punctuation\">&#125;</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"插入排序动画演示：\"><a href=\"#插入排序动画演示：\" class=\"headerlink\" title=\"插入排序动画演示：\"></a>插入排序动画演示：</h4><p><img src=\"/2020/10/09/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/5z82iWpVIJbLfu7.gif\" alt=\"insertion sort.gif\">    </p>\n<h2 id=\"快速排序（Quick-Sort）\"><a href=\"#快速排序（Quick-Sort）\" class=\"headerlink\" title=\"快速排序（Quick Sort）\"></a>快速排序（Quick Sort）</h2><h4 id=\"原理：-2\"><a href=\"#原理：-2\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>选择数组中的一个元素作为<strong>基准值</strong>，用两个新数组<strong>分别存储</strong>原数组比基准值<strong>大</strong>的值，和<strong>小</strong>的值。  </li>\n<li>继续<strong>递归处理</strong>这两个新数组，最终用concat合并到一起，效果为：比基准值小的数组+基准值+比基准值小的数组。  </li>\n</ul>\n<blockquote>\n<p>快速排序有其它种实现方法，这是一种简单的实现，非原地排序，由于新建了多个新的数组，会增加空间复杂度，好处再于非常容易理解，可读性强，适合面试手写代码。    </p>\n</blockquote>\n<h4 id=\"完整代码：-3\"><a href=\"#完整代码：-3\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 递归边界条件</span>\n  <span class=\"token keyword\">let</span> pointIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在数组中间位置取一个基准点</span>\n  <span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pointIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 通过基准点找到这个值</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环数组，小于point的放在left中，大的放在right中</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 递归，让每一个left和right继续排序，直到left或right只有一项为止</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"快速排序动画演示：\"><a href=\"#快速排序动画演示：\" class=\"headerlink\" title=\"快速排序动画演示：\"></a>快速排序动画演示：</h4><p><img src=\"/2020/10/09/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/DzWckAlLmVU9JuN.gif\" alt=\"quick sort.gif\">   </p>\n<hr>     \n\n<p>另外说一下，js的原生提供的 <code>sort</code> 排序方法原理：如果数组长度<code>小于10</code>，使用插入排序，否则使用快速排序。如其名，快速排序的性能还是很好的。</p>\n<hr>\n\n<p>本文动画参考：<a href=\"https://juejin.im/post/6844903444365443080\">掘金</a><br>本文例子查看：<a href=\"https://github.com/codedance98/docs/tree/main/javascript_sort\">GitHub</a></p>\n"},{"title":"vue原理mvvm简单实现","date":"2020-10-27T10:46:33.000Z","_content":"## index.html \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <div id='app'>\n    <input type=\"text\" v-model='v'>\n    {{v}}\n    <button @click='reset'>重置</button>\n  </div>\n  <script src='./index.js'></script>\n  <script>\n    const vm = new Mvvm({\n      el: '#app',\n      data: {\n        v: 'hello world'\n      },\n      methods: {\n        reset() {\n          this.v = '';\n        }\n      }\n    })\n  </script>\n</body>\n</html>\n```\n\n## index.js  \n\n```javascript\nclass Mvvm {\n  constructor(options) {\n    const {el, data, methods} = options;\n    this.methods = methods;\n    this.target = null;\n    // 监听this[data的key]所有属性，让变化可追踪\n    this.observe(this, data);\n    // dom解析：提取{{}}、v-model、事件重写：@click\n    this.compile(document.querySelector(el))\n  }\n  \n  // 数据变化监听\n  observe(_this, data) {\n    Object.keys(data).forEach((key)=> {\n      let val = data[key];\n      Object.keys(data).forEach((key)=> {\n        // 如果val是数组或者对象，使用递归实现深层监听，直到val为简单数据类型。从而保证所有属性变化都被监听\n        if(typeof val === 'object'){\n          return this.observe(_this, val)\n        }\n        // dispatcher用来操作订阅者(watcher) add 或者 update。要配合Object.defineProperty的get和set来使用\n        const dispatcher = new Dispatcher();\n        Object.defineProperty(_this, key, {\n          get: function() {\n            console.log('get');\n            // this.target会在compile方法中出现，把this.target(一个watcher)添加到dispatcher(将要更新的watcher的列表)中，用于未来更新这个watcher对应的dom\n            dispatcher.add(this.target);\n            return val\n          },\n          set: function(newV) {\n            // 值无变化，不处理\n            if(newV === val){return;}\n            console.log(`set`);\n            val = newV;\n            // 因为set了，值发生变化了，所以要通知get中添加的所有订阅者(watcher)：你们要把对应的dom中使用的值更新成newV\n            dispatcher.notify(newV);\n          }\n        })\n      })\n    })\n  }\n\n  // dom解析\n  compile(dom) {\n    const childs = dom.childNodes;\n    for (const node of childs) {\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 1) {\n        const attrs = node.attributes;\n        for(const attr of attrs) {\n          if(attr.name === 'v-model') {\n            const name = attr.value;\n            // 放到订阅者列表中\n            this.target = new Watcher(node, 'input');\n            // this[name]是为了触发observe的get，才会被监听\n            this[name];\n            // 由于是demo，假设只有input一种情况，input就会有双向绑定。使用this[name], 并且赋值input的值，来触发observe的get。实现更新信息的发布\n            node.addEventListener('input', (e) => {\n              this[name] = e.target.value;\n            });\n          }\n          // 使用bind传递this。并代理click事件函数到@click上。这里仅拿click事件实现，实际会有多种事件\n          if(attr.name === '@click') {\n            const name = attr.value;\n            node.addEventListener('click', this.methods[name].bind(this))\n          }\n        }\n      }\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 3){\n        // 正则匹配{{}}\n        const reg = /\\{\\{(.*)\\}\\}/;\n        const match = node.nodeValue.match(reg);\n        if(match) {\n          const name = match[1].trim();\n          // 放到订阅者列表中\n          this.target = new Watcher(node, 'text');\n          // this[name]是为了触发observe的get，才会被监听\n          this[name];\n        }\n      }\n    }\n  }\n}\n\n\n// 发布者\nclass Dispatcher {\n  constructor() {\n    this.watchers = [];\n  }\n  // 增加订阅者\n  add(watcher) {\n    this.watchers.push(watcher)\n  }\n  // 通知所有订阅者更新\n  notify(value){\n    this.watchers.forEach((item)=> {\n      item.update(value)\n    })\n  }\n}\n\n// 订阅者\nclass Watcher {\n  constructor(node, type) {\n    this.node = node;\n    this.type = type;\n  }\n  update(value) {\n    // 区别dom类型来赋值\n    if (this.type === 'input') {\n      this.node.value = value;\n    }\n    if (this.type === 'text') {\n      this.node.nodeValue = value;\n    }\n  }\n}\n```\n\nvue在初始化后，执行 **Observe** 函数把data利用 **Object.defineProperty** 属性监听。同时也会使用 **Compile** 函数**循环 dom**，提取vue相关的关键字，v-bind或者v-model，找到这些值，新建一个 **Watcher** 实例，然后手动get使这些watch放入dep列表中等待订阅。等待调用 **Observer** 的 **set** (input事件，或者手动赋值)，然后通知dep中所有 **Watcher** 调用 **update** 方法。","source":"_posts/vue原理mvvm简单实现.md","raw":"---\ntitle: vue原理mvvm简单实现\ndate: 2020/10/27 18:46:33\ntags: [前端]\n---\n## index.html \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <div id='app'>\n    <input type=\"text\" v-model='v'>\n    {{v}}\n    <button @click='reset'>重置</button>\n  </div>\n  <script src='./index.js'></script>\n  <script>\n    const vm = new Mvvm({\n      el: '#app',\n      data: {\n        v: 'hello world'\n      },\n      methods: {\n        reset() {\n          this.v = '';\n        }\n      }\n    })\n  </script>\n</body>\n</html>\n```\n\n## index.js  \n\n```javascript\nclass Mvvm {\n  constructor(options) {\n    const {el, data, methods} = options;\n    this.methods = methods;\n    this.target = null;\n    // 监听this[data的key]所有属性，让变化可追踪\n    this.observe(this, data);\n    // dom解析：提取{{}}、v-model、事件重写：@click\n    this.compile(document.querySelector(el))\n  }\n  \n  // 数据变化监听\n  observe(_this, data) {\n    Object.keys(data).forEach((key)=> {\n      let val = data[key];\n      Object.keys(data).forEach((key)=> {\n        // 如果val是数组或者对象，使用递归实现深层监听，直到val为简单数据类型。从而保证所有属性变化都被监听\n        if(typeof val === 'object'){\n          return this.observe(_this, val)\n        }\n        // dispatcher用来操作订阅者(watcher) add 或者 update。要配合Object.defineProperty的get和set来使用\n        const dispatcher = new Dispatcher();\n        Object.defineProperty(_this, key, {\n          get: function() {\n            console.log('get');\n            // this.target会在compile方法中出现，把this.target(一个watcher)添加到dispatcher(将要更新的watcher的列表)中，用于未来更新这个watcher对应的dom\n            dispatcher.add(this.target);\n            return val\n          },\n          set: function(newV) {\n            // 值无变化，不处理\n            if(newV === val){return;}\n            console.log(`set`);\n            val = newV;\n            // 因为set了，值发生变化了，所以要通知get中添加的所有订阅者(watcher)：你们要把对应的dom中使用的值更新成newV\n            dispatcher.notify(newV);\n          }\n        })\n      })\n    })\n  }\n\n  // dom解析\n  compile(dom) {\n    const childs = dom.childNodes;\n    for (const node of childs) {\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 1) {\n        const attrs = node.attributes;\n        for(const attr of attrs) {\n          if(attr.name === 'v-model') {\n            const name = attr.value;\n            // 放到订阅者列表中\n            this.target = new Watcher(node, 'input');\n            // this[name]是为了触发observe的get，才会被监听\n            this[name];\n            // 由于是demo，假设只有input一种情况，input就会有双向绑定。使用this[name], 并且赋值input的值，来触发observe的get。实现更新信息的发布\n            node.addEventListener('input', (e) => {\n              this[name] = e.target.value;\n            });\n          }\n          // 使用bind传递this。并代理click事件函数到@click上。这里仅拿click事件实现，实际会有多种事件\n          if(attr.name === '@click') {\n            const name = attr.value;\n            node.addEventListener('click', this.methods[name].bind(this))\n          }\n        }\n      }\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 3){\n        // 正则匹配{{}}\n        const reg = /\\{\\{(.*)\\}\\}/;\n        const match = node.nodeValue.match(reg);\n        if(match) {\n          const name = match[1].trim();\n          // 放到订阅者列表中\n          this.target = new Watcher(node, 'text');\n          // this[name]是为了触发observe的get，才会被监听\n          this[name];\n        }\n      }\n    }\n  }\n}\n\n\n// 发布者\nclass Dispatcher {\n  constructor() {\n    this.watchers = [];\n  }\n  // 增加订阅者\n  add(watcher) {\n    this.watchers.push(watcher)\n  }\n  // 通知所有订阅者更新\n  notify(value){\n    this.watchers.forEach((item)=> {\n      item.update(value)\n    })\n  }\n}\n\n// 订阅者\nclass Watcher {\n  constructor(node, type) {\n    this.node = node;\n    this.type = type;\n  }\n  update(value) {\n    // 区别dom类型来赋值\n    if (this.type === 'input') {\n      this.node.value = value;\n    }\n    if (this.type === 'text') {\n      this.node.nodeValue = value;\n    }\n  }\n}\n```\n\nvue在初始化后，执行 **Observe** 函数把data利用 **Object.defineProperty** 属性监听。同时也会使用 **Compile** 函数**循环 dom**，提取vue相关的关键字，v-bind或者v-model，找到这些值，新建一个 **Watcher** 实例，然后手动get使这些watch放入dep列表中等待订阅。等待调用 **Observer** 的 **set** (input事件，或者手动赋值)，然后通知dep中所有 **Watcher** 调用 **update** 方法。","slug":"vue原理mvvm简单实现","published":1,"updated":"2021-10-22T09:38:36.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meql000hh7vmddh166rb","content":"<h2 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>app<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>v<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    &#123;&#123;v&#125;&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>reset<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>重置<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>./index.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mvvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        v<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mvvm</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>el<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> methods<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods <span class=\"token operator\">=</span> methods<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 监听this[data的key]所有属性，让变化可追踪</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dom解析：提取&#123;&#123;&#125;&#125;、v-model、事件重写：@click</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token comment\">// 数据变化监听</span>\n  <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_this<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 如果val是数组或者对象，使用递归实现深层监听，直到val为简单数据类型。从而保证所有属性变化都被监听</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// dispatcher用来操作订阅者(watcher) add 或者 update。要配合Object.defineProperty的get和set来使用</span>\n        <span class=\"token keyword\">const</span> dispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// this.target会在compile方法中出现，把this.target(一个watcher)添加到dispatcher(将要更新的watcher的列表)中，用于未来更新这个watcher对应的dom</span>\n            dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> val\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newV</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 值无变化，不处理</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newV <span class=\"token operator\">===</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">set</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            val <span class=\"token operator\">=</span> newV<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 因为set了，值发生变化了，所以要通知get中添加的所有订阅者(watcher)：你们要把对应的dom中使用的值更新成newV</span>\n            dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>newV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// dom解析</span>\n  <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> childs <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> childs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> attrs <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> attr <span class=\"token keyword\">of</span> attrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'v-model'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 放到订阅者列表中</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// this[name]是为了触发observe的get，才会被监听</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 由于是demo，假设只有input一种情况，input就会有双向绑定。使用this[name], 并且赋值input的值，来触发observe的get。实现更新信息的发布</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token comment\">// 使用bind传递this。并代理click事件函数到@click上。这里仅拿click事件实现，实际会有多种事件</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'@click'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 正则匹配&#123;&#123;&#125;&#125;</span>\n        <span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\&#123;\\&#123;(.*)\\&#125;\\&#125;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 放到订阅者列表中</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// this[name]是为了触发observe的get，才会被监听</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// 发布者</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dispatcher</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 增加订阅者</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">watcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 通知所有订阅者更新</span>\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      item<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 订阅者</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Watcher</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 区别dom类型来赋值</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>vue在初始化后，执行 <strong>Observe</strong> 函数把data利用 <strong>Object.defineProperty</strong> 属性监听。同时也会使用 <strong>Compile</strong> 函数<strong>循环 dom</strong>，提取vue相关的关键字，v-bind或者v-model，找到这些值，新建一个 <strong>Watcher</strong> 实例，然后手动get使这些watch放入dep列表中等待订阅。等待调用 <strong>Observer</strong> 的 <strong>set</strong> (input事件，或者手动赋值)，然后通知dep中所有 <strong>Watcher</strong> 调用 <strong>update</strong> 方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>app<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>v<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    &#123;&#123;v&#125;&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>reset<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>重置<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>./index.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mvvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        v<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mvvm</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>el<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> methods<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods <span class=\"token operator\">=</span> methods<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 监听this[data的key]所有属性，让变化可追踪</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dom解析：提取&#123;&#123;&#125;&#125;、v-model、事件重写：@click</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token comment\">// 数据变化监听</span>\n  <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_this<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 如果val是数组或者对象，使用递归实现深层监听，直到val为简单数据类型。从而保证所有属性变化都被监听</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// dispatcher用来操作订阅者(watcher) add 或者 update。要配合Object.defineProperty的get和set来使用</span>\n        <span class=\"token keyword\">const</span> dispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// this.target会在compile方法中出现，把this.target(一个watcher)添加到dispatcher(将要更新的watcher的列表)中，用于未来更新这个watcher对应的dom</span>\n            dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> val\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newV</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 值无变化，不处理</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newV <span class=\"token operator\">===</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">set</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            val <span class=\"token operator\">=</span> newV<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 因为set了，值发生变化了，所以要通知get中添加的所有订阅者(watcher)：你们要把对应的dom中使用的值更新成newV</span>\n            dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>newV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// dom解析</span>\n  <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> childs <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> childs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> attrs <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> attr <span class=\"token keyword\">of</span> attrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'v-model'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 放到订阅者列表中</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// this[name]是为了触发observe的get，才会被监听</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 由于是demo，假设只有input一种情况，input就会有双向绑定。使用this[name], 并且赋值input的值，来触发observe的get。实现更新信息的发布</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token comment\">// 使用bind传递this。并代理click事件函数到@click上。这里仅拿click事件实现，实际会有多种事件</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'@click'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> attr<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 正则匹配&#123;&#123;&#125;&#125;</span>\n        <span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\&#123;\\&#123;(.*)\\&#125;\\&#125;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 放到订阅者列表中</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// this[name]是为了触发observe的get，才会被监听</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// 发布者</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dispatcher</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 增加订阅者</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">watcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 通知所有订阅者更新</span>\n  <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>watchers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      item<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 订阅者</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Watcher</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 区别dom类型来赋值</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>vue在初始化后，执行 <strong>Observe</strong> 函数把data利用 <strong>Object.defineProperty</strong> 属性监听。同时也会使用 <strong>Compile</strong> 函数<strong>循环 dom</strong>，提取vue相关的关键字，v-bind或者v-model，找到这些值，新建一个 <strong>Watcher</strong> 实例，然后手动get使这些watch放入dep列表中等待订阅。等待调用 <strong>Observer</strong> 的 <strong>set</strong> (input事件，或者手动赋值)，然后通知dep中所有 <strong>Watcher</strong> 调用 <strong>update</strong> 方法。</p>\n"},{"title":"webpack4的使用","date":"2020-09-24T08:56:10.000Z","_content":"\n## 前言\n**webpack** 是我经常用的构建工具，并且 **webpack** 也逐渐成为主流前端构建工具，所以我觉得有必要透彻理解它，由于配置实现的写法有很多种，让人很头疼，一直没有仔细研究一下他的原理和实现方式。通过这篇文章，全面了解 **webpack**。  \n\n## webpack简介\n>**webpack** 是一个开源的前端模块构建工具，由德国开发者 *Tobias Koppers* 在2012年首发并开源。  \n\n由于近年来前端技术发展迅猛，越来越重视用户的操作体验，现在早已经不是那个 html、css、jQuery 一把梭的年代了。  \n越来越多的新思想、新框架孕育而生。这导致前端越来越重，需要 **引入依赖**、**高级语法降级解析**，**Css预编译**，**使用更为严格的**`TypeScript`**避免问题**， **使用现代 mvvm 框架**`Vue`，`React`**快捷开发**。最后 **构建** 成浏览器 **可识别** 的`.css` `.js`等基本文件再部署到生产环境，这其中构建一步就是`webpack`做的事情。 \n\n![WechatIMG2925.png](./webpack使用指南/EOzt1WTKBaXkgIr.png)\n\n## webpack基础使用\n> 全局已安装 webpack@4.44.2 和 nodejs@10.13.0  \n\n主要是两个配置：\n\n- **entry**：构建入口, `webpack`会从指定文件开始识别依赖模块关系并开始构建。`webpack4`中默认入口在`/src/index.js`。\n- **output**：构建出口，告诉`webpack`，构建完的文件放在哪里，叫什么名字，`webpack4`中默认出口在`/dist/main.js`。\n\n先来演示一下webpack最基本的操作。\n新建文件夹，初始化项目`npm init` ，一路回车，生成`package.json`，在这个目录新建两个文件，`main.js`，`chunk.js` ，内容如下：  \n\nmain.js   \n\n```javascript\nconst chunk = require('./chunk.js');\nconsole.log(chunk);\n```\n\nchunk.js\n\n```javascript\nmodule.exports = 'I am chunk.js';\n```\n\n创建好之后在项目下安装webpack：\n\n```javascript\nnpm install --save-dev webpack webpack-cli\n```\n\n执行第一个命令，`webpack 构建入口 --output 构建出口`： \n\n```bash\n$ webpack ./main.js --output ./dist.js\n...\n...\nHash: 8cc82b2736e97001d58e\nVersion: webpack 4.44.2\nTime: 269ms\nBuilt at: 2020-09-24 16:46:34\n  Asset        Size  Chunks             Chunk Names\ndist.js  1000 bytes       0  [emitted]  main\nEntrypoint main = dist.js\n[0] ./main.js 56 bytes {0} [built]\n[1] ./chunk.js 32 bytes {0} [built]\n```\n\n上命令是把`main.js`使用`webpack`打包生成`dist.js`，由于`main.js`中引入`chunk.js`，所以`dist.js`是`main.js`和`chunk.js`的整合。  \n\n可以看到`webpack`输出一些打包信息后，并成功在`./`下创建`dist.js`，看看效果，创建一个`index.html`，并引入`dist.js`\n\n当前目录结构:  \n\n```shell\n.\n├── chunk.js \n├── index.html\n├── main.js \n├── package.json \n```\n\n打开`index.html`控制台面板可以看到向屏幕输出了「 I am chunk.js 」，看到这里，其实就可以理解`webpack`的作用了。都是在这个基础上，**变形转换**，**以及打包过程中增加一些处理**。这次简单演示使用终端打包，实际开发需要设置相当多的参数，命令不方便处理，会创建一个`webpack.conf.js`，专门来编写配置。  \n## webpack4的改变  \n\n - 速度相比3更快了(提升至少50%，没测过)\n - 默认配置出入口(就是网上说的0配置)\n - 增加了环境配置\n  \n#### 默认配置出入口\n> 这里需要说明一下，在webpack4中实现了默认配置，去除了老版本繁琐的配置，webpack真正的本领是构建，webpack官方也注意到了这一点，这是一个非常明智的改变。  \n\n版本3中需要用`entry`和`output`来指定构建入口和出口，在版本4中有默认配置。  \n\n - 默认入口在`/src/index.js`\n - 默认出口在`/dist/main.js`\n\n如果你想修改，可以在`package.json`修改script，例：  \n\n```bash\nwebpack ./entry/js/index.js --output ./output/js/main.js\n```\n\n`webpack.conf.js`：  \n\n```javascript \nconst path = require('path')\n\n// 引入path为了实现相对路径转换成绝对路径：\npath.join(__dirname, '路径')\n\nmodule.exports = {\n  // entry为开始构建的文件入口\n  entry: path.join(__dirname, '/src/index.js'),\n  // output为构建后的文件出口，其中path为出口文件的路径，filename为出口文件名\n  output: {\n    path: path.join(__dirname, '/dist'),\n    filename: 'bundle.js'\n  }\n}\n```\n#### 增加了环境配置\n4以前版本配置不同环境，根据`nodejs`环境变量需要编写两套配置：开发环境中配置`live reloading` 和`webpack-dev-server`；生产环境配置`sourceMap`和`uglifyJSPlugin`美化压缩代码。在4版本中只需要在`package.json`的中`script` 增加`--mode`参数指定环境，并自动处理上面不同环境区别：\n\npackage.json：  \n\n```json\n\"scripts\": {\n  \"dev\": \"webpack --mode development\",\n  \"build\": \"webpack --mode production \"\n}\n```\n## webpack进阶使用\n主要是两个配置：\n\n- **loader**：`webpack`本身只能处理`.js`文件，安装不同的`loader`使其具备处理其他文件的能力，比如`.css`，`.scss`，`.vue`，`.jsx`，`.jade`。\n\n- **plugins**：用于处理打包过程中一些更复杂的处理，比如`htmlwebpackplugin`自动生成`index.html`并引入构建文件，`uglifyJSPlugin`美化压缩代码。  \n\n#### Loader  \n在`/css/index.css`中创建`css`文件，并在`/src/index.js`引入，`css`经过`webpack`构建后会自动作用在`index.html`上。\n\n`/src/index.css `： \n\n```css\nh1{\n  color:red;\n}\n```\n`/src/index.js`：\n\n```javascript\nimport indexCss from './index.css'; // 或者 import './index.css';\n\nconst chunk = require('../chunk.js');\nconsole.log(chunk);\n```\n执行`webpack`，可以看到报错了：\n\n```shell  \nERROR in ./src/index.css 1:4\nModule parse failed: Unexpected token (1:4)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> html{\n|   color:red;\n| }\n @ ./src/index.js 1:0-34\n```\n你需要安装对应`loader`去处理这个`css`文件，安装`style-loader`和`css-loader`： \n\n - **css-loader**：`webpack`默认只能处理`.js`和`.json`文件类型，这个包会使`webpack`具备处理`.css`的能力  \n - **style-loader**：`style-loader`会把`css-loader`构建好的`css`作为`<style>`标签插入到`html`中。\n\n安装他们：  \n\n```shell\nnpm install style-loader css-loader --save-dev\n```\n\n配置他们：  \n> 需要注意：loader 的执行顺序是从后往前执行，本例先执行 css-loader 返回内容再交给 style-loader 执行。链式调用，一环套一环，每个 loader 负责单一指责，方便扩展。\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{ \n      test: /\\.css$/, \n      use: [\n        { \n          loader: \"style-loader\",\n          options: {\n            // options\n          }\n        },\n        { \n          loader: \"css-loader\" ,\n          options: {\n            // options\n          }\n        }\n      ]\n    }]\n  }\n}\n```\n - **test**：匹配 loaders 所处理文件的拓展名的正则表达式（必填）\n - **loader**：loader 的名称（必填）\n - **include/exclude**：需要处理的文件夹或屏蔽不需要处理的文件夹（选填）；\n - **options**：为 loaders 提供额外的设置选项（选填）\n\n详细options：  \n[style-loader](https://developer.aliyun.com/mirror/npm/package/style-loader)  \n[css-loader](https://developer.aliyun.com/mirror/npm/package/css-loader)\n\n重新构建：  \n\n```shell\n➜  webpack-demo webpack\nHash: c741b4496ab2094ee570\nVersion: webpack 4.44.2\nTime: 270ms\nBuilt at: 2020-09-30 17:22:42\n  Asset     Size  Chunks             Chunk Names\nmain.js  4.7 KiB       0  [emitted]  main\nEntrypoint main = main.js\n[1] ./src/index.js 79 bytes {0} [built]\n[2] ./src/index.css 529 bytes {0} [built]\n[4] ./node_modules/css-loader/dist/cjs.js??ref--4-1!./src/index.css 301 bytes {0} [built]\n[5] ./chunk.js 32 bytes {0} [built]\n    + 2 hidden modules\n```\n构建成功了，  \n修改`index.html`引入构建后的文件，并打开，可以看到一个红色标题，loader配置生效了  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <h1>标题</h1>\n  <script src='./dist/main.js'></script>\n</body>\n</html>\n```\n### Plugin\n使用`html-webpack-plugin`和`clean-webpack-plugin`举例：  \n\n - **html-webpack-plugin**：构建时，在output目录下创建一个index.html文件，并把构建后的文件插入到html中。\n - **clean-webpack-plugin**：每次打包前自动清空output文件夹。  \n\n#### html-webpack-plugin\n安装：  \n\n```shell\nnpm install html-webpack-plugin --save-dev\n```\n`webpack.config.js`配置：  \n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  module: {\n    //...\n  },\n  plugins: [\n    new HtmlWebpackPlugin()\n  ]\n}\n```\n[html-webpack-plugin更多参数](https://developer.aliyun.com/mirror/npm/package/html-webpack-plugin)\n\n#### clean-webpack-plugin\n安装： \n\n```shell\nnpm install clean-webpack-plugin --save-dev \n```\n\n`webpack.config.js`配置：   \n\n```javascript\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    //...\n  },\n  plugins: [\n    new CleanWebpackPlugin(['dist'])\n  ]\n}\n```\n\n[clean-webpack-plugin更多参数](https://developer.aliyun.com/mirror/npm/package/clean-webpack-plugin) \n\n复杂的`plugins`配置：  \n\n```javascript\nplugins: [  \n\t new HtmlWebpackPlugin(),\n     new CleanWebpackPlugin(['dist'])\n]\n```\n\n`plugins`为一个数组，每一项都是一个插件，插件的配置都是作为参数传入，有数组也有对象类型，`plugin`不像`loader`有很明确的顺序，它类似事件绑定，按需执行。","source":"_posts/webpack使用指南.md","raw":"---\ntitle: webpack4的使用\ndate: 2020/09/24 16:56:10\ntags: [前端]\n---\n\n## 前言\n**webpack** 是我经常用的构建工具，并且 **webpack** 也逐渐成为主流前端构建工具，所以我觉得有必要透彻理解它，由于配置实现的写法有很多种，让人很头疼，一直没有仔细研究一下他的原理和实现方式。通过这篇文章，全面了解 **webpack**。  \n\n## webpack简介\n>**webpack** 是一个开源的前端模块构建工具，由德国开发者 *Tobias Koppers* 在2012年首发并开源。  \n\n由于近年来前端技术发展迅猛，越来越重视用户的操作体验，现在早已经不是那个 html、css、jQuery 一把梭的年代了。  \n越来越多的新思想、新框架孕育而生。这导致前端越来越重，需要 **引入依赖**、**高级语法降级解析**，**Css预编译**，**使用更为严格的**`TypeScript`**避免问题**， **使用现代 mvvm 框架**`Vue`，`React`**快捷开发**。最后 **构建** 成浏览器 **可识别** 的`.css` `.js`等基本文件再部署到生产环境，这其中构建一步就是`webpack`做的事情。 \n\n![WechatIMG2925.png](./webpack使用指南/EOzt1WTKBaXkgIr.png)\n\n## webpack基础使用\n> 全局已安装 webpack@4.44.2 和 nodejs@10.13.0  \n\n主要是两个配置：\n\n- **entry**：构建入口, `webpack`会从指定文件开始识别依赖模块关系并开始构建。`webpack4`中默认入口在`/src/index.js`。\n- **output**：构建出口，告诉`webpack`，构建完的文件放在哪里，叫什么名字，`webpack4`中默认出口在`/dist/main.js`。\n\n先来演示一下webpack最基本的操作。\n新建文件夹，初始化项目`npm init` ，一路回车，生成`package.json`，在这个目录新建两个文件，`main.js`，`chunk.js` ，内容如下：  \n\nmain.js   \n\n```javascript\nconst chunk = require('./chunk.js');\nconsole.log(chunk);\n```\n\nchunk.js\n\n```javascript\nmodule.exports = 'I am chunk.js';\n```\n\n创建好之后在项目下安装webpack：\n\n```javascript\nnpm install --save-dev webpack webpack-cli\n```\n\n执行第一个命令，`webpack 构建入口 --output 构建出口`： \n\n```bash\n$ webpack ./main.js --output ./dist.js\n...\n...\nHash: 8cc82b2736e97001d58e\nVersion: webpack 4.44.2\nTime: 269ms\nBuilt at: 2020-09-24 16:46:34\n  Asset        Size  Chunks             Chunk Names\ndist.js  1000 bytes       0  [emitted]  main\nEntrypoint main = dist.js\n[0] ./main.js 56 bytes {0} [built]\n[1] ./chunk.js 32 bytes {0} [built]\n```\n\n上命令是把`main.js`使用`webpack`打包生成`dist.js`，由于`main.js`中引入`chunk.js`，所以`dist.js`是`main.js`和`chunk.js`的整合。  \n\n可以看到`webpack`输出一些打包信息后，并成功在`./`下创建`dist.js`，看看效果，创建一个`index.html`，并引入`dist.js`\n\n当前目录结构:  \n\n```shell\n.\n├── chunk.js \n├── index.html\n├── main.js \n├── package.json \n```\n\n打开`index.html`控制台面板可以看到向屏幕输出了「 I am chunk.js 」，看到这里，其实就可以理解`webpack`的作用了。都是在这个基础上，**变形转换**，**以及打包过程中增加一些处理**。这次简单演示使用终端打包，实际开发需要设置相当多的参数，命令不方便处理，会创建一个`webpack.conf.js`，专门来编写配置。  \n## webpack4的改变  \n\n - 速度相比3更快了(提升至少50%，没测过)\n - 默认配置出入口(就是网上说的0配置)\n - 增加了环境配置\n  \n#### 默认配置出入口\n> 这里需要说明一下，在webpack4中实现了默认配置，去除了老版本繁琐的配置，webpack真正的本领是构建，webpack官方也注意到了这一点，这是一个非常明智的改变。  \n\n版本3中需要用`entry`和`output`来指定构建入口和出口，在版本4中有默认配置。  \n\n - 默认入口在`/src/index.js`\n - 默认出口在`/dist/main.js`\n\n如果你想修改，可以在`package.json`修改script，例：  \n\n```bash\nwebpack ./entry/js/index.js --output ./output/js/main.js\n```\n\n`webpack.conf.js`：  \n\n```javascript \nconst path = require('path')\n\n// 引入path为了实现相对路径转换成绝对路径：\npath.join(__dirname, '路径')\n\nmodule.exports = {\n  // entry为开始构建的文件入口\n  entry: path.join(__dirname, '/src/index.js'),\n  // output为构建后的文件出口，其中path为出口文件的路径，filename为出口文件名\n  output: {\n    path: path.join(__dirname, '/dist'),\n    filename: 'bundle.js'\n  }\n}\n```\n#### 增加了环境配置\n4以前版本配置不同环境，根据`nodejs`环境变量需要编写两套配置：开发环境中配置`live reloading` 和`webpack-dev-server`；生产环境配置`sourceMap`和`uglifyJSPlugin`美化压缩代码。在4版本中只需要在`package.json`的中`script` 增加`--mode`参数指定环境，并自动处理上面不同环境区别：\n\npackage.json：  \n\n```json\n\"scripts\": {\n  \"dev\": \"webpack --mode development\",\n  \"build\": \"webpack --mode production \"\n}\n```\n## webpack进阶使用\n主要是两个配置：\n\n- **loader**：`webpack`本身只能处理`.js`文件，安装不同的`loader`使其具备处理其他文件的能力，比如`.css`，`.scss`，`.vue`，`.jsx`，`.jade`。\n\n- **plugins**：用于处理打包过程中一些更复杂的处理，比如`htmlwebpackplugin`自动生成`index.html`并引入构建文件，`uglifyJSPlugin`美化压缩代码。  \n\n#### Loader  \n在`/css/index.css`中创建`css`文件，并在`/src/index.js`引入，`css`经过`webpack`构建后会自动作用在`index.html`上。\n\n`/src/index.css `： \n\n```css\nh1{\n  color:red;\n}\n```\n`/src/index.js`：\n\n```javascript\nimport indexCss from './index.css'; // 或者 import './index.css';\n\nconst chunk = require('../chunk.js');\nconsole.log(chunk);\n```\n执行`webpack`，可以看到报错了：\n\n```shell  \nERROR in ./src/index.css 1:4\nModule parse failed: Unexpected token (1:4)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> html{\n|   color:red;\n| }\n @ ./src/index.js 1:0-34\n```\n你需要安装对应`loader`去处理这个`css`文件，安装`style-loader`和`css-loader`： \n\n - **css-loader**：`webpack`默认只能处理`.js`和`.json`文件类型，这个包会使`webpack`具备处理`.css`的能力  \n - **style-loader**：`style-loader`会把`css-loader`构建好的`css`作为`<style>`标签插入到`html`中。\n\n安装他们：  \n\n```shell\nnpm install style-loader css-loader --save-dev\n```\n\n配置他们：  \n> 需要注意：loader 的执行顺序是从后往前执行，本例先执行 css-loader 返回内容再交给 style-loader 执行。链式调用，一环套一环，每个 loader 负责单一指责，方便扩展。\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{ \n      test: /\\.css$/, \n      use: [\n        { \n          loader: \"style-loader\",\n          options: {\n            // options\n          }\n        },\n        { \n          loader: \"css-loader\" ,\n          options: {\n            // options\n          }\n        }\n      ]\n    }]\n  }\n}\n```\n - **test**：匹配 loaders 所处理文件的拓展名的正则表达式（必填）\n - **loader**：loader 的名称（必填）\n - **include/exclude**：需要处理的文件夹或屏蔽不需要处理的文件夹（选填）；\n - **options**：为 loaders 提供额外的设置选项（选填）\n\n详细options：  \n[style-loader](https://developer.aliyun.com/mirror/npm/package/style-loader)  \n[css-loader](https://developer.aliyun.com/mirror/npm/package/css-loader)\n\n重新构建：  \n\n```shell\n➜  webpack-demo webpack\nHash: c741b4496ab2094ee570\nVersion: webpack 4.44.2\nTime: 270ms\nBuilt at: 2020-09-30 17:22:42\n  Asset     Size  Chunks             Chunk Names\nmain.js  4.7 KiB       0  [emitted]  main\nEntrypoint main = main.js\n[1] ./src/index.js 79 bytes {0} [built]\n[2] ./src/index.css 529 bytes {0} [built]\n[4] ./node_modules/css-loader/dist/cjs.js??ref--4-1!./src/index.css 301 bytes {0} [built]\n[5] ./chunk.js 32 bytes {0} [built]\n    + 2 hidden modules\n```\n构建成功了，  \n修改`index.html`引入构建后的文件，并打开，可以看到一个红色标题，loader配置生效了  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <h1>标题</h1>\n  <script src='./dist/main.js'></script>\n</body>\n</html>\n```\n### Plugin\n使用`html-webpack-plugin`和`clean-webpack-plugin`举例：  \n\n - **html-webpack-plugin**：构建时，在output目录下创建一个index.html文件，并把构建后的文件插入到html中。\n - **clean-webpack-plugin**：每次打包前自动清空output文件夹。  \n\n#### html-webpack-plugin\n安装：  \n\n```shell\nnpm install html-webpack-plugin --save-dev\n```\n`webpack.config.js`配置：  \n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  module: {\n    //...\n  },\n  plugins: [\n    new HtmlWebpackPlugin()\n  ]\n}\n```\n[html-webpack-plugin更多参数](https://developer.aliyun.com/mirror/npm/package/html-webpack-plugin)\n\n#### clean-webpack-plugin\n安装： \n\n```shell\nnpm install clean-webpack-plugin --save-dev \n```\n\n`webpack.config.js`配置：   \n\n```javascript\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    //...\n  },\n  plugins: [\n    new CleanWebpackPlugin(['dist'])\n  ]\n}\n```\n\n[clean-webpack-plugin更多参数](https://developer.aliyun.com/mirror/npm/package/clean-webpack-plugin) \n\n复杂的`plugins`配置：  \n\n```javascript\nplugins: [  \n\t new HtmlWebpackPlugin(),\n     new CleanWebpackPlugin(['dist'])\n]\n```\n\n`plugins`为一个数组，每一项都是一个插件，插件的配置都是作为参数传入，有数组也有对象类型，`plugin`不像`loader`有很明确的顺序，它类似事件绑定，按需执行。","slug":"webpack使用指南","published":1,"updated":"2021-10-22T09:38:36.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqm000kh7vmgupp4560","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>webpack</strong> 是我经常用的构建工具，并且 <strong>webpack</strong> 也逐渐成为主流前端构建工具，所以我觉得有必要透彻理解它，由于配置实现的写法有很多种，让人很头疼，一直没有仔细研究一下他的原理和实现方式。通过这篇文章，全面了解 <strong>webpack</strong>。  </p>\n<h2 id=\"webpack简介\"><a href=\"#webpack简介\" class=\"headerlink\" title=\"webpack简介\"></a>webpack简介</h2><blockquote>\n<p><strong>webpack</strong> 是一个开源的前端模块构建工具，由德国开发者 <em>Tobias Koppers</em> 在2012年首发并开源。  </p>\n</blockquote>\n<p>由于近年来前端技术发展迅猛，越来越重视用户的操作体验，现在早已经不是那个 html、css、jQuery 一把梭的年代了。<br>越来越多的新思想、新框架孕育而生。这导致前端越来越重，需要 <strong>引入依赖</strong>、<strong>高级语法降级解析</strong>，<strong>Css预编译</strong>，<strong>使用更为严格的</strong><code>TypeScript</code><strong>避免问题</strong>， <strong>使用现代 mvvm 框架</strong><code>Vue</code>，<code>React</code><strong>快捷开发</strong>。最后 <strong>构建</strong> 成浏览器 <strong>可识别</strong> 的<code>.css</code> <code>.js</code>等基本文件再部署到生产环境，这其中构建一步就是<code>webpack</code>做的事情。 </p>\n<p><img src=\"/2020/09/24/webpack%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/EOzt1WTKBaXkgIr.png\" alt=\"WechatIMG2925.png\"></p>\n<h2 id=\"webpack基础使用\"><a href=\"#webpack基础使用\" class=\"headerlink\" title=\"webpack基础使用\"></a>webpack基础使用</h2><blockquote>\n<p>全局已安装 <a href=\"mailto:&#x77;&#x65;&#98;&#112;&#97;&#x63;&#107;&#x40;&#x34;&#x2e;&#x34;&#x34;&#x2e;&#x32;\">&#x77;&#x65;&#98;&#112;&#97;&#x63;&#107;&#x40;&#x34;&#x2e;&#x34;&#x34;&#x2e;&#x32;</a> 和 <a href=\"mailto:&#x6e;&#111;&#100;&#101;&#x6a;&#x73;&#64;&#49;&#x30;&#x2e;&#x31;&#51;&#x2e;&#48;\">&#x6e;&#111;&#100;&#101;&#x6a;&#x73;&#64;&#49;&#x30;&#x2e;&#x31;&#51;&#x2e;&#48;</a>  </p>\n</blockquote>\n<p>主要是两个配置：</p>\n<ul>\n<li><strong>entry</strong>：构建入口, <code>webpack</code>会从指定文件开始识别依赖模块关系并开始构建。<code>webpack4</code>中默认入口在<code>/src/index.js</code>。</li>\n<li><strong>output</strong>：构建出口，告诉<code>webpack</code>，构建完的文件放在哪里，叫什么名字，<code>webpack4</code>中默认出口在<code>/dist/main.js</code>。</li>\n</ul>\n<p>先来演示一下webpack最基本的操作。<br>新建文件夹，初始化项目<code>npm init</code> ，一路回车，生成<code>package.json</code>，在这个目录新建两个文件，<code>main.js</code>，<code>chunk.js</code> ，内容如下：  </p>\n<p>main.js   </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./chunk.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>chunk.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token string\">'I am chunk.js'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建好之后在项目下安装webpack：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev webpack webpack<span class=\"token operator\">-</span>cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行第一个命令，<code>webpack 构建入口 --output 构建出口</code>： </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ webpack ./main.js --output ./dist.js\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\nHash: 8cc82b2736e97001d58e\nVersion: webpack <span class=\"token number\">4.44</span>.2\nTime: 269ms\nBuilt at: <span class=\"token number\">2020</span>-09-24 <span class=\"token number\">16</span>:46:34\n  Asset        Size  Chunks             Chunk Names\ndist.js  <span class=\"token number\">1000</span> bytes       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> dist.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> ./main.js <span class=\"token number\">56</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ./chunk.js <span class=\"token number\">32</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上命令是把<code>main.js</code>使用<code>webpack</code>打包生成<code>dist.js</code>，由于<code>main.js</code>中引入<code>chunk.js</code>，所以<code>dist.js</code>是<code>main.js</code>和<code>chunk.js</code>的整合。  </p>\n<p>可以看到<code>webpack</code>输出一些打包信息后，并成功在<code>./</code>下创建<code>dist.js</code>，看看效果，创建一个<code>index.html</code>，并引入<code>dist.js</code></p>\n<p>当前目录结构:  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">.</span>\n├── chunk.js \n├── index.html\n├── main.js \n├── package.json <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>打开<code>index.html</code>控制台面板可以看到向屏幕输出了「 I am chunk.js 」，看到这里，其实就可以理解<code>webpack</code>的作用了。都是在这个基础上，<strong>变形转换</strong>，<strong>以及打包过程中增加一些处理</strong>。这次简单演示使用终端打包，实际开发需要设置相当多的参数，命令不方便处理，会创建一个<code>webpack.conf.js</code>，专门来编写配置。  </p>\n<h2 id=\"webpack4的改变\"><a href=\"#webpack4的改变\" class=\"headerlink\" title=\"webpack4的改变\"></a>webpack4的改变</h2><ul>\n<li>速度相比3更快了(提升至少50%，没测过)</li>\n<li>默认配置出入口(就是网上说的0配置)</li>\n<li>增加了环境配置</li>\n</ul>\n<h4 id=\"默认配置出入口\"><a href=\"#默认配置出入口\" class=\"headerlink\" title=\"默认配置出入口\"></a>默认配置出入口</h4><blockquote>\n<p>这里需要说明一下，在webpack4中实现了默认配置，去除了老版本繁琐的配置，webpack真正的本领是构建，webpack官方也注意到了这一点，这是一个非常明智的改变。  </p>\n</blockquote>\n<p>版本3中需要用<code>entry</code>和<code>output</code>来指定构建入口和出口，在版本4中有默认配置。  </p>\n<ul>\n<li>默认入口在<code>/src/index.js</code></li>\n<li>默认出口在<code>/dist/main.js</code></li>\n</ul>\n<p>如果你想修改，可以在<code>package.json</code>修改script，例：  </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">webpack ./entry/js/index.js --output ./output/js/main.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>webpack.conf.js</code>：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 引入path为了实现相对路径转换成绝对路径：</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'路径'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// entry为开始构建的文件入口</span>\n  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// output为构建后的文件出口，其中path为出口文件的路径，filename为出口文件名</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"增加了环境配置\"><a href=\"#增加了环境配置\" class=\"headerlink\" title=\"增加了环境配置\"></a>增加了环境配置</h4><p>4以前版本配置不同环境，根据<code>nodejs</code>环境变量需要编写两套配置：开发环境中配置<code>live reloading</code> 和<code>webpack-dev-server</code>；生产环境配置<code>sourceMap</code>和<code>uglifyJSPlugin</code>美化压缩代码。在4版本中只需要在<code>package.json</code>的中<code>script</code> 增加<code>--mode</code>参数指定环境，并自动处理上面不同环境区别：</p>\n<p>package.json：  </p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode production \"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"webpack进阶使用\"><a href=\"#webpack进阶使用\" class=\"headerlink\" title=\"webpack进阶使用\"></a>webpack进阶使用</h2><p>主要是两个配置：</p>\n<ul>\n<li><p><strong>loader</strong>：<code>webpack</code>本身只能处理<code>.js</code>文件，安装不同的<code>loader</code>使其具备处理其他文件的能力，比如<code>.css</code>，<code>.scss</code>，<code>.vue</code>，<code>.jsx</code>，<code>.jade</code>。</p>\n</li>\n<li><p><strong>plugins</strong>：用于处理打包过程中一些更复杂的处理，比如<code>htmlwebpackplugin</code>自动生成<code>index.html</code>并引入构建文件，<code>uglifyJSPlugin</code>美化压缩代码。  </p>\n</li>\n</ul>\n<h4 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h4><p>在<code>/css/index.css</code>中创建<code>css</code>文件，并在<code>/src/index.js</code>引入，<code>css</code>经过<code>webpack</code>构建后会自动作用在<code>index.html</code>上。</p>\n<p><code>/src/index.css </code>： </p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>/src/index.js</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> indexCss <span class=\"token keyword\">from</span> <span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 或者 import './index.css';</span>\n\n<span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../chunk.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行<code>webpack</code>，可以看到报错了：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ERROR <span class=\"token keyword\">in</span> ./src/index.css <span class=\"token number\">1</span>:4\nModule parse failed: Unexpected token <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>:4<span class=\"token punctuation\">)</span>\nYou may need an appropriate loader to handle this <span class=\"token function\">file</span> type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts<span class=\"token comment\">#loaders</span>\n<span class=\"token operator\">></span> html<span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">|</span>   color:red<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">&#125;</span>\n @ ./src/index.js <span class=\"token number\">1</span>:0-34<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>你需要安装对应<code>loader</code>去处理这个<code>css</code>文件，安装<code>style-loader</code>和<code>css-loader</code>： </p>\n<ul>\n<li><strong>css-loader</strong>：<code>webpack</code>默认只能处理<code>.js</code>和<code>.json</code>文件类型，这个包会使<code>webpack</code>具备处理<code>.css</code>的能力  </li>\n<li><strong>style-loader</strong>：<code>style-loader</code>会把<code>css-loader</code>构建好的<code>css</code>作为<code>&lt;style&gt;</code>标签插入到<code>html</code>中。</li>\n</ul>\n<p>安装他们：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> style-loader css-loader --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置他们：  </p>\n<blockquote>\n<p>需要注意：loader 的执行顺序是从后往前执行，本例先执行 css-loader 返回内容再交给 style-loader 执行。链式调用，一环套一环，每个 loader 负责单一指责，方便扩展。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> \n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> \n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span> \n          loader<span class=\"token operator\">:</span> <span class=\"token string\">\"style-loader\"</span><span class=\"token punctuation\">,</span>\n          options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// options</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span> \n          loader<span class=\"token operator\">:</span> <span class=\"token string\">\"css-loader\"</span> <span class=\"token punctuation\">,</span>\n          options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// options</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>test</strong>：匹配 loaders 所处理文件的拓展名的正则表达式（必填）</li>\n<li><strong>loader</strong>：loader 的名称（必填）</li>\n<li><strong>include/exclude</strong>：需要处理的文件夹或屏蔽不需要处理的文件夹（选填）；</li>\n<li><strong>options</strong>：为 loaders 提供额外的设置选项（选填）</li>\n</ul>\n<p>详细options：<br><a href=\"https://developer.aliyun.com/mirror/npm/package/style-loader\">style-loader</a><br><a href=\"https://developer.aliyun.com/mirror/npm/package/css-loader\">css-loader</a></p>\n<p>重新构建：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">➜  webpack-demo webpack\nHash: c741b4496ab2094ee570\nVersion: webpack <span class=\"token number\">4.44</span>.2\nTime: 270ms\nBuilt at: <span class=\"token number\">2020</span>-09-30 <span class=\"token number\">17</span>:22:42\n  Asset     Size  Chunks             Chunk Names\nmain.js  <span class=\"token number\">4.7</span> KiB       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> main.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ./src/index.js <span class=\"token number\">79</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> ./src/index.css <span class=\"token number\">529</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> ./node_modules/css-loader/dist/cjs.js??ref--4-1<span class=\"token operator\">!</span>./src/index.css <span class=\"token number\">301</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> ./chunk.js <span class=\"token number\">32</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n    + <span class=\"token number\">2</span> hidden modules<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>构建成功了，<br>修改<code>index.html</code>引入构建后的文件，并打开，可以看到一个红色标题，loader配置生效了  </p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>./dist/main.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h3><p>使用<code>html-webpack-plugin</code>和<code>clean-webpack-plugin</code>举例：  </p>\n<ul>\n<li><strong>html-webpack-plugin</strong>：构建时，在output目录下创建一个index.html文件，并把构建后的文件插入到html中。</li>\n<li><strong>clean-webpack-plugin</strong>：每次打包前自动清空output文件夹。  </li>\n</ul>\n<h4 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a>html-webpack-plugin</h4><p>安装：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> html-webpack-plugin --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>webpack.config.js</code>配置：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://developer.aliyun.com/mirror/npm/package/html-webpack-plugin\">html-webpack-plugin更多参数</a></p>\n<h4 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h4><p>安装： </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> clean-webpack-plugin --save-dev <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>webpack.config.js</code>配置：   </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://developer.aliyun.com/mirror/npm/package/clean-webpack-plugin\">clean-webpack-plugin更多参数</a> </p>\n<p>复杂的<code>plugins</code>配置：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  \n\t <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>plugins</code>为一个数组，每一项都是一个插件，插件的配置都是作为参数传入，有数组也有对象类型，<code>plugin</code>不像<code>loader</code>有很明确的顺序，它类似事件绑定，按需执行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>webpack</strong> 是我经常用的构建工具，并且 <strong>webpack</strong> 也逐渐成为主流前端构建工具，所以我觉得有必要透彻理解它，由于配置实现的写法有很多种，让人很头疼，一直没有仔细研究一下他的原理和实现方式。通过这篇文章，全面了解 <strong>webpack</strong>。  </p>\n<h2 id=\"webpack简介\"><a href=\"#webpack简介\" class=\"headerlink\" title=\"webpack简介\"></a>webpack简介</h2><blockquote>\n<p><strong>webpack</strong> 是一个开源的前端模块构建工具，由德国开发者 <em>Tobias Koppers</em> 在2012年首发并开源。  </p>\n</blockquote>\n<p>由于近年来前端技术发展迅猛，越来越重视用户的操作体验，现在早已经不是那个 html、css、jQuery 一把梭的年代了。<br>越来越多的新思想、新框架孕育而生。这导致前端越来越重，需要 <strong>引入依赖</strong>、<strong>高级语法降级解析</strong>，<strong>Css预编译</strong>，<strong>使用更为严格的</strong><code>TypeScript</code><strong>避免问题</strong>， <strong>使用现代 mvvm 框架</strong><code>Vue</code>，<code>React</code><strong>快捷开发</strong>。最后 <strong>构建</strong> 成浏览器 <strong>可识别</strong> 的<code>.css</code> <code>.js</code>等基本文件再部署到生产环境，这其中构建一步就是<code>webpack</code>做的事情。 </p>\n<p><img src=\"/2020/09/24/webpack%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/EOzt1WTKBaXkgIr.png\" alt=\"WechatIMG2925.png\"></p>\n<h2 id=\"webpack基础使用\"><a href=\"#webpack基础使用\" class=\"headerlink\" title=\"webpack基础使用\"></a>webpack基础使用</h2><blockquote>\n<p>全局已安装 <a href=\"mailto:&#x77;&#x65;&#98;&#112;&#97;&#x63;&#107;&#x40;&#x34;&#x2e;&#x34;&#x34;&#x2e;&#x32;\">&#x77;&#x65;&#98;&#112;&#97;&#x63;&#107;&#x40;&#x34;&#x2e;&#x34;&#x34;&#x2e;&#x32;</a> 和 <a href=\"mailto:&#x6e;&#111;&#100;&#101;&#x6a;&#x73;&#64;&#49;&#x30;&#x2e;&#x31;&#51;&#x2e;&#48;\">&#x6e;&#111;&#100;&#101;&#x6a;&#x73;&#64;&#49;&#x30;&#x2e;&#x31;&#51;&#x2e;&#48;</a>  </p>\n</blockquote>\n<p>主要是两个配置：</p>\n<ul>\n<li><strong>entry</strong>：构建入口, <code>webpack</code>会从指定文件开始识别依赖模块关系并开始构建。<code>webpack4</code>中默认入口在<code>/src/index.js</code>。</li>\n<li><strong>output</strong>：构建出口，告诉<code>webpack</code>，构建完的文件放在哪里，叫什么名字，<code>webpack4</code>中默认出口在<code>/dist/main.js</code>。</li>\n</ul>\n<p>先来演示一下webpack最基本的操作。<br>新建文件夹，初始化项目<code>npm init</code> ，一路回车，生成<code>package.json</code>，在这个目录新建两个文件，<code>main.js</code>，<code>chunk.js</code> ，内容如下：  </p>\n<p>main.js   </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./chunk.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>chunk.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token string\">'I am chunk.js'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建好之后在项目下安装webpack：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev webpack webpack<span class=\"token operator\">-</span>cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行第一个命令，<code>webpack 构建入口 --output 构建出口</code>： </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ webpack ./main.js --output ./dist.js\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\nHash: 8cc82b2736e97001d58e\nVersion: webpack <span class=\"token number\">4.44</span>.2\nTime: 269ms\nBuilt at: <span class=\"token number\">2020</span>-09-24 <span class=\"token number\">16</span>:46:34\n  Asset        Size  Chunks             Chunk Names\ndist.js  <span class=\"token number\">1000</span> bytes       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> dist.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> ./main.js <span class=\"token number\">56</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ./chunk.js <span class=\"token number\">32</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上命令是把<code>main.js</code>使用<code>webpack</code>打包生成<code>dist.js</code>，由于<code>main.js</code>中引入<code>chunk.js</code>，所以<code>dist.js</code>是<code>main.js</code>和<code>chunk.js</code>的整合。  </p>\n<p>可以看到<code>webpack</code>输出一些打包信息后，并成功在<code>./</code>下创建<code>dist.js</code>，看看效果，创建一个<code>index.html</code>，并引入<code>dist.js</code></p>\n<p>当前目录结构:  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">.</span>\n├── chunk.js \n├── index.html\n├── main.js \n├── package.json <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>打开<code>index.html</code>控制台面板可以看到向屏幕输出了「 I am chunk.js 」，看到这里，其实就可以理解<code>webpack</code>的作用了。都是在这个基础上，<strong>变形转换</strong>，<strong>以及打包过程中增加一些处理</strong>。这次简单演示使用终端打包，实际开发需要设置相当多的参数，命令不方便处理，会创建一个<code>webpack.conf.js</code>，专门来编写配置。  </p>\n<h2 id=\"webpack4的改变\"><a href=\"#webpack4的改变\" class=\"headerlink\" title=\"webpack4的改变\"></a>webpack4的改变</h2><ul>\n<li>速度相比3更快了(提升至少50%，没测过)</li>\n<li>默认配置出入口(就是网上说的0配置)</li>\n<li>增加了环境配置</li>\n</ul>\n<h4 id=\"默认配置出入口\"><a href=\"#默认配置出入口\" class=\"headerlink\" title=\"默认配置出入口\"></a>默认配置出入口</h4><blockquote>\n<p>这里需要说明一下，在webpack4中实现了默认配置，去除了老版本繁琐的配置，webpack真正的本领是构建，webpack官方也注意到了这一点，这是一个非常明智的改变。  </p>\n</blockquote>\n<p>版本3中需要用<code>entry</code>和<code>output</code>来指定构建入口和出口，在版本4中有默认配置。  </p>\n<ul>\n<li>默认入口在<code>/src/index.js</code></li>\n<li>默认出口在<code>/dist/main.js</code></li>\n</ul>\n<p>如果你想修改，可以在<code>package.json</code>修改script，例：  </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">webpack ./entry/js/index.js --output ./output/js/main.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>webpack.conf.js</code>：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 引入path为了实现相对路径转换成绝对路径：</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'路径'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// entry为开始构建的文件入口</span>\n  entry<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// output为构建后的文件出口，其中path为出口文件的路径，filename为出口文件名</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"增加了环境配置\"><a href=\"#增加了环境配置\" class=\"headerlink\" title=\"增加了环境配置\"></a>增加了环境配置</h4><p>4以前版本配置不同环境，根据<code>nodejs</code>环境变量需要编写两套配置：开发环境中配置<code>live reloading</code> 和<code>webpack-dev-server</code>；生产环境配置<code>sourceMap</code>和<code>uglifyJSPlugin</code>美化压缩代码。在4版本中只需要在<code>package.json</code>的中<code>script</code> 增加<code>--mode</code>参数指定环境，并自动处理上面不同环境区别：</p>\n<p>package.json：  </p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode production \"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"webpack进阶使用\"><a href=\"#webpack进阶使用\" class=\"headerlink\" title=\"webpack进阶使用\"></a>webpack进阶使用</h2><p>主要是两个配置：</p>\n<ul>\n<li><p><strong>loader</strong>：<code>webpack</code>本身只能处理<code>.js</code>文件，安装不同的<code>loader</code>使其具备处理其他文件的能力，比如<code>.css</code>，<code>.scss</code>，<code>.vue</code>，<code>.jsx</code>，<code>.jade</code>。</p>\n</li>\n<li><p><strong>plugins</strong>：用于处理打包过程中一些更复杂的处理，比如<code>htmlwebpackplugin</code>自动生成<code>index.html</code>并引入构建文件，<code>uglifyJSPlugin</code>美化压缩代码。  </p>\n</li>\n</ul>\n<h4 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h4><p>在<code>/css/index.css</code>中创建<code>css</code>文件，并在<code>/src/index.js</code>引入，<code>css</code>经过<code>webpack</code>构建后会自动作用在<code>index.html</code>上。</p>\n<p><code>/src/index.css </code>： </p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>/src/index.js</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> indexCss <span class=\"token keyword\">from</span> <span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 或者 import './index.css';</span>\n\n<span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../chunk.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行<code>webpack</code>，可以看到报错了：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ERROR <span class=\"token keyword\">in</span> ./src/index.css <span class=\"token number\">1</span>:4\nModule parse failed: Unexpected token <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>:4<span class=\"token punctuation\">)</span>\nYou may need an appropriate loader to handle this <span class=\"token function\">file</span> type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts<span class=\"token comment\">#loaders</span>\n<span class=\"token operator\">></span> html<span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">|</span>   color:red<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">&#125;</span>\n @ ./src/index.js <span class=\"token number\">1</span>:0-34<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>你需要安装对应<code>loader</code>去处理这个<code>css</code>文件，安装<code>style-loader</code>和<code>css-loader</code>： </p>\n<ul>\n<li><strong>css-loader</strong>：<code>webpack</code>默认只能处理<code>.js</code>和<code>.json</code>文件类型，这个包会使<code>webpack</code>具备处理<code>.css</code>的能力  </li>\n<li><strong>style-loader</strong>：<code>style-loader</code>会把<code>css-loader</code>构建好的<code>css</code>作为<code>&lt;style&gt;</code>标签插入到<code>html</code>中。</li>\n</ul>\n<p>安装他们：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> style-loader css-loader --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置他们：  </p>\n<blockquote>\n<p>需要注意：loader 的执行顺序是从后往前执行，本例先执行 css-loader 返回内容再交给 style-loader 执行。链式调用，一环套一环，每个 loader 负责单一指责，方便扩展。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> \n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> \n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span> \n          loader<span class=\"token operator\">:</span> <span class=\"token string\">\"style-loader\"</span><span class=\"token punctuation\">,</span>\n          options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// options</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span> \n          loader<span class=\"token operator\">:</span> <span class=\"token string\">\"css-loader\"</span> <span class=\"token punctuation\">,</span>\n          options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// options</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>test</strong>：匹配 loaders 所处理文件的拓展名的正则表达式（必填）</li>\n<li><strong>loader</strong>：loader 的名称（必填）</li>\n<li><strong>include/exclude</strong>：需要处理的文件夹或屏蔽不需要处理的文件夹（选填）；</li>\n<li><strong>options</strong>：为 loaders 提供额外的设置选项（选填）</li>\n</ul>\n<p>详细options：<br><a href=\"https://developer.aliyun.com/mirror/npm/package/style-loader\">style-loader</a><br><a href=\"https://developer.aliyun.com/mirror/npm/package/css-loader\">css-loader</a></p>\n<p>重新构建：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">➜  webpack-demo webpack\nHash: c741b4496ab2094ee570\nVersion: webpack <span class=\"token number\">4.44</span>.2\nTime: 270ms\nBuilt at: <span class=\"token number\">2020</span>-09-30 <span class=\"token number\">17</span>:22:42\n  Asset     Size  Chunks             Chunk Names\nmain.js  <span class=\"token number\">4.7</span> KiB       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> main.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ./src/index.js <span class=\"token number\">79</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> ./src/index.css <span class=\"token number\">529</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> ./node_modules/css-loader/dist/cjs.js??ref--4-1<span class=\"token operator\">!</span>./src/index.css <span class=\"token number\">301</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> ./chunk.js <span class=\"token number\">32</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n    + <span class=\"token number\">2</span> hidden modules<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>构建成功了，<br>修改<code>index.html</code>引入构建后的文件，并打开，可以看到一个红色标题，loader配置生效了  </p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>./dist/main.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h3><p>使用<code>html-webpack-plugin</code>和<code>clean-webpack-plugin</code>举例：  </p>\n<ul>\n<li><strong>html-webpack-plugin</strong>：构建时，在output目录下创建一个index.html文件，并把构建后的文件插入到html中。</li>\n<li><strong>clean-webpack-plugin</strong>：每次打包前自动清空output文件夹。  </li>\n</ul>\n<h4 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a>html-webpack-plugin</h4><p>安装：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> html-webpack-plugin --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>webpack.config.js</code>配置：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://developer.aliyun.com/mirror/npm/package/html-webpack-plugin\">html-webpack-plugin更多参数</a></p>\n<h4 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h4><p>安装： </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> clean-webpack-plugin --save-dev <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>webpack.config.js</code>配置：   </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://developer.aliyun.com/mirror/npm/package/clean-webpack-plugin\">clean-webpack-plugin更多参数</a> </p>\n<p>复杂的<code>plugins</code>配置：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  \n\t <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>plugins</code>为一个数组，每一项都是一个插件，插件的配置都是作为参数传入，有数组也有对象类型，<code>plugin</code>不像<code>loader</code>有很明确的顺序，它类似事件绑定，按需执行。</p>\n"},{"title":"使用css实现圆环加载","date":"2020-10-04T01:44:03.000Z","_content":"\n### html  \n\n```html\n<div class=\"round\"></div>\n```\n### css\n使用`background-image`渐变属性和动画状态的`伪元素遮盖`来实现：    \n\n```css\n.round {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  background-color: #eee;\n  background-image: linear-gradient(to right, transparent 50%, blue 0);\n  position: relative;\n}\n.round::before {\n  width: 50%;\n  height: 100%;\n  content: '';\n  position: absolute;\n  top: 0; \n  left: 50%;\n  border-radius: 0 100% 100% 0 / 50%;\n  background-color: inherit;\n  transform-origin: left;\n  animation: spin 5s linear infinite, dye 10s step-end infinite;\n}\n@keyframes spin {\n  to { transform: rotate(.5turn); }\n}\n@keyframes dye {\n  50% { background: blue; }\n}\n```\n#### 效果\n\n![demo.gif](./使用css实现环状进度/E8CM6WZ1hRv7piy.gif)","source":"_posts/使用css实现环状进度.md","raw":"---\ntitle: 使用css实现圆环加载\ndate: 2020/10/04 09:44:03\ntags: [css]\n---\n\n### html  \n\n```html\n<div class=\"round\"></div>\n```\n### css\n使用`background-image`渐变属性和动画状态的`伪元素遮盖`来实现：    \n\n```css\n.round {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  background-color: #eee;\n  background-image: linear-gradient(to right, transparent 50%, blue 0);\n  position: relative;\n}\n.round::before {\n  width: 50%;\n  height: 100%;\n  content: '';\n  position: absolute;\n  top: 0; \n  left: 50%;\n  border-radius: 0 100% 100% 0 / 50%;\n  background-color: inherit;\n  transform-origin: left;\n  animation: spin 5s linear infinite, dye 10s step-end infinite;\n}\n@keyframes spin {\n  to { transform: rotate(.5turn); }\n}\n@keyframes dye {\n  50% { background: blue; }\n}\n```\n#### 效果\n\n![demo.gif](./使用css实现环状进度/E8CM6WZ1hRv7piy.gif)","slug":"使用css实现环状进度","published":1,"updated":"2021-10-22T09:38:36.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqn000mh7vmb8lh74n7","content":"<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><p>使用<code>background-image</code>渐变属性和动画状态的<code>伪元素遮盖</code>来实现：    </p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.round</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> transparent 50%<span class=\"token punctuation\">,</span> blue 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.round::before</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> \n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 100% 100% 0 / 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> spin 5s linear infinite<span class=\"token punctuation\">,</span> dye 10s step-end infinite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> spin</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>.5turn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> dye</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">50%</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"/2020/10/04/%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E7%8E%AF%E7%8A%B6%E8%BF%9B%E5%BA%A6/E8CM6WZ1hRv7piy.gif\" alt=\"demo.gif\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><p>使用<code>background-image</code>渐变属性和动画状态的<code>伪元素遮盖</code>来实现：    </p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.round</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> transparent 50%<span class=\"token punctuation\">,</span> blue 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.round::before</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> \n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 100% 100% 0 / 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> spin 5s linear infinite<span class=\"token punctuation\">,</span> dye 10s step-end infinite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> spin</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>.5turn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> dye</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">50%</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"/2020/10/04/%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E7%8E%AF%E7%8A%B6%E8%BF%9B%E5%BA%A6/E8CM6WZ1hRv7piy.gif\" alt=\"demo.gif\"></p>\n"},{"title":"使用jarsigner重新签名apk包","date":"2020-10-26T08:44:13.000Z","_content":"\n## 环境\n - macos 10.14\n - iterm 2    \n \n## 使用\n#### 生成密钥\nkeytool -genkeypair -alias <别名> -keystore <密钥库存储位置和名称>\n\n```shell\nkeytool -genkeypair -alias demokey -keystore demo.keystore\n```  \n内容填写后，生成完毕  \n\n#### 生成签名  \njarsigner -verbose -keystore <使用密钥库位置> -signedjar <签名后的包保存位置和名字> <要签名的包保存位置和名字> <别名，对应上面的别名>\n\n```shell\njarsigner -verbose -keystore /Users/liangqi/Desktop/apk/demo.keystore -signedjar ./tap_signed.apk ./tap_unsign.apk demokey\n``` \n即可拿到签名后的包","source":"_posts/使用jarsigner重新签名apk包.md","raw":"---\ntitle: 使用jarsigner重新签名apk包\ndate: 2020/10/26 16:44:13\ntags: [其他]\n---\n\n## 环境\n - macos 10.14\n - iterm 2    \n \n## 使用\n#### 生成密钥\nkeytool -genkeypair -alias <别名> -keystore <密钥库存储位置和名称>\n\n```shell\nkeytool -genkeypair -alias demokey -keystore demo.keystore\n```  \n内容填写后，生成完毕  \n\n#### 生成签名  \njarsigner -verbose -keystore <使用密钥库位置> -signedjar <签名后的包保存位置和名字> <要签名的包保存位置和名字> <别名，对应上面的别名>\n\n```shell\njarsigner -verbose -keystore /Users/liangqi/Desktop/apk/demo.keystore -signedjar ./tap_signed.apk ./tap_unsign.apk demokey\n``` \n即可拿到签名后的包","slug":"使用jarsigner重新签名apk包","published":1,"updated":"2021-10-22T09:38:36.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqo000ph7vmbwup4hvz","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>macos 10.14</li>\n<li>iterm 2    </li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><p>keytool -genkeypair -alias &lt;别名&gt; -keystore &lt;密钥库存储位置和名称&gt;</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">keytool -genkeypair -alias demokey -keystore demo.keystore\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n内容填写后，生成完毕  \n\n<span class=\"token comment\">#### 生成签名  </span>\njarsigner -verbose -keystore <span class=\"token operator\">&lt;</span>使用密钥库位置<span class=\"token operator\">></span> -signedjar <span class=\"token operator\">&lt;</span>签名后的包保存位置和名字<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>要签名的包保存位置和名字<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>别名，对应上面的别名<span class=\"token operator\">></span>\n\n<span class=\"token variable\">`</span></span>``shell\njarsigner -verbose -keystore /Users/liangqi/Desktop/apk/demo.keystore -signedjar ./tap_signed.apk ./tap_unsign.apk demokey<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>即可拿到签名后的包</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>macos 10.14</li>\n<li>iterm 2    </li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><p>keytool -genkeypair -alias &lt;别名&gt; -keystore &lt;密钥库存储位置和名称&gt;</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">keytool -genkeypair -alias demokey -keystore demo.keystore\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n内容填写后，生成完毕  \n\n<span class=\"token comment\">#### 生成签名  </span>\njarsigner -verbose -keystore <span class=\"token operator\">&lt;</span>使用密钥库位置<span class=\"token operator\">></span> -signedjar <span class=\"token operator\">&lt;</span>签名后的包保存位置和名字<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>要签名的包保存位置和名字<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>别名，对应上面的别名<span class=\"token operator\">></span>\n\n<span class=\"token variable\">`</span></span>``shell\njarsigner -verbose -keystore /Users/liangqi/Desktop/apk/demo.keystore -signedjar ./tap_signed.apk ./tap_unsign.apk demokey<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>即可拿到签名后的包</p>\n"},{"title":"函数柯里化(currying)","date":"2020-10-14T05:13:04.000Z","_content":"\n## 什么是函数柯里化  \n来自维基百科的解释：\n> 在计算机科学中，柯里化（ Currying ）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。  \n    \n可以知道这是一种思想一种函数变形。并不会执行函数，实现不区分语言。以上说法已经很通俗了。简单来说当参数数量不够时，利用闭包把当前这个参数存起来，返回一个新的函数，等待返回的这个新函数继续被调用，继续获取参数，并把这个参数和闭包存的参数合并到一起，如果这个参数数量数量等于被柯里化函数形参数量，就开始执行，否则继续返回新函数，继续存参数，重复这个步骤。用 `JavaScript` 举个例子：   \n\n```javascript  \nadd(1, 2, 3, 4); // 创建个简单函数，把所有参数累加并返回结果10 \n\n// 把这个函数柯里化之后，就是把多个参数分解成改成单或多个组合传入，并返回相同结果。看起来像这样：\ncurryingAdd(1)(2)(3)(4) // 10\n// 或者\ncurryingAdd(1, 2)(3)(4) // 10\n// 或者\ncurryingAdd(1)(2, 3, 4) // 10\n```\n\n## 柯里化的好处  \n看了以上的例子，看起来没什么用，反而实现起来更复杂。实际上这是一种高度抽象编程规范，属于函数式编程的思想，主要好处为：\n   \n- 参数复用\n  \n还有`提前确认`和`延迟执行`好处，其实都是一个意思，个人认为参数复用是最明显的好处，利用好可以写出更优雅的代码，让机器更像人类一步一步实现某件事，一段伪代码来举例：    \n\n```javascript\nfunction ajax(method, url){\n// http请求的实现...\n}  \n\nfunction currying(fun){\n// 柯里化实现...\n}\n\n// 把ajax方法柯里化\nlet curryingAjax = currying(ajax);\n\n// 得到一个get请求，只执行一次\nlet getAjax = curryingAjax(\"get\");\n\n// 关联业务逻辑，获取用户信息接口\nlet getUserInfo = getAjax(\"http://api.test.com/getUserInfo\");\n\n// 关联业务逻辑，获取订单列表接口\nlet getOrderList = getAjax(\"http://api.test.com/getOrderList\");\n```\n\n可以看出`get`传入`curryingAjax`方法仅一次，之后可以调用多次`get`请求。先确定请求方法，在确定具体请求地址，这就实现了参数的复用。如果是`post`请求：  \n\n```javascript\nlet postAjax = curryingAjax(\"post\");\n\n// 之后根据业务逻辑多次调用\n...\n```\n## 柯里化完整代码  \n - 判断`currying`的参数第二位到最后一位（也就是`args`）的长度，如果长度等于`fn`形参长度，那么直接执行`fn`，并把`args`作为参数传入\n - 如果传入参数（`args`）不够时，利用递归和闭包，暂存传入的参数，并重新返回`currying`函数    \n\n```javascript \nfunction currying(fn, ...args) {\n  if (args.length >= fn.length) {\n    return fn(...args);\n  } else {\n    return (...args2) => currying(fn, ...args, ...args2);\n  }\n}\n```","source":"_posts/函数柯里化(curring).md","raw":"---\ntitle: 函数柯里化(currying)\ndate: 2020/10/14 13:13:04\ntags: [前端]\n---\n\n## 什么是函数柯里化  \n来自维基百科的解释：\n> 在计算机科学中，柯里化（ Currying ）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。  \n    \n可以知道这是一种思想一种函数变形。并不会执行函数，实现不区分语言。以上说法已经很通俗了。简单来说当参数数量不够时，利用闭包把当前这个参数存起来，返回一个新的函数，等待返回的这个新函数继续被调用，继续获取参数，并把这个参数和闭包存的参数合并到一起，如果这个参数数量数量等于被柯里化函数形参数量，就开始执行，否则继续返回新函数，继续存参数，重复这个步骤。用 `JavaScript` 举个例子：   \n\n```javascript  \nadd(1, 2, 3, 4); // 创建个简单函数，把所有参数累加并返回结果10 \n\n// 把这个函数柯里化之后，就是把多个参数分解成改成单或多个组合传入，并返回相同结果。看起来像这样：\ncurryingAdd(1)(2)(3)(4) // 10\n// 或者\ncurryingAdd(1, 2)(3)(4) // 10\n// 或者\ncurryingAdd(1)(2, 3, 4) // 10\n```\n\n## 柯里化的好处  \n看了以上的例子，看起来没什么用，反而实现起来更复杂。实际上这是一种高度抽象编程规范，属于函数式编程的思想，主要好处为：\n   \n- 参数复用\n  \n还有`提前确认`和`延迟执行`好处，其实都是一个意思，个人认为参数复用是最明显的好处，利用好可以写出更优雅的代码，让机器更像人类一步一步实现某件事，一段伪代码来举例：    \n\n```javascript\nfunction ajax(method, url){\n// http请求的实现...\n}  \n\nfunction currying(fun){\n// 柯里化实现...\n}\n\n// 把ajax方法柯里化\nlet curryingAjax = currying(ajax);\n\n// 得到一个get请求，只执行一次\nlet getAjax = curryingAjax(\"get\");\n\n// 关联业务逻辑，获取用户信息接口\nlet getUserInfo = getAjax(\"http://api.test.com/getUserInfo\");\n\n// 关联业务逻辑，获取订单列表接口\nlet getOrderList = getAjax(\"http://api.test.com/getOrderList\");\n```\n\n可以看出`get`传入`curryingAjax`方法仅一次，之后可以调用多次`get`请求。先确定请求方法，在确定具体请求地址，这就实现了参数的复用。如果是`post`请求：  \n\n```javascript\nlet postAjax = curryingAjax(\"post\");\n\n// 之后根据业务逻辑多次调用\n...\n```\n## 柯里化完整代码  \n - 判断`currying`的参数第二位到最后一位（也就是`args`）的长度，如果长度等于`fn`形参长度，那么直接执行`fn`，并把`args`作为参数传入\n - 如果传入参数（`args`）不够时，利用递归和闭包，暂存传入的参数，并重新返回`currying`函数    \n\n```javascript \nfunction currying(fn, ...args) {\n  if (args.length >= fn.length) {\n    return fn(...args);\n  } else {\n    return (...args2) => currying(fn, ...args, ...args2);\n  }\n}\n```","slug":"函数柯里化(curring)","published":1,"updated":"2021-10-22T09:38:36.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqp000rh7vmdzex96l8","content":"<h2 id=\"什么是函数柯里化\"><a href=\"#什么是函数柯里化\" class=\"headerlink\" title=\"什么是函数柯里化\"></a>什么是函数柯里化</h2><p>来自维基百科的解释：</p>\n<blockquote>\n<p>在计算机科学中，柯里化（ Currying ）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。  </p>\n</blockquote>\n<p>可以知道这是一种思想一种函数变形。并不会执行函数，实现不区分语言。以上说法已经很通俗了。简单来说当参数数量不够时，利用闭包把当前这个参数存起来，返回一个新的函数，等待返回的这个新函数继续被调用，继续获取参数，并把这个参数和闭包存的参数合并到一起，如果这个参数数量数量等于被柯里化函数形参数量，就开始执行，否则继续返回新函数，继续存参数，重复这个步骤。用 <code>JavaScript</code> 举个例子：   </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建个简单函数，把所有参数累加并返回结果10 </span>\n\n<span class=\"token comment\">// 把这个函数柯里化之后，就是把多个参数分解成改成单或多个组合传入，并返回相同结果。看起来像这样：</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"柯里化的好处\"><a href=\"#柯里化的好处\" class=\"headerlink\" title=\"柯里化的好处\"></a>柯里化的好处</h2><p>看了以上的例子，看起来没什么用，反而实现起来更复杂。实际上这是一种高度抽象编程规范，属于函数式编程的思想，主要好处为：</p>\n<ul>\n<li>参数复用</li>\n</ul>\n<p>还有<code>提前确认</code>和<code>延迟执行</code>好处，其实都是一个意思，个人认为参数复用是最明显的好处，利用好可以写出更优雅的代码，让机器更像人类一步一步实现某件事，一段伪代码来举例：    </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// http请求的实现...</span>\n<span class=\"token punctuation\">&#125;</span>  \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 柯里化实现...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 把ajax方法柯里化</span>\n<span class=\"token keyword\">let</span> curryingAjax <span class=\"token operator\">=</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 得到一个get请求，只执行一次</span>\n<span class=\"token keyword\">let</span> getAjax <span class=\"token operator\">=</span> <span class=\"token function\">curryingAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关联业务逻辑，获取用户信息接口</span>\n<span class=\"token keyword\">let</span> getUserInfo <span class=\"token operator\">=</span> <span class=\"token function\">getAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.test.com/getUserInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关联业务逻辑，获取订单列表接口</span>\n<span class=\"token keyword\">let</span> getOrderList <span class=\"token operator\">=</span> <span class=\"token function\">getAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.test.com/getOrderList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出<code>get</code>传入<code>curryingAjax</code>方法仅一次，之后可以调用多次<code>get</code>请求。先确定请求方法，在确定具体请求地址，这就实现了参数的复用。如果是<code>post</code>请求：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> postAjax <span class=\"token operator\">=</span> <span class=\"token function\">curryingAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 之后根据业务逻辑多次调用</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"柯里化完整代码\"><a href=\"#柯里化完整代码\" class=\"headerlink\" title=\"柯里化完整代码\"></a>柯里化完整代码</h2><ul>\n<li>判断<code>currying</code>的参数第二位到最后一位（也就是<code>args</code>）的长度，如果长度等于<code>fn</code>形参长度，那么直接执行<code>fn</code>，并把<code>args</code>作为参数传入</li>\n<li>如果传入参数（<code>args</code>）不够时，利用递归和闭包，暂存传入的参数，并重新返回<code>currying</code>函数    </li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是函数柯里化\"><a href=\"#什么是函数柯里化\" class=\"headerlink\" title=\"什么是函数柯里化\"></a>什么是函数柯里化</h2><p>来自维基百科的解释：</p>\n<blockquote>\n<p>在计算机科学中，柯里化（ Currying ）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。  </p>\n</blockquote>\n<p>可以知道这是一种思想一种函数变形。并不会执行函数，实现不区分语言。以上说法已经很通俗了。简单来说当参数数量不够时，利用闭包把当前这个参数存起来，返回一个新的函数，等待返回的这个新函数继续被调用，继续获取参数，并把这个参数和闭包存的参数合并到一起，如果这个参数数量数量等于被柯里化函数形参数量，就开始执行，否则继续返回新函数，继续存参数，重复这个步骤。用 <code>JavaScript</code> 举个例子：   </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建个简单函数，把所有参数累加并返回结果10 </span>\n\n<span class=\"token comment\">// 把这个函数柯里化之后，就是把多个参数分解成改成单或多个组合传入，并返回相同结果。看起来像这样：</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"柯里化的好处\"><a href=\"#柯里化的好处\" class=\"headerlink\" title=\"柯里化的好处\"></a>柯里化的好处</h2><p>看了以上的例子，看起来没什么用，反而实现起来更复杂。实际上这是一种高度抽象编程规范，属于函数式编程的思想，主要好处为：</p>\n<ul>\n<li>参数复用</li>\n</ul>\n<p>还有<code>提前确认</code>和<code>延迟执行</code>好处，其实都是一个意思，个人认为参数复用是最明显的好处，利用好可以写出更优雅的代码，让机器更像人类一步一步实现某件事，一段伪代码来举例：    </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// http请求的实现...</span>\n<span class=\"token punctuation\">&#125;</span>  \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 柯里化实现...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 把ajax方法柯里化</span>\n<span class=\"token keyword\">let</span> curryingAjax <span class=\"token operator\">=</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 得到一个get请求，只执行一次</span>\n<span class=\"token keyword\">let</span> getAjax <span class=\"token operator\">=</span> <span class=\"token function\">curryingAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关联业务逻辑，获取用户信息接口</span>\n<span class=\"token keyword\">let</span> getUserInfo <span class=\"token operator\">=</span> <span class=\"token function\">getAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.test.com/getUserInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关联业务逻辑，获取订单列表接口</span>\n<span class=\"token keyword\">let</span> getOrderList <span class=\"token operator\">=</span> <span class=\"token function\">getAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.test.com/getOrderList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出<code>get</code>传入<code>curryingAjax</code>方法仅一次，之后可以调用多次<code>get</code>请求。先确定请求方法，在确定具体请求地址，这就实现了参数的复用。如果是<code>post</code>请求：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> postAjax <span class=\"token operator\">=</span> <span class=\"token function\">curryingAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 之后根据业务逻辑多次调用</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"柯里化完整代码\"><a href=\"#柯里化完整代码\" class=\"headerlink\" title=\"柯里化完整代码\"></a>柯里化完整代码</h2><ul>\n<li>判断<code>currying</code>的参数第二位到最后一位（也就是<code>args</code>）的长度，如果长度等于<code>fn</code>形参长度，那么直接执行<code>fn</code>，并把<code>args</code>作为参数传入</li>\n<li>如果传入参数（<code>args</code>）不够时，利用递归和闭包，暂存传入的参数，并重新返回<code>currying</code>函数    </li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"函数的防抖和节流","date":"2020-10-20T10:02:56.000Z","_content":"\n## 防抖（debounce） \n#### 什么是防抖？\n\n - 一个函数被触发`n`秒后，才执行此函数\n - 如果`n`秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟n秒后执行此函数  \n \n这样的函数 **执行行为** 叫做函数防抖。 \n\n#### 应用场景   \n\n - 监听设备窗口大小发生改变，只有停止改变后的`200ms`执行`handleResize`方法\n\n\t```javascript\n\twindow.addEventListener('resize', debounce(handleResize, 200));\n\t```\n  \n - 监听表单填写，表达内容改变都去请求服务端数据，在每次表单执行输入停止的`500ms`后，才发起请求\n\n\t```javascript\n\tinput.addEventListener('change', debounce(handleRequest, 500));\n\t```  \n\t\n#### 代码实现  \n   \n```javascript\nfunction debounce(event, delay) {\n  let timer = null;\n  return function (...args) {  // ...args用来接受fun原有的参数，比如事件就是event对象\n    clearTimeout(timer); // 利用clearTimeout的特性，处理delay内，再此触发函数不做处理\n    timer = setTimeout(() => {\n      event.apply(this, args);\n    }, delay);\n  };\n}\n```\n\n## 节流（throttle）   \n#### 什么是节流？  \n\n - 单位时间内多次触发函数，函数只进行一次执行\n - 如果在这个单位时间内，多余的触发，全部不做处理。使函数按照规定的速率执行\n \n 这样的函数 **执行行为** 叫做函数节流。  \n \n#### 应用场景    \n\n - 滚动事件，持续滚动，间隔`200ms`执行    \n \n\t```javascript\n\tdom.addEventListener('scroll', throttle(handleScroll, 200)); \n\t```  \n - 鼠标滑动事件，一秒钟大概可以执行`60`次。使用节流函数优化，`200ms`执行一次。如果不做节流处理，可想而知浏览器压力有多大   \n\n\t```javascript\n\tdom.addEventListener('mousemove', throttle(handleMove, 200)); \n\t```     \n\t \n#### 代码实现    \n\n```javascript\nfunction throttle(fun, delay) {            \n　　let prev = Date.now();            \n　　return function(...args) {   // ...args用来接受fun原有的参数，比如事件就是event对象                        \n　　　　let now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　fun.apply(this, args);  \n　　　　　　prev = Date.now();                                    \n　　　　}            \n　　}        \n}\n```","source":"_posts/函数的防抖和节流.md","raw":"---\ntitle: 函数的防抖和节流\ndate: 2020/10/20 18:02:56\ntags: [前端]\n---\n\n## 防抖（debounce） \n#### 什么是防抖？\n\n - 一个函数被触发`n`秒后，才执行此函数\n - 如果`n`秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟n秒后执行此函数  \n \n这样的函数 **执行行为** 叫做函数防抖。 \n\n#### 应用场景   \n\n - 监听设备窗口大小发生改变，只有停止改变后的`200ms`执行`handleResize`方法\n\n\t```javascript\n\twindow.addEventListener('resize', debounce(handleResize, 200));\n\t```\n  \n - 监听表单填写，表达内容改变都去请求服务端数据，在每次表单执行输入停止的`500ms`后，才发起请求\n\n\t```javascript\n\tinput.addEventListener('change', debounce(handleRequest, 500));\n\t```  \n\t\n#### 代码实现  \n   \n```javascript\nfunction debounce(event, delay) {\n  let timer = null;\n  return function (...args) {  // ...args用来接受fun原有的参数，比如事件就是event对象\n    clearTimeout(timer); // 利用clearTimeout的特性，处理delay内，再此触发函数不做处理\n    timer = setTimeout(() => {\n      event.apply(this, args);\n    }, delay);\n  };\n}\n```\n\n## 节流（throttle）   \n#### 什么是节流？  \n\n - 单位时间内多次触发函数，函数只进行一次执行\n - 如果在这个单位时间内，多余的触发，全部不做处理。使函数按照规定的速率执行\n \n 这样的函数 **执行行为** 叫做函数节流。  \n \n#### 应用场景    \n\n - 滚动事件，持续滚动，间隔`200ms`执行    \n \n\t```javascript\n\tdom.addEventListener('scroll', throttle(handleScroll, 200)); \n\t```  \n - 鼠标滑动事件，一秒钟大概可以执行`60`次。使用节流函数优化，`200ms`执行一次。如果不做节流处理，可想而知浏览器压力有多大   \n\n\t```javascript\n\tdom.addEventListener('mousemove', throttle(handleMove, 200)); \n\t```     \n\t \n#### 代码实现    \n\n```javascript\nfunction throttle(fun, delay) {            \n　　let prev = Date.now();            \n　　return function(...args) {   // ...args用来接受fun原有的参数，比如事件就是event对象                        \n　　　　let now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　fun.apply(this, args);  \n　　　　　　prev = Date.now();                                    \n　　　　}            \n　　}        \n}\n```","slug":"函数的防抖和节流","published":1,"updated":"2021-10-22T09:38:36.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqp000uh7vmd6ab7w6n","content":"<h2 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h2><h4 id=\"什么是防抖？\"><a href=\"#什么是防抖？\" class=\"headerlink\" title=\"什么是防抖？\"></a>什么是防抖？</h4><ul>\n<li>一个函数被触发<code>n</code>秒后，才执行此函数</li>\n<li>如果<code>n</code>秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟n秒后执行此函数  </li>\n</ul>\n<p>这样的函数 <strong>执行行为</strong> 叫做函数防抖。 </p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li><p>监听设备窗口大小发生改变，只有停止改变后的<code>200ms</code>执行<code>handleResize</code>方法</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>handleResize<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>监听表单填写，表达内容改变都去请求服务端数据，在每次表单执行输入停止的<code>500ms</code>后，才发起请求</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\tinput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>handleRequest<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n\t\n#### 代码实现  \n   \n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用clearTimeout的特性，处理delay内，再此触发函数不做处理</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h2><h4 id=\"什么是节流？\"><a href=\"#什么是节流？\" class=\"headerlink\" title=\"什么是节流？\"></a>什么是节流？</h4><ul>\n<li>单位时间内多次触发函数，函数只进行一次执行</li>\n<li>如果在这个单位时间内，多余的触发，全部不做处理。使函数按照规定的速率执行</li>\n</ul>\n<p> 这样的函数 <strong>执行行为</strong> 叫做函数节流。  </p>\n<h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>滚动事件，持续滚动，间隔<code>200ms</code>执行     <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\tdom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>handleScroll<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n - 鼠标滑动事件，一秒钟大概可以执行</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">60</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">次。使用节流函数优化，</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">200</span>ms<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行一次。如果不做节流处理，可想而知浏览器压力有多大   \n\n\t</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\tdom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>handleMove<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">     \n\t \n#### 代码实现    \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象                        </span>\n　　　　<span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">>=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    \n　　　　　　<span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    \n　　　　<span class=\"token punctuation\">&#125;</span>            \n　　<span class=\"token punctuation\">&#125;</span>        \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h2><h4 id=\"什么是防抖？\"><a href=\"#什么是防抖？\" class=\"headerlink\" title=\"什么是防抖？\"></a>什么是防抖？</h4><ul>\n<li>一个函数被触发<code>n</code>秒后，才执行此函数</li>\n<li>如果<code>n</code>秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟n秒后执行此函数  </li>\n</ul>\n<p>这样的函数 <strong>执行行为</strong> 叫做函数防抖。 </p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li><p>监听设备窗口大小发生改变，只有停止改变后的<code>200ms</code>执行<code>handleResize</code>方法</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>handleResize<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>监听表单填写，表达内容改变都去请求服务端数据，在每次表单执行输入停止的<code>500ms</code>后，才发起请求</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\tinput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>handleRequest<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n\t\n#### 代码实现  \n   \n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用clearTimeout的特性，处理delay内，再此触发函数不做处理</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h2><h4 id=\"什么是节流？\"><a href=\"#什么是节流？\" class=\"headerlink\" title=\"什么是节流？\"></a>什么是节流？</h4><ul>\n<li>单位时间内多次触发函数，函数只进行一次执行</li>\n<li>如果在这个单位时间内，多余的触发，全部不做处理。使函数按照规定的速率执行</li>\n</ul>\n<p> 这样的函数 <strong>执行行为</strong> 叫做函数节流。  </p>\n<h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>滚动事件，持续滚动，间隔<code>200ms</code>执行     <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\tdom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>handleScroll<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n - 鼠标滑动事件，一秒钟大概可以执行</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">60</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">次。使用节流函数优化，</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">200</span>ms<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行一次。如果不做节流处理，可想而知浏览器压力有多大   \n\n\t</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\tdom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>handleMove<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">     \n\t \n#### 代码实现    \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象                        </span>\n　　　　<span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">>=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    \n　　　　　　<span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    \n　　　　<span class=\"token punctuation\">&#125;</span>            \n　　<span class=\"token punctuation\">&#125;</span>        \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"手写代码面试题合集","date":"2021-04-30T10:46:45.000Z","_content":"\n持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～\n\n## 实现sleep函数\n\n```javascript\n// 运行log函数后，希望得到结果：打印1，等待一秒钟，打印2，实现sleep函数\nfunction log() {\n  console.log(1);\n  sleep(1000);\n  console.log(2);\n}\nlog();\n\n\n// 解1：阻塞主线程\nfunction sleep(time) {\n  let t = Date.now()\n  while(Date.now() - t <= time) {}\n}\n// 解2：async/await调用\nfunction sleep(time) {\n  return new Promise((res)=> {\n  \tsetTimeOut(()=>{\n  \t\tresolve()\n  \t},time)\n  })\n}\n```\n\n## 柯里化(currying)\n\n```javascript\n// 题目：实现add函数, 输出6\nadd(1, 2, 3)\nadd(1)(2)(3)\nadd(1, 2)(3)\nadd(1)(2, 3)\n\n// 解1：不确定参数数量，一个方法\nfunction add (...agrg1) {\n  let t = function (...agrg2) {\n    return add(Array.from(agrg1).concat(Array.from(agrg2)).reduce((a, b)=> {return a+b}))\n  }\n  t.toString = ()=>{\n    return Array.from(agrg1).reduce((a, b)=> {return a+b})\n  }\n  return t\n}\n\nconsole.log(add(1, 2, 3)) // 6\nconsole.log(add(1)(2)(3)) // 6\nconsole.log(add(1, 2)(3)) // 6\nconsole.log(add(1)(2, 3)) // 6\n// 解2：确定参数数量，两个方法\nfunction currying(fn, ...args) {\n  if (args.length >= fn.length) {\n    return fn(...args);\n  } else {\n    return (...args2) => currying(fn, ...args, ...args2);\n  }\n}\n// add只可以接受三个参数\nlet add = function (a, b, c) {\n  return a+b+c\n}\n// 利用currying函数改造add函数，使add函数具备柯里化\nconst curry_add = currying(add)\n\nconsole.log(curry_add(1, 2, 3)) // 6\nconsole.log(curry_add(1)(2)(3)) // 6\nconsole.log(curry_add(1, 2)(3)) // 6\nconsole.log(curry_add(1)(2, 3)) // 6\n```\n## 约瑟夫环问题\n\n```javascript\n// N个人围成一圈，第一个人从1开始报数，报M的将被淘汰，下一个人接着从1开始报。如此反复，最后剩下两个，求最后的胜利者。\nfunction f(n) {\n  if(n <= 2) {\n    return n === 1 ? [1] : [1, 2]\n  }\n  let temp = []\n  for(let i = 1, len = n+1; i < len; i++) {\n    temp.push(i)\n  }\n  return fun_inner(temp)\n  function fun_inner(temp, count) {\n    if(temp.length == 2) {\n      return temp\n    }\n    count = count || 1\n    for(let i = 0, len = temp.wlength; i < len; i++) {\n      count++\n      if(count === 3) {\n        temp.splice(i, 1)\n        count = 1\n      }\n    }\n    return fun_inner(temp, count)\n  }\n}\nconsole.log(f(10)) // [4, 10]\nconsole.log(f(11)) // [3, 9]\nconsole.log(f(12)) // [6, 9]\n```\n\n## 字符串相加\n\n```javascript\nlet addStrings = function(a, b) {\n  let res = []\n  let temp = 0\n  if(a.length > b.length) {\n    let t = a.length - b.length\n    for(let i = 0; i < t; i++) {\n      b = '0' + b\n    }\n  } else {\n    let t = b.length - a.length\n    for(let i = 0; i < t; i++) {\n      a = '0' + a\n    }\n  }\n  for(let len = Math.max(a.length, b.length) - 1; len >= 0; len--) {\n      let i = len\n      let t_a = Number(a.charAt(i) || 0)\n      let t_b = Number(b.charAt(i) || 0)\n      let count = String(t_a + t_b + temp)\n      temp = 0\n      if(count.length > 1) {\n        temp = Number(count.charAt(0))\n        res.push(count.charAt(1))\n      } else {\n        res.push(count)\n      }\n  }\n  if(temp !== 0) {\n    res.push(temp)\n  }\n  return res.reverse().join('')\n}\n```\n\n## 插入排序\n\n```javascript\nlet insertion = function(arr) {\n  let len = arr.length\n  for(let i = 1; i < len; i++) {\n    let cur = i\n    let j = i - 1\n    while(j >= 0) {\n      if(arr[cur] < arr[j]) {\n        [arr[cur], arr[j]] = [arr[j], arr[cur]]\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      }\n      j--\n    }\n  }\n  return arr\n}\n```\n\n## 选择排序\n\n```javascript\nlet selection = function(arr) {\n  let len = arr.length;\n  for(let i = 0; i < len; i++) {\n    let idx = i;\n    for(let j = i+1; j < len; j++) {\n      if(arr[j] < arr[idx]) {\n        idx = j\n      }\n    }\n    [arr[idx], arr[i]] = [arr[i], arr[idx]]\n  }\n  return arr\n}\n```\n\n## 快速排序\n\n```javascript\nlet quickSort = function(arr) {\n  if(arr.length <= 1) {return arr} // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i < len; i++) {\n    if(arr[i] < point) { // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    }else{\n      right.push(arr[i]) \n    }\n  }\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n}\n```\n\n## call & apply & bind实现\n\n```javascript\nwindow.name = 2\nlet obj = {\n  name: 1\n}\nfunction fn(a, b) {\n  console.log(this.name, a, b)\n  return 1\n}\n\n// call\nFunction.prototype.myCall = function(context) {\n  context = context || window // 如果上下文是null或者undefined，那么默认为window\n  context.fn = this // 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换\n  // let arg = Array.from(arguments).slice(1) 截取参数也能这么写\n  let arg = [...arguments].slice(1)// 截取除了第一个参数以后的参数\n  let t = context.fn(...arg) // 传参执行\n  delete context.fn // 设置完成后删除\n  return t // 并返回\n}\n\n// apply\nFunction.prototype.myApply = function(context) {\n  context = context || window \n  context.fn = this // 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换\n  let arg = [...arguments][1] // 参数是一个数组\n  if(!arg) { // 如果没参数，那么就不传参执行\n      return context.fn()\n  }\n  let t = context.fn(...arg)\n  delete context.fn\n  return t\n}\n\n// bind\nFunction.prototype.Mybind = function (ref, ...arg) {\n  // 当这个函数被new调用，需要解决两个问题\n  // 1: 不应该使用ref为this，根据情况判断，如果new调用那么this为实例。普通调用this为ref\n  // 2: \b因为bind返回是新函数，所有要bind新函数要继承_this的原型\n  let _this = this\n  let fun = function(...arg2) {\n    // 1的实现：this instanceof fun表达式为true说明被new调用，那么this就是新函数的this，也就是一个新的对象，否则就是第一个参数ref\n    thisArg = this instanceof fun ? this : ref;\n    return _this.apply(ref, [...arg, ...arg2])\n  }\n\n  // 2的实现：如果有prototype，那么继承\n  _this.prototype && (fun.prototype = Object.create(_this.prototype))\n  return fun\n}\n\nconsole.log(fn(1,2))\nconsole.log(fn.myCall(obj, 1,2))\nconsole.log(fn.myApply(obj, [1,2]))\nconsole.log(fn.Mybind(obj, [1,2])())\n```\n\n## 二叉树反转\n```javascript\nlet reverseTree = function(root) {\n    if(!root) return null\n    if(root.left || root.right) {\n        let temp = root.left\n        root.left = root.right\n        root.right = temp\n        reverseTree(root.left)\n        reverseTree(root.right)\n    }\n    return root\n};\n```\n## 链表反转\n```javascript\nvar reverseList = function(head) {\n  let [prev, curr] = [null, head]\n    while (curr) {\n      let tmp = curr.next    // 1. 临时存储当前指针后续内容\n      curr.next = prev       // 2. 反转链表\n      prev = curr            // 3. 接收反转结果\n      curr = tmp             // 4. 接回临时存储的后续内容\n    }\n  return prev\n}\n```\n## 二叉树遍历\n> 以`前序`遍历举例\n\n```javascript\n// 递归版\nfunction preTraverse(root) {\n  if(root) {\n    console.log(root.value)\n    preOrder(root.left)\n    preOrder(root.right)\n  }\n}\n// 非递归版\nfunction preTraverse(root) {\n   if(!root) {return false}\n   let stack = []\n   let p = root\n   while(stack.length || p) { \n     if(p) { \n       console.log(p.val)\n       stack.push(p)\n       p = p.left\n     } else { \n       p = stack.pop()\n       p = p.right\n     }\n  }\n}\n```\n\n\n\n\n","source":"_posts/手写代码面试题记录.md","raw":"---\ntitle: 手写代码面试题合集\ndate: 2021/04/30 18:46:45\ntags: [前端]\n---\n\n持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～\n\n## 实现sleep函数\n\n```javascript\n// 运行log函数后，希望得到结果：打印1，等待一秒钟，打印2，实现sleep函数\nfunction log() {\n  console.log(1);\n  sleep(1000);\n  console.log(2);\n}\nlog();\n\n\n// 解1：阻塞主线程\nfunction sleep(time) {\n  let t = Date.now()\n  while(Date.now() - t <= time) {}\n}\n// 解2：async/await调用\nfunction sleep(time) {\n  return new Promise((res)=> {\n  \tsetTimeOut(()=>{\n  \t\tresolve()\n  \t},time)\n  })\n}\n```\n\n## 柯里化(currying)\n\n```javascript\n// 题目：实现add函数, 输出6\nadd(1, 2, 3)\nadd(1)(2)(3)\nadd(1, 2)(3)\nadd(1)(2, 3)\n\n// 解1：不确定参数数量，一个方法\nfunction add (...agrg1) {\n  let t = function (...agrg2) {\n    return add(Array.from(agrg1).concat(Array.from(agrg2)).reduce((a, b)=> {return a+b}))\n  }\n  t.toString = ()=>{\n    return Array.from(agrg1).reduce((a, b)=> {return a+b})\n  }\n  return t\n}\n\nconsole.log(add(1, 2, 3)) // 6\nconsole.log(add(1)(2)(3)) // 6\nconsole.log(add(1, 2)(3)) // 6\nconsole.log(add(1)(2, 3)) // 6\n// 解2：确定参数数量，两个方法\nfunction currying(fn, ...args) {\n  if (args.length >= fn.length) {\n    return fn(...args);\n  } else {\n    return (...args2) => currying(fn, ...args, ...args2);\n  }\n}\n// add只可以接受三个参数\nlet add = function (a, b, c) {\n  return a+b+c\n}\n// 利用currying函数改造add函数，使add函数具备柯里化\nconst curry_add = currying(add)\n\nconsole.log(curry_add(1, 2, 3)) // 6\nconsole.log(curry_add(1)(2)(3)) // 6\nconsole.log(curry_add(1, 2)(3)) // 6\nconsole.log(curry_add(1)(2, 3)) // 6\n```\n## 约瑟夫环问题\n\n```javascript\n// N个人围成一圈，第一个人从1开始报数，报M的将被淘汰，下一个人接着从1开始报。如此反复，最后剩下两个，求最后的胜利者。\nfunction f(n) {\n  if(n <= 2) {\n    return n === 1 ? [1] : [1, 2]\n  }\n  let temp = []\n  for(let i = 1, len = n+1; i < len; i++) {\n    temp.push(i)\n  }\n  return fun_inner(temp)\n  function fun_inner(temp, count) {\n    if(temp.length == 2) {\n      return temp\n    }\n    count = count || 1\n    for(let i = 0, len = temp.wlength; i < len; i++) {\n      count++\n      if(count === 3) {\n        temp.splice(i, 1)\n        count = 1\n      }\n    }\n    return fun_inner(temp, count)\n  }\n}\nconsole.log(f(10)) // [4, 10]\nconsole.log(f(11)) // [3, 9]\nconsole.log(f(12)) // [6, 9]\n```\n\n## 字符串相加\n\n```javascript\nlet addStrings = function(a, b) {\n  let res = []\n  let temp = 0\n  if(a.length > b.length) {\n    let t = a.length - b.length\n    for(let i = 0; i < t; i++) {\n      b = '0' + b\n    }\n  } else {\n    let t = b.length - a.length\n    for(let i = 0; i < t; i++) {\n      a = '0' + a\n    }\n  }\n  for(let len = Math.max(a.length, b.length) - 1; len >= 0; len--) {\n      let i = len\n      let t_a = Number(a.charAt(i) || 0)\n      let t_b = Number(b.charAt(i) || 0)\n      let count = String(t_a + t_b + temp)\n      temp = 0\n      if(count.length > 1) {\n        temp = Number(count.charAt(0))\n        res.push(count.charAt(1))\n      } else {\n        res.push(count)\n      }\n  }\n  if(temp !== 0) {\n    res.push(temp)\n  }\n  return res.reverse().join('')\n}\n```\n\n## 插入排序\n\n```javascript\nlet insertion = function(arr) {\n  let len = arr.length\n  for(let i = 1; i < len; i++) {\n    let cur = i\n    let j = i - 1\n    while(j >= 0) {\n      if(arr[cur] < arr[j]) {\n        [arr[cur], arr[j]] = [arr[j], arr[cur]]\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      }\n      j--\n    }\n  }\n  return arr\n}\n```\n\n## 选择排序\n\n```javascript\nlet selection = function(arr) {\n  let len = arr.length;\n  for(let i = 0; i < len; i++) {\n    let idx = i;\n    for(let j = i+1; j < len; j++) {\n      if(arr[j] < arr[idx]) {\n        idx = j\n      }\n    }\n    [arr[idx], arr[i]] = [arr[i], arr[idx]]\n  }\n  return arr\n}\n```\n\n## 快速排序\n\n```javascript\nlet quickSort = function(arr) {\n  if(arr.length <= 1) {return arr} // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i < len; i++) {\n    if(arr[i] < point) { // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    }else{\n      right.push(arr[i]) \n    }\n  }\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n}\n```\n\n## call & apply & bind实现\n\n```javascript\nwindow.name = 2\nlet obj = {\n  name: 1\n}\nfunction fn(a, b) {\n  console.log(this.name, a, b)\n  return 1\n}\n\n// call\nFunction.prototype.myCall = function(context) {\n  context = context || window // 如果上下文是null或者undefined，那么默认为window\n  context.fn = this // 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换\n  // let arg = Array.from(arguments).slice(1) 截取参数也能这么写\n  let arg = [...arguments].slice(1)// 截取除了第一个参数以后的参数\n  let t = context.fn(...arg) // 传参执行\n  delete context.fn // 设置完成后删除\n  return t // 并返回\n}\n\n// apply\nFunction.prototype.myApply = function(context) {\n  context = context || window \n  context.fn = this // 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换\n  let arg = [...arguments][1] // 参数是一个数组\n  if(!arg) { // 如果没参数，那么就不传参执行\n      return context.fn()\n  }\n  let t = context.fn(...arg)\n  delete context.fn\n  return t\n}\n\n// bind\nFunction.prototype.Mybind = function (ref, ...arg) {\n  // 当这个函数被new调用，需要解决两个问题\n  // 1: 不应该使用ref为this，根据情况判断，如果new调用那么this为实例。普通调用this为ref\n  // 2: \b因为bind返回是新函数，所有要bind新函数要继承_this的原型\n  let _this = this\n  let fun = function(...arg2) {\n    // 1的实现：this instanceof fun表达式为true说明被new调用，那么this就是新函数的this，也就是一个新的对象，否则就是第一个参数ref\n    thisArg = this instanceof fun ? this : ref;\n    return _this.apply(ref, [...arg, ...arg2])\n  }\n\n  // 2的实现：如果有prototype，那么继承\n  _this.prototype && (fun.prototype = Object.create(_this.prototype))\n  return fun\n}\n\nconsole.log(fn(1,2))\nconsole.log(fn.myCall(obj, 1,2))\nconsole.log(fn.myApply(obj, [1,2]))\nconsole.log(fn.Mybind(obj, [1,2])())\n```\n\n## 二叉树反转\n```javascript\nlet reverseTree = function(root) {\n    if(!root) return null\n    if(root.left || root.right) {\n        let temp = root.left\n        root.left = root.right\n        root.right = temp\n        reverseTree(root.left)\n        reverseTree(root.right)\n    }\n    return root\n};\n```\n## 链表反转\n```javascript\nvar reverseList = function(head) {\n  let [prev, curr] = [null, head]\n    while (curr) {\n      let tmp = curr.next    // 1. 临时存储当前指针后续内容\n      curr.next = prev       // 2. 反转链表\n      prev = curr            // 3. 接收反转结果\n      curr = tmp             // 4. 接回临时存储的后续内容\n    }\n  return prev\n}\n```\n## 二叉树遍历\n> 以`前序`遍历举例\n\n```javascript\n// 递归版\nfunction preTraverse(root) {\n  if(root) {\n    console.log(root.value)\n    preOrder(root.left)\n    preOrder(root.right)\n  }\n}\n// 非递归版\nfunction preTraverse(root) {\n   if(!root) {return false}\n   let stack = []\n   let p = root\n   while(stack.length || p) { \n     if(p) { \n       console.log(p.val)\n       stack.push(p)\n       p = p.left\n     } else { \n       p = stack.pop()\n       p = p.right\n     }\n  }\n}\n```\n\n\n\n\n","slug":"手写代码面试题记录","published":1,"updated":"2021-10-22T09:38:36.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqq000wh7vmhp6ug745","content":"<p>持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～</p>\n<h2 id=\"实现sleep函数\"><a href=\"#实现sleep函数\" class=\"headerlink\" title=\"实现sleep函数\"></a>实现sleep函数</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 运行log函数后，希望得到结果：打印1，等待一秒钟，打印2，实现sleep函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 解1：阻塞主线程</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;=</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 解2：async/await调用</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  \t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"柯里化-currying\"><a href=\"#柯里化-currying\" class=\"headerlink\" title=\"柯里化(currying)\"></a>柯里化(currying)</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 题目：实现add函数, 输出6</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 解1：不确定参数数量，一个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>agrg1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">t</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>agrg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 解2：确定参数数量，两个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// add只可以接受三个参数</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 利用currying函数改造add函数，使add函数具备柯里化</span>\n<span class=\"token keyword\">const</span> curry_add <span class=\"token operator\">=</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"约瑟夫环问题\"><a href=\"#约瑟夫环问题\" class=\"headerlink\" title=\"约瑟夫环问题\"></a>约瑟夫环问题</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// N个人围成一圈，第一个人从1开始报数，报M的将被淘汰，下一个人接着从1开始报。如此反复，最后剩下两个，求最后的胜利者。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temp<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> temp\n    <span class=\"token punctuation\">&#125;</span>\n    count <span class=\"token operator\">=</span> count <span class=\"token operator\">||</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>wlength<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 10]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 9]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [6, 9]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串相加\"><a href=\"#字符串相加\" class=\"headerlink\" title=\"字符串相加\"></a>字符串相加</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">addStrings</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      b <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      a <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> a\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> len\n      <span class=\"token keyword\">let</span> t_a <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> t_b <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>t_a <span class=\"token operator\">+</span> t_b <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">)</span>\n      temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        temp <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">insertion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> i\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        cur <span class=\"token operator\">=</span> j <span class=\"token comment\">// 交换后i值变了，那把交换后的i找回来就可以了</span>\n      <span class=\"token punctuation\">&#125;</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">selection</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        idx <span class=\"token operator\">=</span> j\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">quickSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 递归边界条件</span>\n  <span class=\"token keyword\">let</span> pointIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在数组中间位置取一个基准点</span>\n  <span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pointIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 通过基准点找到这个值</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环数组，小于point的放在left中，大的放在right中</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 递归，让每一个left和right继续排序，直到left或right只有一项为止</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"call-amp-apply-amp-bind实现\"><a href=\"#call-amp-apply-amp-bind实现\" class=\"headerlink\" title=\"call &amp; apply &amp; bind实现\"></a>call &amp; apply &amp; bind实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// call</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window <span class=\"token comment\">// 如果上下文是null或者undefined，那么默认为window</span>\n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换</span>\n  <span class=\"token comment\">// let arg = Array.from(arguments).slice(1) 截取参数也能这么写</span>\n  <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 截取除了第一个参数以后的参数</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传参执行</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn <span class=\"token comment\">// 设置完成后删除</span>\n  <span class=\"token keyword\">return</span> t <span class=\"token comment\">// 并返回</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// apply</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window \n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换</span>\n  <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 参数是一个数组</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果没参数，那么就不传参执行</span>\n      <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn\n  <span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// bind</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Mybind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ref<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 当这个函数被new调用，需要解决两个问题</span>\n  <span class=\"token comment\">// 1: 不应该使用ref为this，根据情况判断，如果new调用那么this为实例。普通调用this为ref</span>\n  <span class=\"token comment\">// 2: \b因为bind返回是新函数，所有要bind新函数要继承_this的原型</span>\n  <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1的实现：this instanceof fun表达式为true说明被new调用，那么this就是新函数的this，也就是一个新的对象，否则就是第一个参数ref</span>\n    thisArg <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">fun</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> ref<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_this</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 2的实现：如果有prototype，那么继承</span>\n  <span class=\"token class-name\">_this</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">_this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> fun\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">myCall</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">myApply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">Mybind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二叉树反转\"><a href=\"#二叉树反转\" class=\"headerlink\" title=\"二叉树反转\"></a>二叉树反转</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">reverseTree</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">||</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> temp\n        <span class=\"token function\">reverseTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">reverseTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> root\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"链表反转\"><a href=\"#链表反转\" class=\"headerlink\" title=\"链表反转\"></a>链表反转</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reverseList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next    <span class=\"token comment\">// 1. 临时存储当前指针后续内容</span>\n      curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prev       <span class=\"token comment\">// 2. 反转链表</span>\n      prev <span class=\"token operator\">=</span> curr            <span class=\"token comment\">// 3. 接收反转结果</span>\n      curr <span class=\"token operator\">=</span> tmp             <span class=\"token comment\">// 4. 接回临时存储的后续内容</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> prev\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h2><blockquote>\n<p>以<code>前序</code>遍历举例</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 递归版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preTraverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 非递归版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preTraverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> root\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n       stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n       p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left\n     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \n       p <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～</p>\n<h2 id=\"实现sleep函数\"><a href=\"#实现sleep函数\" class=\"headerlink\" title=\"实现sleep函数\"></a>实现sleep函数</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 运行log函数后，希望得到结果：打印1，等待一秒钟，打印2，实现sleep函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 解1：阻塞主线程</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;=</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 解2：async/await调用</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  \t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"柯里化-currying\"><a href=\"#柯里化-currying\" class=\"headerlink\" title=\"柯里化(currying)\"></a>柯里化(currying)</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 题目：实现add函数, 输出6</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 解1：不确定参数数量，一个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>agrg1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">t</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>agrg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 解2：确定参数数量，两个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// add只可以接受三个参数</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 利用currying函数改造add函数，使add函数具备柯里化</span>\n<span class=\"token keyword\">const</span> curry_add <span class=\"token operator\">=</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"约瑟夫环问题\"><a href=\"#约瑟夫环问题\" class=\"headerlink\" title=\"约瑟夫环问题\"></a>约瑟夫环问题</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// N个人围成一圈，第一个人从1开始报数，报M的将被淘汰，下一个人接着从1开始报。如此反复，最后剩下两个，求最后的胜利者。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temp<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> temp\n    <span class=\"token punctuation\">&#125;</span>\n    count <span class=\"token operator\">=</span> count <span class=\"token operator\">||</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>wlength<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 10]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 9]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [6, 9]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串相加\"><a href=\"#字符串相加\" class=\"headerlink\" title=\"字符串相加\"></a>字符串相加</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">addStrings</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      b <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      a <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> a\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> len\n      <span class=\"token keyword\">let</span> t_a <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> t_b <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>t_a <span class=\"token operator\">+</span> t_b <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">)</span>\n      temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        temp <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">insertion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> i\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        cur <span class=\"token operator\">=</span> j <span class=\"token comment\">// 交换后i值变了，那把交换后的i找回来就可以了</span>\n      <span class=\"token punctuation\">&#125;</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">selection</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        idx <span class=\"token operator\">=</span> j\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">quickSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 递归边界条件</span>\n  <span class=\"token keyword\">let</span> pointIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在数组中间位置取一个基准点</span>\n  <span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pointIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 通过基准点找到这个值</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环数组，小于point的放在left中，大的放在right中</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 递归，让每一个left和right继续排序，直到left或right只有一项为止</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"call-amp-apply-amp-bind实现\"><a href=\"#call-amp-apply-amp-bind实现\" class=\"headerlink\" title=\"call &amp; apply &amp; bind实现\"></a>call &amp; apply &amp; bind实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// call</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window <span class=\"token comment\">// 如果上下文是null或者undefined，那么默认为window</span>\n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换</span>\n  <span class=\"token comment\">// let arg = Array.from(arguments).slice(1) 截取参数也能这么写</span>\n  <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 截取除了第一个参数以后的参数</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传参执行</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn <span class=\"token comment\">// 设置完成后删除</span>\n  <span class=\"token keyword\">return</span> t <span class=\"token comment\">// 并返回</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// apply</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window \n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换</span>\n  <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 参数是一个数组</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果没参数，那么就不传参执行</span>\n      <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn\n  <span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// bind</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Mybind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ref<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 当这个函数被new调用，需要解决两个问题</span>\n  <span class=\"token comment\">// 1: 不应该使用ref为this，根据情况判断，如果new调用那么this为实例。普通调用this为ref</span>\n  <span class=\"token comment\">// 2: \b因为bind返回是新函数，所有要bind新函数要继承_this的原型</span>\n  <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1的实现：this instanceof fun表达式为true说明被new调用，那么this就是新函数的this，也就是一个新的对象，否则就是第一个参数ref</span>\n    thisArg <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">fun</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> ref<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_this</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 2的实现：如果有prototype，那么继承</span>\n  <span class=\"token class-name\">_this</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">_this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> fun\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">myCall</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">myApply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">Mybind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二叉树反转\"><a href=\"#二叉树反转\" class=\"headerlink\" title=\"二叉树反转\"></a>二叉树反转</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">reverseTree</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">||</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> temp\n        <span class=\"token function\">reverseTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">reverseTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> root\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"链表反转\"><a href=\"#链表反转\" class=\"headerlink\" title=\"链表反转\"></a>链表反转</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reverseList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next    <span class=\"token comment\">// 1. 临时存储当前指针后续内容</span>\n      curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prev       <span class=\"token comment\">// 2. 反转链表</span>\n      prev <span class=\"token operator\">=</span> curr            <span class=\"token comment\">// 3. 接收反转结果</span>\n      curr <span class=\"token operator\">=</span> tmp             <span class=\"token comment\">// 4. 接回临时存储的后续内容</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> prev\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h2><blockquote>\n<p>以<code>前序</code>遍历举例</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 递归版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preTraverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 非递归版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preTraverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> root\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n       stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n       p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left\n     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \n       p <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n"},{"title":"旅行者1号","date":"2021-05-15T13:22:57.000Z","_content":"\n## 旅行者计划\n30多年前，美国发起了一项太空计划：**旅行者计划**。目的是为了探测木星和土星，其中包含`旅行者1号`和`旅行者2号`，在1977年，美国向太空发射了这两颗探测器。\n\n## 伟大的旅行者1号\n> 它重800公斤，上面搭载了11个探测器，有16个推进器和一个燃料箱，和三个核能电池，上面还有一台电脑，只有74kb，没有内存和硬盘，用磁带存储，就这样一个简陋的设备，到目前为止还在工作。\n\n旅行者1号自1977年9月5号发射，已经飞行了**44**年，距离地球**214**亿公里，他已经不在太阳系以内了，是目前人造探测器飞行距离最远的一颗探测器，部分功能到目前为止仍可正常运作。\n![WechatIMG4674.png](./伟大的旅行者1号/2d6MCQ3TKquiVyF.png)\n![WechatIMG4676.png](./伟大的旅行者1号/MgVjFXxtsENKv4l.png)\n\n选择在1977年发射也是有原因的，正好那个时候，土星木星天王星海王星冥王星，都在太阳的同一侧，几乎连成一条线。这种情况175～176年才会出现一次。大大减少了探测成本。\n![WechatIMG4675.png](./伟大的旅行者1号/4Wa2eSdZ3X98BfK.png)\n\n关于动力，为什么可以飞这么久，因为它采用两个飞行方式，一个是惯性飞行，一个是重力协助，惯性飞行就是宇宙真空没什么阻力，给它一个力就可以一直飞。重力协助是当飞行到大行星附近时，会被大行星的重力拉过来，当和大行星有一定距离后，也由于重力会被甩出去，也叫引力弹弓。利用这两个飞行方式非常节约能源，基本不需要什么燃料，搭载三颗核能电池也是用于照相机和探测器的工作消耗。\n![WechatIMG4677.png](./伟大的旅行者1号/Mi9vh214uZgD8z5.png)\n\n发射旅行者1号主要有两个目的：一个是**探测木星和土星**，另外一个**探测地外文明**。第一个目的完美的完成了，设计之初，就没准备让这这颗飞行器回到地球，一直飞出太阳系向宇宙深处进发，考虑到这一点，在上面装了一个*金唱盘*，铜制的，表面镀金。\n![WechatIMG4679.png](./伟大的旅行者1号/bszNOfBKhiYaQv7.png)\n![WechatIMG4678.png](./伟大的旅行者1号/n3kxjOqDQASw4Wz.png)\n这个上面记载了太阳系的坐标，里面的行星的具体参数，特别标注的地球，证明唱盘来自这里。大自然的声音，包括滑浪，风，雷，鸟鸣，歌声，鲸鱼等其他动物叫声，并挑选来自不同文化的及年代的音乐。人体构造解刨图，计量单位的标准，时间和长度，里面还有一块非常纯的`铀238`，\n![WechatIMG4680.png](./伟大的旅行者1号/upB4hvTydZ9IP1r.png)因为铀238的半衰期是`44.7`亿年，收到的人根据衰变程度就可以推断出，就能反推唱盘的生产日期。\n![WechatIMG4666.png](./伟大的旅行者1号/p5kXGl2DtbcaSnW.png)\n如上图，在唱盘的一面上，标注了使用方法，包括旋转周期，唱片的时间单位，地球在银河系的位置，图片读取方式等，内容有一些人类生活，自然的图片。\n![WechatIMG4667.png](./伟大的旅行者1号/KJPlgxfCpuGHndB.png)\n![WechatIMG4668.png](./伟大的旅行者1号/Ia7qdlQ4PT1ws3j.png)\n![WechatIMG4670.png](./伟大的旅行者1号/vTfbrW8JKkQFRcP.png)\n![WechatIMG4669.png](./伟大的旅行者1号/BvYORyZgq9amV7A.png)\n除此外，还有90分钟的歌曲，包括不同文化的古典音乐，其中包括有一首中国曲子：高山流水。还有用55种语言说的\"你好\"，包括普通话和粤语。\n\n金唱盘内全部内容，[见B站](https://www.bilibili.com/video/av41308060/)\n\n旅行者1号，去土星其实是为了要去探测土星的一个卫星，泰坦，因为泰坦的环境地球类似，当旅行者1号到达泰坦，果然泰坦上有着厚厚的黄色大气，主要是氮气和甲烷，地表温度为零下`179`度。\n![WechatIMG4672.png](./伟大的旅行者1号/TewXOIzalCK5Egh.png)\n旅行者1号在探测完泰坦之后，由于土星重力，偏移了黄道面，也就是9大行星的平面。在九年后，nasa又联系了旅行者1号，让它拍一张**太阳系全家福**，就分别拍了39张九大行星照片。\n![WechatIMG4673.png](./伟大的旅行者1号/NqjhKXn3kgIrDlS.png)这个项目的首席天文学家：卡尔萨根看完地球照片后写了一本非常著名的书《暗淡蓝点》，其中非常经典的一段话：   \n \n**如果再来看一眼这个小点  \n那是我们的家园，我们的所有。\n你所爱所知的每一个人、所听说乃至所存在过的每一个人，都在小点上度过一生。\n欢乐与痛苦，宗教与学说，猎人与强盗，英雄与懦夫，文明的创造者与毁灭者，国王与农夫，情侣，父母，儿童，发明家和探险家，崇高的老师，腐败的政客，耀眼的明星，至高无上的领袖，历史上所有的圣人与罪犯，都住在这里——它仅仅是一粒悬浮再阳光中的浮尘。**  \n\n拍完暗淡蓝点后，nasa就把旅行者1号的相机永久关闭了，为了省电。现在正在以每秒14公里的速度远离太阳向宇宙深处进发，但在2025年之后，旅行者一号就会彻底和地球失去联系，并成为漂浮在宇宙中的一艘“流浪探测器”。  \n推测再过4万年，他将利用引力弹弓到达离太阳系最近的一颗恒星上`gliese 445`，大概几百万年后，就能到另外一颗恒星附近，或许那个时候人类已经不存在了。对于最多有120年寿命的梦想着星辰大海的人类来说，的确让人感到绝望，可有金唱盘，它可以证明人类在浩瀚无垠的宇宙存在过的的一个证据吧，在`21/05/13`，也就是两天前，有一条关于旅行者1号的新闻，[“旅行者1号”听到星际“温柔雨声”](https://finance.sina.com.cn/tech/2021-05-13/doc-ikmxzfmm2145469.shtml)\n\n","source":"_posts/旅行者1号.md","raw":"---\ntitle: 旅行者1号\ndate: 2021/05/15 21:22:57\ntags: [天文]\n---\n\n## 旅行者计划\n30多年前，美国发起了一项太空计划：**旅行者计划**。目的是为了探测木星和土星，其中包含`旅行者1号`和`旅行者2号`，在1977年，美国向太空发射了这两颗探测器。\n\n## 伟大的旅行者1号\n> 它重800公斤，上面搭载了11个探测器，有16个推进器和一个燃料箱，和三个核能电池，上面还有一台电脑，只有74kb，没有内存和硬盘，用磁带存储，就这样一个简陋的设备，到目前为止还在工作。\n\n旅行者1号自1977年9月5号发射，已经飞行了**44**年，距离地球**214**亿公里，他已经不在太阳系以内了，是目前人造探测器飞行距离最远的一颗探测器，部分功能到目前为止仍可正常运作。\n![WechatIMG4674.png](./伟大的旅行者1号/2d6MCQ3TKquiVyF.png)\n![WechatIMG4676.png](./伟大的旅行者1号/MgVjFXxtsENKv4l.png)\n\n选择在1977年发射也是有原因的，正好那个时候，土星木星天王星海王星冥王星，都在太阳的同一侧，几乎连成一条线。这种情况175～176年才会出现一次。大大减少了探测成本。\n![WechatIMG4675.png](./伟大的旅行者1号/4Wa2eSdZ3X98BfK.png)\n\n关于动力，为什么可以飞这么久，因为它采用两个飞行方式，一个是惯性飞行，一个是重力协助，惯性飞行就是宇宙真空没什么阻力，给它一个力就可以一直飞。重力协助是当飞行到大行星附近时，会被大行星的重力拉过来，当和大行星有一定距离后，也由于重力会被甩出去，也叫引力弹弓。利用这两个飞行方式非常节约能源，基本不需要什么燃料，搭载三颗核能电池也是用于照相机和探测器的工作消耗。\n![WechatIMG4677.png](./伟大的旅行者1号/Mi9vh214uZgD8z5.png)\n\n发射旅行者1号主要有两个目的：一个是**探测木星和土星**，另外一个**探测地外文明**。第一个目的完美的完成了，设计之初，就没准备让这这颗飞行器回到地球，一直飞出太阳系向宇宙深处进发，考虑到这一点，在上面装了一个*金唱盘*，铜制的，表面镀金。\n![WechatIMG4679.png](./伟大的旅行者1号/bszNOfBKhiYaQv7.png)\n![WechatIMG4678.png](./伟大的旅行者1号/n3kxjOqDQASw4Wz.png)\n这个上面记载了太阳系的坐标，里面的行星的具体参数，特别标注的地球，证明唱盘来自这里。大自然的声音，包括滑浪，风，雷，鸟鸣，歌声，鲸鱼等其他动物叫声，并挑选来自不同文化的及年代的音乐。人体构造解刨图，计量单位的标准，时间和长度，里面还有一块非常纯的`铀238`，\n![WechatIMG4680.png](./伟大的旅行者1号/upB4hvTydZ9IP1r.png)因为铀238的半衰期是`44.7`亿年，收到的人根据衰变程度就可以推断出，就能反推唱盘的生产日期。\n![WechatIMG4666.png](./伟大的旅行者1号/p5kXGl2DtbcaSnW.png)\n如上图，在唱盘的一面上，标注了使用方法，包括旋转周期，唱片的时间单位，地球在银河系的位置，图片读取方式等，内容有一些人类生活，自然的图片。\n![WechatIMG4667.png](./伟大的旅行者1号/KJPlgxfCpuGHndB.png)\n![WechatIMG4668.png](./伟大的旅行者1号/Ia7qdlQ4PT1ws3j.png)\n![WechatIMG4670.png](./伟大的旅行者1号/vTfbrW8JKkQFRcP.png)\n![WechatIMG4669.png](./伟大的旅行者1号/BvYORyZgq9amV7A.png)\n除此外，还有90分钟的歌曲，包括不同文化的古典音乐，其中包括有一首中国曲子：高山流水。还有用55种语言说的\"你好\"，包括普通话和粤语。\n\n金唱盘内全部内容，[见B站](https://www.bilibili.com/video/av41308060/)\n\n旅行者1号，去土星其实是为了要去探测土星的一个卫星，泰坦，因为泰坦的环境地球类似，当旅行者1号到达泰坦，果然泰坦上有着厚厚的黄色大气，主要是氮气和甲烷，地表温度为零下`179`度。\n![WechatIMG4672.png](./伟大的旅行者1号/TewXOIzalCK5Egh.png)\n旅行者1号在探测完泰坦之后，由于土星重力，偏移了黄道面，也就是9大行星的平面。在九年后，nasa又联系了旅行者1号，让它拍一张**太阳系全家福**，就分别拍了39张九大行星照片。\n![WechatIMG4673.png](./伟大的旅行者1号/NqjhKXn3kgIrDlS.png)这个项目的首席天文学家：卡尔萨根看完地球照片后写了一本非常著名的书《暗淡蓝点》，其中非常经典的一段话：   \n \n**如果再来看一眼这个小点  \n那是我们的家园，我们的所有。\n你所爱所知的每一个人、所听说乃至所存在过的每一个人，都在小点上度过一生。\n欢乐与痛苦，宗教与学说，猎人与强盗，英雄与懦夫，文明的创造者与毁灭者，国王与农夫，情侣，父母，儿童，发明家和探险家，崇高的老师，腐败的政客，耀眼的明星，至高无上的领袖，历史上所有的圣人与罪犯，都住在这里——它仅仅是一粒悬浮再阳光中的浮尘。**  \n\n拍完暗淡蓝点后，nasa就把旅行者1号的相机永久关闭了，为了省电。现在正在以每秒14公里的速度远离太阳向宇宙深处进发，但在2025年之后，旅行者一号就会彻底和地球失去联系，并成为漂浮在宇宙中的一艘“流浪探测器”。  \n推测再过4万年，他将利用引力弹弓到达离太阳系最近的一颗恒星上`gliese 445`，大概几百万年后，就能到另外一颗恒星附近，或许那个时候人类已经不存在了。对于最多有120年寿命的梦想着星辰大海的人类来说，的确让人感到绝望，可有金唱盘，它可以证明人类在浩瀚无垠的宇宙存在过的的一个证据吧，在`21/05/13`，也就是两天前，有一条关于旅行者1号的新闻，[“旅行者1号”听到星际“温柔雨声”](https://finance.sina.com.cn/tech/2021-05-13/doc-ikmxzfmm2145469.shtml)\n\n","slug":"旅行者1号","published":1,"updated":"2021-10-22T09:38:36.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqs000zh7vmd491bnld","content":"<h2 id=\"旅行者计划\"><a href=\"#旅行者计划\" class=\"headerlink\" title=\"旅行者计划\"></a>旅行者计划</h2><p>30多年前，美国发起了一项太空计划：<strong>旅行者计划</strong>。目的是为了探测木星和土星，其中包含<code>旅行者1号</code>和<code>旅行者2号</code>，在1977年，美国向太空发射了这两颗探测器。</p>\n<h2 id=\"伟大的旅行者1号\"><a href=\"#伟大的旅行者1号\" class=\"headerlink\" title=\"伟大的旅行者1号\"></a>伟大的旅行者1号</h2><blockquote>\n<p>它重800公斤，上面搭载了11个探测器，有16个推进器和一个燃料箱，和三个核能电池，上面还有一台电脑，只有74kb，没有内存和硬盘，用磁带存储，就这样一个简陋的设备，到目前为止还在工作。</p>\n</blockquote>\n<p>旅行者1号自1977年9月5号发射，已经飞行了<strong>44</strong>年，距离地球<strong>214</strong>亿公里，他已经不在太阳系以内了，是目前人造探测器飞行距离最远的一颗探测器，部分功能到目前为止仍可正常运作。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/2d6MCQ3TKquiVyF.png\" alt=\"WechatIMG4674.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/MgVjFXxtsENKv4l.png\" alt=\"WechatIMG4676.png\"></p>\n<p>选择在1977年发射也是有原因的，正好那个时候，土星木星天王星海王星冥王星，都在太阳的同一侧，几乎连成一条线。这种情况175～176年才会出现一次。大大减少了探测成本。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/4Wa2eSdZ3X98BfK.png\" alt=\"WechatIMG4675.png\"></p>\n<p>关于动力，为什么可以飞这么久，因为它采用两个飞行方式，一个是惯性飞行，一个是重力协助，惯性飞行就是宇宙真空没什么阻力，给它一个力就可以一直飞。重力协助是当飞行到大行星附近时，会被大行星的重力拉过来，当和大行星有一定距离后，也由于重力会被甩出去，也叫引力弹弓。利用这两个飞行方式非常节约能源，基本不需要什么燃料，搭载三颗核能电池也是用于照相机和探测器的工作消耗。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/Mi9vh214uZgD8z5.png\" alt=\"WechatIMG4677.png\"></p>\n<p>发射旅行者1号主要有两个目的：一个是<strong>探测木星和土星</strong>，另外一个<strong>探测地外文明</strong>。第一个目的完美的完成了，设计之初，就没准备让这这颗飞行器回到地球，一直飞出太阳系向宇宙深处进发，考虑到这一点，在上面装了一个<em>金唱盘</em>，铜制的，表面镀金。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/bszNOfBKhiYaQv7.png\" alt=\"WechatIMG4679.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/n3kxjOqDQASw4Wz.png\" alt=\"WechatIMG4678.png\"><br>这个上面记载了太阳系的坐标，里面的行星的具体参数，特别标注的地球，证明唱盘来自这里。大自然的声音，包括滑浪，风，雷，鸟鸣，歌声，鲸鱼等其他动物叫声，并挑选来自不同文化的及年代的音乐。人体构造解刨图，计量单位的标准，时间和长度，里面还有一块非常纯的<code>铀238</code>，<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/upB4hvTydZ9IP1r.png\" alt=\"WechatIMG4680.png\">因为铀238的半衰期是<code>44.7</code>亿年，收到的人根据衰变程度就可以推断出，就能反推唱盘的生产日期。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/p5kXGl2DtbcaSnW.png\" alt=\"WechatIMG4666.png\"><br>如上图，在唱盘的一面上，标注了使用方法，包括旋转周期，唱片的时间单位，地球在银河系的位置，图片读取方式等，内容有一些人类生活，自然的图片。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/KJPlgxfCpuGHndB.png\" alt=\"WechatIMG4667.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/Ia7qdlQ4PT1ws3j.png\" alt=\"WechatIMG4668.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/vTfbrW8JKkQFRcP.png\" alt=\"WechatIMG4670.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/BvYORyZgq9amV7A.png\" alt=\"WechatIMG4669.png\"><br>除此外，还有90分钟的歌曲，包括不同文化的古典音乐，其中包括有一首中国曲子：高山流水。还有用55种语言说的”你好”，包括普通话和粤语。</p>\n<p>金唱盘内全部内容，<a href=\"https://www.bilibili.com/video/av41308060/\">见B站</a></p>\n<p>旅行者1号，去土星其实是为了要去探测土星的一个卫星，泰坦，因为泰坦的环境地球类似，当旅行者1号到达泰坦，果然泰坦上有着厚厚的黄色大气，主要是氮气和甲烷，地表温度为零下<code>179</code>度。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/TewXOIzalCK5Egh.png\" alt=\"WechatIMG4672.png\"><br>旅行者1号在探测完泰坦之后，由于土星重力，偏移了黄道面，也就是9大行星的平面。在九年后，nasa又联系了旅行者1号，让它拍一张<strong>太阳系全家福</strong>，就分别拍了39张九大行星照片。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/NqjhKXn3kgIrDlS.png\" alt=\"WechatIMG4673.png\">这个项目的首席天文学家：卡尔萨根看完地球照片后写了一本非常著名的书《暗淡蓝点》，其中非常经典的一段话：   </p>\n<p><strong>如果再来看一眼这个小点<br>那是我们的家园，我们的所有。<br>你所爱所知的每一个人、所听说乃至所存在过的每一个人，都在小点上度过一生。<br>欢乐与痛苦，宗教与学说，猎人与强盗，英雄与懦夫，文明的创造者与毁灭者，国王与农夫，情侣，父母，儿童，发明家和探险家，崇高的老师，腐败的政客，耀眼的明星，至高无上的领袖，历史上所有的圣人与罪犯，都住在这里——它仅仅是一粒悬浮再阳光中的浮尘。</strong>  </p>\n<p>拍完暗淡蓝点后，nasa就把旅行者1号的相机永久关闭了，为了省电。现在正在以每秒14公里的速度远离太阳向宇宙深处进发，但在2025年之后，旅行者一号就会彻底和地球失去联系，并成为漂浮在宇宙中的一艘“流浪探测器”。<br>推测再过4万年，他将利用引力弹弓到达离太阳系最近的一颗恒星上<code>gliese 445</code>，大概几百万年后，就能到另外一颗恒星附近，或许那个时候人类已经不存在了。对于最多有120年寿命的梦想着星辰大海的人类来说，的确让人感到绝望，可有金唱盘，它可以证明人类在浩瀚无垠的宇宙存在过的的一个证据吧，在<code>21/05/13</code>，也就是两天前，有一条关于旅行者1号的新闻，<a href=\"https://finance.sina.com.cn/tech/2021-05-13/doc-ikmxzfmm2145469.shtml\">“旅行者1号”听到星际“温柔雨声”</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"旅行者计划\"><a href=\"#旅行者计划\" class=\"headerlink\" title=\"旅行者计划\"></a>旅行者计划</h2><p>30多年前，美国发起了一项太空计划：<strong>旅行者计划</strong>。目的是为了探测木星和土星，其中包含<code>旅行者1号</code>和<code>旅行者2号</code>，在1977年，美国向太空发射了这两颗探测器。</p>\n<h2 id=\"伟大的旅行者1号\"><a href=\"#伟大的旅行者1号\" class=\"headerlink\" title=\"伟大的旅行者1号\"></a>伟大的旅行者1号</h2><blockquote>\n<p>它重800公斤，上面搭载了11个探测器，有16个推进器和一个燃料箱，和三个核能电池，上面还有一台电脑，只有74kb，没有内存和硬盘，用磁带存储，就这样一个简陋的设备，到目前为止还在工作。</p>\n</blockquote>\n<p>旅行者1号自1977年9月5号发射，已经飞行了<strong>44</strong>年，距离地球<strong>214</strong>亿公里，他已经不在太阳系以内了，是目前人造探测器飞行距离最远的一颗探测器，部分功能到目前为止仍可正常运作。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/2d6MCQ3TKquiVyF.png\" alt=\"WechatIMG4674.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/MgVjFXxtsENKv4l.png\" alt=\"WechatIMG4676.png\"></p>\n<p>选择在1977年发射也是有原因的，正好那个时候，土星木星天王星海王星冥王星，都在太阳的同一侧，几乎连成一条线。这种情况175～176年才会出现一次。大大减少了探测成本。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/4Wa2eSdZ3X98BfK.png\" alt=\"WechatIMG4675.png\"></p>\n<p>关于动力，为什么可以飞这么久，因为它采用两个飞行方式，一个是惯性飞行，一个是重力协助，惯性飞行就是宇宙真空没什么阻力，给它一个力就可以一直飞。重力协助是当飞行到大行星附近时，会被大行星的重力拉过来，当和大行星有一定距离后，也由于重力会被甩出去，也叫引力弹弓。利用这两个飞行方式非常节约能源，基本不需要什么燃料，搭载三颗核能电池也是用于照相机和探测器的工作消耗。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/Mi9vh214uZgD8z5.png\" alt=\"WechatIMG4677.png\"></p>\n<p>发射旅行者1号主要有两个目的：一个是<strong>探测木星和土星</strong>，另外一个<strong>探测地外文明</strong>。第一个目的完美的完成了，设计之初，就没准备让这这颗飞行器回到地球，一直飞出太阳系向宇宙深处进发，考虑到这一点，在上面装了一个<em>金唱盘</em>，铜制的，表面镀金。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/bszNOfBKhiYaQv7.png\" alt=\"WechatIMG4679.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/n3kxjOqDQASw4Wz.png\" alt=\"WechatIMG4678.png\"><br>这个上面记载了太阳系的坐标，里面的行星的具体参数，特别标注的地球，证明唱盘来自这里。大自然的声音，包括滑浪，风，雷，鸟鸣，歌声，鲸鱼等其他动物叫声，并挑选来自不同文化的及年代的音乐。人体构造解刨图，计量单位的标准，时间和长度，里面还有一块非常纯的<code>铀238</code>，<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/upB4hvTydZ9IP1r.png\" alt=\"WechatIMG4680.png\">因为铀238的半衰期是<code>44.7</code>亿年，收到的人根据衰变程度就可以推断出，就能反推唱盘的生产日期。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/p5kXGl2DtbcaSnW.png\" alt=\"WechatIMG4666.png\"><br>如上图，在唱盘的一面上，标注了使用方法，包括旋转周期，唱片的时间单位，地球在银河系的位置，图片读取方式等，内容有一些人类生活，自然的图片。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/KJPlgxfCpuGHndB.png\" alt=\"WechatIMG4667.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/Ia7qdlQ4PT1ws3j.png\" alt=\"WechatIMG4668.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/vTfbrW8JKkQFRcP.png\" alt=\"WechatIMG4670.png\"><br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/BvYORyZgq9amV7A.png\" alt=\"WechatIMG4669.png\"><br>除此外，还有90分钟的歌曲，包括不同文化的古典音乐，其中包括有一首中国曲子：高山流水。还有用55种语言说的”你好”，包括普通话和粤语。</p>\n<p>金唱盘内全部内容，<a href=\"https://www.bilibili.com/video/av41308060/\">见B站</a></p>\n<p>旅行者1号，去土星其实是为了要去探测土星的一个卫星，泰坦，因为泰坦的环境地球类似，当旅行者1号到达泰坦，果然泰坦上有着厚厚的黄色大气，主要是氮气和甲烷，地表温度为零下<code>179</code>度。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/TewXOIzalCK5Egh.png\" alt=\"WechatIMG4672.png\"><br>旅行者1号在探测完泰坦之后，由于土星重力，偏移了黄道面，也就是9大行星的平面。在九年后，nasa又联系了旅行者1号，让它拍一张<strong>太阳系全家福</strong>，就分别拍了39张九大行星照片。<br><img src=\"/2021/05/15/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/NqjhKXn3kgIrDlS.png\" alt=\"WechatIMG4673.png\">这个项目的首席天文学家：卡尔萨根看完地球照片后写了一本非常著名的书《暗淡蓝点》，其中非常经典的一段话：   </p>\n<p><strong>如果再来看一眼这个小点<br>那是我们的家园，我们的所有。<br>你所爱所知的每一个人、所听说乃至所存在过的每一个人，都在小点上度过一生。<br>欢乐与痛苦，宗教与学说，猎人与强盗，英雄与懦夫，文明的创造者与毁灭者，国王与农夫，情侣，父母，儿童，发明家和探险家，崇高的老师，腐败的政客，耀眼的明星，至高无上的领袖，历史上所有的圣人与罪犯，都住在这里——它仅仅是一粒悬浮再阳光中的浮尘。</strong>  </p>\n<p>拍完暗淡蓝点后，nasa就把旅行者1号的相机永久关闭了，为了省电。现在正在以每秒14公里的速度远离太阳向宇宙深处进发，但在2025年之后，旅行者一号就会彻底和地球失去联系，并成为漂浮在宇宙中的一艘“流浪探测器”。<br>推测再过4万年，他将利用引力弹弓到达离太阳系最近的一颗恒星上<code>gliese 445</code>，大概几百万年后，就能到另外一颗恒星附近，或许那个时候人类已经不存在了。对于最多有120年寿命的梦想着星辰大海的人类来说，的确让人感到绝望，可有金唱盘，它可以证明人类在浩瀚无垠的宇宙存在过的的一个证据吧，在<code>21/05/13</code>，也就是两天前，有一条关于旅行者1号的新闻，<a href=\"https://finance.sina.com.cn/tech/2021-05-13/doc-ikmxzfmm2145469.shtml\">“旅行者1号”听到星际“温柔雨声”</a></p>\n"},{"title":"真睡后收入·GTX1660s以太坊挖矿小记","date":"2021-04-05T02:11:16.000Z","_content":"\n## 开始之前\n\n在大概2个月前，我在国内某论坛看到一个挖矿帖子，很感兴趣，家里也有一台用于娱乐的高配电脑，当天下班后我就开始搭建环境，几个小时后成功开始工作。有朋友问如何操作，也算总结下过程，所以写了这篇教程。\n\n先说一下结果，当前`以太坊eth`币价为`2057`刀，折合人民币`1.39w`一个，24小时挖矿，我的电脑可以产出`0.0016`个不计成本24小时持续挖矿收入为`22.24元`。\n\n再来算一下成本，显卡满载功率为125w， 挖矿时100%占用，cpu是`i5-9400f`，满载功率为`65w`，挖矿时，占用可以忽略不计，图中是我在跑着其他程序，其他主板，风扇，硬盘等功率假设为50w，可以得到整机在挖矿时，功率为175w，按照北京民电`0.4883/度`计算，24小时电费成本约为`2`元，不算其他线材损耗，一天净利润22-2=`20`元。\n\n![QQ20210405-0.png](./真睡后收入-以太坊挖矿教程/YA4dIRbSgNVsvKE.png)\n\n## 我的配置\n- **显卡**： 技嘉GeForce GTX 1660s(实测这款卡算力稳定在26mh/s左右)\n- **操作系统**： windows 10\n- **挖矿软件**： PhoenixMiner 5.5c\n- **矿池**： 火币矿币pro\n- **钱包**： 中心化火币钱包\n\n## 选择矿池\n\n>先选择挖矿软件，主流挖矿软件有很多，只推荐几个开源项目，支持linux和windows的，不推荐轻松矿工等国产软件，抽水多，不适合单机挖矿\n\n- claymore\n- PhoenixMiner\n- lolMiner\n- Bminer\n\n我只使用过`PhoenixMiner`和`lolMiner`，这介绍这两款，下载[lolminer](https://github.com/Lolliedieb/lolMiner-releases/releases)和[PhoenixMiner](https://phoenixminer.org/)。  \n\n## 获取矿池地址和钱包地址\n - 矿池   \n 我使用的火币矿池，地址[huobipool](https://www.huobipool.com/)  \n\n `火币矿池网站首页` => `导航选择pow挖矿` => `添加挖矿子账号`\n\n 添加好之后就可以拿到挖矿地址，有测速选项，优先选择速度最快的节点作为矿池地址，来提升挖矿速度    \n\n - 钱包\n 我使用的火币  \n\n `进入火币app` => `导航资产` => `列表中找到ETH进入` => `充币` => `充币地址即钱包地址`\n\n矿池地址和钱包地址，保存下来。除了货币矿池，还有很多其他的矿池，比如鱼池，蚂蚁矿池，可他们的提现门槛太高了，需要0.1个ETH才可以提现，最开始用鱼池挖了一周放弃了，0.1个ETH需要我的机器挖矿`62.5天`，周期太长了，所以我就选择了用火币矿池，搭配火币钱包，今日的产出会在每天下午3点自动提现到火币钱包，虽然提现手续费`2%`有点高，但这种方式适合我这样的散户。\n\n## 开始挖矿\n - *PhoenixMiner*\n\t下载完后，解压缩文件包，找到`start_miner.bat`,使用记事本或者vscode打开，删除所有内容，重新填入  \n\t\n```\nREM\nREM Example bat file for starting PhoenixMiner.exe to mine ETH\nREM\n\nsetx GPU_FORCE_64BIT_PTR 0\nsetx GPU_MAX_HEAP_SIZE 100\nsetx GPU_USE_SYNC_OBJECTS 1\nsetx GPU_MAX_ALLOC_PERCENT 100\nsetx GPU_SINGLE_ALLOC_PERCENT 100\n\nREM IMPORTANT: Replace the ETH address with your own ETH wallet address in the -wal option (Rig001 is the name of the rig)\nPhoenixMiner.exe -pool 矿池地址 -wal 以太坊钱包地址.矿工名称 -dagrestart 1 -rvram -1 -eres 0\npause\n```\n\n把`矿池地址`和`以太坊钱包地址`替换，矿工名，可以随意填，英文+数字。替换好保存关闭。回到解压目录，打开PhoenixMiner.exe可执行程序，之后会打开一个终端窗口，就开始挖矿了，如果断网或者其他异常，程序会10s后自动重新连接，无需关心\n![43264BBC6D73E4F446FE70FA11DB2A5D.png](./真睡后收入-以太坊挖矿教程/grXvl26PoEtMFpa.png)\n\n - *lolMiner*\n\n \t设置也一样，下载解压缩，根目录下找到`mine_eth.bat`文件并编辑：\n\n```\n@echo off\n\nsetlocal enableDelayedExpansion\n\nRem #################################\nRem ## Begin of user-editable part ##\nRem #################################\n\nset \"POOL=矿池地址\"\nset \"WALLET=以太坊钱包地址.矿工名\"\t\t\t\t\t\t\t\t\t\t\n\nRem #################################\nRem ##  End of user-editable part  ##\nRem #################################\n\n:loop\nlolMiner.exe --algo ETHASH --pool !POOL! --user !WALLET! --watchdog exit\nif %ERRORLEVEL% == 42 (\n\ttimeout 10\n\tgoto loop\n)\n```\n把`矿池地址`和`以太坊钱包地址`替换，矿工名，可以随意填，英文+数字。注意钱包地址和矿工名之间的英文句号，你也可以设置`timeout`右侧的遇到异常的重启时间，替换好保存关闭。回到解压目录，执行`miner_eth.bat`文件，打开命令行开始。\n\n## 关于算力\n算力也叫哈希率(Hashrate)，是显卡计算能力的度量单位，即计算机计算哈希函数的输出速度。入门级挖矿显卡需要**至少6G的显存**，算力越高，你的收益越大，之间的关系不是线性的，应该是递减的关系。当然显卡价格也越贵，20年底，全球疫情来袭，比特币暴涨，导致显卡价格水涨船高，甚至涨了一倍。做矿老板有风险，用闲置机器赚一点零花钱还是很不错滴，俺也浪费国家电能了哈哈。另贴出主流a卡和n卡算力表，enjoy it。\n\nA卡：\n![WechatIMG4346.png](./真睡后收入-以太坊挖矿教程/ZD6ML8tjkGXdeWf.png)\n\nN卡：![WechatIMG4347.png](./真睡后收入-以太坊挖矿教程/rhvAF538ynVWtlY.png)\n\n\n\n  ","source":"_posts/真睡后收入-以太坊挖矿教程.md","raw":"---\ntitle: 真睡后收入·GTX1660s以太坊挖矿小记\ndate: 2021/04/05 10:11:16\ntags: [虚拟货币]\n---\n\n## 开始之前\n\n在大概2个月前，我在国内某论坛看到一个挖矿帖子，很感兴趣，家里也有一台用于娱乐的高配电脑，当天下班后我就开始搭建环境，几个小时后成功开始工作。有朋友问如何操作，也算总结下过程，所以写了这篇教程。\n\n先说一下结果，当前`以太坊eth`币价为`2057`刀，折合人民币`1.39w`一个，24小时挖矿，我的电脑可以产出`0.0016`个不计成本24小时持续挖矿收入为`22.24元`。\n\n再来算一下成本，显卡满载功率为125w， 挖矿时100%占用，cpu是`i5-9400f`，满载功率为`65w`，挖矿时，占用可以忽略不计，图中是我在跑着其他程序，其他主板，风扇，硬盘等功率假设为50w，可以得到整机在挖矿时，功率为175w，按照北京民电`0.4883/度`计算，24小时电费成本约为`2`元，不算其他线材损耗，一天净利润22-2=`20`元。\n\n![QQ20210405-0.png](./真睡后收入-以太坊挖矿教程/YA4dIRbSgNVsvKE.png)\n\n## 我的配置\n- **显卡**： 技嘉GeForce GTX 1660s(实测这款卡算力稳定在26mh/s左右)\n- **操作系统**： windows 10\n- **挖矿软件**： PhoenixMiner 5.5c\n- **矿池**： 火币矿币pro\n- **钱包**： 中心化火币钱包\n\n## 选择矿池\n\n>先选择挖矿软件，主流挖矿软件有很多，只推荐几个开源项目，支持linux和windows的，不推荐轻松矿工等国产软件，抽水多，不适合单机挖矿\n\n- claymore\n- PhoenixMiner\n- lolMiner\n- Bminer\n\n我只使用过`PhoenixMiner`和`lolMiner`，这介绍这两款，下载[lolminer](https://github.com/Lolliedieb/lolMiner-releases/releases)和[PhoenixMiner](https://phoenixminer.org/)。  \n\n## 获取矿池地址和钱包地址\n - 矿池   \n 我使用的火币矿池，地址[huobipool](https://www.huobipool.com/)  \n\n `火币矿池网站首页` => `导航选择pow挖矿` => `添加挖矿子账号`\n\n 添加好之后就可以拿到挖矿地址，有测速选项，优先选择速度最快的节点作为矿池地址，来提升挖矿速度    \n\n - 钱包\n 我使用的火币  \n\n `进入火币app` => `导航资产` => `列表中找到ETH进入` => `充币` => `充币地址即钱包地址`\n\n矿池地址和钱包地址，保存下来。除了货币矿池，还有很多其他的矿池，比如鱼池，蚂蚁矿池，可他们的提现门槛太高了，需要0.1个ETH才可以提现，最开始用鱼池挖了一周放弃了，0.1个ETH需要我的机器挖矿`62.5天`，周期太长了，所以我就选择了用火币矿池，搭配火币钱包，今日的产出会在每天下午3点自动提现到火币钱包，虽然提现手续费`2%`有点高，但这种方式适合我这样的散户。\n\n## 开始挖矿\n - *PhoenixMiner*\n\t下载完后，解压缩文件包，找到`start_miner.bat`,使用记事本或者vscode打开，删除所有内容，重新填入  \n\t\n```\nREM\nREM Example bat file for starting PhoenixMiner.exe to mine ETH\nREM\n\nsetx GPU_FORCE_64BIT_PTR 0\nsetx GPU_MAX_HEAP_SIZE 100\nsetx GPU_USE_SYNC_OBJECTS 1\nsetx GPU_MAX_ALLOC_PERCENT 100\nsetx GPU_SINGLE_ALLOC_PERCENT 100\n\nREM IMPORTANT: Replace the ETH address with your own ETH wallet address in the -wal option (Rig001 is the name of the rig)\nPhoenixMiner.exe -pool 矿池地址 -wal 以太坊钱包地址.矿工名称 -dagrestart 1 -rvram -1 -eres 0\npause\n```\n\n把`矿池地址`和`以太坊钱包地址`替换，矿工名，可以随意填，英文+数字。替换好保存关闭。回到解压目录，打开PhoenixMiner.exe可执行程序，之后会打开一个终端窗口，就开始挖矿了，如果断网或者其他异常，程序会10s后自动重新连接，无需关心\n![43264BBC6D73E4F446FE70FA11DB2A5D.png](./真睡后收入-以太坊挖矿教程/grXvl26PoEtMFpa.png)\n\n - *lolMiner*\n\n \t设置也一样，下载解压缩，根目录下找到`mine_eth.bat`文件并编辑：\n\n```\n@echo off\n\nsetlocal enableDelayedExpansion\n\nRem #################################\nRem ## Begin of user-editable part ##\nRem #################################\n\nset \"POOL=矿池地址\"\nset \"WALLET=以太坊钱包地址.矿工名\"\t\t\t\t\t\t\t\t\t\t\n\nRem #################################\nRem ##  End of user-editable part  ##\nRem #################################\n\n:loop\nlolMiner.exe --algo ETHASH --pool !POOL! --user !WALLET! --watchdog exit\nif %ERRORLEVEL% == 42 (\n\ttimeout 10\n\tgoto loop\n)\n```\n把`矿池地址`和`以太坊钱包地址`替换，矿工名，可以随意填，英文+数字。注意钱包地址和矿工名之间的英文句号，你也可以设置`timeout`右侧的遇到异常的重启时间，替换好保存关闭。回到解压目录，执行`miner_eth.bat`文件，打开命令行开始。\n\n## 关于算力\n算力也叫哈希率(Hashrate)，是显卡计算能力的度量单位，即计算机计算哈希函数的输出速度。入门级挖矿显卡需要**至少6G的显存**，算力越高，你的收益越大，之间的关系不是线性的，应该是递减的关系。当然显卡价格也越贵，20年底，全球疫情来袭，比特币暴涨，导致显卡价格水涨船高，甚至涨了一倍。做矿老板有风险，用闲置机器赚一点零花钱还是很不错滴，俺也浪费国家电能了哈哈。另贴出主流a卡和n卡算力表，enjoy it。\n\nA卡：\n![WechatIMG4346.png](./真睡后收入-以太坊挖矿教程/ZD6ML8tjkGXdeWf.png)\n\nN卡：![WechatIMG4347.png](./真睡后收入-以太坊挖矿教程/rhvAF538ynVWtlY.png)\n\n\n\n  ","slug":"真睡后收入-以太坊挖矿教程","published":1,"updated":"2021-10-22T09:38:36.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqt0011h7vm9d12di75","content":"<h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>在大概2个月前，我在国内某论坛看到一个挖矿帖子，很感兴趣，家里也有一台用于娱乐的高配电脑，当天下班后我就开始搭建环境，几个小时后成功开始工作。有朋友问如何操作，也算总结下过程，所以写了这篇教程。</p>\n<p>先说一下结果，当前<code>以太坊eth</code>币价为<code>2057</code>刀，折合人民币<code>1.39w</code>一个，24小时挖矿，我的电脑可以产出<code>0.0016</code>个不计成本24小时持续挖矿收入为<code>22.24元</code>。</p>\n<p>再来算一下成本，显卡满载功率为125w， 挖矿时100%占用，cpu是<code>i5-9400f</code>，满载功率为<code>65w</code>，挖矿时，占用可以忽略不计，图中是我在跑着其他程序，其他主板，风扇，硬盘等功率假设为50w，可以得到整机在挖矿时，功率为175w，按照北京民电<code>0.4883/度</code>计算，24小时电费成本约为<code>2</code>元，不算其他线材损耗，一天净利润22-2=<code>20</code>元。</p>\n<p><img src=\"/2021/04/05/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/YA4dIRbSgNVsvKE.png\" alt=\"QQ20210405-0.png\"></p>\n<h2 id=\"我的配置\"><a href=\"#我的配置\" class=\"headerlink\" title=\"我的配置\"></a>我的配置</h2><ul>\n<li><strong>显卡</strong>： 技嘉GeForce GTX 1660s(实测这款卡算力稳定在26mh/s左右)</li>\n<li><strong>操作系统</strong>： windows 10</li>\n<li><strong>挖矿软件</strong>： PhoenixMiner 5.5c</li>\n<li><strong>矿池</strong>： 火币矿币pro</li>\n<li><strong>钱包</strong>： 中心化火币钱包</li>\n</ul>\n<h2 id=\"选择矿池\"><a href=\"#选择矿池\" class=\"headerlink\" title=\"选择矿池\"></a>选择矿池</h2><blockquote>\n<p>先选择挖矿软件，主流挖矿软件有很多，只推荐几个开源项目，支持linux和windows的，不推荐轻松矿工等国产软件，抽水多，不适合单机挖矿</p>\n</blockquote>\n<ul>\n<li>claymore</li>\n<li>PhoenixMiner</li>\n<li>lolMiner</li>\n<li>Bminer</li>\n</ul>\n<p>我只使用过<code>PhoenixMiner</code>和<code>lolMiner</code>，这介绍这两款，下载<a href=\"https://github.com/Lolliedieb/lolMiner-releases/releases\">lolminer</a>和<a href=\"https://phoenixminer.org/\">PhoenixMiner</a>。  </p>\n<h2 id=\"获取矿池地址和钱包地址\"><a href=\"#获取矿池地址和钱包地址\" class=\"headerlink\" title=\"获取矿池地址和钱包地址\"></a>获取矿池地址和钱包地址</h2><ul>\n<li>矿池<br>我使用的火币矿池，地址<a href=\"https://www.huobipool.com/\">huobipool</a>  </li>\n</ul>\n<p> <code>火币矿池网站首页</code> =&gt; <code>导航选择pow挖矿</code> =&gt; <code>添加挖矿子账号</code></p>\n<p> 添加好之后就可以拿到挖矿地址，有测速选项，优先选择速度最快的节点作为矿池地址，来提升挖矿速度    </p>\n<ul>\n<li>钱包<br>我使用的火币  </li>\n</ul>\n<p> <code>进入火币app</code> =&gt; <code>导航资产</code> =&gt; <code>列表中找到ETH进入</code> =&gt; <code>充币</code> =&gt; <code>充币地址即钱包地址</code></p>\n<p>矿池地址和钱包地址，保存下来。除了货币矿池，还有很多其他的矿池，比如鱼池，蚂蚁矿池，可他们的提现门槛太高了，需要0.1个ETH才可以提现，最开始用鱼池挖了一周放弃了，0.1个ETH需要我的机器挖矿<code>62.5天</code>，周期太长了，所以我就选择了用火币矿池，搭配火币钱包，今日的产出会在每天下午3点自动提现到火币钱包，虽然提现手续费<code>2%</code>有点高，但这种方式适合我这样的散户。</p>\n<h2 id=\"开始挖矿\"><a href=\"#开始挖矿\" class=\"headerlink\" title=\"开始挖矿\"></a>开始挖矿</h2><ul>\n<li><em>PhoenixMiner</em><br> 下载完后，解压缩文件包，找到<code>start_miner.bat</code>,使用记事本或者vscode打开，删除所有内容，重新填入  </li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">REM\nREM Example bat file for starting PhoenixMiner.exe to mine ETH\nREM\n\nsetx GPU_FORCE_64BIT_PTR 0\nsetx GPU_MAX_HEAP_SIZE 100\nsetx GPU_USE_SYNC_OBJECTS 1\nsetx GPU_MAX_ALLOC_PERCENT 100\nsetx GPU_SINGLE_ALLOC_PERCENT 100\n\nREM IMPORTANT: Replace the ETH address with your own ETH wallet address in the -wal option (Rig001 is the name of the rig)\nPhoenixMiner.exe -pool 矿池地址 -wal 以太坊钱包地址.矿工名称 -dagrestart 1 -rvram -1 -eres 0\npause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把<code>矿池地址</code>和<code>以太坊钱包地址</code>替换，矿工名，可以随意填，英文+数字。替换好保存关闭。回到解压目录，打开PhoenixMiner.exe可执行程序，之后会打开一个终端窗口，就开始挖矿了，如果断网或者其他异常，程序会10s后自动重新连接，无需关心<br><img src=\"/2021/04/05/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/grXvl26PoEtMFpa.png\" alt=\"43264BBC6D73E4F446FE70FA11DB2A5D.png\"></p>\n<ul>\n<li><p><em>lolMiner</em></p>\n<p>  设置也一样，下载解压缩，根目录下找到<code>mine_eth.bat</code>文件并编辑：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@echo off\n\nsetlocal enableDelayedExpansion\n\nRem #################################\nRem ## Begin of user-editable part ##\nRem #################################\n\nset &quot;POOL&#x3D;矿池地址&quot;\nset &quot;WALLET&#x3D;以太坊钱包地址.矿工名&quot;\t\t\t\t\t\t\t\t\t\t\n\nRem #################################\nRem ##  End of user-editable part  ##\nRem #################################\n\n:loop\nlolMiner.exe --algo ETHASH --pool !POOL! --user !WALLET! --watchdog exit\nif %ERRORLEVEL% &#x3D;&#x3D; 42 (\n\ttimeout 10\n\tgoto loop\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把<code>矿池地址</code>和<code>以太坊钱包地址</code>替换，矿工名，可以随意填，英文+数字。注意钱包地址和矿工名之间的英文句号，你也可以设置<code>timeout</code>右侧的遇到异常的重启时间，替换好保存关闭。回到解压目录，执行<code>miner_eth.bat</code>文件，打开命令行开始。</p>\n<h2 id=\"关于算力\"><a href=\"#关于算力\" class=\"headerlink\" title=\"关于算力\"></a>关于算力</h2><p>算力也叫哈希率(Hashrate)，是显卡计算能力的度量单位，即计算机计算哈希函数的输出速度。入门级挖矿显卡需要<strong>至少6G的显存</strong>，算力越高，你的收益越大，之间的关系不是线性的，应该是递减的关系。当然显卡价格也越贵，20年底，全球疫情来袭，比特币暴涨，导致显卡价格水涨船高，甚至涨了一倍。做矿老板有风险，用闲置机器赚一点零花钱还是很不错滴，俺也浪费国家电能了哈哈。另贴出主流a卡和n卡算力表，enjoy it。</p>\n<p>A卡：<br><img src=\"/2021/04/05/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/ZD6ML8tjkGXdeWf.png\" alt=\"WechatIMG4346.png\"></p>\n<p>N卡：<img src=\"/2021/04/05/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/rhvAF538ynVWtlY.png\" alt=\"WechatIMG4347.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>在大概2个月前，我在国内某论坛看到一个挖矿帖子，很感兴趣，家里也有一台用于娱乐的高配电脑，当天下班后我就开始搭建环境，几个小时后成功开始工作。有朋友问如何操作，也算总结下过程，所以写了这篇教程。</p>\n<p>先说一下结果，当前<code>以太坊eth</code>币价为<code>2057</code>刀，折合人民币<code>1.39w</code>一个，24小时挖矿，我的电脑可以产出<code>0.0016</code>个不计成本24小时持续挖矿收入为<code>22.24元</code>。</p>\n<p>再来算一下成本，显卡满载功率为125w， 挖矿时100%占用，cpu是<code>i5-9400f</code>，满载功率为<code>65w</code>，挖矿时，占用可以忽略不计，图中是我在跑着其他程序，其他主板，风扇，硬盘等功率假设为50w，可以得到整机在挖矿时，功率为175w，按照北京民电<code>0.4883/度</code>计算，24小时电费成本约为<code>2</code>元，不算其他线材损耗，一天净利润22-2=<code>20</code>元。</p>\n<p><img src=\"/2021/04/05/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/YA4dIRbSgNVsvKE.png\" alt=\"QQ20210405-0.png\"></p>\n<h2 id=\"我的配置\"><a href=\"#我的配置\" class=\"headerlink\" title=\"我的配置\"></a>我的配置</h2><ul>\n<li><strong>显卡</strong>： 技嘉GeForce GTX 1660s(实测这款卡算力稳定在26mh/s左右)</li>\n<li><strong>操作系统</strong>： windows 10</li>\n<li><strong>挖矿软件</strong>： PhoenixMiner 5.5c</li>\n<li><strong>矿池</strong>： 火币矿币pro</li>\n<li><strong>钱包</strong>： 中心化火币钱包</li>\n</ul>\n<h2 id=\"选择矿池\"><a href=\"#选择矿池\" class=\"headerlink\" title=\"选择矿池\"></a>选择矿池</h2><blockquote>\n<p>先选择挖矿软件，主流挖矿软件有很多，只推荐几个开源项目，支持linux和windows的，不推荐轻松矿工等国产软件，抽水多，不适合单机挖矿</p>\n</blockquote>\n<ul>\n<li>claymore</li>\n<li>PhoenixMiner</li>\n<li>lolMiner</li>\n<li>Bminer</li>\n</ul>\n<p>我只使用过<code>PhoenixMiner</code>和<code>lolMiner</code>，这介绍这两款，下载<a href=\"https://github.com/Lolliedieb/lolMiner-releases/releases\">lolminer</a>和<a href=\"https://phoenixminer.org/\">PhoenixMiner</a>。  </p>\n<h2 id=\"获取矿池地址和钱包地址\"><a href=\"#获取矿池地址和钱包地址\" class=\"headerlink\" title=\"获取矿池地址和钱包地址\"></a>获取矿池地址和钱包地址</h2><ul>\n<li>矿池<br>我使用的火币矿池，地址<a href=\"https://www.huobipool.com/\">huobipool</a>  </li>\n</ul>\n<p> <code>火币矿池网站首页</code> =&gt; <code>导航选择pow挖矿</code> =&gt; <code>添加挖矿子账号</code></p>\n<p> 添加好之后就可以拿到挖矿地址，有测速选项，优先选择速度最快的节点作为矿池地址，来提升挖矿速度    </p>\n<ul>\n<li>钱包<br>我使用的火币  </li>\n</ul>\n<p> <code>进入火币app</code> =&gt; <code>导航资产</code> =&gt; <code>列表中找到ETH进入</code> =&gt; <code>充币</code> =&gt; <code>充币地址即钱包地址</code></p>\n<p>矿池地址和钱包地址，保存下来。除了货币矿池，还有很多其他的矿池，比如鱼池，蚂蚁矿池，可他们的提现门槛太高了，需要0.1个ETH才可以提现，最开始用鱼池挖了一周放弃了，0.1个ETH需要我的机器挖矿<code>62.5天</code>，周期太长了，所以我就选择了用火币矿池，搭配火币钱包，今日的产出会在每天下午3点自动提现到火币钱包，虽然提现手续费<code>2%</code>有点高，但这种方式适合我这样的散户。</p>\n<h2 id=\"开始挖矿\"><a href=\"#开始挖矿\" class=\"headerlink\" title=\"开始挖矿\"></a>开始挖矿</h2><ul>\n<li><em>PhoenixMiner</em><br> 下载完后，解压缩文件包，找到<code>start_miner.bat</code>,使用记事本或者vscode打开，删除所有内容，重新填入  </li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">REM\nREM Example bat file for starting PhoenixMiner.exe to mine ETH\nREM\n\nsetx GPU_FORCE_64BIT_PTR 0\nsetx GPU_MAX_HEAP_SIZE 100\nsetx GPU_USE_SYNC_OBJECTS 1\nsetx GPU_MAX_ALLOC_PERCENT 100\nsetx GPU_SINGLE_ALLOC_PERCENT 100\n\nREM IMPORTANT: Replace the ETH address with your own ETH wallet address in the -wal option (Rig001 is the name of the rig)\nPhoenixMiner.exe -pool 矿池地址 -wal 以太坊钱包地址.矿工名称 -dagrestart 1 -rvram -1 -eres 0\npause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把<code>矿池地址</code>和<code>以太坊钱包地址</code>替换，矿工名，可以随意填，英文+数字。替换好保存关闭。回到解压目录，打开PhoenixMiner.exe可执行程序，之后会打开一个终端窗口，就开始挖矿了，如果断网或者其他异常，程序会10s后自动重新连接，无需关心<br><img src=\"/2021/04/05/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/grXvl26PoEtMFpa.png\" alt=\"43264BBC6D73E4F446FE70FA11DB2A5D.png\"></p>\n<ul>\n<li><p><em>lolMiner</em></p>\n<p>  设置也一样，下载解压缩，根目录下找到<code>mine_eth.bat</code>文件并编辑：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@echo off\n\nsetlocal enableDelayedExpansion\n\nRem #################################\nRem ## Begin of user-editable part ##\nRem #################################\n\nset &quot;POOL&#x3D;矿池地址&quot;\nset &quot;WALLET&#x3D;以太坊钱包地址.矿工名&quot;\t\t\t\t\t\t\t\t\t\t\n\nRem #################################\nRem ##  End of user-editable part  ##\nRem #################################\n\n:loop\nlolMiner.exe --algo ETHASH --pool !POOL! --user !WALLET! --watchdog exit\nif %ERRORLEVEL% &#x3D;&#x3D; 42 (\n\ttimeout 10\n\tgoto loop\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把<code>矿池地址</code>和<code>以太坊钱包地址</code>替换，矿工名，可以随意填，英文+数字。注意钱包地址和矿工名之间的英文句号，你也可以设置<code>timeout</code>右侧的遇到异常的重启时间，替换好保存关闭。回到解压目录，执行<code>miner_eth.bat</code>文件，打开命令行开始。</p>\n<h2 id=\"关于算力\"><a href=\"#关于算力\" class=\"headerlink\" title=\"关于算力\"></a>关于算力</h2><p>算力也叫哈希率(Hashrate)，是显卡计算能力的度量单位，即计算机计算哈希函数的输出速度。入门级挖矿显卡需要<strong>至少6G的显存</strong>，算力越高，你的收益越大，之间的关系不是线性的，应该是递减的关系。当然显卡价格也越贵，20年底，全球疫情来袭，比特币暴涨，导致显卡价格水涨船高，甚至涨了一倍。做矿老板有风险，用闲置机器赚一点零花钱还是很不错滴，俺也浪费国家电能了哈哈。另贴出主流a卡和n卡算力表，enjoy it。</p>\n<p>A卡：<br><img src=\"/2021/04/05/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/ZD6ML8tjkGXdeWf.png\" alt=\"WechatIMG4346.png\"></p>\n<p>N卡：<img src=\"/2021/04/05/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/rhvAF538ynVWtlY.png\" alt=\"WechatIMG4347.png\"></p>\n"},{"title":"记发布订阅和观察者模式","date":"2021-06-01T03:40:03.000Z","_content":"\n## 发布订阅模式\n\n简单来说，需要三个角色\n\n - 发布者\n - 事件队列\n - 订阅者\n\n\n**发布者** -> **事件队列** <=> **订阅者**\n\n一次完整流程\n\n - `订阅者`向事件队列订阅`事件E`\n - `发布者`向事件队列发布`事件E`\n - 事件队列通知`事件E`的所有`订阅者`，`订阅者`接收\n\n```javascript\nclass Event {\n  constructor() {\n    // 事件队列\n    this.listeners = {}\n  }\n  // 订阅方法\n  on(eventType, listener) {\n    if (!this.listeners[eventType]) {\n      this.listeners[eventType] = []\n    }\n    this.listeners[eventType].push(listener)\n  }\n  // 发布方法\n  emit(eventType, data) {\n    const callbacks = this.listeners[eventType]\n    if (callbacks) {\n      callbacks.forEach((c) => {\n        c(data)\n      })\n    }\n  }\n}\n\nconst event = new Event()\nevent.on('open', (data) => {\n  console.log(data)\n})\nevent.emit('open', { open: true })\n```\n\n## 观察者模式\n\n需要两个角色\n\n - 目标\n - 观察者\n\n**目标** <=> **观察者**\n\n一次完整流程\n\n - `观察者`观察目标\n - 一旦目标`发生`变化，目标会主动通知`观察者`\n\n```javascript\nfunction observer(obj, target, callback) {\n  if (!obj.data) {\n    obj.data = {}\n  }\n  Object.defineProperty(obj, target, {\n    get() {\n      return this.data[target]\n    },\n    set(val) {\n      this.data[target] = val\n      // 目标通知观察者\n      callback && callback(val)\n    },\n  })\n  if (obj.data[target]) {\n    callback && callback(obj.data[target])\n  }\n}\n```\n","source":"_posts/记发布订阅和观察者模式.md","raw":"---\ntitle: 记发布订阅和观察者模式\ndate: 2021/06/01 11:40:03\ntags: [设计模式]\n---\n\n## 发布订阅模式\n\n简单来说，需要三个角色\n\n - 发布者\n - 事件队列\n - 订阅者\n\n\n**发布者** -> **事件队列** <=> **订阅者**\n\n一次完整流程\n\n - `订阅者`向事件队列订阅`事件E`\n - `发布者`向事件队列发布`事件E`\n - 事件队列通知`事件E`的所有`订阅者`，`订阅者`接收\n\n```javascript\nclass Event {\n  constructor() {\n    // 事件队列\n    this.listeners = {}\n  }\n  // 订阅方法\n  on(eventType, listener) {\n    if (!this.listeners[eventType]) {\n      this.listeners[eventType] = []\n    }\n    this.listeners[eventType].push(listener)\n  }\n  // 发布方法\n  emit(eventType, data) {\n    const callbacks = this.listeners[eventType]\n    if (callbacks) {\n      callbacks.forEach((c) => {\n        c(data)\n      })\n    }\n  }\n}\n\nconst event = new Event()\nevent.on('open', (data) => {\n  console.log(data)\n})\nevent.emit('open', { open: true })\n```\n\n## 观察者模式\n\n需要两个角色\n\n - 目标\n - 观察者\n\n**目标** <=> **观察者**\n\n一次完整流程\n\n - `观察者`观察目标\n - 一旦目标`发生`变化，目标会主动通知`观察者`\n\n```javascript\nfunction observer(obj, target, callback) {\n  if (!obj.data) {\n    obj.data = {}\n  }\n  Object.defineProperty(obj, target, {\n    get() {\n      return this.data[target]\n    },\n    set(val) {\n      this.data[target] = val\n      // 目标通知观察者\n      callback && callback(val)\n    },\n  })\n  if (obj.data[target]) {\n    callback && callback(obj.data[target])\n  }\n}\n```\n","slug":"记发布订阅和观察者模式","published":1,"updated":"2021-10-22T09:38:36.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mequ0013h7vmfsdr18s2","content":"<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p>简单来说，需要三个角色</p>\n<ul>\n<li>发布者</li>\n<li>事件队列</li>\n<li>订阅者</li>\n</ul>\n<p><strong>发布者</strong> -&gt; <strong>事件队列</strong> &lt;=&gt; <strong>订阅者</strong></p>\n<p>一次完整流程</p>\n<ul>\n<li><code>订阅者</code>向事件队列订阅<code>事件E</code></li>\n<li><code>发布者</code>向事件队列发布<code>事件E</code></li>\n<li>事件队列通知<code>事件E</code>的所有<code>订阅者</code>，<code>订阅者</code>接收</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 事件队列</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 订阅方法</span>\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> listener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 发布方法</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callbacks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> open<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>需要两个角色</p>\n<ul>\n<li>目标</li>\n<li>观察者</li>\n</ul>\n<p><strong>目标</strong> &lt;=&gt; <strong>观察者</strong></p>\n<p>一次完整流程</p>\n<ul>\n<li><code>观察者</code>观察目标</li>\n<li>一旦目标<code>发生</code>变化，目标会主动通知<code>观察者</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n      <span class=\"token comment\">// 目标通知观察者</span>\n      callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p>简单来说，需要三个角色</p>\n<ul>\n<li>发布者</li>\n<li>事件队列</li>\n<li>订阅者</li>\n</ul>\n<p><strong>发布者</strong> -&gt; <strong>事件队列</strong> &lt;=&gt; <strong>订阅者</strong></p>\n<p>一次完整流程</p>\n<ul>\n<li><code>订阅者</code>向事件队列订阅<code>事件E</code></li>\n<li><code>发布者</code>向事件队列发布<code>事件E</code></li>\n<li>事件队列通知<code>事件E</code>的所有<code>订阅者</code>，<code>订阅者</code>接收</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 事件队列</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 订阅方法</span>\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> listener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 发布方法</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callbacks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> open<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>需要两个角色</p>\n<ul>\n<li>目标</li>\n<li>观察者</li>\n</ul>\n<p><strong>目标</strong> &lt;=&gt; <strong>观察者</strong></p>\n<p>一次完整流程</p>\n<ul>\n<li><code>观察者</code>观察目标</li>\n<li>一旦目标<code>发生</code>变化，目标会主动通知<code>观察者</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n      <span class=\"token comment\">// 目标通知观察者</span>\n      callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"_content":"## codedance98.github.io\n\n>  静态资源","source":"_drafts/last/README.md","raw":"## codedance98.github.io\n\n>  静态资源","slug":"last/README","published":0,"date":"2021-10-22T09:38:36.326Z","updated":"2021-10-22T09:38:36.326Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqv0016h7vmao3p15o3","content":"<h2 id=\"codedance98-github-io\"><a href=\"#codedance98-github-io\" class=\"headerlink\" title=\"codedance98.github.io\"></a>codedance98.github.io</h2><blockquote>\n<p> 静态资源</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"codedance98-github-io\"><a href=\"#codedance98-github-io\" class=\"headerlink\" title=\"codedance98.github.io\"></a>codedance98.github.io</h2><blockquote>\n<p> 静态资源</p>\n</blockquote>\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>b</title>\n    <style>\n        *{\n            padding: 0;\n            margin: 0;\n        }\n        body,html{\n            width:100%;\n            height:100%;\n            background-color:#1f1b16;\n        }\n        body{\n            background-image: url('./images/deep-bg.jpg');\n        }\n        .menu{\n            position: absolute;\n            top: 50%;\n            margin-top: -150px;\n            text-align: center;\n            z-index:2;\n            width: 100%;\n            font-family: \"Source Code Pro\", Consolas, Menlo, Monaco, \"Courier New\", monospace;\n            color:#fff;\n            font-size: 32px;\n            padding:15px 0px;\n            background-color:#1f1b16;\n        }\n        .resume{\n            cursor: pointer;\n            position:relative;\n            z-index:2;\n        }\n        .t{\n            width:100%;\n            height:100%;\n            position:absolute;\n            top:0;\n            left:0;\n            opacity: .05;\n            background: url('./images/static.gif');\n        }\n    </style>\n</head>\n<body>\n    <div class='menu'>>> codedance98</div>  \n    <!-- <div class='resume'>>> me</div> -->\n    <div class='t'></div>\n</body>\n<script>\n    document.querySelector('.menu').onclick = ()=>{location.href='https://github.com/codedance98/';}\n</script>\n</html>\n","source":"_drafts/last/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>b</title>\n    <style>\n        *{\n            padding: 0;\n            margin: 0;\n        }\n        body,html{\n            width:100%;\n            height:100%;\n            background-color:#1f1b16;\n        }\n        body{\n            background-image: url('./images/deep-bg.jpg');\n        }\n        .menu{\n            position: absolute;\n            top: 50%;\n            margin-top: -150px;\n            text-align: center;\n            z-index:2;\n            width: 100%;\n            font-family: \"Source Code Pro\", Consolas, Menlo, Monaco, \"Courier New\", monospace;\n            color:#fff;\n            font-size: 32px;\n            padding:15px 0px;\n            background-color:#1f1b16;\n        }\n        .resume{\n            cursor: pointer;\n            position:relative;\n            z-index:2;\n        }\n        .t{\n            width:100%;\n            height:100%;\n            position:absolute;\n            top:0;\n            left:0;\n            opacity: .05;\n            background: url('./images/static.gif');\n        }\n    </style>\n</head>\n<body>\n    <div class='menu'>>> codedance98</div>  \n    <!-- <div class='resume'>>> me</div> -->\n    <div class='t'></div>\n</body>\n<script>\n    document.querySelector('.menu').onclick = ()=>{location.href='https://github.com/codedance98/';}\n</script>\n</html>\n","slug":"last/index","published":0,"date":"2021-10-22T09:38:36.430Z","updated":"2021-10-22T09:38:36.430Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqw0018h7vmbouncw5l","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>b</title>\n    <style>\n        *{\n            padding: 0;\n            margin: 0;\n        }\n        body,html{\n            width:100%;\n            height:100%;\n            background-color:#1f1b16;\n        }\n        body{\n            background-image: url('./images/deep-bg.jpg');\n        }\n        .menu{\n            position: absolute;\n            top: 50%;\n            margin-top: -150px;\n            text-align: center;\n            z-index:2;\n            width: 100%;\n            font-family: \"Source Code Pro\", Consolas, Menlo, Monaco, \"Courier New\", monospace;\n            color:#fff;\n            font-size: 32px;\n            padding:15px 0px;\n            background-color:#1f1b16;\n        }\n        .resume{\n            cursor: pointer;\n            position:relative;\n            z-index:2;\n        }\n        .t{\n            width:100%;\n            height:100%;\n            position:absolute;\n            top:0;\n            left:0;\n            opacity: .05;\n            background: url('./images/static.gif');\n        }\n    </style>\n</head>\n<body>\n    <div class=\"menu\">>> codedance98</div>  \n    <!-- <div class='resume'>>> me</div> -->\n    <div class=\"t\"></div>\n</body>\n<script>\n    document.querySelector('.menu').onclick = ()=>{location.href='https://github.com/codedance98/';}\n</script>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>b</title>\n    <style>\n        *{\n            padding: 0;\n            margin: 0;\n        }\n        body,html{\n            width:100%;\n            height:100%;\n            background-color:#1f1b16;\n        }\n        body{\n            background-image: url('./images/deep-bg.jpg');\n        }\n        .menu{\n            position: absolute;\n            top: 50%;\n            margin-top: -150px;\n            text-align: center;\n            z-index:2;\n            width: 100%;\n            font-family: \"Source Code Pro\", Consolas, Menlo, Monaco, \"Courier New\", monospace;\n            color:#fff;\n            font-size: 32px;\n            padding:15px 0px;\n            background-color:#1f1b16;\n        }\n        .resume{\n            cursor: pointer;\n            position:relative;\n            z-index:2;\n        }\n        .t{\n            width:100%;\n            height:100%;\n            position:absolute;\n            top:0;\n            left:0;\n            opacity: .05;\n            background: url('./images/static.gif');\n        }\n    </style>\n</head>\n<body>\n    <div class=\"menu\">>> codedance98</div>  \n    <!-- <div class='resume'>>> me</div> -->\n    <div class=\"t\"></div>\n</body>\n<script>\n    document.querySelector('.menu').onclick = ()=>{location.href='https://github.com/codedance98/';}\n</script>\n</html>\n"},{"_content":"## 环境\n - CentOS 7.6 64位 \n - 阿里云学生机最低配置: 1核 1G 1M \n\n \n## 安装nodeJs和npm\n通过SSH连接到服务器。进入要安装的目录，笔者这里用的`/usr/local/src`，你也可以在`/opt`下。\n这里下载的二进制包，需要编译后使用，或还可以用CentOs的包管理工具`yum`安装。这里下载的node是`10.13.0`版本的，因为本地开发就是用这个版本，你也可以安装 [nrm](https://www.npmjs.com/package/nvm) 来管理node版本\n\n```shell\ncd /usr/local/src \nwget http://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gz\n```\n完成后得到node-v10.13.0.tar.gz ，解压缩并进入目录。\n\n```shell\ntar -xzvf node-v10.13.0.tar.gz\ncd node-v10.13.0\n```\n编译前环境监测。\n\n```shell\n./configure\n```  \n如果没报错忽略这条。新服务器这里会报错，提示需要安装`g++`，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行`./configure`。\n\n```shell\nyum groupinstall \"Development Tools\"\n...\n./configure\n\n```  \n编译并安装。由于服务器配置不高，我大概等了五分钟左右。\n\n```shell\nmake && make install\n```  \n创建node和npm软连接 `ln -s 源文件 目标文件`，执行目标文件就相当于执行源文件。完成后全局可以使用node和npm命令 \n\n```shell\nln -s /usr/local/src/node-v10.13.0/bin/node /usr/local/bin/node\nln -s /usr/local/src/node-v10.13.0/bin/npm /usr/local/bin/npm\n```  \n检查软链接是否配置成功，得到版本为成功配置：\n\n```shell\nnode -v \n10.13.0\nnpm -v\n6.4.1\n```\n## 安装mysql\n- 版本5.7  \n\n由于`yum`的源中没`mysql`，需要去[mysql官网](https://dev.mysql.com/downloads/repo/yum/)找到源地址下载。\n\n```shell\nwget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\n```\n安装源，完成后会在`/etc/yum.repos.d/`目录下增加两个文件`mysql-community.repo`和`mysql-community-source.repo`\n\n```shell\nrpm -ivh mysql57-community-release-el7-9.noarch.rpm\n```\n安装`mysql`:\n\n```shell\nyum install mysql-server\n```\n启动`msyql`：\n\n```shell\nsystemctl start mysqld\n```\n获取临时mysql密码，并登陆\n\n```shell\ngrep 'temporary password' /var/log/mysqld.log\n...\nmysql -u root -p\n```  \n登陆成功后先修改密码：  \n\n```shell\n> ALTER USER 'root'@'localhost' IDENTIFIED BY '你的新密码';\n``` \n授权其他机器进行登陆本机`mysql`:\n\n```shell\n> ALTER GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '你的新密码' WITH GRANT OPTION;\n  ...\n> FLUSH  PRIVILEGES;\n``` \n退出，至此，完成mysql安装。 \n\n```shell\n> exit;\n```   \n\n## 配置git拉取项目 \n\n设置git账号信息:\n\n```shell\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的邮箱\"\n``` \n查看git账号信息:\n\n```shell\ngit config user.name\ngit config user.email\n``` \n生成公钥和密钥，它会在`~/.ssh/`生成三个文件，其中`known_hosts`为访问记录，`id_rsa`是私钥，`id_rsa_pub`是公钥。\n\n```shell\nssh-keygen -t rsa -C \"你的邮箱\"\n``` \n复制公钥内容，添加到[Github](https://github.com/settings/ssh/new)用于鉴权。   \n位置：Github Profile > `setting` > `SSH and GPC keys` > `New SSH Key` > `Title为备注，把内容粘贴到Key表单中` > `Add SSH Key`   \n   \n```shell\ncd ~/.ssh\nvim id_rsa.pub\n``` \n\n\n\n至此服务器有权限从github获取项目了，进入/opt克隆你的项目  \n \n```shell\ncd /opt\ngit clone 你的项目ssh地址\n``` \n## 部署  \n>常规启动项目在遇到服务器重启或其他意外会直接停止服务，这非常不方便。笔者这里推荐使用[pm2](https://pm2.keymetrics.io/)来完善操作，它是一个node守护进程管理器，可利用它简化node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，很通用而且使用非常简单。  \n\n安装他:\n\n```shell\nnpm install -g pm2\n...\npm2 --version\n4.4.1\n```   \n安装依赖，并使用`pm2`启动node项目：\n\n```shell\ncd node\nnpm install\n...\npm2 start main.js --watch\n``` \n查看`pm2`列表：  \n\n```shell\npm2 list\n```    \n![WechatIMG2774.png](./img/deploy-nodejs-and-mysql-on-centos/tsJyucP4eSFO8zH.png)  \n  \n这是启动node项目下main.js示例。在本例中app_name默认为main，若要指定名称，在后面使用--name参数，更多参数请看下段。\n\n```shell\npm2 start node/main.js\n```  \n\n更多参数:  \n\n```shell\n# 指定应用名称\n--name <app_name>\n\n# 当文件改变时，监听并重启应用(开启)\n--watch\n\n# 当文件改变时，监听并重启应用(停止)\n--watch 0\n\n# 设置应用程序重新加载的内存阈值\n--max-memory-restart <200MB>\n\n# 指定日志文件路径\n--log <log_path>\n\n# 重启延迟\n--restart-delay <delay in ms>\n\n```  \n常用命令： \n\n - `pm2 start <file_name>` 开启应用\n - `pm2 stop all  ` \t停止所有pm2应用\n - `pm2 stop <app_name> ` \t停止单个pm2应用\n - `pm2 list` \t\t查看所有应用状态\n - `pm2 restart <file_name>` 重启 \n - `pm2 descripe <app_name>` 查看单个应用状态\n \n\n[更多pm2命令](https://pm2.keymetrics.io/docs/usage/quick-start/#options)  \n  \n至此，部署成功了。现在开放你的node端口供公网访问，进入购买服务器官网控制台，例如笔者服务器是阿里云的，进入阿里云控制台增加安全组，添加你的node端口，保存即可。enjoy it。\n\n\n","source":"_drafts/last/docs/CentOs服务器部署nodejs和mysql.md","raw":"## 环境\n - CentOS 7.6 64位 \n - 阿里云学生机最低配置: 1核 1G 1M \n\n \n## 安装nodeJs和npm\n通过SSH连接到服务器。进入要安装的目录，笔者这里用的`/usr/local/src`，你也可以在`/opt`下。\n这里下载的二进制包，需要编译后使用，或还可以用CentOs的包管理工具`yum`安装。这里下载的node是`10.13.0`版本的，因为本地开发就是用这个版本，你也可以安装 [nrm](https://www.npmjs.com/package/nvm) 来管理node版本\n\n```shell\ncd /usr/local/src \nwget http://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gz\n```\n完成后得到node-v10.13.0.tar.gz ，解压缩并进入目录。\n\n```shell\ntar -xzvf node-v10.13.0.tar.gz\ncd node-v10.13.0\n```\n编译前环境监测。\n\n```shell\n./configure\n```  \n如果没报错忽略这条。新服务器这里会报错，提示需要安装`g++`，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行`./configure`。\n\n```shell\nyum groupinstall \"Development Tools\"\n...\n./configure\n\n```  \n编译并安装。由于服务器配置不高，我大概等了五分钟左右。\n\n```shell\nmake && make install\n```  \n创建node和npm软连接 `ln -s 源文件 目标文件`，执行目标文件就相当于执行源文件。完成后全局可以使用node和npm命令 \n\n```shell\nln -s /usr/local/src/node-v10.13.0/bin/node /usr/local/bin/node\nln -s /usr/local/src/node-v10.13.0/bin/npm /usr/local/bin/npm\n```  \n检查软链接是否配置成功，得到版本为成功配置：\n\n```shell\nnode -v \n10.13.0\nnpm -v\n6.4.1\n```\n## 安装mysql\n- 版本5.7  \n\n由于`yum`的源中没`mysql`，需要去[mysql官网](https://dev.mysql.com/downloads/repo/yum/)找到源地址下载。\n\n```shell\nwget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\n```\n安装源，完成后会在`/etc/yum.repos.d/`目录下增加两个文件`mysql-community.repo`和`mysql-community-source.repo`\n\n```shell\nrpm -ivh mysql57-community-release-el7-9.noarch.rpm\n```\n安装`mysql`:\n\n```shell\nyum install mysql-server\n```\n启动`msyql`：\n\n```shell\nsystemctl start mysqld\n```\n获取临时mysql密码，并登陆\n\n```shell\ngrep 'temporary password' /var/log/mysqld.log\n...\nmysql -u root -p\n```  \n登陆成功后先修改密码：  \n\n```shell\n> ALTER USER 'root'@'localhost' IDENTIFIED BY '你的新密码';\n``` \n授权其他机器进行登陆本机`mysql`:\n\n```shell\n> ALTER GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '你的新密码' WITH GRANT OPTION;\n  ...\n> FLUSH  PRIVILEGES;\n``` \n退出，至此，完成mysql安装。 \n\n```shell\n> exit;\n```   \n\n## 配置git拉取项目 \n\n设置git账号信息:\n\n```shell\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的邮箱\"\n``` \n查看git账号信息:\n\n```shell\ngit config user.name\ngit config user.email\n``` \n生成公钥和密钥，它会在`~/.ssh/`生成三个文件，其中`known_hosts`为访问记录，`id_rsa`是私钥，`id_rsa_pub`是公钥。\n\n```shell\nssh-keygen -t rsa -C \"你的邮箱\"\n``` \n复制公钥内容，添加到[Github](https://github.com/settings/ssh/new)用于鉴权。   \n位置：Github Profile > `setting` > `SSH and GPC keys` > `New SSH Key` > `Title为备注，把内容粘贴到Key表单中` > `Add SSH Key`   \n   \n```shell\ncd ~/.ssh\nvim id_rsa.pub\n``` \n\n\n\n至此服务器有权限从github获取项目了，进入/opt克隆你的项目  \n \n```shell\ncd /opt\ngit clone 你的项目ssh地址\n``` \n## 部署  \n>常规启动项目在遇到服务器重启或其他意外会直接停止服务，这非常不方便。笔者这里推荐使用[pm2](https://pm2.keymetrics.io/)来完善操作，它是一个node守护进程管理器，可利用它简化node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，很通用而且使用非常简单。  \n\n安装他:\n\n```shell\nnpm install -g pm2\n...\npm2 --version\n4.4.1\n```   \n安装依赖，并使用`pm2`启动node项目：\n\n```shell\ncd node\nnpm install\n...\npm2 start main.js --watch\n``` \n查看`pm2`列表：  \n\n```shell\npm2 list\n```    \n![WechatIMG2774.png](./img/deploy-nodejs-and-mysql-on-centos/tsJyucP4eSFO8zH.png)  \n  \n这是启动node项目下main.js示例。在本例中app_name默认为main，若要指定名称，在后面使用--name参数，更多参数请看下段。\n\n```shell\npm2 start node/main.js\n```  \n\n更多参数:  \n\n```shell\n# 指定应用名称\n--name <app_name>\n\n# 当文件改变时，监听并重启应用(开启)\n--watch\n\n# 当文件改变时，监听并重启应用(停止)\n--watch 0\n\n# 设置应用程序重新加载的内存阈值\n--max-memory-restart <200MB>\n\n# 指定日志文件路径\n--log <log_path>\n\n# 重启延迟\n--restart-delay <delay in ms>\n\n```  \n常用命令： \n\n - `pm2 start <file_name>` 开启应用\n - `pm2 stop all  ` \t停止所有pm2应用\n - `pm2 stop <app_name> ` \t停止单个pm2应用\n - `pm2 list` \t\t查看所有应用状态\n - `pm2 restart <file_name>` 重启 \n - `pm2 descripe <app_name>` 查看单个应用状态\n \n\n[更多pm2命令](https://pm2.keymetrics.io/docs/usage/quick-start/#options)  \n  \n至此，部署成功了。现在开放你的node端口供公网访问，进入购买服务器官网控制台，例如笔者服务器是阿里云的，进入阿里云控制台增加安全组，添加你的node端口，保存即可。enjoy it。\n\n\n","slug":"last/docs/CentOs服务器部署nodejs和mysql","published":0,"date":"2021-10-22T09:38:36.327Z","updated":"2021-10-22T09:38:36.327Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqx001bh7vm0l7a7r5u","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>CentOS 7.6 64位 </li>\n<li>阿里云学生机最低配置: 1核 1G 1M </li>\n</ul>\n<h2 id=\"安装nodeJs和npm\"><a href=\"#安装nodeJs和npm\" class=\"headerlink\" title=\"安装nodeJs和npm\"></a>安装nodeJs和npm</h2><p>通过SSH连接到服务器。进入要安装的目录，笔者这里用的<code>/usr/local/src</code>，你也可以在<code>/opt</code>下。<br>这里下载的二进制包，需要编译后使用，或还可以用CentOs的包管理工具<code>yum</code>安装。这里下载的node是<code>10.13.0</code>版本的，因为本地开发就是用这个版本，你也可以安装 <a href=\"https://www.npmjs.com/package/nvm\">nrm</a> 来管理node版本</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> /usr/local/src \n<span class=\"token function\">wget</span> http://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>完成后得到node-v10.13.0.tar.gz ，解压缩并进入目录。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">tar</span> -xzvf node-v10.13.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> node-v10.13.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>编译前环境监测。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">./configure\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n如果没报错忽略这条。新服务器这里会报错，提示需要安装<span class=\"token variable\">`</span></span>g++<span class=\"token variable\"><span class=\"token variable\">`</span>，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行<span class=\"token variable\">`</span></span>./configure<span class=\"token variable\"><span class=\"token variable\">`</span>。\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\nyum groupinstall <span class=\"token string\">\"Development Tools\"</span>\n<span class=\"token punctuation\">..</span>.\n./configure\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n编译并安装。由于服务器配置不高，我大概等了五分钟左右。\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n创建node和npm软连接 <span class=\"token variable\">`</span></span><span class=\"token function\">ln</span> -s 源文件 目标文件<span class=\"token variable\"><span class=\"token variable\">`</span>，执行目标文件就相当于执行源文件。完成后全局可以使用node和npm命令 \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token function\">ln</span> -s /usr/local/src/node-v10.13.0/bin/node /usr/local/bin/node\n<span class=\"token function\">ln</span> -s /usr/local/src/node-v10.13.0/bin/npm /usr/local/bin/npm\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n检查软链接是否配置成功，得到版本为成功配置：\n\n<span class=\"token variable\">`</span></span>``shell\nnode -v \n<span class=\"token number\">10.13</span>.0\n<span class=\"token function\">npm</span> -v\n<span class=\"token number\">6.4</span>.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><ul>\n<li>版本5.7  </li>\n</ul>\n<p>由于<code>yum</code>的源中没<code>mysql</code>，需要去<a href=\"https://dev.mysql.com/downloads/repo/yum/\">mysql官网</a>找到源地址下载。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装源，完成后会在<code>/etc/yum.repos.d/</code>目录下增加两个文件<code>mysql-community.repo</code>和<code>mysql-community-source.repo</code></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">rpm</span> -ivh mysql57-community-release-el7-9.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装<code>mysql</code>:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>启动<code>msyql</code>：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl start mysqld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>获取临时mysql密码，并登陆</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">grep</span> <span class=\"token string\">'temporary password'</span> /var/log/mysqld.log\n<span class=\"token punctuation\">..</span>.\nmysql -u root -p\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n登陆成功后先修改密码：  \n\n<span class=\"token variable\">`</span></span>``shell\n<span class=\"token operator\">></span> ALTER <span class=\"token environment constant\">USER</span> <span class=\"token string\">'root'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED BY <span class=\"token string\">'你的新密码'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>授权其他机器进行登陆本机<code>mysql</code>:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> ALTER GRANT ALL PRIVILEGES ON *.* TO <span class=\"token string\">'root'</span>@<span class=\"token string\">'%'</span> IDENTIFIED BY <span class=\"token string\">'你的新密码'</span> WITH GRANT OPTION<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">></span> FLUSH  PRIVILEGES<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>退出，至此，完成mysql安装。 </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token builtin class-name\">exit</span><span class=\"token punctuation\">;</span>\n``<span class=\"token variable\"><span class=\"token variable\">`</span>   \n\n<span class=\"token comment\">## 配置git拉取项目 </span>\n\n设置git账号信息:\n\n<span class=\"token variable\">`</span></span>``shell\n<span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"你的用户名\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看git账号信息:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config user.name\n<span class=\"token function\">git</span> config user.email<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>生成公钥和密钥，它会在<code>~/.ssh/</code>生成三个文件，其中<code>known_hosts</code>为访问记录，<code>id_rsa</code>是私钥，<code>id_rsa_pub</code>是公钥。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ssh-keygen -t rsa -C <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>复制公钥内容，添加到<a href=\"https://github.com/settings/ssh/new\">Github</a>用于鉴权。<br>位置：Github Profile &gt; <code>setting</code> &gt; <code>SSH and GPC keys</code> &gt; <code>New SSH Key</code> &gt; <code>Title为备注，把内容粘贴到Key表单中</code> &gt; <code>Add SSH Key</code>   </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> ~/.ssh\n<span class=\"token function\">vim</span> id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>至此服务器有权限从github获取项目了，进入/opt克隆你的项目  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> /opt\n<span class=\"token function\">git</span> clone 你的项目ssh地址<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><blockquote>\n<p>常规启动项目在遇到服务器重启或其他意外会直接停止服务，这非常不方便。笔者这里推荐使用<a href=\"https://pm2.keymetrics.io/\">pm2</a>来完善操作，它是一个node守护进程管理器，可利用它简化node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，很通用而且使用非常简单。  </p>\n</blockquote>\n<p>安装他:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g pm2\n<span class=\"token punctuation\">..</span>.\npm2 --version\n<span class=\"token number\">4.4</span>.1\n``<span class=\"token variable\"><span class=\"token variable\">`</span>   \n安装依赖，并使用<span class=\"token variable\">`</span></span>pm2<span class=\"token variable\"><span class=\"token variable\">`</span>启动node项目：\n\n<span class=\"token variable\">`</span></span>``shell\n<span class=\"token builtin class-name\">cd</span> node\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token punctuation\">..</span>.\npm2 start main.js --watch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看<code>pm2</code>列表：  </p>\n<pre><code class=\"shell\">pm2 list\n</code></pre>\n<p><img src=\"/2021/10/22/last/docs/CentOs%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2nodejs%E5%92%8Cmysql/deploy-nodejs-and-mysql-on-centos/tsJyucP4eSFO8zH.png\" alt=\"WechatIMG2774.png\">  </p>\n<p>这是启动node项目下main.js示例。在本例中app_name默认为main，若要指定名称，在后面使用–name参数，更多参数请看下段。</p>\n<pre><code class=\"shell\">pm2 start node/main.js\n</code></pre>\n<p>更多参数:  </p>\n<pre><code class=\"shell\"># 指定应用名称\n--name &lt;app_name&gt;\n\n# 当文件改变时，监听并重启应用(开启)\n--watch\n\n# 当文件改变时，监听并重启应用(停止)\n--watch 0\n\n# 设置应用程序重新加载的内存阈值\n--max-memory-restart &lt;200MB&gt;\n\n# 指定日志文件路径\n--log &lt;log_path&gt;\n\n# 重启延迟\n--restart-delay &lt;delay in ms&gt;\n</code></pre>\n<p>常用命令： </p>\n<ul>\n<li><code>pm2 start &lt;file_name&gt;</code> 开启应用</li>\n<li><code>pm2 stop all  </code>     停止所有pm2应用</li>\n<li><code>pm2 stop &lt;app_name&gt; </code>     停止单个pm2应用</li>\n<li><code>pm2 list</code>         查看所有应用状态</li>\n<li><code>pm2 restart &lt;file_name&gt;</code> 重启 </li>\n<li><code>pm2 descripe &lt;app_name&gt;</code> 查看单个应用状态</li>\n</ul>\n<p><a href=\"https://pm2.keymetrics.io/docs/usage/quick-start/#options\">更多pm2命令</a>  </p>\n<p>至此，部署成功了。现在开放你的node端口供公网访问，进入购买服务器官网控制台，例如笔者服务器是阿里云的，进入阿里云控制台增加安全组，添加你的node端口，保存即可。enjoy it。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>CentOS 7.6 64位 </li>\n<li>阿里云学生机最低配置: 1核 1G 1M </li>\n</ul>\n<h2 id=\"安装nodeJs和npm\"><a href=\"#安装nodeJs和npm\" class=\"headerlink\" title=\"安装nodeJs和npm\"></a>安装nodeJs和npm</h2><p>通过SSH连接到服务器。进入要安装的目录，笔者这里用的<code>/usr/local/src</code>，你也可以在<code>/opt</code>下。<br>这里下载的二进制包，需要编译后使用，或还可以用CentOs的包管理工具<code>yum</code>安装。这里下载的node是<code>10.13.0</code>版本的，因为本地开发就是用这个版本，你也可以安装 <a href=\"https://www.npmjs.com/package/nvm\">nrm</a> 来管理node版本</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> /usr/local/src \n<span class=\"token function\">wget</span> http://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>完成后得到node-v10.13.0.tar.gz ，解压缩并进入目录。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">tar</span> -xzvf node-v10.13.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> node-v10.13.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>编译前环境监测。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">./configure\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n如果没报错忽略这条。新服务器这里会报错，提示需要安装<span class=\"token variable\">`</span></span>g++<span class=\"token variable\"><span class=\"token variable\">`</span>，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行<span class=\"token variable\">`</span></span>./configure<span class=\"token variable\"><span class=\"token variable\">`</span>。\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\nyum groupinstall <span class=\"token string\">\"Development Tools\"</span>\n<span class=\"token punctuation\">..</span>.\n./configure\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n编译并安装。由于服务器配置不高，我大概等了五分钟左右。\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n创建node和npm软连接 <span class=\"token variable\">`</span></span><span class=\"token function\">ln</span> -s 源文件 目标文件<span class=\"token variable\"><span class=\"token variable\">`</span>，执行目标文件就相当于执行源文件。完成后全局可以使用node和npm命令 \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token function\">ln</span> -s /usr/local/src/node-v10.13.0/bin/node /usr/local/bin/node\n<span class=\"token function\">ln</span> -s /usr/local/src/node-v10.13.0/bin/npm /usr/local/bin/npm\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n检查软链接是否配置成功，得到版本为成功配置：\n\n<span class=\"token variable\">`</span></span>``shell\nnode -v \n<span class=\"token number\">10.13</span>.0\n<span class=\"token function\">npm</span> -v\n<span class=\"token number\">6.4</span>.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><ul>\n<li>版本5.7  </li>\n</ul>\n<p>由于<code>yum</code>的源中没<code>mysql</code>，需要去<a href=\"https://dev.mysql.com/downloads/repo/yum/\">mysql官网</a>找到源地址下载。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装源，完成后会在<code>/etc/yum.repos.d/</code>目录下增加两个文件<code>mysql-community.repo</code>和<code>mysql-community-source.repo</code></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">rpm</span> -ivh mysql57-community-release-el7-9.noarch.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装<code>mysql</code>:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum <span class=\"token function\">install</span> mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>启动<code>msyql</code>：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl start mysqld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>获取临时mysql密码，并登陆</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">grep</span> <span class=\"token string\">'temporary password'</span> /var/log/mysqld.log\n<span class=\"token punctuation\">..</span>.\nmysql -u root -p\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n登陆成功后先修改密码：  \n\n<span class=\"token variable\">`</span></span>``shell\n<span class=\"token operator\">></span> ALTER <span class=\"token environment constant\">USER</span> <span class=\"token string\">'root'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED BY <span class=\"token string\">'你的新密码'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>授权其他机器进行登陆本机<code>mysql</code>:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> ALTER GRANT ALL PRIVILEGES ON *.* TO <span class=\"token string\">'root'</span>@<span class=\"token string\">'%'</span> IDENTIFIED BY <span class=\"token string\">'你的新密码'</span> WITH GRANT OPTION<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">></span> FLUSH  PRIVILEGES<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>退出，至此，完成mysql安装。 </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token builtin class-name\">exit</span><span class=\"token punctuation\">;</span>\n``<span class=\"token variable\"><span class=\"token variable\">`</span>   \n\n<span class=\"token comment\">## 配置git拉取项目 </span>\n\n设置git账号信息:\n\n<span class=\"token variable\">`</span></span>``shell\n<span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"你的用户名\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看git账号信息:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> config user.name\n<span class=\"token function\">git</span> config user.email<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>生成公钥和密钥，它会在<code>~/.ssh/</code>生成三个文件，其中<code>known_hosts</code>为访问记录，<code>id_rsa</code>是私钥，<code>id_rsa_pub</code>是公钥。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ssh-keygen -t rsa -C <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>复制公钥内容，添加到<a href=\"https://github.com/settings/ssh/new\">Github</a>用于鉴权。<br>位置：Github Profile &gt; <code>setting</code> &gt; <code>SSH and GPC keys</code> &gt; <code>New SSH Key</code> &gt; <code>Title为备注，把内容粘贴到Key表单中</code> &gt; <code>Add SSH Key</code>   </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> ~/.ssh\n<span class=\"token function\">vim</span> id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>至此服务器有权限从github获取项目了，进入/opt克隆你的项目  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> /opt\n<span class=\"token function\">git</span> clone 你的项目ssh地址<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><blockquote>\n<p>常规启动项目在遇到服务器重启或其他意外会直接停止服务，这非常不方便。笔者这里推荐使用<a href=\"https://pm2.keymetrics.io/\">pm2</a>来完善操作，它是一个node守护进程管理器，可利用它简化node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，很通用而且使用非常简单。  </p>\n</blockquote>\n<p>安装他:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g pm2\n<span class=\"token punctuation\">..</span>.\npm2 --version\n<span class=\"token number\">4.4</span>.1\n``<span class=\"token variable\"><span class=\"token variable\">`</span>   \n安装依赖，并使用<span class=\"token variable\">`</span></span>pm2<span class=\"token variable\"><span class=\"token variable\">`</span>启动node项目：\n\n<span class=\"token variable\">`</span></span>``shell\n<span class=\"token builtin class-name\">cd</span> node\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token punctuation\">..</span>.\npm2 start main.js --watch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看<code>pm2</code>列表：  </p>\n<pre><code class=\"shell\">pm2 list\n</code></pre>\n<p><img src=\"/2021/10/22/last/docs/CentOs%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2nodejs%E5%92%8Cmysql/deploy-nodejs-and-mysql-on-centos/tsJyucP4eSFO8zH.png\" alt=\"WechatIMG2774.png\">  </p>\n<p>这是启动node项目下main.js示例。在本例中app_name默认为main，若要指定名称，在后面使用–name参数，更多参数请看下段。</p>\n<pre><code class=\"shell\">pm2 start node/main.js\n</code></pre>\n<p>更多参数:  </p>\n<pre><code class=\"shell\"># 指定应用名称\n--name &lt;app_name&gt;\n\n# 当文件改变时，监听并重启应用(开启)\n--watch\n\n# 当文件改变时，监听并重启应用(停止)\n--watch 0\n\n# 设置应用程序重新加载的内存阈值\n--max-memory-restart &lt;200MB&gt;\n\n# 指定日志文件路径\n--log &lt;log_path&gt;\n\n# 重启延迟\n--restart-delay &lt;delay in ms&gt;\n</code></pre>\n<p>常用命令： </p>\n<ul>\n<li><code>pm2 start &lt;file_name&gt;</code> 开启应用</li>\n<li><code>pm2 stop all  </code>     停止所有pm2应用</li>\n<li><code>pm2 stop &lt;app_name&gt; </code>     停止单个pm2应用</li>\n<li><code>pm2 list</code>         查看所有应用状态</li>\n<li><code>pm2 restart &lt;file_name&gt;</code> 重启 </li>\n<li><code>pm2 descripe &lt;app_name&gt;</code> 查看单个应用状态</li>\n</ul>\n<p><a href=\"https://pm2.keymetrics.io/docs/usage/quick-start/#options\">更多pm2命令</a>  </p>\n<p>至此，部署成功了。现在开放你的node端口供公网访问，进入购买服务器官网控制台，例如笔者服务器是阿里云的，进入阿里云控制台增加安全组，添加你的node端口，保存即可。enjoy it。</p>\n"},{"_content":"## 什么是swap\n`swap`分区是`Linux`中特殊的一种存储，他在安装系统时被自动创建。  \n\n用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到`swap`分区中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问`swap`空间上的的数据时，`swap`会把数据放回内存中供操作系统使用。\n\n类似`windows`中的虚拟内存。每个操作系统都有这种内存调度处理，当内存不够用，还想跑点东西，可以临时选择增加`swap`空间。以达到`实际使用内存`超过`物理内存`。由于`swap`的读取速度远不如内存，最好的办法还是`加物理内存`。\n## swap分区类型\n - **swap 文件**\n - **swap 分区**  \n\n速度比较：物理内存 > swap分区 > swap文件。\n\n由于`swap`分区需要一个新的磁盘，当你的磁盘已经装了不少内容，不方便重新规划的话，也只好使用swap文件了。本文使用swap文件方式。\n\n## 查看swap信息\n> 基于Cent OS 7.6 \n\n 使用`swapon -s`命令查看系统中当前`swap`信息：  \n\n```shell\nswapon -s\n\nFilename            Type        Size     Used        Priority\n/swapfile           file        1048572  199668      -2\n``` \n - **Filename**：swap 分区/文件所在的位置\n - **Type**：swap类型；`partition`为分区类型，`file`为文件类型\n - **Size**：总容量，单位是KB\n - **Used**：已被使用的容量\n - **Priority**：优先级，越高越优先被操作系统使用\n \n若查不到 swap 信息，使用`free -h`命令，查看内存使用情况：\n\n```shell\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M\n```\n## 操作swap\n>\n\n创建`swap文件`， `fallocate`命令可以为文件预分配物理空间，和touch、vim的区别就是可瞬间创建超大的文件。快速创建的原因是通过分配块并将它们标记为未初始化，无需对数据块进行IO，可以快速完成预分配。当使用时再使用物理内存。`-l`后加大小，可以是k、m、g。再后面是保存位置和名称。\n   \n```shell\n# 创建一个1g文件swapfile保存到/\nsudo fallocate -l 1G /swapfile\n``` \n\n修改权限，仅允许文件所有者进行读写操作：\n\n```shell\nsudo chmod 600 /swapfile\n``` \n将这个文件设为 Linux 交换区：\n\n```shell\nsudo mkswap /swapfile\n``` \n激活交换区：\n\n```shell  \nsudo swapon /swapfile\n``` \n修改`/etc/fstab`，实现系统重启自动加载swap文件：  \n\n```shell\necho '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab\n```\n至此完成swap文件增加。使用`free -h`查看 swap 使用情况：  \n\n```shell\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M\n```\n停止所有swap：  \n\n```shell\nsudo swapoff -a\n\n# 查看内存使用情况，可以看到 Swap 信息都变成0，说明操作成功了\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M        261M         92M        484K        134M        201M\nSwap:     \t      0           0           0\n```\n\n","source":"_drafts/last/docs/Linux中内存交换空间(Swap)的介绍和使用.md","raw":"## 什么是swap\n`swap`分区是`Linux`中特殊的一种存储，他在安装系统时被自动创建。  \n\n用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到`swap`分区中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问`swap`空间上的的数据时，`swap`会把数据放回内存中供操作系统使用。\n\n类似`windows`中的虚拟内存。每个操作系统都有这种内存调度处理，当内存不够用，还想跑点东西，可以临时选择增加`swap`空间。以达到`实际使用内存`超过`物理内存`。由于`swap`的读取速度远不如内存，最好的办法还是`加物理内存`。\n## swap分区类型\n - **swap 文件**\n - **swap 分区**  \n\n速度比较：物理内存 > swap分区 > swap文件。\n\n由于`swap`分区需要一个新的磁盘，当你的磁盘已经装了不少内容，不方便重新规划的话，也只好使用swap文件了。本文使用swap文件方式。\n\n## 查看swap信息\n> 基于Cent OS 7.6 \n\n 使用`swapon -s`命令查看系统中当前`swap`信息：  \n\n```shell\nswapon -s\n\nFilename            Type        Size     Used        Priority\n/swapfile           file        1048572  199668      -2\n``` \n - **Filename**：swap 分区/文件所在的位置\n - **Type**：swap类型；`partition`为分区类型，`file`为文件类型\n - **Size**：总容量，单位是KB\n - **Used**：已被使用的容量\n - **Priority**：优先级，越高越优先被操作系统使用\n \n若查不到 swap 信息，使用`free -h`命令，查看内存使用情况：\n\n```shell\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M\n```\n## 操作swap\n>\n\n创建`swap文件`， `fallocate`命令可以为文件预分配物理空间，和touch、vim的区别就是可瞬间创建超大的文件。快速创建的原因是通过分配块并将它们标记为未初始化，无需对数据块进行IO，可以快速完成预分配。当使用时再使用物理内存。`-l`后加大小，可以是k、m、g。再后面是保存位置和名称。\n   \n```shell\n# 创建一个1g文件swapfile保存到/\nsudo fallocate -l 1G /swapfile\n``` \n\n修改权限，仅允许文件所有者进行读写操作：\n\n```shell\nsudo chmod 600 /swapfile\n``` \n将这个文件设为 Linux 交换区：\n\n```shell\nsudo mkswap /swapfile\n``` \n激活交换区：\n\n```shell  \nsudo swapon /swapfile\n``` \n修改`/etc/fstab`，实现系统重启自动加载swap文件：  \n\n```shell\necho '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab\n```\n至此完成swap文件增加。使用`free -h`查看 swap 使用情况：  \n\n```shell\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          1.0G        259M        764M\n```\n停止所有swap：  \n\n```shell\nsudo swapoff -a\n\n# 查看内存使用情况，可以看到 Swap 信息都变成0，说明操作成功了\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:           487M        261M         92M        484K        134M        201M\nSwap:     \t      0           0           0\n```\n\n","slug":"last/docs/Linux中内存交换空间(Swap)的介绍和使用","published":0,"date":"2021-10-22T09:38:36.327Z","updated":"2021-10-22T09:38:36.327Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqy001dh7vmby3qe3vp","content":"<h2 id=\"什么是swap\"><a href=\"#什么是swap\" class=\"headerlink\" title=\"什么是swap\"></a>什么是swap</h2><p><code>swap</code>分区是<code>Linux</code>中特殊的一种存储，他在安装系统时被自动创建。  </p>\n<p>用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到<code>swap</code>分区中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问<code>swap</code>空间上的的数据时，<code>swap</code>会把数据放回内存中供操作系统使用。</p>\n<p>类似<code>windows</code>中的虚拟内存。每个操作系统都有这种内存调度处理，当内存不够用，还想跑点东西，可以临时选择增加<code>swap</code>空间。以达到<code>实际使用内存</code>超过<code>物理内存</code>。由于<code>swap</code>的读取速度远不如内存，最好的办法还是<code>加物理内存</code>。</p>\n<h2 id=\"swap分区类型\"><a href=\"#swap分区类型\" class=\"headerlink\" title=\"swap分区类型\"></a>swap分区类型</h2><ul>\n<li><strong>swap 文件</strong></li>\n<li><strong>swap 分区</strong>  </li>\n</ul>\n<p>速度比较：物理内存 &gt; swap分区 &gt; swap文件。</p>\n<p>由于<code>swap</code>分区需要一个新的磁盘，当你的磁盘已经装了不少内容，不方便重新规划的话，也只好使用swap文件了。本文使用swap文件方式。</p>\n<h2 id=\"查看swap信息\"><a href=\"#查看swap信息\" class=\"headerlink\" title=\"查看swap信息\"></a>查看swap信息</h2><blockquote>\n<p>基于Cent OS 7.6 </p>\n</blockquote>\n<p> 使用<code>swapon -s</code>命令查看系统中当前<code>swap</code>信息：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">swapon</span> -s\n\nFilename            Type        Size     Used        Priority\n/swapfile           <span class=\"token function\">file</span>        <span class=\"token number\">1048572</span>  <span class=\"token number\">199668</span>      -2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>Filename</strong>：swap 分区/文件所在的位置</li>\n<li><strong>Type</strong>：swap类型；<code>partition</code>为分区类型，<code>file</code>为文件类型</li>\n<li><strong>Size</strong>：总容量，单位是KB</li>\n<li><strong>Used</strong>：已被使用的容量</li>\n<li><strong>Priority</strong>：优先级，越高越优先被操作系统使用</li>\n</ul>\n<p>若查不到 swap 信息，使用<code>free -h</code>命令，查看内存使用情况：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">free</span> -h\n              total        used        <span class=\"token function\">free</span>      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          <span class=\"token number\">1</span>.0G        259M        764M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"操作swap\"><a href=\"#操作swap\" class=\"headerlink\" title=\"操作swap\"></a>操作swap</h2><blockquote>\n</blockquote>\n<p>创建<code>swap文件</code>， <code>fallocate</code>命令可以为文件预分配物理空间，和touch、vim的区别就是可瞬间创建超大的文件。快速创建的原因是通过分配块并将它们标记为未初始化，无需对数据块进行IO，可以快速完成预分配。当使用时再使用物理内存。<code>-l</code>后加大小，可以是k、m、g。再后面是保存位置和名称。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 创建一个1g文件swapfile保存到/</span>\n<span class=\"token function\">sudo</span> fallocate -l 1G /swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改权限，仅允许文件所有者进行读写操作：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> /swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将这个文件设为 Linux 交换区：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkswap</span> /swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>激活交换区：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">swapon</span> /swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改<code>/etc/fstab</code>，实现系统重启自动加载swap文件：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'/swapfile none swap sw 0 0'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> -a /etc/fstab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>至此完成swap文件增加。使用<code>free -h</code>查看 swap 使用情况：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">free</span> -h\n              total        used        <span class=\"token function\">free</span>      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          <span class=\"token number\">1</span>.0G        259M        764M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>停止所有swap：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> swapoff -a\n\n<span class=\"token comment\"># 查看内存使用情况，可以看到 Swap 信息都变成0，说明操作成功了</span>\n<span class=\"token function\">free</span> -h\n              total        used        <span class=\"token function\">free</span>      shared  buff/cache   available\nMem:           487M        261M         92M        484K        134M        201M\nSwap:     \t      <span class=\"token number\">0</span>           <span class=\"token number\">0</span>           <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是swap\"><a href=\"#什么是swap\" class=\"headerlink\" title=\"什么是swap\"></a>什么是swap</h2><p><code>swap</code>分区是<code>Linux</code>中特殊的一种存储，他在安装系统时被自动创建。  </p>\n<p>用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到<code>swap</code>分区中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问<code>swap</code>空间上的的数据时，<code>swap</code>会把数据放回内存中供操作系统使用。</p>\n<p>类似<code>windows</code>中的虚拟内存。每个操作系统都有这种内存调度处理，当内存不够用，还想跑点东西，可以临时选择增加<code>swap</code>空间。以达到<code>实际使用内存</code>超过<code>物理内存</code>。由于<code>swap</code>的读取速度远不如内存，最好的办法还是<code>加物理内存</code>。</p>\n<h2 id=\"swap分区类型\"><a href=\"#swap分区类型\" class=\"headerlink\" title=\"swap分区类型\"></a>swap分区类型</h2><ul>\n<li><strong>swap 文件</strong></li>\n<li><strong>swap 分区</strong>  </li>\n</ul>\n<p>速度比较：物理内存 &gt; swap分区 &gt; swap文件。</p>\n<p>由于<code>swap</code>分区需要一个新的磁盘，当你的磁盘已经装了不少内容，不方便重新规划的话，也只好使用swap文件了。本文使用swap文件方式。</p>\n<h2 id=\"查看swap信息\"><a href=\"#查看swap信息\" class=\"headerlink\" title=\"查看swap信息\"></a>查看swap信息</h2><blockquote>\n<p>基于Cent OS 7.6 </p>\n</blockquote>\n<p> 使用<code>swapon -s</code>命令查看系统中当前<code>swap</code>信息：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">swapon</span> -s\n\nFilename            Type        Size     Used        Priority\n/swapfile           <span class=\"token function\">file</span>        <span class=\"token number\">1048572</span>  <span class=\"token number\">199668</span>      -2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>Filename</strong>：swap 分区/文件所在的位置</li>\n<li><strong>Type</strong>：swap类型；<code>partition</code>为分区类型，<code>file</code>为文件类型</li>\n<li><strong>Size</strong>：总容量，单位是KB</li>\n<li><strong>Used</strong>：已被使用的容量</li>\n<li><strong>Priority</strong>：优先级，越高越优先被操作系统使用</li>\n</ul>\n<p>若查不到 swap 信息，使用<code>free -h</code>命令，查看内存使用情况：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">free</span> -h\n              total        used        <span class=\"token function\">free</span>      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          <span class=\"token number\">1</span>.0G        259M        764M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"操作swap\"><a href=\"#操作swap\" class=\"headerlink\" title=\"操作swap\"></a>操作swap</h2><blockquote>\n</blockquote>\n<p>创建<code>swap文件</code>， <code>fallocate</code>命令可以为文件预分配物理空间，和touch、vim的区别就是可瞬间创建超大的文件。快速创建的原因是通过分配块并将它们标记为未初始化，无需对数据块进行IO，可以快速完成预分配。当使用时再使用物理内存。<code>-l</code>后加大小，可以是k、m、g。再后面是保存位置和名称。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 创建一个1g文件swapfile保存到/</span>\n<span class=\"token function\">sudo</span> fallocate -l 1G /swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改权限，仅允许文件所有者进行读写操作：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> /swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将这个文件设为 Linux 交换区：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkswap</span> /swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>激活交换区：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">swapon</span> /swapfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改<code>/etc/fstab</code>，实现系统重启自动加载swap文件：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'/swapfile none swap sw 0 0'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> -a /etc/fstab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>至此完成swap文件增加。使用<code>free -h</code>查看 swap 使用情况：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">free</span> -h\n              total        used        <span class=\"token function\">free</span>      shared  buff/cache   available\nMem:           487M         65M        289M         44K        132M        398M\nSwap:          <span class=\"token number\">1</span>.0G        259M        764M<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>停止所有swap：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> swapoff -a\n\n<span class=\"token comment\"># 查看内存使用情况，可以看到 Swap 信息都变成0，说明操作成功了</span>\n<span class=\"token function\">free</span> -h\n              total        used        <span class=\"token function\">free</span>      shared  buff/cache   available\nMem:           487M        261M         92M        484K        134M        201M\nSwap:     \t      <span class=\"token number\">0</span>           <span class=\"token number\">0</span>           <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"_content":"## diff算法和virtual dom\n\n![WechatIMG3177.png](./img/diff-arithmetic/HrGjhDp8ebSt62R.png)  \n\n在现代`mvvm`框架`react`和`vue`中，因为直接操作dom相对是要耗费更多性能的，所以`react`和`vue`都使用了`virtual dom`来替代处理dom，大致的过程是：按照dom结构生成一份`virtual dom`为`js`对象树状格式。如果数据有更新，需要表现在dom上，那么先把变化表现在`virtual dom`，再通过`diff`算法比对数据更新前后两次`virtual dom`找到差别。最后把仅仅改变的这部分更新到dom上，不用重新渲染整个页面。  \n\n总结：`diff`算法就是找到两个`virtual dom`树结构的不同  \n\n## diff原理 \n首先传入新旧`vnode`到`patch`函数开始比较:  \n\n```  \nfunction patch (oldVnode, vnode) {\n    if (sameVnode(oldVnode, vnode)) {\n        patchVnode(oldVnode, vnode) // 如果两个vnode值得比较，调用patchVnode\n    } else {\n        const oEl = oldVnode.el // oldVnode.el为对应的真实dom元素\n        let parentEle = api.parentNode(oEl)\n        createEle(vnode) // 按照vnode结构创建真实dom插入父元素，直接替换oldVnode\n        if (parentEle !== null) {\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\n            api.removeChild(parentEle, oldVnode.el)\n            oldVnode = null\n        }\n    }\n    return vnode\n}\n```\n首先使用`sameVnode`方法判断两个`vnode`是否值得比较，代码如下\n  \n```javascript  \nfunction sameVnode(oldVnode, vnode){\n\t//  key代表当前节点数据的key属性，大概的意思就是div和span为不同标签。p.class1和p.class2为不同标签\n\treturn vnode.key === oldVnode.key && vnode.sel === oldVnode.sel\n}\n```    \n一致就按照上步骤，继续往下处理。执行`patchVnode`方法，如不一致，直接用新元素**直接替换**到旧元素。  \n\n如果两个`vnode`值得比较，调用`patchVnode`:\n\n```javascript\npatchVnode (oldVnode, vnode) {\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return // 引用相同，就说明相同，直接return\n    if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\n    \t // 如果有文本内容，比较，如果不同直接设置，用新的替换旧的文本\n        api.setTextContent(el, vnode.text)\n    }else {\n        updateEle(el, vnode, oldVnode)\n        if (oldCh && ch && oldCh !== ch) { // 如果都有子节点，且不同，开始比较子节点\n            updateChildren(el, oldCh, ch)\n        }else if (ch){\n        \t  // 如果只有新vnode上有子节点，直接新建\n            createEle(vnode)\n        }else if (oldCh){\n        \t  // 如果新vnode没子子节，而老vnode有，则删除老节点的子节点\n            api.removeChildren(el)\n        }\n    }\n}\n```  \n 如果都有子节点，且不同，开始比较子节点，调用`updateChildren`函数开始比较子节点:\n\n```javascript\nupdateChildren (parentElm, oldCh, newCh) { // parentElm：真是dom节点。oldCh：老vnode的所有子节点。newCh：新vnode的所有子节点。\n\t // 通过下标，设置新旧vnode的前后两个元素，\n    let oldStartIdx = 0, newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n   \t // 设置一些比较过程需要的变量\n    let oldKeyToIdx\n    let idxInOld\n    let elmToMove\n    let before\n    // 两对节点，分别从头和尾向中间循环靠拢依次比对，如果起始下标大于结尾下标，证明比对结束，作为循环结束条件\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {   //对于vnode.key的比较，会把oldVnode = null\n                oldStartVnode = oldCh[++oldStartIdx] \n            }else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx]\n            }else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx]\n            }else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode)\n                oldStartVnode = oldCh[++oldStartIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode)\n                api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n                oldStartVnode = oldCh[++oldStartIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode)\n                api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }else {\n               // 使用key时的比较\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key]\n                if (!idxInOld) {\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    newStartVnode = newCh[++newStartIdx]\n                }\n                else {\n                    elmToMove = oldCh[idxInOld]\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    }else {\n                        patchVnode(elmToMove, newStartVnode)\n                        oldCh[idxInOld] = null\n                        api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                    }\n                    newStartVnode = newCh[++newStartIdx]\n                }\n            }\n        }\n        if (oldStartIdx > oldEndIdx) {\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n        }else if (newStartIdx > newEndIdx) {\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n        }\n}\n```  \n\n\n总结：    \n\n - **调用patch**：传入`新旧vnode`，调用`sameVnode`，返回`true`说明值得比较，则调用`patchVnode`，否则直接使用新节点替换旧节点  \n\n - **调用patchVnode**：更详细的对比新旧vnode，分几种情况：  \n \t- 1: 对于新旧vnode的`.el`真实dom属性，并对比，如果===那就证明是同一个，直接return\n \t- 2: 如果存在文本节点，直接用新vnode内文本替换旧vnode文本\n \t- 3: 判断子节点，如果新vnode有，旧vnode没有，则直接把新vnode的子节点加入到真实dom，相反就删除掉真实dom子节点\n \t- 4. 如果都有子节点，且不同，调用updateChildren，详细对比\n - **调用updateChildren**： 从两边向中间收拢循环两个新旧vnode的每个子节点，以此对比，头头，尾尾，头尾，尾头。如果这四种比对调用sameVnode，得到true，证明值得对比，那么就调用第二步骤的`patchVnode`递归继续比，除了这四种情况。如果有key，则会对比key。否则直接替换新元素到真实dom。","source":"_drafts/last/docs/diff算法简介.md","raw":"## diff算法和virtual dom\n\n![WechatIMG3177.png](./img/diff-arithmetic/HrGjhDp8ebSt62R.png)  \n\n在现代`mvvm`框架`react`和`vue`中，因为直接操作dom相对是要耗费更多性能的，所以`react`和`vue`都使用了`virtual dom`来替代处理dom，大致的过程是：按照dom结构生成一份`virtual dom`为`js`对象树状格式。如果数据有更新，需要表现在dom上，那么先把变化表现在`virtual dom`，再通过`diff`算法比对数据更新前后两次`virtual dom`找到差别。最后把仅仅改变的这部分更新到dom上，不用重新渲染整个页面。  \n\n总结：`diff`算法就是找到两个`virtual dom`树结构的不同  \n\n## diff原理 \n首先传入新旧`vnode`到`patch`函数开始比较:  \n\n```  \nfunction patch (oldVnode, vnode) {\n    if (sameVnode(oldVnode, vnode)) {\n        patchVnode(oldVnode, vnode) // 如果两个vnode值得比较，调用patchVnode\n    } else {\n        const oEl = oldVnode.el // oldVnode.el为对应的真实dom元素\n        let parentEle = api.parentNode(oEl)\n        createEle(vnode) // 按照vnode结构创建真实dom插入父元素，直接替换oldVnode\n        if (parentEle !== null) {\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\n            api.removeChild(parentEle, oldVnode.el)\n            oldVnode = null\n        }\n    }\n    return vnode\n}\n```\n首先使用`sameVnode`方法判断两个`vnode`是否值得比较，代码如下\n  \n```javascript  \nfunction sameVnode(oldVnode, vnode){\n\t//  key代表当前节点数据的key属性，大概的意思就是div和span为不同标签。p.class1和p.class2为不同标签\n\treturn vnode.key === oldVnode.key && vnode.sel === oldVnode.sel\n}\n```    \n一致就按照上步骤，继续往下处理。执行`patchVnode`方法，如不一致，直接用新元素**直接替换**到旧元素。  \n\n如果两个`vnode`值得比较，调用`patchVnode`:\n\n```javascript\npatchVnode (oldVnode, vnode) {\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return // 引用相同，就说明相同，直接return\n    if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\n    \t // 如果有文本内容，比较，如果不同直接设置，用新的替换旧的文本\n        api.setTextContent(el, vnode.text)\n    }else {\n        updateEle(el, vnode, oldVnode)\n        if (oldCh && ch && oldCh !== ch) { // 如果都有子节点，且不同，开始比较子节点\n            updateChildren(el, oldCh, ch)\n        }else if (ch){\n        \t  // 如果只有新vnode上有子节点，直接新建\n            createEle(vnode)\n        }else if (oldCh){\n        \t  // 如果新vnode没子子节，而老vnode有，则删除老节点的子节点\n            api.removeChildren(el)\n        }\n    }\n}\n```  \n 如果都有子节点，且不同，开始比较子节点，调用`updateChildren`函数开始比较子节点:\n\n```javascript\nupdateChildren (parentElm, oldCh, newCh) { // parentElm：真是dom节点。oldCh：老vnode的所有子节点。newCh：新vnode的所有子节点。\n\t // 通过下标，设置新旧vnode的前后两个元素，\n    let oldStartIdx = 0, newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n   \t // 设置一些比较过程需要的变量\n    let oldKeyToIdx\n    let idxInOld\n    let elmToMove\n    let before\n    // 两对节点，分别从头和尾向中间循环靠拢依次比对，如果起始下标大于结尾下标，证明比对结束，作为循环结束条件\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {   //对于vnode.key的比较，会把oldVnode = null\n                oldStartVnode = oldCh[++oldStartIdx] \n            }else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx]\n            }else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx]\n            }else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode)\n                oldStartVnode = oldCh[++oldStartIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode)\n                api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n                oldStartVnode = oldCh[++oldStartIdx]\n                newEndVnode = newCh[--newEndIdx]\n            }else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode)\n                api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newStartVnode = newCh[++newStartIdx]\n            }else {\n               // 使用key时的比较\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key]\n                if (!idxInOld) {\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    newStartVnode = newCh[++newStartIdx]\n                }\n                else {\n                    elmToMove = oldCh[idxInOld]\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    }else {\n                        patchVnode(elmToMove, newStartVnode)\n                        oldCh[idxInOld] = null\n                        api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                    }\n                    newStartVnode = newCh[++newStartIdx]\n                }\n            }\n        }\n        if (oldStartIdx > oldEndIdx) {\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n        }else if (newStartIdx > newEndIdx) {\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n        }\n}\n```  \n\n\n总结：    \n\n - **调用patch**：传入`新旧vnode`，调用`sameVnode`，返回`true`说明值得比较，则调用`patchVnode`，否则直接使用新节点替换旧节点  \n\n - **调用patchVnode**：更详细的对比新旧vnode，分几种情况：  \n \t- 1: 对于新旧vnode的`.el`真实dom属性，并对比，如果===那就证明是同一个，直接return\n \t- 2: 如果存在文本节点，直接用新vnode内文本替换旧vnode文本\n \t- 3: 判断子节点，如果新vnode有，旧vnode没有，则直接把新vnode的子节点加入到真实dom，相反就删除掉真实dom子节点\n \t- 4. 如果都有子节点，且不同，调用updateChildren，详细对比\n - **调用updateChildren**： 从两边向中间收拢循环两个新旧vnode的每个子节点，以此对比，头头，尾尾，头尾，尾头。如果这四种比对调用sameVnode，得到true，证明值得对比，那么就调用第二步骤的`patchVnode`递归继续比，除了这四种情况。如果有key，则会对比key。否则直接替换新元素到真实dom。","slug":"last/docs/diff算法简介","published":0,"date":"2021-10-22T09:38:36.327Z","updated":"2021-10-22T09:38:36.327Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28meqz001gh7vmfk5d28oi","content":"<h2 id=\"diff算法和virtual-dom\"><a href=\"#diff算法和virtual-dom\" class=\"headerlink\" title=\"diff算法和virtual dom\"></a>diff算法和virtual dom</h2><p><img src=\"/2021/10/22/last/docs/diff%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/diff-arithmetic/HrGjhDp8ebSt62R.png\" alt=\"WechatIMG3177.png\">  </p>\n<p>在现代<code>mvvm</code>框架<code>react</code>和<code>vue</code>中，因为直接操作dom相对是要耗费更多性能的，所以<code>react</code>和<code>vue</code>都使用了<code>virtual dom</code>来替代处理dom，大致的过程是：按照dom结构生成一份<code>virtual dom</code>为<code>js</code>对象树状格式。如果数据有更新，需要表现在dom上，那么先把变化表现在<code>virtual dom</code>，再通过<code>diff</code>算法比对数据更新前后两次<code>virtual dom</code>找到差别。最后把仅仅改变的这部分更新到dom上，不用重新渲染整个页面。  </p>\n<p>总结：<code>diff</code>算法就是找到两个<code>virtual dom</code>树结构的不同  </p>\n<h2 id=\"diff原理\"><a href=\"#diff原理\" class=\"headerlink\" title=\"diff原理\"></a>diff原理</h2><p>首先传入新旧<code>vnode</code>到<code>patch</code>函数开始比较:  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function patch (oldVnode, vnode) &#123;\n    if (sameVnode(oldVnode, vnode)) &#123;\n        patchVnode(oldVnode, vnode) &#x2F;&#x2F; 如果两个vnode值得比较，调用patchVnode\n    &#125; else &#123;\n        const oEl &#x3D; oldVnode.el &#x2F;&#x2F; oldVnode.el为对应的真实dom元素\n        let parentEle &#x3D; api.parentNode(oEl)\n        createEle(vnode) &#x2F;&#x2F; 按照vnode结构创建真实dom插入父元素，直接替换oldVnode\n        if (parentEle !&#x3D;&#x3D; null) &#123;\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\n            api.removeChild(parentEle, oldVnode.el)\n            oldVnode &#x3D; null\n        &#125;\n    &#125;\n    return vnode\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先使用<code>sameVnode</code>方法判断两个<code>vnode</code>是否值得比较，代码如下</p>\n<pre><code class=\"javascript\">function sameVnode(oldVnode, vnode)&#123;\n    //  key代表当前节点数据的key属性，大概的意思就是div和span为不同标签。p.class1和p.class2为不同标签\n    return vnode.key === oldVnode.key &amp;&amp; vnode.sel === oldVnode.sel\n&#125;\n</code></pre>\n<p>一致就按照上步骤，继续往下处理。执行<code>patchVnode</code>方法，如不一致，直接用新元素<strong>直接替换</strong>到旧元素。  </p>\n<p>如果两个<code>vnode</code>值得比较，调用<code>patchVnode</code>:</p>\n<pre><code class=\"javascript\">patchVnode (oldVnode, vnode) &#123;\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return // 引用相同，就说明相同，直接return\n    if (oldVnode.text !== null &amp;&amp; vnode.text !== null &amp;&amp; oldVnode.text !== vnode.text) &#123;\n         // 如果有文本内容，比较，如果不同直接设置，用新的替换旧的文本\n        api.setTextContent(el, vnode.text)\n    &#125;else &#123;\n        updateEle(el, vnode, oldVnode)\n        if (oldCh &amp;&amp; ch &amp;&amp; oldCh !== ch) &#123; // 如果都有子节点，且不同，开始比较子节点\n            updateChildren(el, oldCh, ch)\n        &#125;else if (ch)&#123;\n              // 如果只有新vnode上有子节点，直接新建\n            createEle(vnode)\n        &#125;else if (oldCh)&#123;\n              // 如果新vnode没子子节，而老vnode有，则删除老节点的子节点\n            api.removeChildren(el)\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p> 如果都有子节点，且不同，开始比较子节点，调用<code>updateChildren</code>函数开始比较子节点:</p>\n<pre><code class=\"javascript\">updateChildren (parentElm, oldCh, newCh) &#123; // parentElm：真是dom节点。oldCh：老vnode的所有子节点。newCh：新vnode的所有子节点。\n     // 通过下标，设置新旧vnode的前后两个元素，\n    let oldStartIdx = 0, newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n        // 设置一些比较过程需要的变量\n    let oldKeyToIdx\n    let idxInOld\n    let elmToMove\n    let before\n    // 两对节点，分别从头和尾向中间循环靠拢依次比对，如果起始下标大于结尾下标，证明比对结束，作为循环结束条件\n    while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;\n            if (oldStartVnode == null) &#123;   //对于vnode.key的比较，会把oldVnode = null\n                oldStartVnode = oldCh[++oldStartIdx] \n            &#125;else if (oldEndVnode == null) &#123;\n                oldEndVnode = oldCh[--oldEndIdx]\n            &#125;else if (newStartVnode == null) &#123;\n                newStartVnode = newCh[++newStartIdx]\n            &#125;else if (newEndVnode == null) &#123;\n                newEndVnode = newCh[--newEndIdx]\n            &#125;else if (sameVnode(oldStartVnode, newStartVnode)) &#123;\n                patchVnode(oldStartVnode, newStartVnode)\n                oldStartVnode = oldCh[++oldStartIdx]\n                newStartVnode = newCh[++newStartIdx]\n            &#125;else if (sameVnode(oldEndVnode, newEndVnode)) &#123;\n                patchVnode(oldEndVnode, newEndVnode)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newEndVnode = newCh[--newEndIdx]\n            &#125;else if (sameVnode(oldStartVnode, newEndVnode)) &#123;\n                patchVnode(oldStartVnode, newEndVnode)\n                api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n                oldStartVnode = oldCh[++oldStartIdx]\n                newEndVnode = newCh[--newEndIdx]\n            &#125;else if (sameVnode(oldEndVnode, newStartVnode)) &#123;\n                patchVnode(oldEndVnode, newStartVnode)\n                api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newStartVnode = newCh[++newStartIdx]\n            &#125;else &#123;\n               // 使用key时的比较\n                if (oldKeyToIdx === undefined) &#123;\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\n                &#125;\n                idxInOld = oldKeyToIdx[newStartVnode.key]\n                if (!idxInOld) &#123;\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    newStartVnode = newCh[++newStartIdx]\n                &#125;\n                else &#123;\n                    elmToMove = oldCh[idxInOld]\n                    if (elmToMove.sel !== newStartVnode.sel) &#123;\n                        api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    &#125;else &#123;\n                        patchVnode(elmToMove, newStartVnode)\n                        oldCh[idxInOld] = null\n                        api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                    &#125;\n                    newStartVnode = newCh[++newStartIdx]\n                &#125;\n            &#125;\n        &#125;\n        if (oldStartIdx &gt; oldEndIdx) &#123;\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n        &#125;else if (newStartIdx &gt; newEndIdx) &#123;\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n        &#125;\n&#125;\n</code></pre>\n<p>总结：    </p>\n<ul>\n<li><p><strong>调用patch</strong>：传入<code>新旧vnode</code>，调用<code>sameVnode</code>，返回<code>true</code>说明值得比较，则调用<code>patchVnode</code>，否则直接使用新节点替换旧节点  </p>\n</li>\n<li><p><strong>调用patchVnode</strong>：更详细的对比新旧vnode，分几种情况：  </p>\n<ul>\n<li>1: 对于新旧vnode的<code>.el</code>真实dom属性，并对比，如果===那就证明是同一个，直接return</li>\n<li>2: 如果存在文本节点，直接用新vnode内文本替换旧vnode文本</li>\n<li>3: 判断子节点，如果新vnode有，旧vnode没有，则直接把新vnode的子节点加入到真实dom，相反就删除掉真实dom子节点</li>\n<li><ol start=\"4\">\n<li>如果都有子节点，且不同，调用updateChildren，详细对比</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p><strong>调用updateChildren</strong>： 从两边向中间收拢循环两个新旧vnode的每个子节点，以此对比，头头，尾尾，头尾，尾头。如果这四种比对调用sameVnode，得到true，证明值得对比，那么就调用第二步骤的<code>patchVnode</code>递归继续比，除了这四种情况。如果有key，则会对比key。否则直接替换新元素到真实dom。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"diff算法和virtual-dom\"><a href=\"#diff算法和virtual-dom\" class=\"headerlink\" title=\"diff算法和virtual dom\"></a>diff算法和virtual dom</h2><p><img src=\"/2021/10/22/last/docs/diff%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/diff-arithmetic/HrGjhDp8ebSt62R.png\" alt=\"WechatIMG3177.png\">  </p>\n<p>在现代<code>mvvm</code>框架<code>react</code>和<code>vue</code>中，因为直接操作dom相对是要耗费更多性能的，所以<code>react</code>和<code>vue</code>都使用了<code>virtual dom</code>来替代处理dom，大致的过程是：按照dom结构生成一份<code>virtual dom</code>为<code>js</code>对象树状格式。如果数据有更新，需要表现在dom上，那么先把变化表现在<code>virtual dom</code>，再通过<code>diff</code>算法比对数据更新前后两次<code>virtual dom</code>找到差别。最后把仅仅改变的这部分更新到dom上，不用重新渲染整个页面。  </p>\n<p>总结：<code>diff</code>算法就是找到两个<code>virtual dom</code>树结构的不同  </p>\n<h2 id=\"diff原理\"><a href=\"#diff原理\" class=\"headerlink\" title=\"diff原理\"></a>diff原理</h2><p>首先传入新旧<code>vnode</code>到<code>patch</code>函数开始比较:  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function patch (oldVnode, vnode) &#123;\n    if (sameVnode(oldVnode, vnode)) &#123;\n        patchVnode(oldVnode, vnode) &#x2F;&#x2F; 如果两个vnode值得比较，调用patchVnode\n    &#125; else &#123;\n        const oEl &#x3D; oldVnode.el &#x2F;&#x2F; oldVnode.el为对应的真实dom元素\n        let parentEle &#x3D; api.parentNode(oEl)\n        createEle(vnode) &#x2F;&#x2F; 按照vnode结构创建真实dom插入父元素，直接替换oldVnode\n        if (parentEle !&#x3D;&#x3D; null) &#123;\n            api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl))\n            api.removeChild(parentEle, oldVnode.el)\n            oldVnode &#x3D; null\n        &#125;\n    &#125;\n    return vnode\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先使用<code>sameVnode</code>方法判断两个<code>vnode</code>是否值得比较，代码如下</p>\n<pre><code class=\"javascript\">function sameVnode(oldVnode, vnode)&#123;\n    //  key代表当前节点数据的key属性，大概的意思就是div和span为不同标签。p.class1和p.class2为不同标签\n    return vnode.key === oldVnode.key &amp;&amp; vnode.sel === oldVnode.sel\n&#125;\n</code></pre>\n<p>一致就按照上步骤，继续往下处理。执行<code>patchVnode</code>方法，如不一致，直接用新元素<strong>直接替换</strong>到旧元素。  </p>\n<p>如果两个<code>vnode</code>值得比较，调用<code>patchVnode</code>:</p>\n<pre><code class=\"javascript\">patchVnode (oldVnode, vnode) &#123;\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return // 引用相同，就说明相同，直接return\n    if (oldVnode.text !== null &amp;&amp; vnode.text !== null &amp;&amp; oldVnode.text !== vnode.text) &#123;\n         // 如果有文本内容，比较，如果不同直接设置，用新的替换旧的文本\n        api.setTextContent(el, vnode.text)\n    &#125;else &#123;\n        updateEle(el, vnode, oldVnode)\n        if (oldCh &amp;&amp; ch &amp;&amp; oldCh !== ch) &#123; // 如果都有子节点，且不同，开始比较子节点\n            updateChildren(el, oldCh, ch)\n        &#125;else if (ch)&#123;\n              // 如果只有新vnode上有子节点，直接新建\n            createEle(vnode)\n        &#125;else if (oldCh)&#123;\n              // 如果新vnode没子子节，而老vnode有，则删除老节点的子节点\n            api.removeChildren(el)\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p> 如果都有子节点，且不同，开始比较子节点，调用<code>updateChildren</code>函数开始比较子节点:</p>\n<pre><code class=\"javascript\">updateChildren (parentElm, oldCh, newCh) &#123; // parentElm：真是dom节点。oldCh：老vnode的所有子节点。newCh：新vnode的所有子节点。\n     // 通过下标，设置新旧vnode的前后两个元素，\n    let oldStartIdx = 0, newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n        // 设置一些比较过程需要的变量\n    let oldKeyToIdx\n    let idxInOld\n    let elmToMove\n    let before\n    // 两对节点，分别从头和尾向中间循环靠拢依次比对，如果起始下标大于结尾下标，证明比对结束，作为循环结束条件\n    while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;\n            if (oldStartVnode == null) &#123;   //对于vnode.key的比较，会把oldVnode = null\n                oldStartVnode = oldCh[++oldStartIdx] \n            &#125;else if (oldEndVnode == null) &#123;\n                oldEndVnode = oldCh[--oldEndIdx]\n            &#125;else if (newStartVnode == null) &#123;\n                newStartVnode = newCh[++newStartIdx]\n            &#125;else if (newEndVnode == null) &#123;\n                newEndVnode = newCh[--newEndIdx]\n            &#125;else if (sameVnode(oldStartVnode, newStartVnode)) &#123;\n                patchVnode(oldStartVnode, newStartVnode)\n                oldStartVnode = oldCh[++oldStartIdx]\n                newStartVnode = newCh[++newStartIdx]\n            &#125;else if (sameVnode(oldEndVnode, newEndVnode)) &#123;\n                patchVnode(oldEndVnode, newEndVnode)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newEndVnode = newCh[--newEndIdx]\n            &#125;else if (sameVnode(oldStartVnode, newEndVnode)) &#123;\n                patchVnode(oldStartVnode, newEndVnode)\n                api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n                oldStartVnode = oldCh[++oldStartIdx]\n                newEndVnode = newCh[--newEndIdx]\n            &#125;else if (sameVnode(oldEndVnode, newStartVnode)) &#123;\n                patchVnode(oldEndVnode, newStartVnode)\n                api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n                oldEndVnode = oldCh[--oldEndIdx]\n                newStartVnode = newCh[++newStartIdx]\n            &#125;else &#123;\n               // 使用key时的比较\n                if (oldKeyToIdx === undefined) &#123;\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\n                &#125;\n                idxInOld = oldKeyToIdx[newStartVnode.key]\n                if (!idxInOld) &#123;\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    newStartVnode = newCh[++newStartIdx]\n                &#125;\n                else &#123;\n                    elmToMove = oldCh[idxInOld]\n                    if (elmToMove.sel !== newStartVnode.sel) &#123;\n                        api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                    &#125;else &#123;\n                        patchVnode(elmToMove, newStartVnode)\n                        oldCh[idxInOld] = null\n                        api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                    &#125;\n                    newStartVnode = newCh[++newStartIdx]\n                &#125;\n            &#125;\n        &#125;\n        if (oldStartIdx &gt; oldEndIdx) &#123;\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n        &#125;else if (newStartIdx &gt; newEndIdx) &#123;\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n        &#125;\n&#125;\n</code></pre>\n<p>总结：    </p>\n<ul>\n<li><p><strong>调用patch</strong>：传入<code>新旧vnode</code>，调用<code>sameVnode</code>，返回<code>true</code>说明值得比较，则调用<code>patchVnode</code>，否则直接使用新节点替换旧节点  </p>\n</li>\n<li><p><strong>调用patchVnode</strong>：更详细的对比新旧vnode，分几种情况：  </p>\n<ul>\n<li>1: 对于新旧vnode的<code>.el</code>真实dom属性，并对比，如果===那就证明是同一个，直接return</li>\n<li>2: 如果存在文本节点，直接用新vnode内文本替换旧vnode文本</li>\n<li>3: 判断子节点，如果新vnode有，旧vnode没有，则直接把新vnode的子节点加入到真实dom，相反就删除掉真实dom子节点</li>\n<li><ol start=\"4\">\n<li>如果都有子节点，且不同，调用updateChildren，详细对比</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p><strong>调用updateChildren</strong>： 从两边向中间收拢循环两个新旧vnode的每个子节点，以此对比，头头，尾尾，头尾，尾头。如果这四种比对调用sameVnode，得到true，证明值得对比，那么就调用第二步骤的<code>patchVnode</code>递归继续比，除了这四种情况。如果有key，则会对比key。否则直接替换新元素到真实dom。</p>\n</li>\n</ul>\n"},{"_content":"## flex布局概念  \n> `flex`布局通常被叫做`flex box`，也叫`弹性盒子`或`容器`，是一种一维的`布局模型`，它能子元素(`flex item`)之间提供了强大的空间分布和对齐能力。   \n   \n![v2-54a0fc96ef4f455aefb8ee4bc133291b_720w.png](./img/flex-layout/WBQ8RSuH7norCs4.png)    \n\n`flex容器`中存在两个轴，一个`水平方向`main axis，一个`竖直方向`cross axis，这是`flex`布局最重要的点，内部元素`flex item`都是根据这个轴来排列对齐的。  \n\n## flex布局好处    \n在一个`html元素`和内部`多个子元`的组合中。要实现子元素有序的，高度自定义的布局，在传统布局方式中，会使用`position`，`float`方式实现，比如多个子元素在父元素中`垂直水平居中`，比较困难。这个时候就可以用`flex`布局，只需要简单几句代码就可以优雅的实现。    \n\n## flex容器属性    \n> 设置一个盒子为`flex`容器，首先设置`display: flex`;  \n\n - **flex-direction**\n - **flex-wrap**\n - **justify-content**\n - **align-items**\n - **align-content**  \n \n### flex-direction   \n`flex-direction`属性规定所有`flex item`在`flex`容器从 **第一个元素** 开始的排列方式\n  \n```css  \nflex-direction: row(默认) | row-reverse | column | column-reverse\n```  \n**row**： 从左往右水平展示    \n**row-reverse**： 从右向左(反向)水平展示    \n**column**： 从上往下垂直展示  \n**column-reverse**： 从下往上(反向)垂直展示\n\n### flex-wrap   \n`flex-wrap`属性规定`flex`容器内所有`flex item`总宽度超出`flex`容器时换行方式    \n\n```css  \nflex-wrap: nowrap(默认) | wrap | wrap-reverse\n```  \n**nowrap**： 不换行，只展示一行。如果容器不够宽，平均缩小每个`item`的宽度  \n**wrap**： 换行，向下换行  \n**wrap-reverse**： 以相反方向换行，向上换行\n   \n### justify-content  \n`justify-content`属性规定所有`flex item`作为一个整体在`flex`容器在主轴(默认为水平轴，通过`flex-direcation`设置)上的排列方式\n\n```css  \njustify-content: flex-start(默认值) | flex-end | center | space-between | space-around\n```  \n**flex-start**： 整体位于容器开头  \n**flex-end**： 整体位于容器结尾  \n**center**： 整体位于容器中心  \n**space-between**： 每个`flex item`平均分布在容器内； `第一个item`和`容器开头`，`最后一个item`和`容器结尾`都无间距  \n**space-around**： 每个`flex item`平均分布在容器内， `第一个item`和`容器开头`，`最后一个item`和`容器结尾`的间距都为`每个item`间距的一半    \n\n### align-items \n`align-items`属性规定所有`flex item`作为一个整体在`flex`容器在副轴(非主轴，和`justify-content`相反)上的排列方式\n\n```css  \nalign-items: stretch(默认值) | center | flex-start | flex-end | baseline\n```  \n**stretch**： 整体占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效  \n**center**： 整体位于主轴中心   \n**flex-start**： 整体位于主轴开头    \n**flex-end**： 整体位于主轴结尾  \n**baseline**： 主轴位于`item`中第一行文字 *基线* 对齐    \n\n> 基线的概念：英文中大概就是一个小写字母 *x* 的最底部，*f* 的中下部；而中文大概就汉字中下部，不太准确，我没深入了解，有兴趣可以网上了解。\n   \n### align-content  \n`align-content`属性规定了多条主轴的情况下(只有`item`换行了，才会产生多条主轴)，这些主轴作为一个整体在他们的排列方向中的排列方式；注意：只有一条主轴(`item`不换行)不生效\n\n```css  \nalign-content: stretch(默认) | center | flex-start | flex-end | space-between | space-around\n```  \n**stretch**： 整体被拉伸以适应容器  \n**center**： 整体内各个轴紧靠，并且位于容器中心，头尾留白   \n**flex-start**： 整体内各个轴紧靠，并且位于容器头部    \n**flex-end**： 整体内各个轴紧靠，并且位于容器尾部  \n**space-between**： 整体平分，其中头尾和容器头尾紧靠，中间间隙平分  \n**space-around**：  整体平分，其中头尾和容器头尾距离为中间item的空隙的一半，中间间隙平分 \n\n## flex item属性  \n - order\n - flex-basis\n - flex-grow\n - flex-shrink\n - align-self  \n\n### order \n`order `属性规定了当前`flex item`排列前后顺序，越小排列越靠前，可以为负数\n\n```css  \norder: 0(默认值) | <number>  \n```      \n\n### flex-basis  \n`flex-basis `属性规定了当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的伸缩比例或大小\n\n```css  \nflex-basis: auto(默认) | number\n```  \n**number**： 可以是具体的像素值，如30px；也可以是auto大小百分比\n  \n### flex-grow    \n\n`flex-grow`属性 前提在所有项目以`flex-basis`的值排列完如有剩余空间，则规定当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的剩余空间份比例  \n\n```css  \nflex-grow: 0(默认值) | <number>;\n```  \n**number**：当剩余空间足够时，如果值为`1`那么高度(宽度)`放大剩余空间1份`，如果只有一个元素设置了此属性，那么剩余全部全部分给他；如果多个元素设置了此属性，比如`a:1` `b:2` `c:3`则会把剩余空间分成`6份`，a在本身的大小基础上增加剩余空间的`1/6份` a则是`2/6份` c则是`3/6份`，如果剩余空间不足，则取`剩余空间最大值`，不支持负数\n \n### flex-shrink    \n\n`flex-shrink`属性规定了当剩余空间不足时候，当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的缩小超出空间份比例，和上面的`flex-grow`是相反的，一个放大，一个缩小\n\n```css  \nflex-shrink: 1(默认值) | <number>;\n``` \n**number**：当剩余空间不足时，默认按照比例1缩小，如果值为`2`那么高度(宽度)`缩小超出空间2份`\n  \n### align-self     \n\n`flex-shrink`属性规定当前`flex item`作为一个整体在`flex`容器在副轴(非主轴，和`justify-content`相反)上的排列方式    \n\n>注意：这个属性和`align-item`的区别是`align-item`影响全部`flex item`，而`align-self`只影响当前`flex item`  \n\n```css  \nalign-self: auto(默认值) | stretch | center | flex-start | flex-end | baseline\n``` \n**auto**：继承父亲`align-item`的`value`  \n**stretch**： 占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效  \n**center**： 位于主轴中心   \n**flex-start**： 位于主轴开头    \n**flex-end**： 位于主轴结尾  \n**baseline**： 位于`item`中第一行文字 *基线* 对齐  \n     \n## 扩展一道面试题  \n#### 一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：  \n  \n```html \n<div class='flex2'>\n\t<p>1</p>\n\t<p>2</p>\n</div>\n```  \n\n```css\ndiv.flex2{\n\tdisplay:flex;\n\tborder:1px solid red;\n\twidth:100%;\n\theight:300px;\n}\n.flex2 p{\n\twidth:100px;\n\theight:100px;\n\tbackground-color: skyblue;\n\tline-height: 100px;\n\ttext-align: center;\n\tfont-size: 80px;\n\tborder:1px solid blue;\n}\n.flex2 p:nth-child(1){\n\twidth:200px;// 左侧元素固定为200px宽\n}\n.flex2 p:nth-child(2){\n\tflex-grow:1; // 右侧元素自适应\n}\n```","source":"_drafts/last/docs/flex布局.md","raw":"## flex布局概念  \n> `flex`布局通常被叫做`flex box`，也叫`弹性盒子`或`容器`，是一种一维的`布局模型`，它能子元素(`flex item`)之间提供了强大的空间分布和对齐能力。   \n   \n![v2-54a0fc96ef4f455aefb8ee4bc133291b_720w.png](./img/flex-layout/WBQ8RSuH7norCs4.png)    \n\n`flex容器`中存在两个轴，一个`水平方向`main axis，一个`竖直方向`cross axis，这是`flex`布局最重要的点，内部元素`flex item`都是根据这个轴来排列对齐的。  \n\n## flex布局好处    \n在一个`html元素`和内部`多个子元`的组合中。要实现子元素有序的，高度自定义的布局，在传统布局方式中，会使用`position`，`float`方式实现，比如多个子元素在父元素中`垂直水平居中`，比较困难。这个时候就可以用`flex`布局，只需要简单几句代码就可以优雅的实现。    \n\n## flex容器属性    \n> 设置一个盒子为`flex`容器，首先设置`display: flex`;  \n\n - **flex-direction**\n - **flex-wrap**\n - **justify-content**\n - **align-items**\n - **align-content**  \n \n### flex-direction   \n`flex-direction`属性规定所有`flex item`在`flex`容器从 **第一个元素** 开始的排列方式\n  \n```css  \nflex-direction: row(默认) | row-reverse | column | column-reverse\n```  \n**row**： 从左往右水平展示    \n**row-reverse**： 从右向左(反向)水平展示    \n**column**： 从上往下垂直展示  \n**column-reverse**： 从下往上(反向)垂直展示\n\n### flex-wrap   \n`flex-wrap`属性规定`flex`容器内所有`flex item`总宽度超出`flex`容器时换行方式    \n\n```css  \nflex-wrap: nowrap(默认) | wrap | wrap-reverse\n```  \n**nowrap**： 不换行，只展示一行。如果容器不够宽，平均缩小每个`item`的宽度  \n**wrap**： 换行，向下换行  \n**wrap-reverse**： 以相反方向换行，向上换行\n   \n### justify-content  \n`justify-content`属性规定所有`flex item`作为一个整体在`flex`容器在主轴(默认为水平轴，通过`flex-direcation`设置)上的排列方式\n\n```css  \njustify-content: flex-start(默认值) | flex-end | center | space-between | space-around\n```  \n**flex-start**： 整体位于容器开头  \n**flex-end**： 整体位于容器结尾  \n**center**： 整体位于容器中心  \n**space-between**： 每个`flex item`平均分布在容器内； `第一个item`和`容器开头`，`最后一个item`和`容器结尾`都无间距  \n**space-around**： 每个`flex item`平均分布在容器内， `第一个item`和`容器开头`，`最后一个item`和`容器结尾`的间距都为`每个item`间距的一半    \n\n### align-items \n`align-items`属性规定所有`flex item`作为一个整体在`flex`容器在副轴(非主轴，和`justify-content`相反)上的排列方式\n\n```css  \nalign-items: stretch(默认值) | center | flex-start | flex-end | baseline\n```  \n**stretch**： 整体占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效  \n**center**： 整体位于主轴中心   \n**flex-start**： 整体位于主轴开头    \n**flex-end**： 整体位于主轴结尾  \n**baseline**： 主轴位于`item`中第一行文字 *基线* 对齐    \n\n> 基线的概念：英文中大概就是一个小写字母 *x* 的最底部，*f* 的中下部；而中文大概就汉字中下部，不太准确，我没深入了解，有兴趣可以网上了解。\n   \n### align-content  \n`align-content`属性规定了多条主轴的情况下(只有`item`换行了，才会产生多条主轴)，这些主轴作为一个整体在他们的排列方向中的排列方式；注意：只有一条主轴(`item`不换行)不生效\n\n```css  \nalign-content: stretch(默认) | center | flex-start | flex-end | space-between | space-around\n```  \n**stretch**： 整体被拉伸以适应容器  \n**center**： 整体内各个轴紧靠，并且位于容器中心，头尾留白   \n**flex-start**： 整体内各个轴紧靠，并且位于容器头部    \n**flex-end**： 整体内各个轴紧靠，并且位于容器尾部  \n**space-between**： 整体平分，其中头尾和容器头尾紧靠，中间间隙平分  \n**space-around**：  整体平分，其中头尾和容器头尾距离为中间item的空隙的一半，中间间隙平分 \n\n## flex item属性  \n - order\n - flex-basis\n - flex-grow\n - flex-shrink\n - align-self  \n\n### order \n`order `属性规定了当前`flex item`排列前后顺序，越小排列越靠前，可以为负数\n\n```css  \norder: 0(默认值) | <number>  \n```      \n\n### flex-basis  \n`flex-basis `属性规定了当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的伸缩比例或大小\n\n```css  \nflex-basis: auto(默认) | number\n```  \n**number**： 可以是具体的像素值，如30px；也可以是auto大小百分比\n  \n### flex-grow    \n\n`flex-grow`属性 前提在所有项目以`flex-basis`的值排列完如有剩余空间，则规定当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的剩余空间份比例  \n\n```css  \nflex-grow: 0(默认值) | <number>;\n```  \n**number**：当剩余空间足够时，如果值为`1`那么高度(宽度)`放大剩余空间1份`，如果只有一个元素设置了此属性，那么剩余全部全部分给他；如果多个元素设置了此属性，比如`a:1` `b:2` `c:3`则会把剩余空间分成`6份`，a在本身的大小基础上增加剩余空间的`1/6份` a则是`2/6份` c则是`3/6份`，如果剩余空间不足，则取`剩余空间最大值`，不支持负数\n \n### flex-shrink    \n\n`flex-shrink`属性规定了当剩余空间不足时候，当前`flex item`的高度(主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置)的缩小超出空间份比例，和上面的`flex-grow`是相反的，一个放大，一个缩小\n\n```css  \nflex-shrink: 1(默认值) | <number>;\n``` \n**number**：当剩余空间不足时，默认按照比例1缩小，如果值为`2`那么高度(宽度)`缩小超出空间2份`\n  \n### align-self     \n\n`flex-shrink`属性规定当前`flex item`作为一个整体在`flex`容器在副轴(非主轴，和`justify-content`相反)上的排列方式    \n\n>注意：这个属性和`align-item`的区别是`align-item`影响全部`flex item`，而`align-self`只影响当前`flex item`  \n\n```css  \nalign-self: auto(默认值) | stretch | center | flex-start | flex-end | baseline\n``` \n**auto**：继承父亲`align-item`的`value`  \n**stretch**： 占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效  \n**center**： 位于主轴中心   \n**flex-start**： 位于主轴开头    \n**flex-end**： 位于主轴结尾  \n**baseline**： 位于`item`中第一行文字 *基线* 对齐  \n     \n## 扩展一道面试题  \n#### 一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：  \n  \n```html \n<div class='flex2'>\n\t<p>1</p>\n\t<p>2</p>\n</div>\n```  \n\n```css\ndiv.flex2{\n\tdisplay:flex;\n\tborder:1px solid red;\n\twidth:100%;\n\theight:300px;\n}\n.flex2 p{\n\twidth:100px;\n\theight:100px;\n\tbackground-color: skyblue;\n\tline-height: 100px;\n\ttext-align: center;\n\tfont-size: 80px;\n\tborder:1px solid blue;\n}\n.flex2 p:nth-child(1){\n\twidth:200px;// 左侧元素固定为200px宽\n}\n.flex2 p:nth-child(2){\n\tflex-grow:1; // 右侧元素自适应\n}\n```","slug":"last/docs/flex布局","published":0,"date":"2021-10-22T09:38:36.327Z","updated":"2021-10-22T09:38:36.328Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer0001ih7vmhyawae5y","content":"<h2 id=\"flex布局概念\"><a href=\"#flex布局概念\" class=\"headerlink\" title=\"flex布局概念\"></a>flex布局概念</h2><blockquote>\n<p><code>flex</code>布局通常被叫做<code>flex box</code>，也叫<code>弹性盒子</code>或<code>容器</code>，是一种一维的<code>布局模型</code>，它能子元素(<code>flex item</code>)之间提供了强大的空间分布和对齐能力。   </p>\n</blockquote>\n<p><img src=\"/2021/10/22/last/docs/flex%E5%B8%83%E5%B1%80/flex-layout/WBQ8RSuH7norCs4.png\" alt=\"v2-54a0fc96ef4f455aefb8ee4bc133291b_720w.png\">    </p>\n<p><code>flex容器</code>中存在两个轴，一个<code>水平方向</code>main axis，一个<code>竖直方向</code>cross axis，这是<code>flex</code>布局最重要的点，内部元素<code>flex item</code>都是根据这个轴来排列对齐的。  </p>\n<h2 id=\"flex布局好处\"><a href=\"#flex布局好处\" class=\"headerlink\" title=\"flex布局好处\"></a>flex布局好处</h2><p>在一个<code>html元素</code>和内部<code>多个子元</code>的组合中。要实现子元素有序的，高度自定义的布局，在传统布局方式中，会使用<code>position</code>，<code>float</code>方式实现，比如多个子元素在父元素中<code>垂直水平居中</code>，比较困难。这个时候就可以用<code>flex</code>布局，只需要简单几句代码就可以优雅的实现。    </p>\n<h2 id=\"flex容器属性\"><a href=\"#flex容器属性\" class=\"headerlink\" title=\"flex容器属性\"></a>flex容器属性</h2><blockquote>\n<p>设置一个盒子为<code>flex</code>容器，首先设置<code>display: flex</code>;  </p>\n</blockquote>\n<ul>\n<li><strong>flex-direction</strong></li>\n<li><strong>flex-wrap</strong></li>\n<li><strong>justify-content</strong></li>\n<li><strong>align-items</strong></li>\n<li><strong>align-content</strong>  </li>\n</ul>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p><code>flex-direction</code>属性规定所有<code>flex item</code>在<code>flex</code>容器从 <strong>第一个元素</strong> 开始的排列方式</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> <span class=\"token function\">row</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | row-reverse | column | column-reverse\n```  \n**row**： 从左往右水平展示    \n**row-reverse**： 从右向左<span class=\"token punctuation\">(</span>反向<span class=\"token punctuation\">)</span>水平展示    \n**column**： 从上往下垂直展示  \n**column-reverse**： 从下往上<span class=\"token punctuation\">(</span>反向<span class=\"token punctuation\">)</span>垂直展示\n\n### flex-wrap   \n`flex-wrap`属性规定`flex`容器内所有`flex item`总宽度超出`flex`容器时换行方式    \n\n```css  \n<span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> <span class=\"token function\">nowrap</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | wrap | wrap-reverse\n```  \n**nowrap**： 不换行，只展示一行。如果容器不够宽，平均缩小每个`item`的宽度  \n**wrap**： 换行，向下换行  \n**wrap-reverse**： 以相反方向换行，向上换行\n   \n### justify-content  \n`justify-content`属性规定所有`flex item`作为一个整体在`flex`容器在主轴<span class=\"token punctuation\">(</span>默认为水平轴，通过`flex-direcation`设置<span class=\"token punctuation\">)</span>上的排列方式\n\n```css  \n<span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">flex-start</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | flex-end | center | space-between | space-around\n```  \n**flex-start**： 整体位于容器开头  \n**flex-end**： 整体位于容器结尾  \n**center**： 整体位于容器中心  \n**space-between**： 每个`flex item`平均分布在容器内； `第一个item`和`容器开头`，`最后一个item`和`容器结尾`都无间距  \n**space-around**： 每个`flex item`平均分布在容器内， `第一个item`和`容器开头`，`最后一个item`和`容器结尾`的间距都为`每个item`间距的一半    \n\n### align-items \n`align-items`属性规定所有`flex item`作为一个整体在`flex`容器在副轴<span class=\"token punctuation\">(</span>非主轴，和`justify-content`相反<span class=\"token punctuation\">)</span>上的排列方式\n\n```css  \n<span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> <span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | center | flex-start | flex-end | baseline\n```  \n**stretch**： 整体占满整个主轴的高度<span class=\"token punctuation\">,</span> 前提必须是你没有设置item的高度<span class=\"token punctuation\">(</span>宽度<span class=\"token punctuation\">)</span>，否则不生效  \n**center**： 整体位于主轴中心   \n**flex-start**： 整体位于主轴开头    \n**flex-end**： 整体位于主轴结尾  \n**baseline**： 主轴位于`item`中第一行文字 *基线* 对齐    \n\n> 基线的概念：英文中大概就是一个小写字母 *x* 的最底部，*f* 的中下部；而中文大概就汉字中下部，不太准确，我没深入了解，有兴趣可以网上了解。\n   \n### align-content  \n`align-content`属性规定了多条主轴的情况下<span class=\"token punctuation\">(</span>只有`item`换行了，才会产生多条主轴<span class=\"token punctuation\">)</span>，这些主轴作为一个整体在他们的排列方向中的排列方式；注意：只有一条主轴<span class=\"token punctuation\">(</span>`item`不换行<span class=\"token punctuation\">)</span>不生效\n\n```css  \n<span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | center | flex-start | flex-end | space-between | space-around\n```  \n**stretch**： 整体被拉伸以适应容器  \n**center**： 整体内各个轴紧靠，并且位于容器中心，头尾留白   \n**flex-start**： 整体内各个轴紧靠，并且位于容器头部    \n**flex-end**： 整体内各个轴紧靠，并且位于容器尾部  \n**space-between**： 整体平分，其中头尾和容器头尾紧靠，中间间隙平分  \n**space-around**：  整体平分，其中头尾和容器头尾距离为中间item的空隙的一半，中间间隙平分 \n\n## flex item属性  \n - order\n - flex-basis\n - flex-grow\n - flex-shrink\n - align-self  \n\n### order \n`order `属性规定了当前`flex item`排列前后顺序，越小排列越靠前，可以为负数\n\n```css  \n<span class=\"token property\">order</span><span class=\"token punctuation\">:</span> <span class=\"token function\">0</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number>  \n```      \n\n### flex-basis  \n`flex-basis `属性规定了当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的伸缩比例或大小\n\n```css  \n<span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | number\n```  \n**number**： 可以是具体的像素值，如30px；也可以是auto大小百分比\n  \n### flex-grow    \n\n`flex-grow`属性 前提在所有项目以`flex-basis`的值排列完如有剩余空间，则规定当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的剩余空间份比例  \n\n```css  \n<span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">0</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number><span class=\"token punctuation\">;</span>\n```  \n**number**：当剩余空间足够时，如果值为`1`那么高度<span class=\"token punctuation\">(</span>宽度<span class=\"token punctuation\">)</span>`放大剩余空间1份`，如果只有一个元素设置了此属性，那么剩余全部全部分给他；如果多个元素设置了此属性，比如`<span class=\"token property\">a</span><span class=\"token punctuation\">:</span>1` `<span class=\"token property\">b</span><span class=\"token punctuation\">:</span>2` `<span class=\"token property\">c</span><span class=\"token punctuation\">:</span>3`则会把剩余空间分成`6份`，a在本身的大小基础上增加剩余空间的`1/6份` a则是`2/6份` c则是`3/6份`，如果剩余空间不足，则取`剩余空间最大值`，不支持负数\n \n### flex-shrink    \n\n`flex-shrink`属性规定了当剩余空间不足时候，当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的缩小超出空间份比例，和上面的`flex-grow`是相反的，一个放大，一个缩小\n\n```css  \n<span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> <span class=\"token function\">1</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>number</strong>：当剩余空间不足时，默认按照比例1缩小，如果值为<code>2</code>那么高度(宽度)<code>缩小超出空间2份</code></p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p><code>flex-shrink</code>属性规定当前<code>flex item</code>作为一个整体在<code>flex</code>容器在副轴(非主轴，和<code>justify-content</code>相反)上的排列方式    </p>\n<blockquote>\n<p>注意：这个属性和<code>align-item</code>的区别是<code>align-item</code>影响全部<code>flex item</code>，而<code>align-self</code>只影响当前<code>flex item</code>  </p>\n</blockquote>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | stretch | center | flex-start | flex-end | baseline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>auto</strong>：继承父亲<code>align-item</code>的<code>value</code><br><strong>stretch</strong>： 占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效<br><strong>center</strong>： 位于主轴中心<br><strong>flex-start</strong>： 位于主轴开头<br><strong>flex-end</strong>： 位于主轴结尾<br><strong>baseline</strong>： 位于<code>item</code>中第一行文字 <em>基线</em> 对齐  </p>\n<h2 id=\"扩展一道面试题\"><a href=\"#扩展一道面试题\" class=\"headerlink\" title=\"扩展一道面试题\"></a>扩展一道面试题</h2><h4 id=\"一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\"><a href=\"#一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\" class=\"headerlink\" title=\"一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\"></a>一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>flex2<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n```  \n\n```css\ndiv.flex2&#123;\n\tdisplay:flex;\n\tborder:1px solid red;\n\twidth:100%;\n\theight:300px;\n&#125;\n.flex2 p&#123;\n\twidth:100px;\n\theight:100px;\n\tbackground-color: skyblue;\n\tline-height: 100px;\n\ttext-align: center;\n\tfont-size: 80px;\n\tborder:1px solid blue;\n&#125;\n.flex2 p:nth-child(1)&#123;\n\twidth:200px;// 左侧元素固定为200px宽\n&#125;\n.flex2 p:nth-child(2)&#123;\n\tflex-grow:1; // 右侧元素自适应\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"flex布局概念\"><a href=\"#flex布局概念\" class=\"headerlink\" title=\"flex布局概念\"></a>flex布局概念</h2><blockquote>\n<p><code>flex</code>布局通常被叫做<code>flex box</code>，也叫<code>弹性盒子</code>或<code>容器</code>，是一种一维的<code>布局模型</code>，它能子元素(<code>flex item</code>)之间提供了强大的空间分布和对齐能力。   </p>\n</blockquote>\n<p><img src=\"/2021/10/22/last/docs/flex%E5%B8%83%E5%B1%80/flex-layout/WBQ8RSuH7norCs4.png\" alt=\"v2-54a0fc96ef4f455aefb8ee4bc133291b_720w.png\">    </p>\n<p><code>flex容器</code>中存在两个轴，一个<code>水平方向</code>main axis，一个<code>竖直方向</code>cross axis，这是<code>flex</code>布局最重要的点，内部元素<code>flex item</code>都是根据这个轴来排列对齐的。  </p>\n<h2 id=\"flex布局好处\"><a href=\"#flex布局好处\" class=\"headerlink\" title=\"flex布局好处\"></a>flex布局好处</h2><p>在一个<code>html元素</code>和内部<code>多个子元</code>的组合中。要实现子元素有序的，高度自定义的布局，在传统布局方式中，会使用<code>position</code>，<code>float</code>方式实现，比如多个子元素在父元素中<code>垂直水平居中</code>，比较困难。这个时候就可以用<code>flex</code>布局，只需要简单几句代码就可以优雅的实现。    </p>\n<h2 id=\"flex容器属性\"><a href=\"#flex容器属性\" class=\"headerlink\" title=\"flex容器属性\"></a>flex容器属性</h2><blockquote>\n<p>设置一个盒子为<code>flex</code>容器，首先设置<code>display: flex</code>;  </p>\n</blockquote>\n<ul>\n<li><strong>flex-direction</strong></li>\n<li><strong>flex-wrap</strong></li>\n<li><strong>justify-content</strong></li>\n<li><strong>align-items</strong></li>\n<li><strong>align-content</strong>  </li>\n</ul>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p><code>flex-direction</code>属性规定所有<code>flex item</code>在<code>flex</code>容器从 <strong>第一个元素</strong> 开始的排列方式</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> <span class=\"token function\">row</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | row-reverse | column | column-reverse\n```  \n**row**： 从左往右水平展示    \n**row-reverse**： 从右向左<span class=\"token punctuation\">(</span>反向<span class=\"token punctuation\">)</span>水平展示    \n**column**： 从上往下垂直展示  \n**column-reverse**： 从下往上<span class=\"token punctuation\">(</span>反向<span class=\"token punctuation\">)</span>垂直展示\n\n### flex-wrap   \n`flex-wrap`属性规定`flex`容器内所有`flex item`总宽度超出`flex`容器时换行方式    \n\n```css  \n<span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> <span class=\"token function\">nowrap</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | wrap | wrap-reverse\n```  \n**nowrap**： 不换行，只展示一行。如果容器不够宽，平均缩小每个`item`的宽度  \n**wrap**： 换行，向下换行  \n**wrap-reverse**： 以相反方向换行，向上换行\n   \n### justify-content  \n`justify-content`属性规定所有`flex item`作为一个整体在`flex`容器在主轴<span class=\"token punctuation\">(</span>默认为水平轴，通过`flex-direcation`设置<span class=\"token punctuation\">)</span>上的排列方式\n\n```css  \n<span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">flex-start</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | flex-end | center | space-between | space-around\n```  \n**flex-start**： 整体位于容器开头  \n**flex-end**： 整体位于容器结尾  \n**center**： 整体位于容器中心  \n**space-between**： 每个`flex item`平均分布在容器内； `第一个item`和`容器开头`，`最后一个item`和`容器结尾`都无间距  \n**space-around**： 每个`flex item`平均分布在容器内， `第一个item`和`容器开头`，`最后一个item`和`容器结尾`的间距都为`每个item`间距的一半    \n\n### align-items \n`align-items`属性规定所有`flex item`作为一个整体在`flex`容器在副轴<span class=\"token punctuation\">(</span>非主轴，和`justify-content`相反<span class=\"token punctuation\">)</span>上的排列方式\n\n```css  \n<span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> <span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | center | flex-start | flex-end | baseline\n```  \n**stretch**： 整体占满整个主轴的高度<span class=\"token punctuation\">,</span> 前提必须是你没有设置item的高度<span class=\"token punctuation\">(</span>宽度<span class=\"token punctuation\">)</span>，否则不生效  \n**center**： 整体位于主轴中心   \n**flex-start**： 整体位于主轴开头    \n**flex-end**： 整体位于主轴结尾  \n**baseline**： 主轴位于`item`中第一行文字 *基线* 对齐    \n\n> 基线的概念：英文中大概就是一个小写字母 *x* 的最底部，*f* 的中下部；而中文大概就汉字中下部，不太准确，我没深入了解，有兴趣可以网上了解。\n   \n### align-content  \n`align-content`属性规定了多条主轴的情况下<span class=\"token punctuation\">(</span>只有`item`换行了，才会产生多条主轴<span class=\"token punctuation\">)</span>，这些主轴作为一个整体在他们的排列方向中的排列方式；注意：只有一条主轴<span class=\"token punctuation\">(</span>`item`不换行<span class=\"token punctuation\">)</span>不生效\n\n```css  \n<span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | center | flex-start | flex-end | space-between | space-around\n```  \n**stretch**： 整体被拉伸以适应容器  \n**center**： 整体内各个轴紧靠，并且位于容器中心，头尾留白   \n**flex-start**： 整体内各个轴紧靠，并且位于容器头部    \n**flex-end**： 整体内各个轴紧靠，并且位于容器尾部  \n**space-between**： 整体平分，其中头尾和容器头尾紧靠，中间间隙平分  \n**space-around**：  整体平分，其中头尾和容器头尾距离为中间item的空隙的一半，中间间隙平分 \n\n## flex item属性  \n - order\n - flex-basis\n - flex-grow\n - flex-shrink\n - align-self  \n\n### order \n`order `属性规定了当前`flex item`排列前后顺序，越小排列越靠前，可以为负数\n\n```css  \n<span class=\"token property\">order</span><span class=\"token punctuation\">:</span> <span class=\"token function\">0</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number>  \n```      \n\n### flex-basis  \n`flex-basis `属性规定了当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的伸缩比例或大小\n\n```css  \n<span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span> | number\n```  \n**number**： 可以是具体的像素值，如30px；也可以是auto大小百分比\n  \n### flex-grow    \n\n`flex-grow`属性 前提在所有项目以`flex-basis`的值排列完如有剩余空间，则规定当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的剩余空间份比例  \n\n```css  \n<span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">0</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number><span class=\"token punctuation\">;</span>\n```  \n**number**：当剩余空间足够时，如果值为`1`那么高度<span class=\"token punctuation\">(</span>宽度<span class=\"token punctuation\">)</span>`放大剩余空间1份`，如果只有一个元素设置了此属性，那么剩余全部全部分给他；如果多个元素设置了此属性，比如`<span class=\"token property\">a</span><span class=\"token punctuation\">:</span>1` `<span class=\"token property\">b</span><span class=\"token punctuation\">:</span>2` `<span class=\"token property\">c</span><span class=\"token punctuation\">:</span>3`则会把剩余空间分成`6份`，a在本身的大小基础上增加剩余空间的`1/6份` a则是`2/6份` c则是`3/6份`，如果剩余空间不足，则取`剩余空间最大值`，不支持负数\n \n### flex-shrink    \n\n`flex-shrink`属性规定了当剩余空间不足时候，当前`flex item`的高度<span class=\"token punctuation\">(</span>主轴为水平轴则是高度，如果主轴为竖直轴则是宽度，主轴通过`flex-direction`设置<span class=\"token punctuation\">)</span>的缩小超出空间份比例，和上面的`flex-grow`是相反的，一个放大，一个缩小\n\n```css  \n<span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> <span class=\"token function\">1</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | &lt;number><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>number</strong>：当剩余空间不足时，默认按照比例1缩小，如果值为<code>2</code>那么高度(宽度)<code>缩小超出空间2份</code></p>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p><code>flex-shrink</code>属性规定当前<code>flex item</code>作为一个整体在<code>flex</code>容器在副轴(非主轴，和<code>justify-content</code>相反)上的排列方式    </p>\n<blockquote>\n<p>注意：这个属性和<code>align-item</code>的区别是<code>align-item</code>影响全部<code>flex item</code>，而<code>align-self</code>只影响当前<code>flex item</code>  </p>\n</blockquote>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>默认值<span class=\"token punctuation\">)</span> | stretch | center | flex-start | flex-end | baseline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>auto</strong>：继承父亲<code>align-item</code>的<code>value</code><br><strong>stretch</strong>： 占满整个主轴的高度, 前提必须是你没有设置item的高度(宽度)，否则不生效<br><strong>center</strong>： 位于主轴中心<br><strong>flex-start</strong>： 位于主轴开头<br><strong>flex-end</strong>： 位于主轴结尾<br><strong>baseline</strong>： 位于<code>item</code>中第一行文字 <em>基线</em> 对齐  </p>\n<h2 id=\"扩展一道面试题\"><a href=\"#扩展一道面试题\" class=\"headerlink\" title=\"扩展一道面试题\"></a>扩展一道面试题</h2><h4 id=\"一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\"><a href=\"#一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\" class=\"headerlink\" title=\"一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：\"></a>一个元素包含内部两个元素。当flex水平轴为主轴，实现左固定，右自适应：</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>flex2<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n```  \n\n```css\ndiv.flex2&#123;\n\tdisplay:flex;\n\tborder:1px solid red;\n\twidth:100%;\n\theight:300px;\n&#125;\n.flex2 p&#123;\n\twidth:100px;\n\theight:100px;\n\tbackground-color: skyblue;\n\tline-height: 100px;\n\ttext-align: center;\n\tfont-size: 80px;\n\tborder:1px solid blue;\n&#125;\n.flex2 p:nth-child(1)&#123;\n\twidth:200px;// 左侧元素固定为200px宽\n&#125;\n.flex2 p:nth-child(2)&#123;\n\tflex-grow:1; // 右侧元素自适应\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"_content":"## 冒泡排序（Bubble sort）\n#### 原理和演示：  \n - 依次比较数组中相邻的每一对值，如果前面的值 **大于** 后面的值，则交换他们俩的位置。如果数组中`5`个数字(length为5)，由于比较 **两个一组** 的数字，那么只需要`4次`(length - 1)比较，就可以实现把数组中最大的一个数放到最后。  \n \n ```javascript\n\tfunction bubbleSort(arr) {\n\t  for (let i = 0; i < arr.length - 1; i++) {\n\t    if (arr[i] > arr[i+1]) {\n\t      let temp = arr[i];\n\t      arr[i] = arr[i+1];\n\t      arr[i+1] = temp;\n\t    }\n\t    console.log(`执行${i+1}次`)\n\t  }\n\t  return arr;\n\t}\n ```\n - 通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，`j`对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数`- 1`也就是下面例子中的`- j`。\n \n\t```javascript\n\t function bubbleSort(arr) {\n\t  for(let j = 0; j < arr.length - 1; j++) {\n\t    for (let i = 0; i < arr.length - 1 - j; i++) {\n\t      if (arr[i] > arr[i+1]) {\n\t        let temp = arr[i];\n\t        arr[i] = arr[i+1];\n\t        arr[i+1] = temp;\n\t      }\n\t      console.log(`执行${i+1}次`)\n\t    }\n\t  }\n\t  return arr;\n\t}\n\t```  \n - 两个变量互换值可以使用`es6`的解构语法，省去使用`temp`缓存，语法为`[a, b] = [b, a]`，即可交换`变量a`和`变量b`的值。复杂数据类型`Object`和`Array`都适用；如果第二个循环中的大小判断，一次都没有执行，说明当前这组数据是正序无需排序，用一个变量`isOk`标记下配合`break`，实现方法优化。  \n \n#### 完整代码：\n```javascript\nfunction bubbleSort(arr) {\n  console.time('耗时');\n  for (let j = 0; j < arr.length - 1; j++) {\n    let isOk = true;\n    for (let i = 0; i < arr.length - 1 - j; i++) {\n      if (arr[i] > arr[i+1]) {\n        [arr[i], arr[i+1]] = [arr[i+1], arr[i]];\n        isOk = false;\n      }\n    }\n    if (isOk) {\n      break;\n    }\n  }\n  console.timeEnd('耗时');\n  return arr;\n}\n```      \n#### 冒泡排序动画演示：  \n![bubble sort.gif](./img/javascript-array-sort-introduce/KWrN6slZTEFAuhv.gif)  \n \n## 选择排序（Selection Sort）  \n#### 原理：  \n - 循环整个数组，找到**最小**的值，放在数组**第一位**(和第一位交换位置）。\n - 从数组**第二位**开始重新循环，依旧找到**最小**的值，放在数组第二位，重复此步骤，直到对比完最后一组数据。    \n \n#### 完整代码：    \n\n```javascript\nfunction selectionSort(arr) {\n  for (let i = 0; i < arr.length - 1; i++) { // arr.length - 1是因为假定数组中n个数，比较需要两个数，所以只需要比较n-1次\n    let minIndex = i; // 记录每次循环开始位置，等待和最小值交换位置\n    for (let j = i+1; j < arr.length; j++) { // j+1 是避免比较自身，j永远是i的后一项，让他们俩做比较\n      if (arr[j] < arr[minIndex]) { // 如果后面的值小于前面的值，需要调换他们俩位置\n        minIndex = j; // 保存最小值的下标\n      }\n    }\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]] // 使用es6的结构语法交换值，把最小值放到数组最前面\n  }\n  return arr;\n}\n```\n#### 选择排序动画演示：  \n![section sort.gif](./img/javascript-array-sort-introduce/ibLoIgDEnRJrUas.gif)\n\n## 插入排序（Insertion Sort）\n#### 原理：  \n- 将数组分成**两部分**，一部分为**已排序**(默认为数组第一个元素且只有这一个元素)，另一部分为**未排序**。\n- 依次从未排序数组中取值，和已排序中的值**依次做对**比，如果**未排序元素**比**已排序元素**中某个元素**小**，那就将**已排序元素**向**后移**一位，使他本来位置变成一个**空位**，再将**待排序数据**插入空位。   \n \n#### 完整代码：\n\n```javascript\nfunction insertionSort(arr) {\n  let len = arr.length\n  for (let i = 1; i < len; i++) { // 循环未排序部分, i=1而不是0是因为默认0项为已排序部分\n    let cur = i // 每次插入后，arr[i]会发生改变，先存下来\n    let j = i - 1\n    while (j >= 0) { // 循环已排序部分，默认数组第一项有且只有第一项，下标范围为(0 - (未排序元素下标-1))，也就是例子中的i-1\n      if (arr[cur] < arr[j]) { // 如果未排序元素比已排序元素小，\n        [arr[cur], arr[j]] = [arr[j], arr[cur]] // 交换\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      }\n      j--\n    }\n  }\n  return arr\n}\n```    \n#### 插入排序动画演示：  \n![insertion sort.gif](./img/javascript-array-sort-introduce/5z82iWpVIJbLfu7.gif)    \n\n## 快速排序（Quick Sort）  \n#### 原理：\n - 选择数组中的一个元素作为**基准值**，用两个新数组**分别存储**原数组比基准值**大**的值，和**小**的值。  \n - 继续**递归处理**这两个新数组，最终用concat合并到一起，效果为：比基准值小的数组+基准值+比基准值小的数组。  \n   \n > 快速排序有其它种实现方法，这是一种简单的实现，非原地排序，由于新建了多个新的数组，会增加空间复杂度，好处再于非常容易理解，可读性强，适合面试手写代码。    \n \n#### 完整代码：  \n```javascript\nfunction quickSort(arr) { \n  if(arr.length <= 1) {return arr} // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i < len; i++) {\n    if(arr[i] < point) { // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    }else{\n      right.push(arr[i]) \n    }\n  }\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n}  \n```  \n#### 快速排序动画演示：  \n![quick sort.gif](./img/javascript-array-sort-introduce/DzWckAlLmVU9JuN.gif)   \n\n<hr>     \n\n另外说一下，`sort`排序函数原理：如果数组长度`小于10`，使用插入排序，否则使用快速排序。如其名，快速排序的性能还是很好的\n\n<hr>\n\n本文动画参考：[掘金](https://juejin.im/post/6844903444365443080)    \n本文例子查看：[GitHub](https://github.com/codedance98/docs/tree/main/javascript_sort)","source":"_drafts/last/docs/js常用4种排序介绍.md","raw":"## 冒泡排序（Bubble sort）\n#### 原理和演示：  \n - 依次比较数组中相邻的每一对值，如果前面的值 **大于** 后面的值，则交换他们俩的位置。如果数组中`5`个数字(length为5)，由于比较 **两个一组** 的数字，那么只需要`4次`(length - 1)比较，就可以实现把数组中最大的一个数放到最后。  \n \n ```javascript\n\tfunction bubbleSort(arr) {\n\t  for (let i = 0; i < arr.length - 1; i++) {\n\t    if (arr[i] > arr[i+1]) {\n\t      let temp = arr[i];\n\t      arr[i] = arr[i+1];\n\t      arr[i+1] = temp;\n\t    }\n\t    console.log(`执行${i+1}次`)\n\t  }\n\t  return arr;\n\t}\n ```\n - 通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，`j`对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数`- 1`也就是下面例子中的`- j`。\n \n\t```javascript\n\t function bubbleSort(arr) {\n\t  for(let j = 0; j < arr.length - 1; j++) {\n\t    for (let i = 0; i < arr.length - 1 - j; i++) {\n\t      if (arr[i] > arr[i+1]) {\n\t        let temp = arr[i];\n\t        arr[i] = arr[i+1];\n\t        arr[i+1] = temp;\n\t      }\n\t      console.log(`执行${i+1}次`)\n\t    }\n\t  }\n\t  return arr;\n\t}\n\t```  \n - 两个变量互换值可以使用`es6`的解构语法，省去使用`temp`缓存，语法为`[a, b] = [b, a]`，即可交换`变量a`和`变量b`的值。复杂数据类型`Object`和`Array`都适用；如果第二个循环中的大小判断，一次都没有执行，说明当前这组数据是正序无需排序，用一个变量`isOk`标记下配合`break`，实现方法优化。  \n \n#### 完整代码：\n```javascript\nfunction bubbleSort(arr) {\n  console.time('耗时');\n  for (let j = 0; j < arr.length - 1; j++) {\n    let isOk = true;\n    for (let i = 0; i < arr.length - 1 - j; i++) {\n      if (arr[i] > arr[i+1]) {\n        [arr[i], arr[i+1]] = [arr[i+1], arr[i]];\n        isOk = false;\n      }\n    }\n    if (isOk) {\n      break;\n    }\n  }\n  console.timeEnd('耗时');\n  return arr;\n}\n```      \n#### 冒泡排序动画演示：  \n![bubble sort.gif](./img/javascript-array-sort-introduce/KWrN6slZTEFAuhv.gif)  \n \n## 选择排序（Selection Sort）  \n#### 原理：  \n - 循环整个数组，找到**最小**的值，放在数组**第一位**(和第一位交换位置）。\n - 从数组**第二位**开始重新循环，依旧找到**最小**的值，放在数组第二位，重复此步骤，直到对比完最后一组数据。    \n \n#### 完整代码：    \n\n```javascript\nfunction selectionSort(arr) {\n  for (let i = 0; i < arr.length - 1; i++) { // arr.length - 1是因为假定数组中n个数，比较需要两个数，所以只需要比较n-1次\n    let minIndex = i; // 记录每次循环开始位置，等待和最小值交换位置\n    for (let j = i+1; j < arr.length; j++) { // j+1 是避免比较自身，j永远是i的后一项，让他们俩做比较\n      if (arr[j] < arr[minIndex]) { // 如果后面的值小于前面的值，需要调换他们俩位置\n        minIndex = j; // 保存最小值的下标\n      }\n    }\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]] // 使用es6的结构语法交换值，把最小值放到数组最前面\n  }\n  return arr;\n}\n```\n#### 选择排序动画演示：  \n![section sort.gif](./img/javascript-array-sort-introduce/ibLoIgDEnRJrUas.gif)\n\n## 插入排序（Insertion Sort）\n#### 原理：  \n- 将数组分成**两部分**，一部分为**已排序**(默认为数组第一个元素且只有这一个元素)，另一部分为**未排序**。\n- 依次从未排序数组中取值，和已排序中的值**依次做对**比，如果**未排序元素**比**已排序元素**中某个元素**小**，那就将**已排序元素**向**后移**一位，使他本来位置变成一个**空位**，再将**待排序数据**插入空位。   \n \n#### 完整代码：\n\n```javascript\nfunction insertionSort(arr) {\n  let len = arr.length\n  for (let i = 1; i < len; i++) { // 循环未排序部分, i=1而不是0是因为默认0项为已排序部分\n    let cur = i // 每次插入后，arr[i]会发生改变，先存下来\n    let j = i - 1\n    while (j >= 0) { // 循环已排序部分，默认数组第一项有且只有第一项，下标范围为(0 - (未排序元素下标-1))，也就是例子中的i-1\n      if (arr[cur] < arr[j]) { // 如果未排序元素比已排序元素小，\n        [arr[cur], arr[j]] = [arr[j], arr[cur]] // 交换\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      }\n      j--\n    }\n  }\n  return arr\n}\n```    \n#### 插入排序动画演示：  \n![insertion sort.gif](./img/javascript-array-sort-introduce/5z82iWpVIJbLfu7.gif)    \n\n## 快速排序（Quick Sort）  \n#### 原理：\n - 选择数组中的一个元素作为**基准值**，用两个新数组**分别存储**原数组比基准值**大**的值，和**小**的值。  \n - 继续**递归处理**这两个新数组，最终用concat合并到一起，效果为：比基准值小的数组+基准值+比基准值小的数组。  \n   \n > 快速排序有其它种实现方法，这是一种简单的实现，非原地排序，由于新建了多个新的数组，会增加空间复杂度，好处再于非常容易理解，可读性强，适合面试手写代码。    \n \n#### 完整代码：  \n```javascript\nfunction quickSort(arr) { \n  if(arr.length <= 1) {return arr} // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i < len; i++) {\n    if(arr[i] < point) { // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    }else{\n      right.push(arr[i]) \n    }\n  }\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n}  \n```  \n#### 快速排序动画演示：  \n![quick sort.gif](./img/javascript-array-sort-introduce/DzWckAlLmVU9JuN.gif)   \n\n<hr>     \n\n另外说一下，`sort`排序函数原理：如果数组长度`小于10`，使用插入排序，否则使用快速排序。如其名，快速排序的性能还是很好的\n\n<hr>\n\n本文动画参考：[掘金](https://juejin.im/post/6844903444365443080)    \n本文例子查看：[GitHub](https://github.com/codedance98/docs/tree/main/javascript_sort)","slug":"last/docs/js常用4种排序介绍","published":0,"date":"2021-10-22T09:38:36.423Z","updated":"2021-10-22T09:38:36.423Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer1001kh7vmaxswa130","content":"<h2 id=\"冒泡排序（Bubble-sort）\"><a href=\"#冒泡排序（Bubble-sort）\" class=\"headerlink\" title=\"冒泡排序（Bubble sort）\"></a>冒泡排序（Bubble sort）</h2><h4 id=\"原理和演示：\"><a href=\"#原理和演示：\" class=\"headerlink\" title=\"原理和演示：\"></a>原理和演示：</h4><ul>\n<li>依次比较数组中相邻的每一对值，如果前面的值 <strong>大于</strong> 后面的值，则交换他们俩的位置。如果数组中<code>5</code>个数字(length为5)，由于比较 <strong>两个一组</strong> 的数字，那么只需要<code>4次</code>(length - 1)比较，就可以实现把数组中最大的一个数放到最后。  </li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，<code>j</code>对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数<code>- 1</code>也就是下面例子中的<code>- j</code>。 <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t <span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t        arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t      <span class=\"token punctuation\">&#125;</span>\n\t      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">&#125;</span>\n\t  <span class=\"token punctuation\">&#125;</span>\n\t  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n - 两个变量互换值可以使用</span><span class=\"token template-punctuation string\">`</span></span>es6<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">的解构语法，省去使用</span><span class=\"token template-punctuation string\">`</span></span>temp<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">缓存，语法为</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，即可交换</span><span class=\"token template-punctuation string\">`</span></span>变量a<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">和</span><span class=\"token template-punctuation string\">`</span></span>变量b<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">的值。复杂数据类型</span><span class=\"token template-punctuation string\">`</span></span>Object<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">和</span><span class=\"token template-punctuation string\">`</span></span>Array<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">都适用；如果第二个循环中的大小判断，一次都没有执行，说明当前这组数据是正序无需排序，用一个变量</span><span class=\"token template-punctuation string\">`</span></span>isOk<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">标记下配合</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">break</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，实现方法优化。  \n \n#### 完整代码：\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耗时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> isOk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        isOk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耗时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">      \n#### 冒泡排序动画演示：  \n![bubble sort.gif](./img/javascript-array-sort-introduce/KWrN6slZTEFAuhv.gif)  \n \n## 选择排序（Selection Sort）  \n#### 原理：  \n - 循环整个数组，找到**最小**的值，放在数组**第一位**(和第一位交换位置）。\n - 从数组**第二位**开始重新循环，依旧找到**最小**的值，放在数组第二位，重复此步骤，直到对比完最后一组数据。    \n \n#### 完整代码：    \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// arr.length - 1是因为假定数组中n个数，比较需要两个数，所以只需要比较n-1次</span>\n    <span class=\"token keyword\">let</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录每次循环开始位置，等待和最小值交换位置</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// j+1 是避免比较自身，j永远是i的后一项，让他们俩做比较</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果后面的值小于前面的值，需要调换他们俩位置</span>\n        minIndex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存最小值的下标</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 使用es6的结构语法交换值，把最小值放到数组最前面</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"选择排序动画演示：\"><a href=\"#选择排序动画演示：\" class=\"headerlink\" title=\"选择排序动画演示：\"></a>选择排序动画演示：</h4><img src=\"/2021/10/22/last/docs/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/javascript-array-sort-introduce/ibLoIgDEnRJrUas.gif\" alt=\"section sort.gif\"></li>\n</ul>\n<h2 id=\"插入排序（Insertion-Sort）\"><a href=\"#插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"插入排序（Insertion Sort）\"></a>插入排序（Insertion Sort）</h2><h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>将数组分成<strong>两部分</strong>，一部分为<strong>已排序</strong>(默认为数组第一个元素且只有这一个元素)，另一部分为<strong>未排序</strong>。</li>\n<li>依次从未排序数组中取值，和已排序中的值<strong>依次做对</strong>比，如果<strong>未排序元素</strong>比<strong>已排序元素</strong>中某个元素<strong>小</strong>，那就将<strong>已排序元素</strong>向<strong>后移</strong>一位，使他本来位置变成一个<strong>空位</strong>，再将<strong>待排序数据</strong>插入空位。   </li>\n</ul>\n<h4 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre><code class=\"javascript\">function insertionSort(arr) &#123;\n  let len = arr.length\n  for (let i = 1; i &lt; len; i++) &#123; // 循环未排序部分, i=1而不是0是因为默认0项为已排序部分\n    let cur = i // 每次插入后，arr[i]会发生改变，先存下来\n    let j = i - 1\n    while (j &gt;= 0) &#123; // 循环已排序部分，默认数组第一项有且只有第一项，下标范围为(0 - (未排序元素下标-1))，也就是例子中的i-1\n      if (arr[cur] &lt; arr[j]) &#123; // 如果未排序元素比已排序元素小，\n        [arr[cur], arr[j]] = [arr[j], arr[cur]] // 交换\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      &#125;\n      j--\n    &#125;\n  &#125;\n  return arr\n&#125;\n</code></pre>\n<h4 id=\"插入排序动画演示：\"><a href=\"#插入排序动画演示：\" class=\"headerlink\" title=\"插入排序动画演示：\"></a>插入排序动画演示：</h4><p><img src=\"/2021/10/22/last/docs/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/javascript-array-sort-introduce/5z82iWpVIJbLfu7.gif\" alt=\"insertion sort.gif\">    </p>\n<h2 id=\"快速排序（Quick-Sort）\"><a href=\"#快速排序（Quick-Sort）\" class=\"headerlink\" title=\"快速排序（Quick Sort）\"></a>快速排序（Quick Sort）</h2><h4 id=\"原理：-1\"><a href=\"#原理：-1\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>选择数组中的一个元素作为<strong>基准值</strong>，用两个新数组<strong>分别存储</strong>原数组比基准值<strong>大</strong>的值，和<strong>小</strong>的值。  </li>\n<li>继续<strong>递归处理</strong>这两个新数组，最终用concat合并到一起，效果为：比基准值小的数组+基准值+比基准值小的数组。  </li>\n</ul>\n<blockquote>\n<p>快速排序有其它种实现方法，这是一种简单的实现，非原地排序，由于新建了多个新的数组，会增加空间复杂度，好处再于非常容易理解，可读性强，适合面试手写代码。    </p>\n</blockquote>\n<h4 id=\"完整代码：-1\"><a href=\"#完整代码：-1\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre><code class=\"javascript\">function quickSort(arr) &#123; \n  if(arr.length &lt;= 1) &#123;return arr&#125; // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i &lt; len; i++) &#123;\n    if(arr[i] &lt; point) &#123; // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    &#125;else&#123;\n      right.push(arr[i]) \n    &#125;\n  &#125;\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n&#125;  \n</code></pre>\n<h4 id=\"快速排序动画演示：\"><a href=\"#快速排序动画演示：\" class=\"headerlink\" title=\"快速排序动画演示：\"></a>快速排序动画演示：</h4><p><img src=\"/2021/10/22/last/docs/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/javascript-array-sort-introduce/DzWckAlLmVU9JuN.gif\" alt=\"quick sort.gif\">   </p>\n<hr>     \n\n<p>另外说一下，<code>sort</code>排序函数原理：如果数组长度<code>小于10</code>，使用插入排序，否则使用快速排序。如其名，快速排序的性能还是很好的</p>\n<hr>\n\n<p>本文动画参考：<a href=\"https://juejin.im/post/6844903444365443080\">掘金</a><br>本文例子查看：<a href=\"https://github.com/codedance98/docs/tree/main/javascript_sort\">GitHub</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"冒泡排序（Bubble-sort）\"><a href=\"#冒泡排序（Bubble-sort）\" class=\"headerlink\" title=\"冒泡排序（Bubble sort）\"></a>冒泡排序（Bubble sort）</h2><h4 id=\"原理和演示：\"><a href=\"#原理和演示：\" class=\"headerlink\" title=\"原理和演示：\"></a>原理和演示：</h4><ul>\n<li>依次比较数组中相邻的每一对值，如果前面的值 <strong>大于</strong> 后面的值，则交换他们俩的位置。如果数组中<code>5</code>个数字(length为5)，由于比较 <strong>两个一组</strong> 的数字，那么只需要<code>4次</code>(length - 1)比较，就可以实现把数组中最大的一个数放到最后。  </li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，<code>j</code>对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数<code>- 1</code>也就是下面例子中的<code>- j</code>。 <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t <span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t        arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t      <span class=\"token punctuation\">&#125;</span>\n\t      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">&#125;</span>\n\t  <span class=\"token punctuation\">&#125;</span>\n\t  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n - 两个变量互换值可以使用</span><span class=\"token template-punctuation string\">`</span></span>es6<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">的解构语法，省去使用</span><span class=\"token template-punctuation string\">`</span></span>temp<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">缓存，语法为</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，即可交换</span><span class=\"token template-punctuation string\">`</span></span>变量a<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">和</span><span class=\"token template-punctuation string\">`</span></span>变量b<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">的值。复杂数据类型</span><span class=\"token template-punctuation string\">`</span></span>Object<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">和</span><span class=\"token template-punctuation string\">`</span></span>Array<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">都适用；如果第二个循环中的大小判断，一次都没有执行，说明当前这组数据是正序无需排序，用一个变量</span><span class=\"token template-punctuation string\">`</span></span>isOk<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">标记下配合</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">break</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，实现方法优化。  \n \n#### 完整代码：\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耗时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> isOk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        isOk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'耗时'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">      \n#### 冒泡排序动画演示：  \n![bubble sort.gif](./img/javascript-array-sort-introduce/KWrN6slZTEFAuhv.gif)  \n \n## 选择排序（Selection Sort）  \n#### 原理：  \n - 循环整个数组，找到**最小**的值，放在数组**第一位**(和第一位交换位置）。\n - 从数组**第二位**开始重新循环，依旧找到**最小**的值，放在数组第二位，重复此步骤，直到对比完最后一组数据。    \n \n#### 完整代码：    \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// arr.length - 1是因为假定数组中n个数，比较需要两个数，所以只需要比较n-1次</span>\n    <span class=\"token keyword\">let</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录每次循环开始位置，等待和最小值交换位置</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// j+1 是避免比较自身，j永远是i的后一项，让他们俩做比较</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果后面的值小于前面的值，需要调换他们俩位置</span>\n        minIndex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存最小值的下标</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 使用es6的结构语法交换值，把最小值放到数组最前面</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"选择排序动画演示：\"><a href=\"#选择排序动画演示：\" class=\"headerlink\" title=\"选择排序动画演示：\"></a>选择排序动画演示：</h4><img src=\"/2021/10/22/last/docs/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/javascript-array-sort-introduce/ibLoIgDEnRJrUas.gif\" alt=\"section sort.gif\"></li>\n</ul>\n<h2 id=\"插入排序（Insertion-Sort）\"><a href=\"#插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"插入排序（Insertion Sort）\"></a>插入排序（Insertion Sort）</h2><h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>将数组分成<strong>两部分</strong>，一部分为<strong>已排序</strong>(默认为数组第一个元素且只有这一个元素)，另一部分为<strong>未排序</strong>。</li>\n<li>依次从未排序数组中取值，和已排序中的值<strong>依次做对</strong>比，如果<strong>未排序元素</strong>比<strong>已排序元素</strong>中某个元素<strong>小</strong>，那就将<strong>已排序元素</strong>向<strong>后移</strong>一位，使他本来位置变成一个<strong>空位</strong>，再将<strong>待排序数据</strong>插入空位。   </li>\n</ul>\n<h4 id=\"完整代码：\"><a href=\"#完整代码：\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre><code class=\"javascript\">function insertionSort(arr) &#123;\n  let len = arr.length\n  for (let i = 1; i &lt; len; i++) &#123; // 循环未排序部分, i=1而不是0是因为默认0项为已排序部分\n    let cur = i // 每次插入后，arr[i]会发生改变，先存下来\n    let j = i - 1\n    while (j &gt;= 0) &#123; // 循环已排序部分，默认数组第一项有且只有第一项，下标范围为(0 - (未排序元素下标-1))，也就是例子中的i-1\n      if (arr[cur] &lt; arr[j]) &#123; // 如果未排序元素比已排序元素小，\n        [arr[cur], arr[j]] = [arr[j], arr[cur]] // 交换\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      &#125;\n      j--\n    &#125;\n  &#125;\n  return arr\n&#125;\n</code></pre>\n<h4 id=\"插入排序动画演示：\"><a href=\"#插入排序动画演示：\" class=\"headerlink\" title=\"插入排序动画演示：\"></a>插入排序动画演示：</h4><p><img src=\"/2021/10/22/last/docs/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/javascript-array-sort-introduce/5z82iWpVIJbLfu7.gif\" alt=\"insertion sort.gif\">    </p>\n<h2 id=\"快速排序（Quick-Sort）\"><a href=\"#快速排序（Quick-Sort）\" class=\"headerlink\" title=\"快速排序（Quick Sort）\"></a>快速排序（Quick Sort）</h2><h4 id=\"原理：-1\"><a href=\"#原理：-1\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ul>\n<li>选择数组中的一个元素作为<strong>基准值</strong>，用两个新数组<strong>分别存储</strong>原数组比基准值<strong>大</strong>的值，和<strong>小</strong>的值。  </li>\n<li>继续<strong>递归处理</strong>这两个新数组，最终用concat合并到一起，效果为：比基准值小的数组+基准值+比基准值小的数组。  </li>\n</ul>\n<blockquote>\n<p>快速排序有其它种实现方法，这是一种简单的实现，非原地排序，由于新建了多个新的数组，会增加空间复杂度，好处再于非常容易理解，可读性强，适合面试手写代码。    </p>\n</blockquote>\n<h4 id=\"完整代码：-1\"><a href=\"#完整代码：-1\" class=\"headerlink\" title=\"完整代码：\"></a>完整代码：</h4><pre><code class=\"javascript\">function quickSort(arr) &#123; \n  if(arr.length &lt;= 1) &#123;return arr&#125; // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i &lt; len; i++) &#123;\n    if(arr[i] &lt; point) &#123; // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    &#125;else&#123;\n      right.push(arr[i]) \n    &#125;\n  &#125;\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n&#125;  \n</code></pre>\n<h4 id=\"快速排序动画演示：\"><a href=\"#快速排序动画演示：\" class=\"headerlink\" title=\"快速排序动画演示：\"></a>快速排序动画演示：</h4><p><img src=\"/2021/10/22/last/docs/js%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/javascript-array-sort-introduce/DzWckAlLmVU9JuN.gif\" alt=\"quick sort.gif\">   </p>\n<hr>     \n\n<p>另外说一下，<code>sort</code>排序函数原理：如果数组长度<code>小于10</code>，使用插入排序，否则使用快速排序。如其名，快速排序的性能还是很好的</p>\n<hr>\n\n<p>本文动画参考：<a href=\"https://juejin.im/post/6844903444365443080\">掘金</a><br>本文例子查看：<a href=\"https://github.com/codedance98/docs/tree/main/javascript_sort\">GitHub</a></p>\n"},{"_content":"## 环境\n - CentOS 7.6 64位\n - nginx@1.19.2\n - vue-cli@4.5.0  \n \n## nginx配置\n连接服务器，进入要下载的目录，这里用的`/usr/local/src`，你也可以在`/opt`下，这两种算约定俗称的目录结构，便于统一管理。\n\n下载`nginx`，这是使用的是二进制包，你可以通过`yum`包管理安装。   \n我这里用的最新的`1.19.2`版本。[更多版本](http://nginx.org/en/download.html)\n\n```shell\nwget -c https://nginx.org/download/nginx-1.19.2.tar.gz \n```\n解压缩并进入`nginx`文件夹：  \n\n```shell\ntar -zxvf nginx-1.19.2.tar.gz\n...\ncd nginx-1.19.2\n```  \n编译前环境监测：\n\n```shell\n./configure\n```  \n如果没报错忽略这条。新服务器这里会报错，提示需要安装`g++`，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行`./configure`。  \n\n```shell\nyum groupinstall \"Development Tools\"\n...  \n```  \n编译并安装：\n\n```shell\nmake && make install\n```    \n启动它：  \n\n```shell\ncd /usr/local/nginx/sbin\n./nginx\n```  \n更多常用命令：  \n\n```shell\n./nginx -s stop // 停止\n./nginx -s reload // 重启\n```\n默认`nginx`在`80端口`运行，记得到服务器购买网站控制台开放一下公网`80端口`权限。   \n \n要想修改配置：  \n\n```shell\ncd /usr/local/nginx/config\nvi ./nginx.config\n```  \n## 配置vue\n克隆你的vue项目，我是在`/opt/vue/`目录下： \n\n```shell\ncd /opt/vue\ngit clone xxx\nnpm install\nnpm run build\n```  \n\n找到`http`块中的`server`块。\n\n```shell\nserver {\n        listen       80;  #监听端口\n        server_name  127.0.0.1; #监听地址    \n        location / {\n            root   /opt/vue/dist; # 资源目录，我这里是vue构建后的目录\n            index  index.html index.htm; #首页文件设置\n            try_files $uri $uri/ /index.html; #vue-router history 路由设置\n        }\n        # 以下是指定错误时展示的文件文件\n        #error_page  404              /404.html; \n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n```  \n[更多nginx配置参考](https://www.runoob.com/w3cnote/nginx-setup-intro.html)\n##### 其中 \n - 设置`localtion`块的`root`属性为你的vue构建后文件    \n\n - 如果 vue 使用`history`路由，设置`try_files`为`$uri $uri/ /index.html`，用来告诉`nginx`前端路由交给前端的`index`文件去处理了，不用你处理了\n\n\n","source":"_drafts/last/docs/nginx服务器部署vue配置.md","raw":"## 环境\n - CentOS 7.6 64位\n - nginx@1.19.2\n - vue-cli@4.5.0  \n \n## nginx配置\n连接服务器，进入要下载的目录，这里用的`/usr/local/src`，你也可以在`/opt`下，这两种算约定俗称的目录结构，便于统一管理。\n\n下载`nginx`，这是使用的是二进制包，你可以通过`yum`包管理安装。   \n我这里用的最新的`1.19.2`版本。[更多版本](http://nginx.org/en/download.html)\n\n```shell\nwget -c https://nginx.org/download/nginx-1.19.2.tar.gz \n```\n解压缩并进入`nginx`文件夹：  \n\n```shell\ntar -zxvf nginx-1.19.2.tar.gz\n...\ncd nginx-1.19.2\n```  \n编译前环境监测：\n\n```shell\n./configure\n```  \n如果没报错忽略这条。新服务器这里会报错，提示需要安装`g++`，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行`./configure`。  \n\n```shell\nyum groupinstall \"Development Tools\"\n...  \n```  \n编译并安装：\n\n```shell\nmake && make install\n```    \n启动它：  \n\n```shell\ncd /usr/local/nginx/sbin\n./nginx\n```  \n更多常用命令：  \n\n```shell\n./nginx -s stop // 停止\n./nginx -s reload // 重启\n```\n默认`nginx`在`80端口`运行，记得到服务器购买网站控制台开放一下公网`80端口`权限。   \n \n要想修改配置：  \n\n```shell\ncd /usr/local/nginx/config\nvi ./nginx.config\n```  \n## 配置vue\n克隆你的vue项目，我是在`/opt/vue/`目录下： \n\n```shell\ncd /opt/vue\ngit clone xxx\nnpm install\nnpm run build\n```  \n\n找到`http`块中的`server`块。\n\n```shell\nserver {\n        listen       80;  #监听端口\n        server_name  127.0.0.1; #监听地址    \n        location / {\n            root   /opt/vue/dist; # 资源目录，我这里是vue构建后的目录\n            index  index.html index.htm; #首页文件设置\n            try_files $uri $uri/ /index.html; #vue-router history 路由设置\n        }\n        # 以下是指定错误时展示的文件文件\n        #error_page  404              /404.html; \n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n```  \n[更多nginx配置参考](https://www.runoob.com/w3cnote/nginx-setup-intro.html)\n##### 其中 \n - 设置`localtion`块的`root`属性为你的vue构建后文件    \n\n - 如果 vue 使用`history`路由，设置`try_files`为`$uri $uri/ /index.html`，用来告诉`nginx`前端路由交给前端的`index`文件去处理了，不用你处理了\n\n\n","slug":"last/docs/nginx服务器部署vue配置","published":0,"date":"2021-10-22T09:38:36.423Z","updated":"2021-10-22T09:38:36.423Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer2001mh7vm4y9h0dua","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>CentOS 7.6 64位</li>\n<li><a href=\"mailto:&#x6e;&#x67;&#105;&#110;&#120;&#64;&#x31;&#x2e;&#x31;&#x39;&#x2e;&#x32;\">&#x6e;&#x67;&#105;&#110;&#120;&#64;&#x31;&#x2e;&#x31;&#x39;&#x2e;&#x32;</a></li>\n<li><a href=\"mailto:&#118;&#117;&#x65;&#45;&#x63;&#x6c;&#x69;&#x40;&#x34;&#x2e;&#53;&#46;&#x30;\">&#118;&#117;&#x65;&#45;&#x63;&#x6c;&#x69;&#x40;&#x34;&#x2e;&#53;&#46;&#x30;</a>  </li>\n</ul>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>连接服务器，进入要下载的目录，这里用的<code>/usr/local/src</code>，你也可以在<code>/opt</code>下，这两种算约定俗称的目录结构，便于统一管理。</p>\n<p>下载<code>nginx</code>，这是使用的是二进制包，你可以通过<code>yum</code>包管理安装。<br>我这里用的最新的<code>1.19.2</code>版本。<a href=\"http://nginx.org/en/download.html\">更多版本</a></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> -c https://nginx.org/download/nginx-1.19.2.tar.gz <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解压缩并进入<code>nginx</code>文件夹：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">tar</span> -zxvf nginx-1.19.2.tar.gz\n<span class=\"token punctuation\">..</span>.\n<span class=\"token builtin class-name\">cd</span> nginx-1.19.2\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n编译前环境监测：\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n./configure\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n如果没报错忽略这条。新服务器这里会报错，提示需要安装<span class=\"token variable\">`</span></span>g++<span class=\"token variable\"><span class=\"token variable\">`</span>，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行<span class=\"token variable\">`</span></span>./configure<span class=\"token variable\"><span class=\"token variable\">`</span>。  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\nyum groupinstall <span class=\"token string\">\"Development Tools\"</span>\n<span class=\"token punctuation\">..</span>.  \n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n编译并安装：\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>    \n启动它：  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token builtin class-name\">cd</span> /usr/local/nginx/sbin\n./nginx\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n更多常用命令：  \n\n<span class=\"token variable\">`</span></span>``shell\n./nginx -s stop // 停止\n./nginx -s reload // 重启<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>默认<code>nginx</code>在<code>80端口</code>运行，记得到服务器购买网站控制台开放一下公网<code>80端口</code>权限。   </p>\n<p>要想修改配置：  </p>\n<pre><code class=\"shell\">cd /usr/local/nginx/config\nvi ./nginx.config\n</code></pre>\n<h2 id=\"配置vue\"><a href=\"#配置vue\" class=\"headerlink\" title=\"配置vue\"></a>配置vue</h2><p>克隆你的vue项目，我是在<code>/opt/vue/</code>目录下： </p>\n<pre><code class=\"shell\">cd /opt/vue\ngit clone xxx\nnpm install\nnpm run build\n</code></pre>\n<p>找到<code>http</code>块中的<code>server</code>块。</p>\n<pre><code class=\"shell\">server &#123;\n        listen       80;  #监听端口\n        server_name  127.0.0.1; #监听地址    \n        location / &#123;\n            root   /opt/vue/dist; # 资源目录，我这里是vue构建后的目录\n            index  index.html index.htm; #首页文件设置\n            try_files $uri $uri/ /index.html; #vue-router history 路由设置\n        &#125;\n        # 以下是指定错误时展示的文件文件\n        #error_page  404              /404.html; \n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n</code></pre>\n<p><a href=\"https://www.runoob.com/w3cnote/nginx-setup-intro.html\">更多nginx配置参考</a></p>\n<h5 id=\"其中\"><a href=\"#其中\" class=\"headerlink\" title=\"其中\"></a>其中</h5><ul>\n<li><p>设置<code>localtion</code>块的<code>root</code>属性为你的vue构建后文件    </p>\n</li>\n<li><p>如果 vue 使用<code>history</code>路由，设置<code>try_files</code>为<code>$uri $uri/ /index.html</code>，用来告诉<code>nginx</code>前端路由交给前端的<code>index</code>文件去处理了，不用你处理了</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>CentOS 7.6 64位</li>\n<li><a href=\"mailto:&#x6e;&#x67;&#105;&#110;&#120;&#64;&#x31;&#x2e;&#x31;&#x39;&#x2e;&#x32;\">&#x6e;&#x67;&#105;&#110;&#120;&#64;&#x31;&#x2e;&#x31;&#x39;&#x2e;&#x32;</a></li>\n<li><a href=\"mailto:&#118;&#117;&#x65;&#45;&#x63;&#x6c;&#x69;&#x40;&#x34;&#x2e;&#53;&#46;&#x30;\">&#118;&#117;&#x65;&#45;&#x63;&#x6c;&#x69;&#x40;&#x34;&#x2e;&#53;&#46;&#x30;</a>  </li>\n</ul>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>连接服务器，进入要下载的目录，这里用的<code>/usr/local/src</code>，你也可以在<code>/opt</code>下，这两种算约定俗称的目录结构，便于统一管理。</p>\n<p>下载<code>nginx</code>，这是使用的是二进制包，你可以通过<code>yum</code>包管理安装。<br>我这里用的最新的<code>1.19.2</code>版本。<a href=\"http://nginx.org/en/download.html\">更多版本</a></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> -c https://nginx.org/download/nginx-1.19.2.tar.gz <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解压缩并进入<code>nginx</code>文件夹：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">tar</span> -zxvf nginx-1.19.2.tar.gz\n<span class=\"token punctuation\">..</span>.\n<span class=\"token builtin class-name\">cd</span> nginx-1.19.2\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n编译前环境监测：\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n./configure\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n如果没报错忽略这条。新服务器这里会报错，提示需要安装<span class=\"token variable\">`</span></span>g++<span class=\"token variable\"><span class=\"token variable\">`</span>，它是c++的编译器，有人做了相关的编译包整合，比一个一个自己装方便，我们这里直接安装整合包，安装完成后重新执行<span class=\"token variable\">`</span></span>./configure<span class=\"token variable\"><span class=\"token variable\">`</span>。  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\nyum groupinstall <span class=\"token string\">\"Development Tools\"</span>\n<span class=\"token punctuation\">..</span>.  \n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n编译并安装：\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>    \n启动它：  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token builtin class-name\">cd</span> /usr/local/nginx/sbin\n./nginx\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n更多常用命令：  \n\n<span class=\"token variable\">`</span></span>``shell\n./nginx -s stop // 停止\n./nginx -s reload // 重启<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>默认<code>nginx</code>在<code>80端口</code>运行，记得到服务器购买网站控制台开放一下公网<code>80端口</code>权限。   </p>\n<p>要想修改配置：  </p>\n<pre><code class=\"shell\">cd /usr/local/nginx/config\nvi ./nginx.config\n</code></pre>\n<h2 id=\"配置vue\"><a href=\"#配置vue\" class=\"headerlink\" title=\"配置vue\"></a>配置vue</h2><p>克隆你的vue项目，我是在<code>/opt/vue/</code>目录下： </p>\n<pre><code class=\"shell\">cd /opt/vue\ngit clone xxx\nnpm install\nnpm run build\n</code></pre>\n<p>找到<code>http</code>块中的<code>server</code>块。</p>\n<pre><code class=\"shell\">server &#123;\n        listen       80;  #监听端口\n        server_name  127.0.0.1; #监听地址    \n        location / &#123;\n            root   /opt/vue/dist; # 资源目录，我这里是vue构建后的目录\n            index  index.html index.htm; #首页文件设置\n            try_files $uri $uri/ /index.html; #vue-router history 路由设置\n        &#125;\n        # 以下是指定错误时展示的文件文件\n        #error_page  404              /404.html; \n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n</code></pre>\n<p><a href=\"https://www.runoob.com/w3cnote/nginx-setup-intro.html\">更多nginx配置参考</a></p>\n<h5 id=\"其中\"><a href=\"#其中\" class=\"headerlink\" title=\"其中\"></a>其中</h5><ul>\n<li><p>设置<code>localtion</code>块的<code>root</code>属性为你的vue构建后文件    </p>\n</li>\n<li><p>如果 vue 使用<code>history</code>路由，设置<code>try_files</code>为<code>$uri $uri/ /index.html</code>，用来告诉<code>nginx</code>前端路由交给前端的<code>index</code>文件去处理了，不用你处理了</p>\n</li>\n</ul>\n"},{"_content":"## 环境\n - vue@2.6.10\n - vue-cli@4.10  \n \n## UglifyJS Webpack Plugin  \n\n> 一个依赖[ Uglify.js ](https://github.com/mishoo/UglifyJS)来优化和压缩`javascript`代码的`webpack`插件，此插件要求的最小版本为`Node@6.9.0`和`Webpack@4.0.0`版本。  \n\n#### 安装  \n\n```shell\nnpm install --save-dev uglifyjs-webpack-plugin\n```  \n\n#### 使用  \n\n```javascript\n// vue.config.js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n\nmodule.exports = {\n\t...\n\tconfigureWebpack: config => {\n\t\tconfig.plugins.push(\n\t      new UglifyJsPlugin({\n\t        uglifyOptions: {\n\t          compress: { // 参Uglify.js参数\n\t            warnings: true, // 警示存在安全风险的代码\n\t            drop_debugger: true, // 是否过滤调试(debugger)代码\n\t            drop_console: true, // 是否过滤输出(console)代码\n\t          },\n\t        },\n\t        sourceMap: false, // 是否启用文件缓存\n\t        parallel: true  // 使用多进程并行运行来提高构建速度\n\t      })       \n\t \t)\n}\n```  \n\n[更多`compress`参数](http://lisperator.net/uglifyjs/compress)  \n\n[官方参数文档](https://www.html.cn/doc/webpack2/plugins/uglifyjs-webpack-plugin/)","source":"_drafts/last/docs/uglifyJs-webpack-plugin在vue中的使用.md","raw":"## 环境\n - vue@2.6.10\n - vue-cli@4.10  \n \n## UglifyJS Webpack Plugin  \n\n> 一个依赖[ Uglify.js ](https://github.com/mishoo/UglifyJS)来优化和压缩`javascript`代码的`webpack`插件，此插件要求的最小版本为`Node@6.9.0`和`Webpack@4.0.0`版本。  \n\n#### 安装  \n\n```shell\nnpm install --save-dev uglifyjs-webpack-plugin\n```  \n\n#### 使用  \n\n```javascript\n// vue.config.js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n\nmodule.exports = {\n\t...\n\tconfigureWebpack: config => {\n\t\tconfig.plugins.push(\n\t      new UglifyJsPlugin({\n\t        uglifyOptions: {\n\t          compress: { // 参Uglify.js参数\n\t            warnings: true, // 警示存在安全风险的代码\n\t            drop_debugger: true, // 是否过滤调试(debugger)代码\n\t            drop_console: true, // 是否过滤输出(console)代码\n\t          },\n\t        },\n\t        sourceMap: false, // 是否启用文件缓存\n\t        parallel: true  // 使用多进程并行运行来提高构建速度\n\t      })       \n\t \t)\n}\n```  \n\n[更多`compress`参数](http://lisperator.net/uglifyjs/compress)  \n\n[官方参数文档](https://www.html.cn/doc/webpack2/plugins/uglifyjs-webpack-plugin/)","slug":"last/docs/uglifyJs-webpack-plugin在vue中的使用","published":0,"date":"2021-10-22T09:38:36.423Z","updated":"2021-10-22T09:38:36.423Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer3001nh7vmck3hd6cg","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"mailto:&#x76;&#x75;&#x65;&#x40;&#x32;&#x2e;&#54;&#46;&#x31;&#48;\">&#x76;&#x75;&#x65;&#x40;&#x32;&#x2e;&#54;&#46;&#x31;&#48;</a></li>\n<li><a href=\"mailto:&#118;&#x75;&#101;&#45;&#99;&#108;&#x69;&#x40;&#52;&#46;&#49;&#48;\">&#118;&#x75;&#101;&#45;&#99;&#108;&#x69;&#x40;&#52;&#46;&#49;&#48;</a>  </li>\n</ul>\n<h2 id=\"UglifyJS-Webpack-Plugin\"><a href=\"#UglifyJS-Webpack-Plugin\" class=\"headerlink\" title=\"UglifyJS Webpack Plugin\"></a>UglifyJS Webpack Plugin</h2><blockquote>\n<p>一个依赖<a href=\"https://github.com/mishoo/UglifyJS\"> Uglify.js </a>来优化和压缩<code>javascript</code>代码的<code>webpack</code>插件，此插件要求的最小版本为<code>Node@6.9.0</code>和<code>Webpack@4.0.0</code>版本。  </p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code class=\"shell\">npm install --save-dev uglifyjs-webpack-plugin\n</code></pre>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre><code class=\"javascript\">// vue.config.js\nconst UglifyJsPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);\n\nmodule.exports = &#123;\n    ...\n    configureWebpack: config =&gt; &#123;\n        config.plugins.push(\n          new UglifyJsPlugin(&#123;\n            uglifyOptions: &#123;\n              compress: &#123; // 参Uglify.js参数\n                warnings: true, // 警示存在安全风险的代码\n                drop_debugger: true, // 是否过滤调试(debugger)代码\n                drop_console: true, // 是否过滤输出(console)代码\n              &#125;,\n            &#125;,\n            sourceMap: false, // 是否启用文件缓存\n            parallel: true  // 使用多进程并行运行来提高构建速度\n          &#125;)       \n         )\n&#125;\n</code></pre>\n<p><a href=\"http://lisperator.net/uglifyjs/compress\">更多<code>compress</code>参数</a>  </p>\n<p><a href=\"https://www.html.cn/doc/webpack2/plugins/uglifyjs-webpack-plugin/\">官方参数文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"mailto:&#x76;&#x75;&#x65;&#x40;&#x32;&#x2e;&#54;&#46;&#x31;&#48;\">&#x76;&#x75;&#x65;&#x40;&#x32;&#x2e;&#54;&#46;&#x31;&#48;</a></li>\n<li><a href=\"mailto:&#118;&#x75;&#101;&#45;&#99;&#108;&#x69;&#x40;&#52;&#46;&#49;&#48;\">&#118;&#x75;&#101;&#45;&#99;&#108;&#x69;&#x40;&#52;&#46;&#49;&#48;</a>  </li>\n</ul>\n<h2 id=\"UglifyJS-Webpack-Plugin\"><a href=\"#UglifyJS-Webpack-Plugin\" class=\"headerlink\" title=\"UglifyJS Webpack Plugin\"></a>UglifyJS Webpack Plugin</h2><blockquote>\n<p>一个依赖<a href=\"https://github.com/mishoo/UglifyJS\"> Uglify.js </a>来优化和压缩<code>javascript</code>代码的<code>webpack</code>插件，此插件要求的最小版本为<code>Node@6.9.0</code>和<code>Webpack@4.0.0</code>版本。  </p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code class=\"shell\">npm install --save-dev uglifyjs-webpack-plugin\n</code></pre>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre><code class=\"javascript\">// vue.config.js\nconst UglifyJsPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);\n\nmodule.exports = &#123;\n    ...\n    configureWebpack: config =&gt; &#123;\n        config.plugins.push(\n          new UglifyJsPlugin(&#123;\n            uglifyOptions: &#123;\n              compress: &#123; // 参Uglify.js参数\n                warnings: true, // 警示存在安全风险的代码\n                drop_debugger: true, // 是否过滤调试(debugger)代码\n                drop_console: true, // 是否过滤输出(console)代码\n              &#125;,\n            &#125;,\n            sourceMap: false, // 是否启用文件缓存\n            parallel: true  // 使用多进程并行运行来提高构建速度\n          &#125;)       \n         )\n&#125;\n</code></pre>\n<p><a href=\"http://lisperator.net/uglifyjs/compress\">更多<code>compress</code>参数</a>  </p>\n<p><a href=\"https://www.html.cn/doc/webpack2/plugins/uglifyjs-webpack-plugin/\">官方参数文档</a></p>\n"},{"_content":"## promise类\n\n```javascript\nclass Pro {\n  callbacks = [];\n  state = 'pending';\n  value = null;\n  constructor(fn) {\n      // 初始化，把resolve作为参数传入，等待调用\n      fn(this.resolve.bind(this)); \n  }\n  // callback为回调，先注册，也就是放入callbacks数组中\n  then(callback) {\n    if(this.state === 'pending'){\n      this.callbacks.push(callback);\n    }else{\n      // 由于state不是pending, 遵循promise状态只能改一次的要求，我们直接操作回调传入参数执行\n      callback(this.value)\n    }\n    return this;\n  }\n  // resolve也就是fn的第一次参数，循环执行所有callback\n  resolve(value) {\n    this.state = 'fulfilled';\n    // setTimeout使内部变成异步，在同步执行完最后执行这里，处理fn是同步的情况下then中的回调函数已经注册，然后在这里去执行，不会出现callbacks是空数组的情况\n    setTimeout(() => {\n      this.value= value;\n      this.callbacks.forEach(callback => callback(value));\n    });\n  }\n}\n```\n## 使用  \n\n```javascript\nnew Pro(resolve => {\n  setTimeout(() => {\n      console.log(0);\n      resolve('resolve');\n  }, 2000);\n}).then((tip) => {\n  console.log(1)\n  console.log(tip);\n}).then((tip)=>{\n  console.log(2)\n  console.log(tip)\n})\n```\n\n## promise.all 实现\n```javascript\nPromise.prototype.all = function(promises) {\n  let results = [];\n  let promiseCount = 0;\n  let promisesLength = promises.length;\n  return new Promise(function(resolve, reject) {\n    for (let item of promises) {\n      // 执行每个item\n      Promise.resolve(item).then(function(res) {\n        promiseCount++;\n        // 按照顺序插入结果\n        results[i] = res;\n        // 如果全部执行成功，返回成功\n        if (promiseCount === promisesLength) {\n          return resolve(results);\n        }\n      }, function(err) {\n        return reject(err);\n      });\n    }\n  });\n};\n```\n## promise.race 实现\n```javascript\nPromise.prototype.race = function(promises) {\n  return new Promise((resolve,reject) => {\n    for(let item of promises) {\n      Promise.resolve(item).then((res)=> {\n        return resolve(res)\n      }).catch((err)=> {\n        return reject(err)\n      })\n    }\n   })\n};\n```\n\n简单来说就是声明promise时，会执行promise第一个函数参数和then的参数函数。\nthen：用来把回调传入callback数组中，相当于注册，规定好了reslove时，回调的执行，然后等待resolve调用，resolve就会把callback数组中的函数全部执行\n - then中return this，用于实现then的链式调用\n - 如果promise的同步的，则执行resolve的时候callback还没注册\n","source":"_drafts/last/docs/promise简单实现.md","raw":"## promise类\n\n```javascript\nclass Pro {\n  callbacks = [];\n  state = 'pending';\n  value = null;\n  constructor(fn) {\n      // 初始化，把resolve作为参数传入，等待调用\n      fn(this.resolve.bind(this)); \n  }\n  // callback为回调，先注册，也就是放入callbacks数组中\n  then(callback) {\n    if(this.state === 'pending'){\n      this.callbacks.push(callback);\n    }else{\n      // 由于state不是pending, 遵循promise状态只能改一次的要求，我们直接操作回调传入参数执行\n      callback(this.value)\n    }\n    return this;\n  }\n  // resolve也就是fn的第一次参数，循环执行所有callback\n  resolve(value) {\n    this.state = 'fulfilled';\n    // setTimeout使内部变成异步，在同步执行完最后执行这里，处理fn是同步的情况下then中的回调函数已经注册，然后在这里去执行，不会出现callbacks是空数组的情况\n    setTimeout(() => {\n      this.value= value;\n      this.callbacks.forEach(callback => callback(value));\n    });\n  }\n}\n```\n## 使用  \n\n```javascript\nnew Pro(resolve => {\n  setTimeout(() => {\n      console.log(0);\n      resolve('resolve');\n  }, 2000);\n}).then((tip) => {\n  console.log(1)\n  console.log(tip);\n}).then((tip)=>{\n  console.log(2)\n  console.log(tip)\n})\n```\n\n## promise.all 实现\n```javascript\nPromise.prototype.all = function(promises) {\n  let results = [];\n  let promiseCount = 0;\n  let promisesLength = promises.length;\n  return new Promise(function(resolve, reject) {\n    for (let item of promises) {\n      // 执行每个item\n      Promise.resolve(item).then(function(res) {\n        promiseCount++;\n        // 按照顺序插入结果\n        results[i] = res;\n        // 如果全部执行成功，返回成功\n        if (promiseCount === promisesLength) {\n          return resolve(results);\n        }\n      }, function(err) {\n        return reject(err);\n      });\n    }\n  });\n};\n```\n## promise.race 实现\n```javascript\nPromise.prototype.race = function(promises) {\n  return new Promise((resolve,reject) => {\n    for(let item of promises) {\n      Promise.resolve(item).then((res)=> {\n        return resolve(res)\n      }).catch((err)=> {\n        return reject(err)\n      })\n    }\n   })\n};\n```\n\n简单来说就是声明promise时，会执行promise第一个函数参数和then的参数函数。\nthen：用来把回调传入callback数组中，相当于注册，规定好了reslove时，回调的执行，然后等待resolve调用，resolve就会把callback数组中的函数全部执行\n - then中return this，用于实现then的链式调用\n - 如果promise的同步的，则执行resolve的时候callback还没注册\n","slug":"last/docs/promise简单实现","published":0,"date":"2021-10-22T09:38:36.423Z","updated":"2021-10-22T09:38:36.423Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer4001ph7vm8pdh8mxy","content":"<h2 id=\"promise类\"><a href=\"#promise类\" class=\"headerlink\" title=\"promise类\"></a>promise类</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pro</span> <span class=\"token punctuation\">&#123;</span>\n  callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">;</span>\n  value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 初始化，把resolve作为参数传入，等待调用</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// callback为回调，先注册，也就是放入callbacks数组中</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 由于state不是pending, 遵循promise状态只能改一次的要求，我们直接操作回调传入参数执行</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// resolve也就是fn的第一次参数，循环执行所有callback</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setTimeout使内部变成异步，在同步执行完最后执行这里，处理fn是同步的情况下then中的回调函数已经注册，然后在这里去执行，不会出现callbacks是空数组的情况</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tip</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tip</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"promise-all-实现\"><a href=\"#promise-all-实现\" class=\"headerlink\" title=\"promise.all 实现\"></a>promise.all 实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promiseCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promisesLength <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 执行每个item</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        promiseCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 按照顺序插入结果</span>\n        results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果全部执行成功，返回成功</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promiseCount <span class=\"token operator\">===</span> promisesLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"promise-race-实现\"><a href=\"#promise-race-实现\" class=\"headerlink\" title=\"promise.race 实现\"></a>promise.race 实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">race</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>简单来说就是声明promise时，会执行promise第一个函数参数和then的参数函数。<br>then：用来把回调传入callback数组中，相当于注册，规定好了reslove时，回调的执行，然后等待resolve调用，resolve就会把callback数组中的函数全部执行</p>\n<ul>\n<li>then中return this，用于实现then的链式调用</li>\n<li>如果promise的同步的，则执行resolve的时候callback还没注册</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"promise类\"><a href=\"#promise类\" class=\"headerlink\" title=\"promise类\"></a>promise类</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pro</span> <span class=\"token punctuation\">&#123;</span>\n  callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">;</span>\n  value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 初始化，把resolve作为参数传入，等待调用</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// callback为回调，先注册，也就是放入callbacks数组中</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 由于state不是pending, 遵循promise状态只能改一次的要求，我们直接操作回调传入参数执行</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// resolve也就是fn的第一次参数，循环执行所有callback</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setTimeout使内部变成异步，在同步执行完最后执行这里，处理fn是同步的情况下then中的回调函数已经注册，然后在这里去执行，不会出现callbacks是空数组的情况</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tip</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tip</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"promise-all-实现\"><a href=\"#promise-all-实现\" class=\"headerlink\" title=\"promise.all 实现\"></a>promise.all 实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promiseCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> promisesLength <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 执行每个item</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        promiseCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 按照顺序插入结果</span>\n        results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果全部执行成功，返回成功</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promiseCount <span class=\"token operator\">===</span> promisesLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"promise-race-实现\"><a href=\"#promise-race-实现\" class=\"headerlink\" title=\"promise.race 实现\"></a>promise.race 实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">race</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>简单来说就是声明promise时，会执行promise第一个函数参数和then的参数函数。<br>then：用来把回调传入callback数组中，相当于注册，规定好了reslove时，回调的执行，然后等待resolve调用，resolve就会把callback数组中的函数全部执行</p>\n<ul>\n<li>then中return this，用于实现then的链式调用</li>\n<li>如果promise的同步的，则执行resolve的时候callback还没注册</li>\n</ul>\n"},{"_content":"## index.html \n`index.html`:  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <div id='app'>\n    <input type=\"text\" v-model='v'>\n    {{v}}\n    <button @click='reset'>重置</button>\n  </div>\n  <script src='./index.js'></script>\n  <script>\n    const vm = new Mvvm({\n      el: '#app',\n      data: {\n        v: 'hello world'\n      },\n      methods: {\n        reset() {\n          this.v = '';\n        }\n      }\n    })\n  </script>\n</body>\n</html>\n```    \n\n## index.js  \n\n```javascript\nclass Mvvm {\n  constructor(options) {\n    const {el, data, methods} = options;\n    this.methods = methods;\n    this.target = null;\n    // 监听this[data的key]所有属性，让变化可追踪\n    this.observe(this, data);\n    // dom解析：提取{{}}、v-model、事件重写：@click\n    this.compile(document.querySelector(el))\n  }\n  \n  // 数据变化监听\n  observe(_this, data) {\n    Object.keys(data).forEach((key)=> {\n      let val = data[key];\n      Object.keys(data).forEach((key)=> {\n        // 如果val是数组或者对象，使用递归实现深层监听，直到val为简单数据类型。从而保证所有属性变化都被监听\n        if(typeof val === 'object'){\n          return this.observe(_this, val)\n        }\n        // dispatcher用来操作订阅者(watcher) add 或者 update。要配合Object.defineProperty的get和set来使用\n        const dispatcher = new Dispatcher();\n        Object.defineProperty(_this, key, {\n          get: function() {\n            console.log('get');\n            // this.target会在compile方法中出现，把this.target(一个watcher)添加到dispatcher(将要更新的watcher的列表)中，用于未来更新这个watcher对应的dom\n            dispatcher.add(this.target);\n            return val\n          },\n          set: function(newV) {\n            // 值无变化，不处理\n            if(newV === val){return;}\n            console.log(`set`);\n            val = newV;\n            // 因为set了，值发生变化了，所以要通知get中添加的所有订阅者(watcher)：你们要把对应的dom中使用的值更新成newV\n            dispatcher.notify(newV);\n          }\n        })\n      })\n    })\n  }\n\n  // dom解析\n  compile(dom) {\n    const childs = dom.childNodes;\n    for (const node of childs) {\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 1) {\n        const attrs = node.attributes;\n        for(const attr of attrs) {\n          if(attr.name === 'v-model') {\n            const name = attr.value;\n            // 放到订阅者列表中\n            this.target = new Watcher(node, 'input');\n            // this[name]是为了触发observe的get，才会被监听\n            this[name];\n            // 由于是demo，假设只有input一种情况，input就会有双向绑定。使用this[name], 并且赋值input的值，来触发observe的get。实现更新信息的发布\n            node.addEventListener('input', (e) => {\n              this[name] = e.target.value;\n            });\n          }\n          // 使用bind传递this。并代理click事件函数到@click上。这里仅拿click事件实现，实际会有多种事件\n          if(attr.name === '@click') {\n            const name = attr.value;\n            node.addEventListener('click', this.methods[name].bind(this))\n          }\n        }\n      }\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 3){\n        // 正则匹配{{}}\n        const reg = /\\{\\{(.*)\\}\\}/;\n        const match = node.nodeValue.match(reg);\n        if(match) {\n          const name = match[1].trim();\n          // 放到订阅者列表中\n          this.target = new Watcher(node, 'text');\n          // this[name]是为了触发observe的get，才会被监听\n          this[name];\n        }\n      }\n    }\n  }\n}\n\n\n// 发布者\nclass Dispatcher {\n  constructor() {\n    this.watchers = [];\n  }\n  // 增加订阅者\n  add(watcher) {\n    this.watchers.push(watcher)\n  }\n  // 通知所有订阅者更新\n  notify(value){\n    this.watchers.forEach((item)=> {\n      item.update(value)\n    })\n  }\n}\n\n// 订阅者\nclass Watcher {\n  constructor(node, type) {\n    this.node = node;\n    this.type = type;\n  }\n  update(value) {\n    // 区别dom类型来赋值\n    if (this.type === 'input') {\n      this.node.value = value;\n    }\n    if (this.type === 'text') {\n      this.node.nodeValue = value;\n    }\n  }\n}\n```\n\nvue在初始化后，执行`Observe`函数把data利用`Object.defineProperty`属性监听。同时也会使用`Compile`函数循环`dom`，提取vue相关的关键字，v-bind或者v-model，找到这些值，新建一个`Watcher`实例，然后手动get使这些watch放入dep列表中等待订阅。等待调用`Observer`的`set`(input事件，或者手动赋值)，然后通知dep中所有`Watcher`调用`update`方法。","source":"_drafts/last/docs/vue原理mvvm简单实现.md","raw":"## index.html \n`index.html`:  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <div id='app'>\n    <input type=\"text\" v-model='v'>\n    {{v}}\n    <button @click='reset'>重置</button>\n  </div>\n  <script src='./index.js'></script>\n  <script>\n    const vm = new Mvvm({\n      el: '#app',\n      data: {\n        v: 'hello world'\n      },\n      methods: {\n        reset() {\n          this.v = '';\n        }\n      }\n    })\n  </script>\n</body>\n</html>\n```    \n\n## index.js  \n\n```javascript\nclass Mvvm {\n  constructor(options) {\n    const {el, data, methods} = options;\n    this.methods = methods;\n    this.target = null;\n    // 监听this[data的key]所有属性，让变化可追踪\n    this.observe(this, data);\n    // dom解析：提取{{}}、v-model、事件重写：@click\n    this.compile(document.querySelector(el))\n  }\n  \n  // 数据变化监听\n  observe(_this, data) {\n    Object.keys(data).forEach((key)=> {\n      let val = data[key];\n      Object.keys(data).forEach((key)=> {\n        // 如果val是数组或者对象，使用递归实现深层监听，直到val为简单数据类型。从而保证所有属性变化都被监听\n        if(typeof val === 'object'){\n          return this.observe(_this, val)\n        }\n        // dispatcher用来操作订阅者(watcher) add 或者 update。要配合Object.defineProperty的get和set来使用\n        const dispatcher = new Dispatcher();\n        Object.defineProperty(_this, key, {\n          get: function() {\n            console.log('get');\n            // this.target会在compile方法中出现，把this.target(一个watcher)添加到dispatcher(将要更新的watcher的列表)中，用于未来更新这个watcher对应的dom\n            dispatcher.add(this.target);\n            return val\n          },\n          set: function(newV) {\n            // 值无变化，不处理\n            if(newV === val){return;}\n            console.log(`set`);\n            val = newV;\n            // 因为set了，值发生变化了，所以要通知get中添加的所有订阅者(watcher)：你们要把对应的dom中使用的值更新成newV\n            dispatcher.notify(newV);\n          }\n        })\n      })\n    })\n  }\n\n  // dom解析\n  compile(dom) {\n    const childs = dom.childNodes;\n    for (const node of childs) {\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 1) {\n        const attrs = node.attributes;\n        for(const attr of attrs) {\n          if(attr.name === 'v-model') {\n            const name = attr.value;\n            // 放到订阅者列表中\n            this.target = new Watcher(node, 'input');\n            // this[name]是为了触发observe的get，才会被监听\n            this[name];\n            // 由于是demo，假设只有input一种情况，input就会有双向绑定。使用this[name], 并且赋值input的值，来触发observe的get。实现更新信息的发布\n            node.addEventListener('input', (e) => {\n              this[name] = e.target.value;\n            });\n          }\n          // 使用bind传递this。并代理click事件函数到@click上。这里仅拿click事件实现，实际会有多种事件\n          if(attr.name === '@click') {\n            const name = attr.value;\n            node.addEventListener('click', this.methods[name].bind(this))\n          }\n        }\n      }\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 3){\n        // 正则匹配{{}}\n        const reg = /\\{\\{(.*)\\}\\}/;\n        const match = node.nodeValue.match(reg);\n        if(match) {\n          const name = match[1].trim();\n          // 放到订阅者列表中\n          this.target = new Watcher(node, 'text');\n          // this[name]是为了触发observe的get，才会被监听\n          this[name];\n        }\n      }\n    }\n  }\n}\n\n\n// 发布者\nclass Dispatcher {\n  constructor() {\n    this.watchers = [];\n  }\n  // 增加订阅者\n  add(watcher) {\n    this.watchers.push(watcher)\n  }\n  // 通知所有订阅者更新\n  notify(value){\n    this.watchers.forEach((item)=> {\n      item.update(value)\n    })\n  }\n}\n\n// 订阅者\nclass Watcher {\n  constructor(node, type) {\n    this.node = node;\n    this.type = type;\n  }\n  update(value) {\n    // 区别dom类型来赋值\n    if (this.type === 'input') {\n      this.node.value = value;\n    }\n    if (this.type === 'text') {\n      this.node.nodeValue = value;\n    }\n  }\n}\n```\n\nvue在初始化后，执行`Observe`函数把data利用`Object.defineProperty`属性监听。同时也会使用`Compile`函数循环`dom`，提取vue相关的关键字，v-bind或者v-model，找到这些值，新建一个`Watcher`实例，然后手动get使这些watch放入dep列表中等待订阅。等待调用`Observer`的`set`(input事件，或者手动赋值)，然后通知dep中所有`Watcher`调用`update`方法。","slug":"last/docs/vue原理mvvm简单实现","published":0,"date":"2021-10-22T09:38:36.423Z","updated":"2021-10-22T09:38:36.424Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer5001qh7vm6oim2hyv","content":"<h2 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h2><p><code>index.html</code>:  </p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>app<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>v<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    &#123;&#123;v&#125;&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>reset<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>重置<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>./index.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mvvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        v<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n```    \n\n## index.js  \n\n```javascript\nclass Mvvm &#123;\n  constructor(options) &#123;\n    const &#123;el, data, methods&#125; = options;\n    this.methods = methods;\n    this.target = null;\n    // 监听this[data的key]所有属性，让变化可追踪\n    this.observe(this, data);\n    // dom解析：提取&#123;&#123;&#125;&#125;、v-model、事件重写：@click\n    this.compile(document.querySelector(el))\n  &#125;\n  \n  // 数据变化监听\n  observe(_this, data) &#123;\n    Object.keys(data).forEach((key)=> &#123;\n      let val = data[key];\n      Object.keys(data).forEach((key)=> &#123;\n        // 如果val是数组或者对象，使用递归实现深层监听，直到val为简单数据类型。从而保证所有属性变化都被监听\n        if(typeof val === 'object')&#123;\n          return this.observe(_this, val)\n        &#125;\n        // dispatcher用来操作订阅者(watcher) add 或者 update。要配合Object.defineProperty的get和set来使用\n        const dispatcher = new Dispatcher();\n        Object.defineProperty(_this, key, &#123;\n          get: function() &#123;\n            console.log('get');\n            // this.target会在compile方法中出现，把this.target(一个watcher)添加到dispatcher(将要更新的watcher的列表)中，用于未来更新这个watcher对应的dom\n            dispatcher.add(this.target);\n            return val\n          &#125;,\n          set: function(newV) &#123;\n            // 值无变化，不处理\n            if(newV === val)&#123;return;&#125;\n            console.log(`set`);\n            val = newV;\n            // 因为set了，值发生变化了，所以要通知get中添加的所有订阅者(watcher)：你们要把对应的dom中使用的值更新成newV\n            dispatcher.notify(newV);\n          &#125;\n        &#125;)\n      &#125;)\n    &#125;)\n  &#125;\n\n  // dom解析\n  compile(dom) &#123;\n    const childs = dom.childNodes;\n    for (const node of childs) &#123;\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 1) &#123;\n        const attrs = node.attributes;\n        for(const attr of attrs) &#123;\n          if(attr.name === 'v-model') &#123;\n            const name = attr.value;\n            // 放到订阅者列表中\n            this.target = new Watcher(node, 'input');\n            // this[name]是为了触发observe的get，才会被监听\n            this[name];\n            // 由于是demo，假设只有input一种情况，input就会有双向绑定。使用this[name], 并且赋值input的值，来触发observe的get。实现更新信息的发布\n            node.addEventListener('input', (e) => &#123;\n              this[name] = e.target.value;\n            &#125;);\n          &#125;\n          // 使用bind传递this。并代理click事件函数到@click上。这里仅拿click事件实现，实际会有多种事件\n          if(attr.name === '@click') &#123;\n            const name = attr.value;\n            node.addEventListener('click', this.methods[name].bind(this))\n          &#125;\n        &#125;\n      &#125;\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 3)&#123;\n        // 正则匹配&#123;&#123;&#125;&#125;\n        const reg = /\\&#123;\\&#123;(.*)\\&#125;\\&#125;/;\n        const match = node.nodeValue.match(reg);\n        if(match) &#123;\n          const name = match[1].trim();\n          // 放到订阅者列表中\n          this.target = new Watcher(node, 'text');\n          // this[name]是为了触发observe的get，才会被监听\n          this[name];\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n\n// 发布者\nclass Dispatcher &#123;\n  constructor() &#123;\n    this.watchers = [];\n  &#125;\n  // 增加订阅者\n  add(watcher) &#123;\n    this.watchers.push(watcher)\n  &#125;\n  // 通知所有订阅者更新\n  notify(value)&#123;\n    this.watchers.forEach((item)=> &#123;\n      item.update(value)\n    &#125;)\n  &#125;\n&#125;\n\n// 订阅者\nclass Watcher &#123;\n  constructor(node, type) &#123;\n    this.node = node;\n    this.type = type;\n  &#125;\n  update(value) &#123;\n    // 区别dom类型来赋值\n    if (this.type === 'input') &#123;\n      this.node.value = value;\n    &#125;\n    if (this.type === 'text') &#123;\n      this.node.nodeValue = value;\n    &#125;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>vue在初始化后，执行<code>Observe</code>函数把data利用<code>Object.defineProperty</code>属性监听。同时也会使用<code>Compile</code>函数循环<code>dom</code>，提取vue相关的关键字，v-bind或者v-model，找到这些值，新建一个<code>Watcher</code>实例，然后手动get使这些watch放入dep列表中等待订阅。等待调用<code>Observer</code>的<code>set</code>(input事件，或者手动赋值)，然后通知dep中所有<code>Watcher</code>调用<code>update</code>方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h2><p><code>index.html</code>:  </p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>app<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>v<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    &#123;&#123;v&#125;&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>reset<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>重置<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>./index.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mvvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        v<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n```    \n\n## index.js  \n\n```javascript\nclass Mvvm &#123;\n  constructor(options) &#123;\n    const &#123;el, data, methods&#125; = options;\n    this.methods = methods;\n    this.target = null;\n    // 监听this[data的key]所有属性，让变化可追踪\n    this.observe(this, data);\n    // dom解析：提取&#123;&#123;&#125;&#125;、v-model、事件重写：@click\n    this.compile(document.querySelector(el))\n  &#125;\n  \n  // 数据变化监听\n  observe(_this, data) &#123;\n    Object.keys(data).forEach((key)=> &#123;\n      let val = data[key];\n      Object.keys(data).forEach((key)=> &#123;\n        // 如果val是数组或者对象，使用递归实现深层监听，直到val为简单数据类型。从而保证所有属性变化都被监听\n        if(typeof val === 'object')&#123;\n          return this.observe(_this, val)\n        &#125;\n        // dispatcher用来操作订阅者(watcher) add 或者 update。要配合Object.defineProperty的get和set来使用\n        const dispatcher = new Dispatcher();\n        Object.defineProperty(_this, key, &#123;\n          get: function() &#123;\n            console.log('get');\n            // this.target会在compile方法中出现，把this.target(一个watcher)添加到dispatcher(将要更新的watcher的列表)中，用于未来更新这个watcher对应的dom\n            dispatcher.add(this.target);\n            return val\n          &#125;,\n          set: function(newV) &#123;\n            // 值无变化，不处理\n            if(newV === val)&#123;return;&#125;\n            console.log(`set`);\n            val = newV;\n            // 因为set了，值发生变化了，所以要通知get中添加的所有订阅者(watcher)：你们要把对应的dom中使用的值更新成newV\n            dispatcher.notify(newV);\n          &#125;\n        &#125;)\n      &#125;)\n    &#125;)\n  &#125;\n\n  // dom解析\n  compile(dom) &#123;\n    const childs = dom.childNodes;\n    for (const node of childs) &#123;\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 1) &#123;\n        const attrs = node.attributes;\n        for(const attr of attrs) &#123;\n          if(attr.name === 'v-model') &#123;\n            const name = attr.value;\n            // 放到订阅者列表中\n            this.target = new Watcher(node, 'input');\n            // this[name]是为了触发observe的get，才会被监听\n            this[name];\n            // 由于是demo，假设只有input一种情况，input就会有双向绑定。使用this[name], 并且赋值input的值，来触发observe的get。实现更新信息的发布\n            node.addEventListener('input', (e) => &#123;\n              this[name] = e.target.value;\n            &#125;);\n          &#125;\n          // 使用bind传递this。并代理click事件函数到@click上。这里仅拿click事件实现，实际会有多种事件\n          if(attr.name === '@click') &#123;\n            const name = attr.value;\n            node.addEventListener('click', this.methods[name].bind(this))\n          &#125;\n        &#125;\n      &#125;\n      // nodeType 参考 https://www.w3school.com.cn/jsref/prop_node_nodetype.asp\n      if(node.nodeType === 3)&#123;\n        // 正则匹配&#123;&#123;&#125;&#125;\n        const reg = /\\&#123;\\&#123;(.*)\\&#125;\\&#125;/;\n        const match = node.nodeValue.match(reg);\n        if(match) &#123;\n          const name = match[1].trim();\n          // 放到订阅者列表中\n          this.target = new Watcher(node, 'text');\n          // this[name]是为了触发observe的get，才会被监听\n          this[name];\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n\n// 发布者\nclass Dispatcher &#123;\n  constructor() &#123;\n    this.watchers = [];\n  &#125;\n  // 增加订阅者\n  add(watcher) &#123;\n    this.watchers.push(watcher)\n  &#125;\n  // 通知所有订阅者更新\n  notify(value)&#123;\n    this.watchers.forEach((item)=> &#123;\n      item.update(value)\n    &#125;)\n  &#125;\n&#125;\n\n// 订阅者\nclass Watcher &#123;\n  constructor(node, type) &#123;\n    this.node = node;\n    this.type = type;\n  &#125;\n  update(value) &#123;\n    // 区别dom类型来赋值\n    if (this.type === 'input') &#123;\n      this.node.value = value;\n    &#125;\n    if (this.type === 'text') &#123;\n      this.node.nodeValue = value;\n    &#125;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>vue在初始化后，执行<code>Observe</code>函数把data利用<code>Object.defineProperty</code>属性监听。同时也会使用<code>Compile</code>函数循环<code>dom</code>，提取vue相关的关键字，v-bind或者v-model，找到这些值，新建一个<code>Watcher</code>实例，然后手动get使这些watch放入dep列表中等待订阅。等待调用<code>Observer</code>的<code>set</code>(input事件，或者手动赋值)，然后通知dep中所有<code>Watcher</code>调用<code>update</code>方法。</p>\n"},{"_content":"## 环境\n - nginx@1.19.2\n - vue-cli@4.5.0  \n \n## vue实现gzip构建配置\n安装依赖，它的作用是提供带`Content-Encoding`编码的压缩资源。\n\n```shell\nnpm install compression-webpack-plugin --save-dev\n```  \n\nwebpack配置，由于`vue-cli@2`以后隐藏`webpack.config.js`，也就是webpack的构建配置。它在内部编写了基础配置。  \n[vue-cli 文档](https://cli.vuejs.org/zh/guide/)  \n\n如果您想修改，你需要在vue根目录创建`vue.config.js`文件，像css一样，会自动覆盖隐藏的基础配置。gizp配置如下:  \n[更多参数](https://www.webpackjs.com/plugins/compression-webpack-plugin/)\n\n```javascript\n// vue.config.js\nconst CompressionWebpackPlugin = require('compression-webpack-plugin'); \nconst isProduction = process.env.NODE_ENV === 'production'; // 环境判断\nconst productionGzipExtensions = ['js', 'css']; // 需要gzip的文件类型\n\nmodule.exports = {\n  configureWebpack: config => {\n    if (isProduction) { // 只有生产环境才压缩gzip\n      config.plugins.push(new CompressionWebpackPlugin({\n        // 压缩算法\n        algorithm: 'gzip', \n        // 资源匹配\n        test: new RegExp('\\\\.(' + productionGzipExtensions.join('|') + ')$'), \n        // 只有大于这个大小(byte)的资源才会被处理        \n        threshold: 10240, \n        // 只有压缩率比这个值小的资源才会被处理\n        minRatio: 0.8\n      }))\n    }\n  }\n}\n```  \n#### vue-cli 3.0以下配置\n> 需要注意的是需要安装1.x.x版本，2+版本的配置项`asset`更换成了`filename`。  \n> \n> 如果你要安装2+版本到`/build/webpack.prod.conf.js`中`new CompressionWebpackPlugin`的第一个参数从`asset`修改成`filename`。\n\n```javascript\n// 安装依赖\nnpm install compression-webpack-plugin@1.1.9 --save-dev\n\n// 进入/config/index.js, productionGzip参数改成true\nbuild: {\n\t...\n\tproductionGzip: true\n}\n\n// 更多参数配置在/build/webpack.prod.conf.js\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      ...\n    })\n  )\n}\n```  \n\n## nginx配置\n编辑nginx配置文件，我的在`/usr/local/nginx/conf/nginx.config`, 或使用`whereis nginx`查找, 得到地址找到 `conf/nginx.config`，打开配置文件，作用全局在`http块`中添加，作用单个服务在`server块`中添加。  \n\nnginx.config: \n\n```shell\ngzip  on; // on表示开启，off表示关闭；\n\n# 需要压缩的MIME类型\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n```  \n[参考更多参数](https://segmentfault.com/a/1190000012694104)  \n\n编辑保存后，重启nginx来更新配置:\n\n```shell\ncd /usr/local/nginx/sbin // 进入你的nginx下sbin目录\n\n./nginx -s reload // 重启\n```  \n\n## 结果\n重新构建vue并部署到nginx。\n打开浏览器控制台，network面板，右键表头。  \n\n\n勾选`Content-Encoding`  \n\n![WechatIMG2793.png](./img/configure-gzip-on-nginx-with-vue/vW36BFrLUA85bGe.png)    \n\n看到 `gzip` 即成功。\n\n![WechatIMG2794.png](./img/configure-gzip-on-nginx-with-vue/FS6bBWiJQIjuHTz.png)\n","source":"_drafts/last/docs/vue和nginx服务器配置gzip.md","raw":"## 环境\n - nginx@1.19.2\n - vue-cli@4.5.0  \n \n## vue实现gzip构建配置\n安装依赖，它的作用是提供带`Content-Encoding`编码的压缩资源。\n\n```shell\nnpm install compression-webpack-plugin --save-dev\n```  \n\nwebpack配置，由于`vue-cli@2`以后隐藏`webpack.config.js`，也就是webpack的构建配置。它在内部编写了基础配置。  \n[vue-cli 文档](https://cli.vuejs.org/zh/guide/)  \n\n如果您想修改，你需要在vue根目录创建`vue.config.js`文件，像css一样，会自动覆盖隐藏的基础配置。gizp配置如下:  \n[更多参数](https://www.webpackjs.com/plugins/compression-webpack-plugin/)\n\n```javascript\n// vue.config.js\nconst CompressionWebpackPlugin = require('compression-webpack-plugin'); \nconst isProduction = process.env.NODE_ENV === 'production'; // 环境判断\nconst productionGzipExtensions = ['js', 'css']; // 需要gzip的文件类型\n\nmodule.exports = {\n  configureWebpack: config => {\n    if (isProduction) { // 只有生产环境才压缩gzip\n      config.plugins.push(new CompressionWebpackPlugin({\n        // 压缩算法\n        algorithm: 'gzip', \n        // 资源匹配\n        test: new RegExp('\\\\.(' + productionGzipExtensions.join('|') + ')$'), \n        // 只有大于这个大小(byte)的资源才会被处理        \n        threshold: 10240, \n        // 只有压缩率比这个值小的资源才会被处理\n        minRatio: 0.8\n      }))\n    }\n  }\n}\n```  \n#### vue-cli 3.0以下配置\n> 需要注意的是需要安装1.x.x版本，2+版本的配置项`asset`更换成了`filename`。  \n> \n> 如果你要安装2+版本到`/build/webpack.prod.conf.js`中`new CompressionWebpackPlugin`的第一个参数从`asset`修改成`filename`。\n\n```javascript\n// 安装依赖\nnpm install compression-webpack-plugin@1.1.9 --save-dev\n\n// 进入/config/index.js, productionGzip参数改成true\nbuild: {\n\t...\n\tproductionGzip: true\n}\n\n// 更多参数配置在/build/webpack.prod.conf.js\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      ...\n    })\n  )\n}\n```  \n\n## nginx配置\n编辑nginx配置文件，我的在`/usr/local/nginx/conf/nginx.config`, 或使用`whereis nginx`查找, 得到地址找到 `conf/nginx.config`，打开配置文件，作用全局在`http块`中添加，作用单个服务在`server块`中添加。  \n\nnginx.config: \n\n```shell\ngzip  on; // on表示开启，off表示关闭；\n\n# 需要压缩的MIME类型\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n```  \n[参考更多参数](https://segmentfault.com/a/1190000012694104)  \n\n编辑保存后，重启nginx来更新配置:\n\n```shell\ncd /usr/local/nginx/sbin // 进入你的nginx下sbin目录\n\n./nginx -s reload // 重启\n```  \n\n## 结果\n重新构建vue并部署到nginx。\n打开浏览器控制台，network面板，右键表头。  \n\n\n勾选`Content-Encoding`  \n\n![WechatIMG2793.png](./img/configure-gzip-on-nginx-with-vue/vW36BFrLUA85bGe.png)    \n\n看到 `gzip` 即成功。\n\n![WechatIMG2794.png](./img/configure-gzip-on-nginx-with-vue/FS6bBWiJQIjuHTz.png)\n","slug":"last/docs/vue和nginx服务器配置gzip","published":0,"date":"2021-10-22T09:38:36.424Z","updated":"2021-10-22T09:38:36.424Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer5001rh7vm92je0mf4","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"mailto:&#110;&#x67;&#x69;&#110;&#120;&#64;&#x31;&#46;&#49;&#57;&#x2e;&#x32;\">&#110;&#x67;&#x69;&#110;&#120;&#64;&#x31;&#46;&#49;&#57;&#x2e;&#x32;</a></li>\n<li><a href=\"mailto:&#x76;&#117;&#x65;&#x2d;&#99;&#108;&#105;&#64;&#52;&#x2e;&#53;&#46;&#48;\">&#x76;&#117;&#x65;&#x2d;&#99;&#108;&#105;&#64;&#52;&#x2e;&#53;&#46;&#48;</a>  </li>\n</ul>\n<h2 id=\"vue实现gzip构建配置\"><a href=\"#vue实现gzip构建配置\" class=\"headerlink\" title=\"vue实现gzip构建配置\"></a>vue实现gzip构建配置</h2><p>安装依赖，它的作用是提供带<code>Content-Encoding</code>编码的压缩资源。</p>\n<pre><code class=\"shell\">npm install compression-webpack-plugin --save-dev\n</code></pre>\n<p>webpack配置，由于<code>vue-cli@2</code>以后隐藏<code>webpack.config.js</code>，也就是webpack的构建配置。它在内部编写了基础配置。<br><a href=\"https://cli.vuejs.org/zh/guide/\">vue-cli 文档</a>  </p>\n<p>如果您想修改，你需要在vue根目录创建<code>vue.config.js</code>文件，像css一样，会自动覆盖隐藏的基础配置。gizp配置如下:<br><a href=\"https://www.webpackjs.com/plugins/compression-webpack-plugin/\">更多参数</a></p>\n<pre><code class=\"javascript\">// vue.config.js\nconst CompressionWebpackPlugin = require(&#39;compression-webpack-plugin&#39;); \nconst isProduction = process.env.NODE_ENV === &#39;production&#39;; // 环境判断\nconst productionGzipExtensions = [&#39;js&#39;, &#39;css&#39;]; // 需要gzip的文件类型\n\nmodule.exports = &#123;\n  configureWebpack: config =&gt; &#123;\n    if (isProduction) &#123; // 只有生产环境才压缩gzip\n      config.plugins.push(new CompressionWebpackPlugin(&#123;\n        // 压缩算法\n        algorithm: &#39;gzip&#39;, \n        // 资源匹配\n        test: new RegExp(&#39;\\\\.(&#39; + productionGzipExtensions.join(&#39;|&#39;) + &#39;)$&#39;), \n        // 只有大于这个大小(byte)的资源才会被处理        \n        threshold: 10240, \n        // 只有压缩率比这个值小的资源才会被处理\n        minRatio: 0.8\n      &#125;))\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h4 id=\"vue-cli-3-0以下配置\"><a href=\"#vue-cli-3-0以下配置\" class=\"headerlink\" title=\"vue-cli 3.0以下配置\"></a>vue-cli 3.0以下配置</h4><blockquote>\n<p>需要注意的是需要安装1.x.x版本，2+版本的配置项<code>asset</code>更换成了<code>filename</code>。  </p>\n<p>如果你要安装2+版本到<code>/build/webpack.prod.conf.js</code>中<code>new CompressionWebpackPlugin</code>的第一个参数从<code>asset</code>修改成<code>filename</code>。</p>\n</blockquote>\n<pre><code class=\"javascript\">// 安装依赖\nnpm install compression-webpack-plugin@1.1.9 --save-dev\n\n// 进入/config/index.js, productionGzip参数改成true\nbuild: &#123;\n    ...\n    productionGzip: true\n&#125;\n\n// 更多参数配置在/build/webpack.prod.conf.js\nif (config.build.productionGzip) &#123;\n  const CompressionWebpackPlugin = require(&#39;compression-webpack-plugin&#39;)\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin(&#123;\n      ...\n    &#125;)\n  )\n&#125;\n</code></pre>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>编辑nginx配置文件，我的在<code>/usr/local/nginx/conf/nginx.config</code>, 或使用<code>whereis nginx</code>查找, 得到地址找到 <code>conf/nginx.config</code>，打开配置文件，作用全局在<code>http块</code>中添加，作用单个服务在<code>server块</code>中添加。  </p>\n<p>nginx.config: </p>\n<pre><code class=\"shell\">gzip  on; // on表示开启，off表示关闭；\n\n# 需要压缩的MIME类型\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n</code></pre>\n<p><a href=\"https://segmentfault.com/a/1190000012694104\">参考更多参数</a>  </p>\n<p>编辑保存后，重启nginx来更新配置:</p>\n<pre><code class=\"shell\">cd /usr/local/nginx/sbin // 进入你的nginx下sbin目录\n\n./nginx -s reload // 重启\n</code></pre>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>重新构建vue并部署到nginx。<br>打开浏览器控制台，network面板，右键表头。  </p>\n<p>勾选<code>Content-Encoding</code>  </p>\n<p><img src=\"/2021/10/22/last/docs/vue%E5%92%8Cnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEgzip/configure-gzip-on-nginx-with-vue/vW36BFrLUA85bGe.png\" alt=\"WechatIMG2793.png\">    </p>\n<p>看到 <code>gzip</code> 即成功。</p>\n<p><img src=\"/2021/10/22/last/docs/vue%E5%92%8Cnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEgzip/configure-gzip-on-nginx-with-vue/FS6bBWiJQIjuHTz.png\" alt=\"WechatIMG2794.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"mailto:&#110;&#x67;&#x69;&#110;&#120;&#64;&#x31;&#46;&#49;&#57;&#x2e;&#x32;\">&#110;&#x67;&#x69;&#110;&#120;&#64;&#x31;&#46;&#49;&#57;&#x2e;&#x32;</a></li>\n<li><a href=\"mailto:&#x76;&#117;&#x65;&#x2d;&#99;&#108;&#105;&#64;&#52;&#x2e;&#53;&#46;&#48;\">&#x76;&#117;&#x65;&#x2d;&#99;&#108;&#105;&#64;&#52;&#x2e;&#53;&#46;&#48;</a>  </li>\n</ul>\n<h2 id=\"vue实现gzip构建配置\"><a href=\"#vue实现gzip构建配置\" class=\"headerlink\" title=\"vue实现gzip构建配置\"></a>vue实现gzip构建配置</h2><p>安装依赖，它的作用是提供带<code>Content-Encoding</code>编码的压缩资源。</p>\n<pre><code class=\"shell\">npm install compression-webpack-plugin --save-dev\n</code></pre>\n<p>webpack配置，由于<code>vue-cli@2</code>以后隐藏<code>webpack.config.js</code>，也就是webpack的构建配置。它在内部编写了基础配置。<br><a href=\"https://cli.vuejs.org/zh/guide/\">vue-cli 文档</a>  </p>\n<p>如果您想修改，你需要在vue根目录创建<code>vue.config.js</code>文件，像css一样，会自动覆盖隐藏的基础配置。gizp配置如下:<br><a href=\"https://www.webpackjs.com/plugins/compression-webpack-plugin/\">更多参数</a></p>\n<pre><code class=\"javascript\">// vue.config.js\nconst CompressionWebpackPlugin = require(&#39;compression-webpack-plugin&#39;); \nconst isProduction = process.env.NODE_ENV === &#39;production&#39;; // 环境判断\nconst productionGzipExtensions = [&#39;js&#39;, &#39;css&#39;]; // 需要gzip的文件类型\n\nmodule.exports = &#123;\n  configureWebpack: config =&gt; &#123;\n    if (isProduction) &#123; // 只有生产环境才压缩gzip\n      config.plugins.push(new CompressionWebpackPlugin(&#123;\n        // 压缩算法\n        algorithm: &#39;gzip&#39;, \n        // 资源匹配\n        test: new RegExp(&#39;\\\\.(&#39; + productionGzipExtensions.join(&#39;|&#39;) + &#39;)$&#39;), \n        // 只有大于这个大小(byte)的资源才会被处理        \n        threshold: 10240, \n        // 只有压缩率比这个值小的资源才会被处理\n        minRatio: 0.8\n      &#125;))\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h4 id=\"vue-cli-3-0以下配置\"><a href=\"#vue-cli-3-0以下配置\" class=\"headerlink\" title=\"vue-cli 3.0以下配置\"></a>vue-cli 3.0以下配置</h4><blockquote>\n<p>需要注意的是需要安装1.x.x版本，2+版本的配置项<code>asset</code>更换成了<code>filename</code>。  </p>\n<p>如果你要安装2+版本到<code>/build/webpack.prod.conf.js</code>中<code>new CompressionWebpackPlugin</code>的第一个参数从<code>asset</code>修改成<code>filename</code>。</p>\n</blockquote>\n<pre><code class=\"javascript\">// 安装依赖\nnpm install compression-webpack-plugin@1.1.9 --save-dev\n\n// 进入/config/index.js, productionGzip参数改成true\nbuild: &#123;\n    ...\n    productionGzip: true\n&#125;\n\n// 更多参数配置在/build/webpack.prod.conf.js\nif (config.build.productionGzip) &#123;\n  const CompressionWebpackPlugin = require(&#39;compression-webpack-plugin&#39;)\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin(&#123;\n      ...\n    &#125;)\n  )\n&#125;\n</code></pre>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><p>编辑nginx配置文件，我的在<code>/usr/local/nginx/conf/nginx.config</code>, 或使用<code>whereis nginx</code>查找, 得到地址找到 <code>conf/nginx.config</code>，打开配置文件，作用全局在<code>http块</code>中添加，作用单个服务在<code>server块</code>中添加。  </p>\n<p>nginx.config: </p>\n<pre><code class=\"shell\">gzip  on; // on表示开启，off表示关闭；\n\n# 需要压缩的MIME类型\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n</code></pre>\n<p><a href=\"https://segmentfault.com/a/1190000012694104\">参考更多参数</a>  </p>\n<p>编辑保存后，重启nginx来更新配置:</p>\n<pre><code class=\"shell\">cd /usr/local/nginx/sbin // 进入你的nginx下sbin目录\n\n./nginx -s reload // 重启\n</code></pre>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>重新构建vue并部署到nginx。<br>打开浏览器控制台，network面板，右键表头。  </p>\n<p>勾选<code>Content-Encoding</code>  </p>\n<p><img src=\"/2021/10/22/last/docs/vue%E5%92%8Cnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEgzip/configure-gzip-on-nginx-with-vue/vW36BFrLUA85bGe.png\" alt=\"WechatIMG2793.png\">    </p>\n<p>看到 <code>gzip</code> 即成功。</p>\n<p><img src=\"/2021/10/22/last/docs/vue%E5%92%8Cnginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEgzip/configure-gzip-on-nginx-with-vue/FS6bBWiJQIjuHTz.png\" alt=\"WechatIMG2794.png\"></p>\n"},{"_content":"## 前言\n**webpack** 是我经常用到的工具，并且 **webpack** 也逐渐成为主流前端构建工具，所以我觉得有必要透彻理解它，由于配置实现的写法有很多种，让人很头疼，一直没有仔细研究一下他的原理和实现方式。通过这篇文章，全面了解 **webpack**。  \n\n## webpack简介\n>**webpack** 是一个开源的前端模块构建工具，由德国开发者 *Tobias Koppers* 在2012年首发并开源。  \n\n由于近年来前端技术发展迅猛，越来越重视用户的操作体验，现在早已经不是那个 html、css、jQuery 一把梭的年代了。  \n越来越多的新思想、新框架孕育而生。这导致前端越来越重，需要 **引入依赖**、**高级语法降级解析**，**Css预编译**，**使用更为严格的**`TypeScript`**避免问题**， **使用现代 mvvm 框架**`Vue`，`React`**快捷开发**。最后 **构建** 成浏览器 **可识别** 的`.css` `.js`等基本文件再部署到生产环境，这其中构建一步就是`webpack`做的事情。 \n\n![WechatIMG2925.png](./img/how-to-use-webpack/EOzt1WTKBaXkgIr.png)\n\n## webpack基础使用\n> 全局已安装 webpack@4.44.2 和 nodejs@10.13.0  \n\n主要是两个配置：\n\n- **entry**：构建入口, `webpack`会从指定文件开始识别依赖模块关系并开始构建。`webpack4`中默认入口在`/src/index.js`。\n- **output**：构建出口，告诉`webpack`，构建完的文件放在哪里，叫什么名字，`webpack4`中默认出口在`/dist/main.js`。\n\n先来演示一下webpack最基本的操作。\n新建文件夹，初始化项目`npm init` ，一路回车，生成`package.json`，在这个目录新建两个文件，`main.js`，`chunk.js` ，内容如下：  \n\nmain.js   \n\n```shell\nconst chunk = require('./chunk.js');\nconsole.log(chunk);\n```  \nchunk.js\n\n```shell\nmodule.exports = 'I am chunk.js';\n```  \n创建好之后在项目下安装webpack：\n\n```shell\nnpm install --save-dev webpack webpack-cli\n```  \n执行第一个命令，`webpack 构建入口 --output 构建出口`： \n\n```shell\n$ webpack ./main.js --output ./dist.js\n...\n...\nHash: 8cc82b2736e97001d58e\nVersion: webpack 4.44.2\nTime: 269ms\nBuilt at: 2020-09-24 16:46:34\n  Asset        Size  Chunks             Chunk Names\ndist.js  1000 bytes       0  [emitted]  main\nEntrypoint main = dist.js\n[0] ./main.js 56 bytes {0} [built]\n[1] ./chunk.js 32 bytes {0} [built]\n```   \n上命令是把`main.js`使用`webpack`打包生成`dist.js`，由于`main.js`中引入`chunk.js`，所以`dist.js`是`main.js`和`chunk.js`的整合。  \n\n可以看到`webpack`输出一些打包信息后，并成功在`./`下创建`dist.js`，看看效果，创建一个`index.html`，并引入`dist.js`\n\n当前目录结构:  \n\n```shell\n.\n├── chunk.js \n├── index.html\n├── main.js \n├── package.json \n```  \n\n打开`index.html`控制台面板可以看到向屏幕输出了「 I am chunk.js 」，看到这里，其实就可以理解`webpack`的作用了。都是在这个基础上，**变形转换**，**以及打包过程中增加一些处理**。这次简单演示使用终端打包，实际开发需要设置相当多的参数，命令不方便处理，会创建一个`webpack.conf.js`，专门来编写配置。  \n## webpack4的改变  \n\n - 速度相比3更快了(提升至少50%，没测过)\n - 默认配置出入口(就是网上说的0配置)\n - 增加了环境配置\n  \n#### 默认配置出入口\n> 这里需要说明一下，在webpack4中实现了默认配置，去除了老版本繁琐的配置，webpack真正的本领是构建，webpack官方也注意到了这一点，这是一个非常明智的改变。  \n\n版本3中需要用`entry`和`output`来指定构建入口和出口，在版本4中有默认配置。  \n\n - 默认入口在`/src/index.js`\n - 默认出口在`/dist/main.js`\n\n如果你想修改，可以在`package.json`修改script，例：  \n\n```shell\nwebpack ./entry/js/index.js --output ./output/js/main.js\n```  \n\n`webpack.conf.js`：  \n\n```javascript \nconst path = require('path')\n\n// 引入path为了实现相对路径转换成绝对路径：\npath.join(__dirname, '路径')\n\nmodule.exports = {\n  // entry为开始构建的文件入口\n  entry: path.join(__dirname, '/src/index.js'),\n  // output为构建后的文件出口，其中path为出口文件的路径，filename为出口文件名\n  output: {\n    path: path.join(__dirname, '/dist'),\n    filename: 'bundle.js'\n  }\n}\n```  \n#### 增加了环境配置\n4以前版本配置不同环境，根据`nodejs`环境变量需要编写两套配置：开发环境中配置`live reloading` 和`webpack-dev-server`；生产环境配置`sourceMap`和`uglifyJSPlugin`美化压缩代码。在4版本中只需要在`package.json`的中`script` 增加`--mode`参数指定环境，并自动处理上面不同环境区别：\n\npackage.json：  \n\n```json\n\"scripts\": {\n  \"dev\": \"webpack --mode development\",\n  \"build\": \"webpack --mode production \"\n}\n```\n## webpack进阶使用\n主要是两个配置：\n\n- **loader**：`webpack`本身只能处理`.js`文件，安装不同的`loader`使其具备处理其他文件的能力，比如`.css`，`.scss`，`.vue`，`.jsx`，`.jade`。\n\n- **plugins**：用于处理打包过程中一些更复杂的处理，比如`htmlwebpackplugin`自动生成`index.html`并引入构建文件，`uglifyJSPlugin`美化压缩代码。  \n\n#### Loader  \n在`/css/index.css`中创建`css`文件，并在`/src/index.js`引入，`css`经过`webpack`构建后会自动作用在`index.html`上。\n\n`/src/index.css `： \n\n```css\nh1{\n  color:red;\n}\n```    \n`/src/index.js`：\n\n```javascript\nimport indexCss from './index.css'; // 或者 import './index.css';\n\nconst chunk = require('../chunk.js');\nconsole.log(chunk);\n```    \n执行`webpack`，可以看到报错了：\n\n```shell  \nERROR in ./src/index.css 1:4\nModule parse failed: Unexpected token (1:4)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> html{\n|   color:red;\n| }\n @ ./src/index.js 1:0-34\n```\n你需要安装对应`loader`去处理这个`css`文件，安装`style-loader`和`css-loader`： \n\n - **css-loader**：`webpack`默认只能处理`.js`和`.json`文件类型，这个包会使`webpack`具备处理`.css`的能力  \n - **style-loader**：`style-loader`会把`css-loader`构建好的`css`作为`<style>`标签插入到`html`中。\n\n安装他们：  \n\n```shell\nnpm install style-loader css-loader --save-dev\n```  \n\n配置他们：  \n> 需要注意：loader 的执行顺序是从后往前执行，本例先执行 css-loader 返回内容再交给 style-loader 执行。链式调用，一环套一环，每个 loader 负责单一指责，方便扩展。\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{ \n      test: /\\.css$/, \n      use: [\n        { \n          loader: \"style-loader\",\n          options: {\n            // options\n          }\n        },\n        { \n          loader: \"css-loader\" ,\n          options: {\n            // options\n          }\n        }\n      ]\n    }]\n  }\n}\n```  \n - **test**：匹配 loaders 所处理文件的拓展名的正则表达式（必填）\n - **loader**：loader 的名称（必填）\n - **include/exclude**：需要处理的文件夹或屏蔽不需要处理的文件夹（选填）；\n - **options**：为 loaders 提供额外的设置选项（选填）\n\n详细options：  \n[style-loader](https://developer.aliyun.com/mirror/npm/package/style-loader)  \n[css-loader](https://developer.aliyun.com/mirror/npm/package/css-loader)\n\n重新构建：  \n\n```shell\n➜  webpack-demo webpack\nHash: c741b4496ab2094ee570\nVersion: webpack 4.44.2\nTime: 270ms\nBuilt at: 2020-09-30 17:22:42\n  Asset     Size  Chunks             Chunk Names\nmain.js  4.7 KiB       0  [emitted]  main\nEntrypoint main = main.js\n[1] ./src/index.js 79 bytes {0} [built]\n[2] ./src/index.css 529 bytes {0} [built]\n[4] ./node_modules/css-loader/dist/cjs.js??ref--4-1!./src/index.css 301 bytes {0} [built]\n[5] ./chunk.js 32 bytes {0} [built]\n    + 2 hidden modules\n```\n构建成功了，  \n修改`index.html`引入构建后的文件，并打开，可以看到一个红色标题，loader配置生效了  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <h1>标题</h1>\n  <script src='./dist/main.js'></script>\n</body>\n</html>\n```\n### Plugin\n使用`html-webpack-plugin`和`clean-webpack-plugin`举例：  \n\n - **html-webpack-plugin**：构建时，在output目录下创建一个index.html文件，并把构建后的文件插入到html中。\n - **clean-webpack-plugin**：每次打包前自动清空output文件夹。  \n\n#### html-webpack-plugin\n安装：  \n\n```shell\nnpm install html-webpack-plugin --save-dev\n```\n`webpack.config.js`配置：  \n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  module: {\n    //...\n  },\n  plugins: [\n    new HtmlWebpackPlugin()\n  ]\n}\n```\n[html-webpack-plugin更多参数](https://developer.aliyun.com/mirror/npm/package/html-webpack-plugin)\n\n#### clean-webpack-plugin\n安装： \n\n```shell\nnpm install clean-webpack-plugin --save-dev \n```  \n\n`webpack.config.js`配置：   \n\n```javascript\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    //...\n  },\n  plugins: [\n    new CleanWebpackPlugin(['dist'])\n  ]\n}\n```\n[clean-webpack-plugin更多参数](https://developer.aliyun.com/mirror/npm/package/clean-webpack-plugin) \n\n复杂的`plugins`配置：  \n\n```javascript\nplugins: [  \n\t new HtmlWebpackPlugin(),\n     new CleanWebpackPlugin(['dist'])\n]\n```\n`plugins`为一个数组，每一项都是一个插件，插件的配置都是作为参数传入，有数组也有对象类型，`plugin`不像`loader`有很明确的顺序，它类似事件绑定，按需执行。","source":"_drafts/last/docs/webpack使用指南.md","raw":"## 前言\n**webpack** 是我经常用到的工具，并且 **webpack** 也逐渐成为主流前端构建工具，所以我觉得有必要透彻理解它，由于配置实现的写法有很多种，让人很头疼，一直没有仔细研究一下他的原理和实现方式。通过这篇文章，全面了解 **webpack**。  \n\n## webpack简介\n>**webpack** 是一个开源的前端模块构建工具，由德国开发者 *Tobias Koppers* 在2012年首发并开源。  \n\n由于近年来前端技术发展迅猛，越来越重视用户的操作体验，现在早已经不是那个 html、css、jQuery 一把梭的年代了。  \n越来越多的新思想、新框架孕育而生。这导致前端越来越重，需要 **引入依赖**、**高级语法降级解析**，**Css预编译**，**使用更为严格的**`TypeScript`**避免问题**， **使用现代 mvvm 框架**`Vue`，`React`**快捷开发**。最后 **构建** 成浏览器 **可识别** 的`.css` `.js`等基本文件再部署到生产环境，这其中构建一步就是`webpack`做的事情。 \n\n![WechatIMG2925.png](./img/how-to-use-webpack/EOzt1WTKBaXkgIr.png)\n\n## webpack基础使用\n> 全局已安装 webpack@4.44.2 和 nodejs@10.13.0  \n\n主要是两个配置：\n\n- **entry**：构建入口, `webpack`会从指定文件开始识别依赖模块关系并开始构建。`webpack4`中默认入口在`/src/index.js`。\n- **output**：构建出口，告诉`webpack`，构建完的文件放在哪里，叫什么名字，`webpack4`中默认出口在`/dist/main.js`。\n\n先来演示一下webpack最基本的操作。\n新建文件夹，初始化项目`npm init` ，一路回车，生成`package.json`，在这个目录新建两个文件，`main.js`，`chunk.js` ，内容如下：  \n\nmain.js   \n\n```shell\nconst chunk = require('./chunk.js');\nconsole.log(chunk);\n```  \nchunk.js\n\n```shell\nmodule.exports = 'I am chunk.js';\n```  \n创建好之后在项目下安装webpack：\n\n```shell\nnpm install --save-dev webpack webpack-cli\n```  \n执行第一个命令，`webpack 构建入口 --output 构建出口`： \n\n```shell\n$ webpack ./main.js --output ./dist.js\n...\n...\nHash: 8cc82b2736e97001d58e\nVersion: webpack 4.44.2\nTime: 269ms\nBuilt at: 2020-09-24 16:46:34\n  Asset        Size  Chunks             Chunk Names\ndist.js  1000 bytes       0  [emitted]  main\nEntrypoint main = dist.js\n[0] ./main.js 56 bytes {0} [built]\n[1] ./chunk.js 32 bytes {0} [built]\n```   \n上命令是把`main.js`使用`webpack`打包生成`dist.js`，由于`main.js`中引入`chunk.js`，所以`dist.js`是`main.js`和`chunk.js`的整合。  \n\n可以看到`webpack`输出一些打包信息后，并成功在`./`下创建`dist.js`，看看效果，创建一个`index.html`，并引入`dist.js`\n\n当前目录结构:  \n\n```shell\n.\n├── chunk.js \n├── index.html\n├── main.js \n├── package.json \n```  \n\n打开`index.html`控制台面板可以看到向屏幕输出了「 I am chunk.js 」，看到这里，其实就可以理解`webpack`的作用了。都是在这个基础上，**变形转换**，**以及打包过程中增加一些处理**。这次简单演示使用终端打包，实际开发需要设置相当多的参数，命令不方便处理，会创建一个`webpack.conf.js`，专门来编写配置。  \n## webpack4的改变  \n\n - 速度相比3更快了(提升至少50%，没测过)\n - 默认配置出入口(就是网上说的0配置)\n - 增加了环境配置\n  \n#### 默认配置出入口\n> 这里需要说明一下，在webpack4中实现了默认配置，去除了老版本繁琐的配置，webpack真正的本领是构建，webpack官方也注意到了这一点，这是一个非常明智的改变。  \n\n版本3中需要用`entry`和`output`来指定构建入口和出口，在版本4中有默认配置。  \n\n - 默认入口在`/src/index.js`\n - 默认出口在`/dist/main.js`\n\n如果你想修改，可以在`package.json`修改script，例：  \n\n```shell\nwebpack ./entry/js/index.js --output ./output/js/main.js\n```  \n\n`webpack.conf.js`：  \n\n```javascript \nconst path = require('path')\n\n// 引入path为了实现相对路径转换成绝对路径：\npath.join(__dirname, '路径')\n\nmodule.exports = {\n  // entry为开始构建的文件入口\n  entry: path.join(__dirname, '/src/index.js'),\n  // output为构建后的文件出口，其中path为出口文件的路径，filename为出口文件名\n  output: {\n    path: path.join(__dirname, '/dist'),\n    filename: 'bundle.js'\n  }\n}\n```  \n#### 增加了环境配置\n4以前版本配置不同环境，根据`nodejs`环境变量需要编写两套配置：开发环境中配置`live reloading` 和`webpack-dev-server`；生产环境配置`sourceMap`和`uglifyJSPlugin`美化压缩代码。在4版本中只需要在`package.json`的中`script` 增加`--mode`参数指定环境，并自动处理上面不同环境区别：\n\npackage.json：  \n\n```json\n\"scripts\": {\n  \"dev\": \"webpack --mode development\",\n  \"build\": \"webpack --mode production \"\n}\n```\n## webpack进阶使用\n主要是两个配置：\n\n- **loader**：`webpack`本身只能处理`.js`文件，安装不同的`loader`使其具备处理其他文件的能力，比如`.css`，`.scss`，`.vue`，`.jsx`，`.jade`。\n\n- **plugins**：用于处理打包过程中一些更复杂的处理，比如`htmlwebpackplugin`自动生成`index.html`并引入构建文件，`uglifyJSPlugin`美化压缩代码。  \n\n#### Loader  \n在`/css/index.css`中创建`css`文件，并在`/src/index.js`引入，`css`经过`webpack`构建后会自动作用在`index.html`上。\n\n`/src/index.css `： \n\n```css\nh1{\n  color:red;\n}\n```    \n`/src/index.js`：\n\n```javascript\nimport indexCss from './index.css'; // 或者 import './index.css';\n\nconst chunk = require('../chunk.js');\nconsole.log(chunk);\n```    \n执行`webpack`，可以看到报错了：\n\n```shell  \nERROR in ./src/index.css 1:4\nModule parse failed: Unexpected token (1:4)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> html{\n|   color:red;\n| }\n @ ./src/index.js 1:0-34\n```\n你需要安装对应`loader`去处理这个`css`文件，安装`style-loader`和`css-loader`： \n\n - **css-loader**：`webpack`默认只能处理`.js`和`.json`文件类型，这个包会使`webpack`具备处理`.css`的能力  \n - **style-loader**：`style-loader`会把`css-loader`构建好的`css`作为`<style>`标签插入到`html`中。\n\n安装他们：  \n\n```shell\nnpm install style-loader css-loader --save-dev\n```  \n\n配置他们：  \n> 需要注意：loader 的执行顺序是从后往前执行，本例先执行 css-loader 返回内容再交给 style-loader 执行。链式调用，一环套一环，每个 loader 负责单一指责，方便扩展。\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{ \n      test: /\\.css$/, \n      use: [\n        { \n          loader: \"style-loader\",\n          options: {\n            // options\n          }\n        },\n        { \n          loader: \"css-loader\" ,\n          options: {\n            // options\n          }\n        }\n      ]\n    }]\n  }\n}\n```  \n - **test**：匹配 loaders 所处理文件的拓展名的正则表达式（必填）\n - **loader**：loader 的名称（必填）\n - **include/exclude**：需要处理的文件夹或屏蔽不需要处理的文件夹（选填）；\n - **options**：为 loaders 提供额外的设置选项（选填）\n\n详细options：  \n[style-loader](https://developer.aliyun.com/mirror/npm/package/style-loader)  \n[css-loader](https://developer.aliyun.com/mirror/npm/package/css-loader)\n\n重新构建：  \n\n```shell\n➜  webpack-demo webpack\nHash: c741b4496ab2094ee570\nVersion: webpack 4.44.2\nTime: 270ms\nBuilt at: 2020-09-30 17:22:42\n  Asset     Size  Chunks             Chunk Names\nmain.js  4.7 KiB       0  [emitted]  main\nEntrypoint main = main.js\n[1] ./src/index.js 79 bytes {0} [built]\n[2] ./src/index.css 529 bytes {0} [built]\n[4] ./node_modules/css-loader/dist/cjs.js??ref--4-1!./src/index.css 301 bytes {0} [built]\n[5] ./chunk.js 32 bytes {0} [built]\n    + 2 hidden modules\n```\n构建成功了，  \n修改`index.html`引入构建后的文件，并打开，可以看到一个红色标题，loader配置生效了  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n  <h1>标题</h1>\n  <script src='./dist/main.js'></script>\n</body>\n</html>\n```\n### Plugin\n使用`html-webpack-plugin`和`clean-webpack-plugin`举例：  \n\n - **html-webpack-plugin**：构建时，在output目录下创建一个index.html文件，并把构建后的文件插入到html中。\n - **clean-webpack-plugin**：每次打包前自动清空output文件夹。  \n\n#### html-webpack-plugin\n安装：  \n\n```shell\nnpm install html-webpack-plugin --save-dev\n```\n`webpack.config.js`配置：  \n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  module: {\n    //...\n  },\n  plugins: [\n    new HtmlWebpackPlugin()\n  ]\n}\n```\n[html-webpack-plugin更多参数](https://developer.aliyun.com/mirror/npm/package/html-webpack-plugin)\n\n#### clean-webpack-plugin\n安装： \n\n```shell\nnpm install clean-webpack-plugin --save-dev \n```  \n\n`webpack.config.js`配置：   \n\n```javascript\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    //...\n  },\n  plugins: [\n    new CleanWebpackPlugin(['dist'])\n  ]\n}\n```\n[clean-webpack-plugin更多参数](https://developer.aliyun.com/mirror/npm/package/clean-webpack-plugin) \n\n复杂的`plugins`配置：  \n\n```javascript\nplugins: [  \n\t new HtmlWebpackPlugin(),\n     new CleanWebpackPlugin(['dist'])\n]\n```\n`plugins`为一个数组，每一项都是一个插件，插件的配置都是作为参数传入，有数组也有对象类型，`plugin`不像`loader`有很明确的顺序，它类似事件绑定，按需执行。","slug":"last/docs/webpack使用指南","published":0,"date":"2021-10-22T09:38:36.424Z","updated":"2021-10-22T09:38:36.424Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer6001sh7vm90az6hy0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>webpack</strong> 是我经常用到的工具，并且 <strong>webpack</strong> 也逐渐成为主流前端构建工具，所以我觉得有必要透彻理解它，由于配置实现的写法有很多种，让人很头疼，一直没有仔细研究一下他的原理和实现方式。通过这篇文章，全面了解 <strong>webpack</strong>。  </p>\n<h2 id=\"webpack简介\"><a href=\"#webpack简介\" class=\"headerlink\" title=\"webpack简介\"></a>webpack简介</h2><blockquote>\n<p><strong>webpack</strong> 是一个开源的前端模块构建工具，由德国开发者 <em>Tobias Koppers</em> 在2012年首发并开源。  </p>\n</blockquote>\n<p>由于近年来前端技术发展迅猛，越来越重视用户的操作体验，现在早已经不是那个 html、css、jQuery 一把梭的年代了。<br>越来越多的新思想、新框架孕育而生。这导致前端越来越重，需要 <strong>引入依赖</strong>、<strong>高级语法降级解析</strong>，<strong>Css预编译</strong>，<strong>使用更为严格的</strong><code>TypeScript</code><strong>避免问题</strong>， <strong>使用现代 mvvm 框架</strong><code>Vue</code>，<code>React</code><strong>快捷开发</strong>。最后 <strong>构建</strong> 成浏览器 <strong>可识别</strong> 的<code>.css</code> <code>.js</code>等基本文件再部署到生产环境，这其中构建一步就是<code>webpack</code>做的事情。 </p>\n<p><img src=\"/2021/10/22/last/docs/webpack%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/how-to-use-webpack/EOzt1WTKBaXkgIr.png\" alt=\"WechatIMG2925.png\"></p>\n<h2 id=\"webpack基础使用\"><a href=\"#webpack基础使用\" class=\"headerlink\" title=\"webpack基础使用\"></a>webpack基础使用</h2><blockquote>\n<p>全局已安装 <a href=\"mailto:&#x77;&#x65;&#98;&#112;&#x61;&#99;&#x6b;&#64;&#52;&#46;&#52;&#x34;&#46;&#50;\">&#x77;&#x65;&#98;&#112;&#x61;&#99;&#x6b;&#64;&#52;&#46;&#52;&#x34;&#46;&#50;</a> 和 <a href=\"mailto:&#x6e;&#111;&#100;&#101;&#106;&#115;&#x40;&#49;&#48;&#46;&#x31;&#51;&#x2e;&#48;\">&#x6e;&#111;&#100;&#101;&#106;&#115;&#x40;&#49;&#48;&#46;&#x31;&#51;&#x2e;&#48;</a>  </p>\n</blockquote>\n<p>主要是两个配置：</p>\n<ul>\n<li><strong>entry</strong>：构建入口, <code>webpack</code>会从指定文件开始识别依赖模块关系并开始构建。<code>webpack4</code>中默认入口在<code>/src/index.js</code>。</li>\n<li><strong>output</strong>：构建出口，告诉<code>webpack</code>，构建完的文件放在哪里，叫什么名字，<code>webpack4</code>中默认出口在<code>/dist/main.js</code>。</li>\n</ul>\n<p>先来演示一下webpack最基本的操作。<br>新建文件夹，初始化项目<code>npm init</code> ，一路回车，生成<code>package.json</code>，在这个目录新建两个文件，<code>main.js</code>，<code>chunk.js</code> ，内容如下：  </p>\n<p>main.js   </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">const chunk <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'./chunk.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \nchunk.js\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token string\">'I am chunk.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n创建好之后在项目下安装webpack：\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev webpack webpack-cli\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n执行第一个命令，<span class=\"token variable\">`</span></span>webpack 构建入口 --output 构建出口<span class=\"token variable\"><span class=\"token variable\">`</span>： \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n$ webpack ./main.js --output ./dist.js\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\nHash: 8cc82b2736e97001d58e\nVersion: webpack <span class=\"token number\">4.44</span>.2\nTime: 269ms\nBuilt at: <span class=\"token number\">2020</span>-09-24 <span class=\"token number\">16</span>:46:34\n  Asset        Size  Chunks             Chunk Names\ndist.js  <span class=\"token number\">1000</span> bytes       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> dist.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> ./main.js <span class=\"token number\">56</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ./chunk.js <span class=\"token number\">32</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>   \n上命令是把<span class=\"token variable\">`</span></span>main.js<span class=\"token variable\"><span class=\"token variable\">`</span>使用<span class=\"token variable\">`</span></span>webpack<span class=\"token variable\"><span class=\"token variable\">`</span>打包生成<span class=\"token variable\">`</span></span>dist.js<span class=\"token variable\"><span class=\"token variable\">`</span>，由于<span class=\"token variable\">`</span></span>main.js<span class=\"token variable\"><span class=\"token variable\">`</span>中引入<span class=\"token variable\">`</span></span>chunk.js<span class=\"token variable\"><span class=\"token variable\">`</span>，所以<span class=\"token variable\">`</span></span>dist.js<span class=\"token variable\"><span class=\"token variable\">`</span>是<span class=\"token variable\">`</span></span>main.js<span class=\"token variable\"><span class=\"token variable\">`</span>和<span class=\"token variable\">`</span></span>chunk.js<span class=\"token variable\"><span class=\"token variable\">`</span>的整合。  \n\n可以看到<span class=\"token variable\">`</span></span>webpack<span class=\"token variable\"><span class=\"token variable\">`</span>输出一些打包信息后，并成功在<span class=\"token variable\">`</span></span>./<span class=\"token variable\"><span class=\"token variable\">`</span>下创建<span class=\"token variable\">`</span></span>dist.js<span class=\"token variable\"><span class=\"token variable\">`</span>，看看效果，创建一个<span class=\"token variable\">`</span></span>index.html<span class=\"token variable\"><span class=\"token variable\">`</span>，并引入<span class=\"token variable\">`</span></span>dist.js<span class=\"token variable\"><span class=\"token variable\">`</span>\n\n当前目录结构:  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token builtin class-name\">.</span>\n├── chunk.js \n├── index.html\n├── main.js \n├── package.json \n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n\n打开<span class=\"token variable\">`</span></span>index.html<span class=\"token variable\"><span class=\"token variable\">`</span>控制台面板可以看到向屏幕输出了「 I am chunk.js 」，看到这里，其实就可以理解<span class=\"token variable\">`</span></span>webpack<span class=\"token variable\"><span class=\"token variable\">`</span>的作用了。都是在这个基础上，**变形转换**，**以及打包过程中增加一些处理**。这次简单演示使用终端打包，实际开发需要设置相当多的参数，命令不方便处理，会创建一个<span class=\"token variable\">`</span></span>webpack.conf.js<span class=\"token variable\"><span class=\"token variable\">`</span>，专门来编写配置。  \n<span class=\"token comment\">## webpack4的改变  </span>\n\n - 速度相比3更快了<span class=\"token punctuation\">(</span>提升至少50%，没测过<span class=\"token punctuation\">)</span>\n - 默认配置出入口<span class=\"token punctuation\">(</span>就是网上说的0配置<span class=\"token punctuation\">)</span>\n - 增加了环境配置\n  \n<span class=\"token comment\">#### 默认配置出入口</span>\n<span class=\"token operator\">></span> 这里需要说明一下，在webpack4中实现了默认配置，去除了老版本繁琐的配置，webpack真正的本领是构建，webpack官方也注意到了这一点，这是一个非常明智的改变。  \n\n版本3中需要用<span class=\"token variable\">`</span></span>entry<span class=\"token variable\"><span class=\"token variable\">`</span>和<span class=\"token variable\">`</span></span>output<span class=\"token variable\"><span class=\"token variable\">`</span>来指定构建入口和出口，在版本4中有默认配置。  \n\n - 默认入口在<span class=\"token variable\">`</span></span>/src/index.js<span class=\"token variable\"><span class=\"token variable\">`</span>\n - 默认出口在<span class=\"token variable\">`</span></span>/dist/main.js<span class=\"token variable\"><span class=\"token variable\">`</span>\n\n如果你想修改，可以在<span class=\"token variable\">`</span></span>package.json<span class=\"token variable\"><span class=\"token variable\">`</span>修改script，例：  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\nwebpack ./entry/js/index.js --output ./output/js/main.js\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n\n<span class=\"token variable\">`</span></span>webpack.conf.js<span class=\"token variable\"><span class=\"token variable\">`</span>：  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>javascript \nconst path <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n// 引入path为了实现相对路径转换成绝对路径：\npath.join<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'路径'</span><span class=\"token punctuation\">)</span>\n\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  // entry为开始构建的文件入口\n  entry: path.join<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'/src/index.js'</span><span class=\"token punctuation\">)</span>,\n  // output为构建后的文件出口，其中path为出口文件的路径，filename为出口文件名\n  output: <span class=\"token punctuation\">&#123;</span>\n    path: path.join<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span>,\n    filename: <span class=\"token string\">'bundle.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n<span class=\"token comment\">#### 增加了环境配置</span>\n<span class=\"token number\">4</span>以前版本配置不同环境，根据<span class=\"token variable\">`</span></span>nodejs<span class=\"token variable\"><span class=\"token variable\">`</span>环境变量需要编写两套配置：开发环境中配置<span class=\"token variable\">`</span></span>live reloading<span class=\"token variable\"><span class=\"token variable\">`</span> 和<span class=\"token variable\">`</span></span>webpack-dev-server<span class=\"token variable\"><span class=\"token variable\">`</span>；生产环境配置<span class=\"token variable\">`</span></span>sourceMap<span class=\"token variable\"><span class=\"token variable\">`</span>和<span class=\"token variable\">`</span></span>uglifyJSPlugin<span class=\"token variable\"><span class=\"token variable\">`</span>美化压缩代码。在4版本中只需要在<span class=\"token variable\">`</span></span>package.json<span class=\"token variable\"><span class=\"token variable\">`</span>的中<span class=\"token variable\">`</span></span>script<span class=\"token variable\"><span class=\"token variable\">`</span> 增加<span class=\"token variable\">`</span></span>--mode<span class=\"token variable\"><span class=\"token variable\">`</span>参数指定环境，并自动处理上面不同环境区别：\n\npackage.json：  \n\n<span class=\"token variable\">`</span></span>``json\n<span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"dev\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"webpack --mode development\"</span>,\n  <span class=\"token string\">\"build\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"webpack --mode production \"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"webpack进阶使用\"><a href=\"#webpack进阶使用\" class=\"headerlink\" title=\"webpack进阶使用\"></a>webpack进阶使用</h2><p>主要是两个配置：</p>\n<ul>\n<li><p><strong>loader</strong>：<code>webpack</code>本身只能处理<code>.js</code>文件，安装不同的<code>loader</code>使其具备处理其他文件的能力，比如<code>.css</code>，<code>.scss</code>，<code>.vue</code>，<code>.jsx</code>，<code>.jade</code>。</p>\n</li>\n<li><p><strong>plugins</strong>：用于处理打包过程中一些更复杂的处理，比如<code>htmlwebpackplugin</code>自动生成<code>index.html</code>并引入构建文件，<code>uglifyJSPlugin</code>美化压缩代码。  </p>\n</li>\n</ul>\n<h4 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h4><p>在<code>/css/index.css</code>中创建<code>css</code>文件，并在<code>/src/index.js</code>引入，<code>css</code>经过<code>webpack</code>构建后会自动作用在<code>index.html</code>上。</p>\n<p><code>/src/index.css </code>： </p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n```    \n`/src/index.js`：\n\n```javascript\nimport indexCss from <span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">;</span> // 或者 import <span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">;</span>\n\nconst chunk = <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../chunk.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token selector\">```    \n执行`webpack`，可以看到报错了：\n\n```shell  \nERROR in ./src/index.css 1:4\nModule parse failed: Unexpected token (1:4)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> html</span><span class=\"token punctuation\">&#123;</span>\n|   <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n| <span class=\"token punctuation\">&#125;</span>\n @ ./src/index.js 1<span class=\"token punctuation\">:</span>0-34<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>你需要安装对应<code>loader</code>去处理这个<code>css</code>文件，安装<code>style-loader</code>和<code>css-loader</code>： </p>\n<ul>\n<li><strong>css-loader</strong>：<code>webpack</code>默认只能处理<code>.js</code>和<code>.json</code>文件类型，这个包会使<code>webpack</code>具备处理<code>.css</code>的能力  </li>\n<li><strong>style-loader</strong>：<code>style-loader</code>会把<code>css-loader</code>构建好的<code>css</code>作为<code>&lt;style&gt;</code>标签插入到<code>html</code>中。</li>\n</ul>\n<p>安装他们：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> style-loader css-loader --save-dev\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n\n配置他们：  \n<span class=\"token operator\">></span> 需要注意：loader 的执行顺序是从后往前执行，本例先执行 css-loader 返回内容再交给 style-loader 执行。链式调用，一环套一环，每个 loader 负责单一指责，方便扩展。\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>javascript\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module: <span class=\"token punctuation\">&#123;</span>\n    rules: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> \n      test: /<span class=\"token punctuation\">\\</span>.css$/, \n      use: <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span> \n          loader: <span class=\"token string\">\"style-loader\"</span>,\n          options: <span class=\"token punctuation\">&#123;</span>\n            // options\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>,\n        <span class=\"token punctuation\">&#123;</span> \n          loader: <span class=\"token string\">\"css-loader\"</span> ,\n          options: <span class=\"token punctuation\">&#123;</span>\n            // options\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n - **test**：匹配 loaders 所处理文件的拓展名的正则表达式（必填）\n - **loader**：loader 的名称（必填）\n - **include/exclude**：需要处理的文件夹或屏蔽不需要处理的文件夹（选填）；\n - **options**：为 loaders 提供额外的设置选项（选填）\n\n详细options：  \n<span class=\"token punctuation\">[</span>style-loader<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://developer.aliyun.com/mirror/npm/package/style-loader<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">[</span>css-loader<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://developer.aliyun.com/mirror/npm/package/css-loader<span class=\"token punctuation\">)</span>\n\n重新构建：  \n\n<span class=\"token variable\">`</span></span>``shell\n➜  webpack-demo webpack\nHash: c741b4496ab2094ee570\nVersion: webpack <span class=\"token number\">4.44</span>.2\nTime: 270ms\nBuilt at: <span class=\"token number\">2020</span>-09-30 <span class=\"token number\">17</span>:22:42\n  Asset     Size  Chunks             Chunk Names\nmain.js  <span class=\"token number\">4.7</span> KiB       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> main.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ./src/index.js <span class=\"token number\">79</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> ./src/index.css <span class=\"token number\">529</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> ./node_modules/css-loader/dist/cjs.js??ref--4-1<span class=\"token operator\">!</span>./src/index.css <span class=\"token number\">301</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> ./chunk.js <span class=\"token number\">32</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n    + <span class=\"token number\">2</span> hidden modules<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>构建成功了，<br>修改<code>index.html</code>引入构建后的文件，并打开，可以看到一个红色标题，loader配置生效了  </p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>./dist/main.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h3><p>使用<code>html-webpack-plugin</code>和<code>clean-webpack-plugin</code>举例：  </p>\n<ul>\n<li><strong>html-webpack-plugin</strong>：构建时，在output目录下创建一个index.html文件，并把构建后的文件插入到html中。</li>\n<li><strong>clean-webpack-plugin</strong>：每次打包前自动清空output文件夹。  </li>\n</ul>\n<h4 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a>html-webpack-plugin</h4><p>安装：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> html-webpack-plugin --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>webpack.config.js</code>配置：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://developer.aliyun.com/mirror/npm/package/html-webpack-plugin\">html-webpack-plugin更多参数</a></p>\n<h4 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h4><p>安装： </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> clean-webpack-plugin --save-dev \n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n\n<span class=\"token variable\">`</span></span>webpack.config.js<span class=\"token variable\"><span class=\"token variable\">`</span>配置：   \n\n<span class=\"token variable\">`</span></span>``javascript\nconst CleanWebpackPlugin <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module: <span class=\"token punctuation\">&#123;</span>\n    //<span class=\"token punctuation\">..</span>.\n  <span class=\"token punctuation\">&#125;</span>,\n  plugins: <span class=\"token punctuation\">[</span>\n    new CleanWebpackPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://developer.aliyun.com/mirror/npm/package/clean-webpack-plugin\">clean-webpack-plugin更多参数</a> </p>\n<p>复杂的<code>plugins</code>配置：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  \n\t <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>plugins</code>为一个数组，每一项都是一个插件，插件的配置都是作为参数传入，有数组也有对象类型，<code>plugin</code>不像<code>loader</code>有很明确的顺序，它类似事件绑定，按需执行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>webpack</strong> 是我经常用到的工具，并且 <strong>webpack</strong> 也逐渐成为主流前端构建工具，所以我觉得有必要透彻理解它，由于配置实现的写法有很多种，让人很头疼，一直没有仔细研究一下他的原理和实现方式。通过这篇文章，全面了解 <strong>webpack</strong>。  </p>\n<h2 id=\"webpack简介\"><a href=\"#webpack简介\" class=\"headerlink\" title=\"webpack简介\"></a>webpack简介</h2><blockquote>\n<p><strong>webpack</strong> 是一个开源的前端模块构建工具，由德国开发者 <em>Tobias Koppers</em> 在2012年首发并开源。  </p>\n</blockquote>\n<p>由于近年来前端技术发展迅猛，越来越重视用户的操作体验，现在早已经不是那个 html、css、jQuery 一把梭的年代了。<br>越来越多的新思想、新框架孕育而生。这导致前端越来越重，需要 <strong>引入依赖</strong>、<strong>高级语法降级解析</strong>，<strong>Css预编译</strong>，<strong>使用更为严格的</strong><code>TypeScript</code><strong>避免问题</strong>， <strong>使用现代 mvvm 框架</strong><code>Vue</code>，<code>React</code><strong>快捷开发</strong>。最后 <strong>构建</strong> 成浏览器 <strong>可识别</strong> 的<code>.css</code> <code>.js</code>等基本文件再部署到生产环境，这其中构建一步就是<code>webpack</code>做的事情。 </p>\n<p><img src=\"/2021/10/22/last/docs/webpack%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/how-to-use-webpack/EOzt1WTKBaXkgIr.png\" alt=\"WechatIMG2925.png\"></p>\n<h2 id=\"webpack基础使用\"><a href=\"#webpack基础使用\" class=\"headerlink\" title=\"webpack基础使用\"></a>webpack基础使用</h2><blockquote>\n<p>全局已安装 <a href=\"mailto:&#x77;&#x65;&#98;&#112;&#x61;&#99;&#x6b;&#64;&#52;&#46;&#52;&#x34;&#46;&#50;\">&#x77;&#x65;&#98;&#112;&#x61;&#99;&#x6b;&#64;&#52;&#46;&#52;&#x34;&#46;&#50;</a> 和 <a href=\"mailto:&#x6e;&#111;&#100;&#101;&#106;&#115;&#x40;&#49;&#48;&#46;&#x31;&#51;&#x2e;&#48;\">&#x6e;&#111;&#100;&#101;&#106;&#115;&#x40;&#49;&#48;&#46;&#x31;&#51;&#x2e;&#48;</a>  </p>\n</blockquote>\n<p>主要是两个配置：</p>\n<ul>\n<li><strong>entry</strong>：构建入口, <code>webpack</code>会从指定文件开始识别依赖模块关系并开始构建。<code>webpack4</code>中默认入口在<code>/src/index.js</code>。</li>\n<li><strong>output</strong>：构建出口，告诉<code>webpack</code>，构建完的文件放在哪里，叫什么名字，<code>webpack4</code>中默认出口在<code>/dist/main.js</code>。</li>\n</ul>\n<p>先来演示一下webpack最基本的操作。<br>新建文件夹，初始化项目<code>npm init</code> ，一路回车，生成<code>package.json</code>，在这个目录新建两个文件，<code>main.js</code>，<code>chunk.js</code> ，内容如下：  </p>\n<p>main.js   </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">const chunk <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'./chunk.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \nchunk.js\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token string\">'I am chunk.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n创建好之后在项目下安装webpack：\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev webpack webpack-cli\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n执行第一个命令，<span class=\"token variable\">`</span></span>webpack 构建入口 --output 构建出口<span class=\"token variable\"><span class=\"token variable\">`</span>： \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n$ webpack ./main.js --output ./dist.js\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\nHash: 8cc82b2736e97001d58e\nVersion: webpack <span class=\"token number\">4.44</span>.2\nTime: 269ms\nBuilt at: <span class=\"token number\">2020</span>-09-24 <span class=\"token number\">16</span>:46:34\n  Asset        Size  Chunks             Chunk Names\ndist.js  <span class=\"token number\">1000</span> bytes       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> dist.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> ./main.js <span class=\"token number\">56</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ./chunk.js <span class=\"token number\">32</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>   \n上命令是把<span class=\"token variable\">`</span></span>main.js<span class=\"token variable\"><span class=\"token variable\">`</span>使用<span class=\"token variable\">`</span></span>webpack<span class=\"token variable\"><span class=\"token variable\">`</span>打包生成<span class=\"token variable\">`</span></span>dist.js<span class=\"token variable\"><span class=\"token variable\">`</span>，由于<span class=\"token variable\">`</span></span>main.js<span class=\"token variable\"><span class=\"token variable\">`</span>中引入<span class=\"token variable\">`</span></span>chunk.js<span class=\"token variable\"><span class=\"token variable\">`</span>，所以<span class=\"token variable\">`</span></span>dist.js<span class=\"token variable\"><span class=\"token variable\">`</span>是<span class=\"token variable\">`</span></span>main.js<span class=\"token variable\"><span class=\"token variable\">`</span>和<span class=\"token variable\">`</span></span>chunk.js<span class=\"token variable\"><span class=\"token variable\">`</span>的整合。  \n\n可以看到<span class=\"token variable\">`</span></span>webpack<span class=\"token variable\"><span class=\"token variable\">`</span>输出一些打包信息后，并成功在<span class=\"token variable\">`</span></span>./<span class=\"token variable\"><span class=\"token variable\">`</span>下创建<span class=\"token variable\">`</span></span>dist.js<span class=\"token variable\"><span class=\"token variable\">`</span>，看看效果，创建一个<span class=\"token variable\">`</span></span>index.html<span class=\"token variable\"><span class=\"token variable\">`</span>，并引入<span class=\"token variable\">`</span></span>dist.js<span class=\"token variable\"><span class=\"token variable\">`</span>\n\n当前目录结构:  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\n<span class=\"token builtin class-name\">.</span>\n├── chunk.js \n├── index.html\n├── main.js \n├── package.json \n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n\n打开<span class=\"token variable\">`</span></span>index.html<span class=\"token variable\"><span class=\"token variable\">`</span>控制台面板可以看到向屏幕输出了「 I am chunk.js 」，看到这里，其实就可以理解<span class=\"token variable\">`</span></span>webpack<span class=\"token variable\"><span class=\"token variable\">`</span>的作用了。都是在这个基础上，**变形转换**，**以及打包过程中增加一些处理**。这次简单演示使用终端打包，实际开发需要设置相当多的参数，命令不方便处理，会创建一个<span class=\"token variable\">`</span></span>webpack.conf.js<span class=\"token variable\"><span class=\"token variable\">`</span>，专门来编写配置。  \n<span class=\"token comment\">## webpack4的改变  </span>\n\n - 速度相比3更快了<span class=\"token punctuation\">(</span>提升至少50%，没测过<span class=\"token punctuation\">)</span>\n - 默认配置出入口<span class=\"token punctuation\">(</span>就是网上说的0配置<span class=\"token punctuation\">)</span>\n - 增加了环境配置\n  \n<span class=\"token comment\">#### 默认配置出入口</span>\n<span class=\"token operator\">></span> 这里需要说明一下，在webpack4中实现了默认配置，去除了老版本繁琐的配置，webpack真正的本领是构建，webpack官方也注意到了这一点，这是一个非常明智的改变。  \n\n版本3中需要用<span class=\"token variable\">`</span></span>entry<span class=\"token variable\"><span class=\"token variable\">`</span>和<span class=\"token variable\">`</span></span>output<span class=\"token variable\"><span class=\"token variable\">`</span>来指定构建入口和出口，在版本4中有默认配置。  \n\n - 默认入口在<span class=\"token variable\">`</span></span>/src/index.js<span class=\"token variable\"><span class=\"token variable\">`</span>\n - 默认出口在<span class=\"token variable\">`</span></span>/dist/main.js<span class=\"token variable\"><span class=\"token variable\">`</span>\n\n如果你想修改，可以在<span class=\"token variable\">`</span></span>package.json<span class=\"token variable\"><span class=\"token variable\">`</span>修改script，例：  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>shell\nwebpack ./entry/js/index.js --output ./output/js/main.js\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n\n<span class=\"token variable\">`</span></span>webpack.conf.js<span class=\"token variable\"><span class=\"token variable\">`</span>：  \n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>javascript \nconst path <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n// 引入path为了实现相对路径转换成绝对路径：\npath.join<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'路径'</span><span class=\"token punctuation\">)</span>\n\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  // entry为开始构建的文件入口\n  entry: path.join<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'/src/index.js'</span><span class=\"token punctuation\">)</span>,\n  // output为构建后的文件出口，其中path为出口文件的路径，filename为出口文件名\n  output: <span class=\"token punctuation\">&#123;</span>\n    path: path.join<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span>,\n    filename: <span class=\"token string\">'bundle.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n<span class=\"token comment\">#### 增加了环境配置</span>\n<span class=\"token number\">4</span>以前版本配置不同环境，根据<span class=\"token variable\">`</span></span>nodejs<span class=\"token variable\"><span class=\"token variable\">`</span>环境变量需要编写两套配置：开发环境中配置<span class=\"token variable\">`</span></span>live reloading<span class=\"token variable\"><span class=\"token variable\">`</span> 和<span class=\"token variable\">`</span></span>webpack-dev-server<span class=\"token variable\"><span class=\"token variable\">`</span>；生产环境配置<span class=\"token variable\">`</span></span>sourceMap<span class=\"token variable\"><span class=\"token variable\">`</span>和<span class=\"token variable\">`</span></span>uglifyJSPlugin<span class=\"token variable\"><span class=\"token variable\">`</span>美化压缩代码。在4版本中只需要在<span class=\"token variable\">`</span></span>package.json<span class=\"token variable\"><span class=\"token variable\">`</span>的中<span class=\"token variable\">`</span></span>script<span class=\"token variable\"><span class=\"token variable\">`</span> 增加<span class=\"token variable\">`</span></span>--mode<span class=\"token variable\"><span class=\"token variable\">`</span>参数指定环境，并自动处理上面不同环境区别：\n\npackage.json：  \n\n<span class=\"token variable\">`</span></span>``json\n<span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string\">\"dev\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"webpack --mode development\"</span>,\n  <span class=\"token string\">\"build\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"webpack --mode production \"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"webpack进阶使用\"><a href=\"#webpack进阶使用\" class=\"headerlink\" title=\"webpack进阶使用\"></a>webpack进阶使用</h2><p>主要是两个配置：</p>\n<ul>\n<li><p><strong>loader</strong>：<code>webpack</code>本身只能处理<code>.js</code>文件，安装不同的<code>loader</code>使其具备处理其他文件的能力，比如<code>.css</code>，<code>.scss</code>，<code>.vue</code>，<code>.jsx</code>，<code>.jade</code>。</p>\n</li>\n<li><p><strong>plugins</strong>：用于处理打包过程中一些更复杂的处理，比如<code>htmlwebpackplugin</code>自动生成<code>index.html</code>并引入构建文件，<code>uglifyJSPlugin</code>美化压缩代码。  </p>\n</li>\n</ul>\n<h4 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h4><p>在<code>/css/index.css</code>中创建<code>css</code>文件，并在<code>/src/index.js</code>引入，<code>css</code>经过<code>webpack</code>构建后会自动作用在<code>index.html</code>上。</p>\n<p><code>/src/index.css </code>： </p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n```    \n`/src/index.js`：\n\n```javascript\nimport indexCss from <span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">;</span> // 或者 import <span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">;</span>\n\nconst chunk = <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../chunk.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token selector\">```    \n执行`webpack`，可以看到报错了：\n\n```shell  \nERROR in ./src/index.css 1:4\nModule parse failed: Unexpected token (1:4)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> html</span><span class=\"token punctuation\">&#123;</span>\n|   <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n| <span class=\"token punctuation\">&#125;</span>\n @ ./src/index.js 1<span class=\"token punctuation\">:</span>0-34<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>你需要安装对应<code>loader</code>去处理这个<code>css</code>文件，安装<code>style-loader</code>和<code>css-loader</code>： </p>\n<ul>\n<li><strong>css-loader</strong>：<code>webpack</code>默认只能处理<code>.js</code>和<code>.json</code>文件类型，这个包会使<code>webpack</code>具备处理<code>.css</code>的能力  </li>\n<li><strong>style-loader</strong>：<code>style-loader</code>会把<code>css-loader</code>构建好的<code>css</code>作为<code>&lt;style&gt;</code>标签插入到<code>html</code>中。</li>\n</ul>\n<p>安装他们：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> style-loader css-loader --save-dev\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n\n配置他们：  \n<span class=\"token operator\">></span> 需要注意：loader 的执行顺序是从后往前执行，本例先执行 css-loader 返回内容再交给 style-loader 执行。链式调用，一环套一环，每个 loader 负责单一指责，方便扩展。\n\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>javascript\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module: <span class=\"token punctuation\">&#123;</span>\n    rules: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> \n      test: /<span class=\"token punctuation\">\\</span>.css$/, \n      use: <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span> \n          loader: <span class=\"token string\">\"style-loader\"</span>,\n          options: <span class=\"token punctuation\">&#123;</span>\n            // options\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>,\n        <span class=\"token punctuation\">&#123;</span> \n          loader: <span class=\"token string\">\"css-loader\"</span> ,\n          options: <span class=\"token punctuation\">&#123;</span>\n            // options\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span>  \n - **test**：匹配 loaders 所处理文件的拓展名的正则表达式（必填）\n - **loader**：loader 的名称（必填）\n - **include/exclude**：需要处理的文件夹或屏蔽不需要处理的文件夹（选填）；\n - **options**：为 loaders 提供额外的设置选项（选填）\n\n详细options：  \n<span class=\"token punctuation\">[</span>style-loader<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://developer.aliyun.com/mirror/npm/package/style-loader<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">[</span>css-loader<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://developer.aliyun.com/mirror/npm/package/css-loader<span class=\"token punctuation\">)</span>\n\n重新构建：  \n\n<span class=\"token variable\">`</span></span>``shell\n➜  webpack-demo webpack\nHash: c741b4496ab2094ee570\nVersion: webpack <span class=\"token number\">4.44</span>.2\nTime: 270ms\nBuilt at: <span class=\"token number\">2020</span>-09-30 <span class=\"token number\">17</span>:22:42\n  Asset     Size  Chunks             Chunk Names\nmain.js  <span class=\"token number\">4.7</span> KiB       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> main.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> ./src/index.js <span class=\"token number\">79</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> ./src/index.css <span class=\"token number\">529</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> ./node_modules/css-loader/dist/cjs.js??ref--4-1<span class=\"token operator\">!</span>./src/index.css <span class=\"token number\">301</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> ./chunk.js <span class=\"token number\">32</span> bytes <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span>\n    + <span class=\"token number\">2</span> hidden modules<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>构建成功了，<br>修改<code>index.html</code>引入构建后的文件，并打开，可以看到一个红色标题，loader配置生效了  </p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>./dist/main.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h3><p>使用<code>html-webpack-plugin</code>和<code>clean-webpack-plugin</code>举例：  </p>\n<ul>\n<li><strong>html-webpack-plugin</strong>：构建时，在output目录下创建一个index.html文件，并把构建后的文件插入到html中。</li>\n<li><strong>clean-webpack-plugin</strong>：每次打包前自动清空output文件夹。  </li>\n</ul>\n<h4 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a>html-webpack-plugin</h4><p>安装：  </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> html-webpack-plugin --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>webpack.config.js</code>配置：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://developer.aliyun.com/mirror/npm/package/html-webpack-plugin\">html-webpack-plugin更多参数</a></p>\n<h4 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h4><p>安装： </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> clean-webpack-plugin --save-dev \n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n\n<span class=\"token variable\">`</span></span>webpack.config.js<span class=\"token variable\"><span class=\"token variable\">`</span>配置：   \n\n<span class=\"token variable\">`</span></span>``javascript\nconst CleanWebpackPlugin <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule.exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module: <span class=\"token punctuation\">&#123;</span>\n    //<span class=\"token punctuation\">..</span>.\n  <span class=\"token punctuation\">&#125;</span>,\n  plugins: <span class=\"token punctuation\">[</span>\n    new CleanWebpackPlugin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://developer.aliyun.com/mirror/npm/package/clean-webpack-plugin\">clean-webpack-plugin更多参数</a> </p>\n<p>复杂的<code>plugins</code>配置：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  \n\t <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>plugins</code>为一个数组，每一项都是一个插件，插件的配置都是作为参数传入，有数组也有对象类型，<code>plugin</code>不像<code>loader</code>有很明确的顺序，它类似事件绑定，按需执行。</p>\n"},{"_content":"#### Html  \n\n```html\n<div class=\"round\"></div>\n```\n#### Css\n使用`background-image`渐变属性和动画状态的`伪元素遮盖`来实现：    \n\n```css\n.round {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  background-color: #eee;\n  background-image: linear-gradient(to right, transparent 50%, blue 0);\n  position: relative;\n}\n.round::before {\n  width: 50%;\n  height: 100%;\n  content: '';\n  position: absolute;\n  top: 0; \n  left: 50%;\n  border-radius: 0 100% 100% 0 / 50%;\n  background-color: inherit;\n  transform-origin: left;\n  animation: spin 5s linear infinite, dye 10s step-end infinite;\n}\n@keyframes spin {\n  to { transform: rotate(.5turn); }\n}\n@keyframes dye {\n  50% { background: blue; }\n}\n```\n#### 效果\n\n![demo.gif](./img/realize-circle-loadingi-in-css/E8CM6WZ1hRv7piy.gif)","source":"_drafts/last/docs/使用css实现环状进度.md","raw":"#### Html  \n\n```html\n<div class=\"round\"></div>\n```\n#### Css\n使用`background-image`渐变属性和动画状态的`伪元素遮盖`来实现：    \n\n```css\n.round {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  background-color: #eee;\n  background-image: linear-gradient(to right, transparent 50%, blue 0);\n  position: relative;\n}\n.round::before {\n  width: 50%;\n  height: 100%;\n  content: '';\n  position: absolute;\n  top: 0; \n  left: 50%;\n  border-radius: 0 100% 100% 0 / 50%;\n  background-color: inherit;\n  transform-origin: left;\n  animation: spin 5s linear infinite, dye 10s step-end infinite;\n}\n@keyframes spin {\n  to { transform: rotate(.5turn); }\n}\n@keyframes dye {\n  50% { background: blue; }\n}\n```\n#### 效果\n\n![demo.gif](./img/realize-circle-loadingi-in-css/E8CM6WZ1hRv7piy.gif)","slug":"last/docs/使用css实现环状进度","published":0,"date":"2021-10-22T09:38:36.424Z","updated":"2021-10-22T09:38:36.424Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer6001th7vm16po9zie","content":"<h4 id=\"Html\"><a href=\"#Html\" class=\"headerlink\" title=\"Html\"></a>Html</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Css\"><a href=\"#Css\" class=\"headerlink\" title=\"Css\"></a>Css</h4><p>使用<code>background-image</code>渐变属性和动画状态的<code>伪元素遮盖</code>来实现：    </p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.round</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> transparent 50%<span class=\"token punctuation\">,</span> blue 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.round::before</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> \n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 100% 100% 0 / 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> spin 5s linear infinite<span class=\"token punctuation\">,</span> dye 10s step-end infinite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> spin</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>.5turn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> dye</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">50%</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"/2021/10/22/last/docs/%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E7%8E%AF%E7%8A%B6%E8%BF%9B%E5%BA%A6/realize-circle-loadingi-in-css/E8CM6WZ1hRv7piy.gif\" alt=\"demo.gif\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Html\"><a href=\"#Html\" class=\"headerlink\" title=\"Html\"></a>Html</h4><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Css\"><a href=\"#Css\" class=\"headerlink\" title=\"Css\"></a>Css</h4><p>使用<code>background-image</code>渐变属性和动画状态的<code>伪元素遮盖</code>来实现：    </p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.round</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> transparent 50%<span class=\"token punctuation\">,</span> blue 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.round::before</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> \n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 100% 100% 0 / 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> spin 5s linear infinite<span class=\"token punctuation\">,</span> dye 10s step-end infinite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> spin</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>.5turn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> dye</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">50%</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"/2021/10/22/last/docs/%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E7%8E%AF%E7%8A%B6%E8%BF%9B%E5%BA%A6/realize-circle-loadingi-in-css/E8CM6WZ1hRv7piy.gif\" alt=\"demo.gif\"></p>\n"},{"_content":"## 什么是函数柯里化  \n来自维基百科的解释：\n> 在计算机科学中，柯里化（ Currying ）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。  \n    \n可以知道这是一种思想一种函数变形。并不会执行函数，实现不区分语言。以上说法已经很通俗了。简单来说当参数数量不够时，利用闭包把当前这个参数存起来，返回一个新的函数，等待返回的这个新函数继续被调用，继续获取参数，并把这个参数和闭包存的参数合并到一起，如果这个参数数量数量等于被柯里化函数形参数量，就开始执行，否则继续返回新函数，继续存参数，重复这个步骤。用 `JavaScript` 举个例子：   \n\n```javascript  \nadd(1, 2, 3, 4); // 创建个简单函数，把所有参数累加并返回结果10 \n\n// 把这个函数柯里化之后，就是把多个参数分解成改成单或多个组合传入，并返回相同结果。看起来像这样：\ncurryingAdd(1)(2)(3)(4) // 10\n// 或者\ncurryingAdd(1, 2)(3)(4) // 10\n// 或者\ncurryingAdd(1)(2, 3, 4) // 10\n```\n\n## 柯里化的好处  \n看了以上的例子，看起来没什么用，反而实现起来更复杂。实际上这是一种高度抽象编程规范，属于函数式编程的思想，主要好处为：\n   \n- 参数复用\n  \n还有`提前确认`和`延迟执行`好处，其实都是一个意思，个人认为参数复用是最明显的好处，利用好可以写出更优雅的代码，让机器更像人类一步一步实现某件事，一段伪代码来举例：    \n\n```javascript\nfunction ajax(method, url){\n// http请求的实现...\n}  \n\nfunction currying(fun){\n// 柯里化实现...\n}\n\n把ajax方法柯里化\nlet curryingAjax = currying(ajax);\n\n// 得到一个get请求，只执行一次\nlet getAjax = curryingAjax(\"get\");\n\n// 关联业务逻辑，获取用户信息接口\nlet getUserInfo = getAjax(\"http://api.test.com/getUserInfo\");\n\n// 关联业务逻辑，获取订单列表接口\nlet getOrderList = getAjax(\"http://api.test.com/getOrderList\");\n```  \n\n可以看出`get`传入`curryingAjax`方法仅一次，之后可以调用多次`get`请求。先确定请求方法，在确定具体请求地址，这就实现了参数的复用。如果是`post`请求：  \n\n```\nlet postAjax = curryingAjax(\"post\");\n\n// 之后根据业务逻辑多次调用\n...\n```  \n## 柯里化完整代码  \n - 判断`currying`的参数第二位到最后一位（也就是`args`）的长度，如果长度等于`fn`形参长度，那么直接执行`fn`，并把`args`作为参数传入\n - 如果传入参数（`args`）不够时，利用递归和闭包，暂存传入的参数，并重新返回`currying`函数    \n\n```javascript \nfunction currying(fn, ...args) {\n  if (args.length >= fn.length) {\n    return fn(...args);\n  } else {\n    return (...args2) => currying(fn, ...args, ...args2);\n  }\n}\n```","source":"_drafts/last/docs/函数柯里化(curring).md","raw":"## 什么是函数柯里化  \n来自维基百科的解释：\n> 在计算机科学中，柯里化（ Currying ）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。  \n    \n可以知道这是一种思想一种函数变形。并不会执行函数，实现不区分语言。以上说法已经很通俗了。简单来说当参数数量不够时，利用闭包把当前这个参数存起来，返回一个新的函数，等待返回的这个新函数继续被调用，继续获取参数，并把这个参数和闭包存的参数合并到一起，如果这个参数数量数量等于被柯里化函数形参数量，就开始执行，否则继续返回新函数，继续存参数，重复这个步骤。用 `JavaScript` 举个例子：   \n\n```javascript  \nadd(1, 2, 3, 4); // 创建个简单函数，把所有参数累加并返回结果10 \n\n// 把这个函数柯里化之后，就是把多个参数分解成改成单或多个组合传入，并返回相同结果。看起来像这样：\ncurryingAdd(1)(2)(3)(4) // 10\n// 或者\ncurryingAdd(1, 2)(3)(4) // 10\n// 或者\ncurryingAdd(1)(2, 3, 4) // 10\n```\n\n## 柯里化的好处  \n看了以上的例子，看起来没什么用，反而实现起来更复杂。实际上这是一种高度抽象编程规范，属于函数式编程的思想，主要好处为：\n   \n- 参数复用\n  \n还有`提前确认`和`延迟执行`好处，其实都是一个意思，个人认为参数复用是最明显的好处，利用好可以写出更优雅的代码，让机器更像人类一步一步实现某件事，一段伪代码来举例：    \n\n```javascript\nfunction ajax(method, url){\n// http请求的实现...\n}  \n\nfunction currying(fun){\n// 柯里化实现...\n}\n\n把ajax方法柯里化\nlet curryingAjax = currying(ajax);\n\n// 得到一个get请求，只执行一次\nlet getAjax = curryingAjax(\"get\");\n\n// 关联业务逻辑，获取用户信息接口\nlet getUserInfo = getAjax(\"http://api.test.com/getUserInfo\");\n\n// 关联业务逻辑，获取订单列表接口\nlet getOrderList = getAjax(\"http://api.test.com/getOrderList\");\n```  \n\n可以看出`get`传入`curryingAjax`方法仅一次，之后可以调用多次`get`请求。先确定请求方法，在确定具体请求地址，这就实现了参数的复用。如果是`post`请求：  \n\n```\nlet postAjax = curryingAjax(\"post\");\n\n// 之后根据业务逻辑多次调用\n...\n```  \n## 柯里化完整代码  \n - 判断`currying`的参数第二位到最后一位（也就是`args`）的长度，如果长度等于`fn`形参长度，那么直接执行`fn`，并把`args`作为参数传入\n - 如果传入参数（`args`）不够时，利用递归和闭包，暂存传入的参数，并重新返回`currying`函数    \n\n```javascript \nfunction currying(fn, ...args) {\n  if (args.length >= fn.length) {\n    return fn(...args);\n  } else {\n    return (...args2) => currying(fn, ...args, ...args2);\n  }\n}\n```","slug":"last/docs/函数柯里化(curring)","published":0,"date":"2021-10-22T09:38:36.424Z","updated":"2021-10-22T09:38:36.425Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer7001uh7vmhdqjgzx8","content":"<h2 id=\"什么是函数柯里化\"><a href=\"#什么是函数柯里化\" class=\"headerlink\" title=\"什么是函数柯里化\"></a>什么是函数柯里化</h2><p>来自维基百科的解释：</p>\n<blockquote>\n<p>在计算机科学中，柯里化（ Currying ）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。  </p>\n</blockquote>\n<p>可以知道这是一种思想一种函数变形。并不会执行函数，实现不区分语言。以上说法已经很通俗了。简单来说当参数数量不够时，利用闭包把当前这个参数存起来，返回一个新的函数，等待返回的这个新函数继续被调用，继续获取参数，并把这个参数和闭包存的参数合并到一起，如果这个参数数量数量等于被柯里化函数形参数量，就开始执行，否则继续返回新函数，继续存参数，重复这个步骤。用 <code>JavaScript</code> 举个例子：   </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建个简单函数，把所有参数累加并返回结果10 </span>\n\n<span class=\"token comment\">// 把这个函数柯里化之后，就是把多个参数分解成改成单或多个组合传入，并返回相同结果。看起来像这样：</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"柯里化的好处\"><a href=\"#柯里化的好处\" class=\"headerlink\" title=\"柯里化的好处\"></a>柯里化的好处</h2><p>看了以上的例子，看起来没什么用，反而实现起来更复杂。实际上这是一种高度抽象编程规范，属于函数式编程的思想，主要好处为：</p>\n<ul>\n<li>参数复用</li>\n</ul>\n<p>还有<code>提前确认</code>和<code>延迟执行</code>好处，其实都是一个意思，个人认为参数复用是最明显的好处，利用好可以写出更优雅的代码，让机器更像人类一步一步实现某件事，一段伪代码来举例：    </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// http请求的实现...</span>\n<span class=\"token punctuation\">&#125;</span>  \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 柯里化实现...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n把ajax方法柯里化\n<span class=\"token keyword\">let</span> curryingAjax <span class=\"token operator\">=</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 得到一个get请求，只执行一次</span>\n<span class=\"token keyword\">let</span> getAjax <span class=\"token operator\">=</span> <span class=\"token function\">curryingAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关联业务逻辑，获取用户信息接口</span>\n<span class=\"token keyword\">let</span> getUserInfo <span class=\"token operator\">=</span> <span class=\"token function\">getAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.test.com/getUserInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关联业务逻辑，获取订单列表接口</span>\n<span class=\"token keyword\">let</span> getOrderList <span class=\"token operator\">=</span> <span class=\"token function\">getAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.test.com/getOrderList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n\n可以看出</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">get</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">传入</span><span class=\"token template-punctuation string\">`</span></span>curryingAjax<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">方法仅一次，之后可以调用多次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">get</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">请求。先确定请求方法，在确定具体请求地址，这就实现了参数的复用。如果是</span><span class=\"token template-punctuation string\">`</span></span>post`请求：  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>let postAjax = curryingAjax(“post”);</p>\n<p>// 之后根据业务逻辑多次调用<br>…</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 柯里化完整代码  \n - 判断&#96;currying&#96;的参数第二位到最后一位（也就是&#96;args&#96;）的长度，如果长度等于&#96;fn&#96;形参长度，那么直接执行&#96;fn&#96;，并把&#96;args&#96;作为参数传入\n - 如果传入参数（&#96;args&#96;）不够时，利用递归和闭包，暂存传入的参数，并重新返回&#96;currying&#96;函数    \n\n&#96;&#96;&#96;javascript \nfunction currying(fn, ...args) &#123;\n  if (args.length &gt;&#x3D; fn.length) &#123;\n    return fn(...args);\n  &#125; else &#123;\n    return (...args2) &#x3D;&gt; currying(fn, ...args, ...args2);\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是函数柯里化\"><a href=\"#什么是函数柯里化\" class=\"headerlink\" title=\"什么是函数柯里化\"></a>什么是函数柯里化</h2><p>来自维基百科的解释：</p>\n<blockquote>\n<p>在计算机科学中，柯里化（ Currying ）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。  </p>\n</blockquote>\n<p>可以知道这是一种思想一种函数变形。并不会执行函数，实现不区分语言。以上说法已经很通俗了。简单来说当参数数量不够时，利用闭包把当前这个参数存起来，返回一个新的函数，等待返回的这个新函数继续被调用，继续获取参数，并把这个参数和闭包存的参数合并到一起，如果这个参数数量数量等于被柯里化函数形参数量，就开始执行，否则继续返回新函数，继续存参数，重复这个步骤。用 <code>JavaScript</code> 举个例子：   </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建个简单函数，把所有参数累加并返回结果10 </span>\n\n<span class=\"token comment\">// 把这个函数柯里化之后，就是把多个参数分解成改成单或多个组合传入，并返回相同结果。看起来像这样：</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"柯里化的好处\"><a href=\"#柯里化的好处\" class=\"headerlink\" title=\"柯里化的好处\"></a>柯里化的好处</h2><p>看了以上的例子，看起来没什么用，反而实现起来更复杂。实际上这是一种高度抽象编程规范，属于函数式编程的思想，主要好处为：</p>\n<ul>\n<li>参数复用</li>\n</ul>\n<p>还有<code>提前确认</code>和<code>延迟执行</code>好处，其实都是一个意思，个人认为参数复用是最明显的好处，利用好可以写出更优雅的代码，让机器更像人类一步一步实现某件事，一段伪代码来举例：    </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// http请求的实现...</span>\n<span class=\"token punctuation\">&#125;</span>  \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 柯里化实现...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n把ajax方法柯里化\n<span class=\"token keyword\">let</span> curryingAjax <span class=\"token operator\">=</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>ajax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 得到一个get请求，只执行一次</span>\n<span class=\"token keyword\">let</span> getAjax <span class=\"token operator\">=</span> <span class=\"token function\">curryingAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关联业务逻辑，获取用户信息接口</span>\n<span class=\"token keyword\">let</span> getUserInfo <span class=\"token operator\">=</span> <span class=\"token function\">getAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.test.com/getUserInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 关联业务逻辑，获取订单列表接口</span>\n<span class=\"token keyword\">let</span> getOrderList <span class=\"token operator\">=</span> <span class=\"token function\">getAjax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://api.test.com/getOrderList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n\n可以看出</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">get</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">传入</span><span class=\"token template-punctuation string\">`</span></span>curryingAjax<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">方法仅一次，之后可以调用多次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">get</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">请求。先确定请求方法，在确定具体请求地址，这就实现了参数的复用。如果是</span><span class=\"token template-punctuation string\">`</span></span>post`请求：  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>let postAjax = curryingAjax(“post”);</p>\n<p>// 之后根据业务逻辑多次调用<br>…</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 柯里化完整代码  \n - 判断&#96;currying&#96;的参数第二位到最后一位（也就是&#96;args&#96;）的长度，如果长度等于&#96;fn&#96;形参长度，那么直接执行&#96;fn&#96;，并把&#96;args&#96;作为参数传入\n - 如果传入参数（&#96;args&#96;）不够时，利用递归和闭包，暂存传入的参数，并重新返回&#96;currying&#96;函数    \n\n&#96;&#96;&#96;javascript \nfunction currying(fn, ...args) &#123;\n  if (args.length &gt;&#x3D; fn.length) &#123;\n    return fn(...args);\n  &#125; else &#123;\n    return (...args2) &#x3D;&gt; currying(fn, ...args, ...args2);\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"_content":"## 环境\n - macos 10.14\n - iterm 2    \n \n## 使用\n#### 生成密钥\nkeytool -genkeypair -alias <别名> -keystore <密钥库存储位置和名称>\n\n```shell\nkeytool -genkeypair -alias demokey -keystore demo.keystore\n```  \n内容填写后，生成完毕  \n\n#### 生成签名  \njarsigner -verbose -keystore <使用密钥库位置> -signedjar <签名后的包保存位置和名字> <要签名的包保存位置和名字> <别名，对应上面的别名>\n\n```shell\njarsigner -verbose -keystore /Users/liangqi/Desktop/apk/demo.keystore -signedjar ./tap_signed.apk ./tap_unsign.apk demokey\n``` \n即可拿到签名后的包","source":"_drafts/last/docs/使用jarsigner重新签名apk包.md","raw":"## 环境\n - macos 10.14\n - iterm 2    \n \n## 使用\n#### 生成密钥\nkeytool -genkeypair -alias <别名> -keystore <密钥库存储位置和名称>\n\n```shell\nkeytool -genkeypair -alias demokey -keystore demo.keystore\n```  \n内容填写后，生成完毕  \n\n#### 生成签名  \njarsigner -verbose -keystore <使用密钥库位置> -signedjar <签名后的包保存位置和名字> <要签名的包保存位置和名字> <别名，对应上面的别名>\n\n```shell\njarsigner -verbose -keystore /Users/liangqi/Desktop/apk/demo.keystore -signedjar ./tap_signed.apk ./tap_unsign.apk demokey\n``` \n即可拿到签名后的包","slug":"last/docs/使用jarsigner重新签名apk包","published":0,"date":"2021-10-22T09:38:36.424Z","updated":"2021-10-22T09:38:36.424Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer8001vh7vm4p3lhh4p","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>macos 10.14</li>\n<li>iterm 2    </li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><p>keytool -genkeypair -alias &lt;别名&gt; -keystore &lt;密钥库存储位置和名称&gt;</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">keytool -genkeypair -alias demokey -keystore demo.keystore\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n内容填写后，生成完毕  \n\n<span class=\"token comment\">#### 生成签名  </span>\njarsigner -verbose -keystore <span class=\"token operator\">&lt;</span>使用密钥库位置<span class=\"token operator\">></span> -signedjar <span class=\"token operator\">&lt;</span>签名后的包保存位置和名字<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>要签名的包保存位置和名字<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>别名，对应上面的别名<span class=\"token operator\">></span>\n\n<span class=\"token variable\">`</span></span>``shell\njarsigner -verbose -keystore /Users/liangqi/Desktop/apk/demo.keystore -signedjar ./tap_signed.apk ./tap_unsign.apk demokey<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>即可拿到签名后的包</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>macos 10.14</li>\n<li>iterm 2    </li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><p>keytool -genkeypair -alias &lt;别名&gt; -keystore &lt;密钥库存储位置和名称&gt;</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">keytool -genkeypair -alias demokey -keystore demo.keystore\n``<span class=\"token variable\"><span class=\"token variable\">`</span>  \n内容填写后，生成完毕  \n\n<span class=\"token comment\">#### 生成签名  </span>\njarsigner -verbose -keystore <span class=\"token operator\">&lt;</span>使用密钥库位置<span class=\"token operator\">></span> -signedjar <span class=\"token operator\">&lt;</span>签名后的包保存位置和名字<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>要签名的包保存位置和名字<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>别名，对应上面的别名<span class=\"token operator\">></span>\n\n<span class=\"token variable\">`</span></span>``shell\njarsigner -verbose -keystore /Users/liangqi/Desktop/apk/demo.keystore -signedjar ./tap_signed.apk ./tap_unsign.apk demokey<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>即可拿到签名后的包</p>\n"},{"_content":"## 防抖（debounce） \n#### 什么是防抖？\n\n - 一个函数被触发`n`秒后，才执行此函数\n - 如果`n`秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟n秒后执行此函数  \n \n这样的函数 **执行行为** 叫做函数防抖。 \n\n#### 应用场景   \n\n - 监听设备窗口大小发生改变，只有停止改变后的`200ms`执行`handleResize`方法\n\n\t```javascript\n\twindow.addEventListener('resize', debounce(handleResize, 200));\n\t```\n  \n - 监听表单填写，表达内容改变都去请求服务端数据，在每次表单执行输入停止的`500ms`后，才发起请求\n\n\t```javascript\n\tinput.addEventListener('change', debounce(handleRequest, 500));\n\t```  \n\t\n#### 代码实现  \n   \n```javascript\nfunction debounce(event, delay) {\n  let timer = null;\n  return function (...args) {  // ...args用来接受fun原有的参数，比如事件就是event对象\n    clearTimeout(timer); // 利用clearTimeout的特性，处理delay内，再此触发函数不做处理\n    timer = setTimeout(() => {\n      event.apply(this, args);\n    }, delay);\n  };\n}\n```\n## 节流（throttle）   \n \n#### 什么是节流？  \n\n - 单位时间内多次触发函数，函数只进行一次执行\n - 如果在这个单位时间内，多余的触发，全部不做处理。使函数按照规定的速率执行\n \n 这样的函数 **执行行为** 叫做函数节流。  \n \n#### 应用场景    \n\n - 滚动事件，持续滚动，间隔`200ms`执行    \n \n\t```javascript\n\tdom.addEventListener('scroll', throttle(handleScroll, 200)); \n\t```  \n - 鼠标滑动事件，一秒钟大概可以执行`60`次。使用节流函数优化，`200ms`执行一次。如果不做节流处理，可想而知浏览器压力有多大   \n\n\t```javascript\n\tdom.addEventListener('mousemove', throttle(handleMove, 200)); \n\t```     \n\t \n#### 代码实现    \n\n```javascript\nfunction throttle(fun, delay) {            \n　　let prev = Date.now();            \n　　return function(...args) {   // ...args用来接受fun原有的参数，比如事件就是event对象                        \n　　　　let now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　fun.apply(this, args);  \n　　　　　　prev = Date.now();                                    \n　　　　}            \n　　}        \n}\n```","source":"_drafts/last/docs/函数的防抖和节流.md","raw":"## 防抖（debounce） \n#### 什么是防抖？\n\n - 一个函数被触发`n`秒后，才执行此函数\n - 如果`n`秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟n秒后执行此函数  \n \n这样的函数 **执行行为** 叫做函数防抖。 \n\n#### 应用场景   \n\n - 监听设备窗口大小发生改变，只有停止改变后的`200ms`执行`handleResize`方法\n\n\t```javascript\n\twindow.addEventListener('resize', debounce(handleResize, 200));\n\t```\n  \n - 监听表单填写，表达内容改变都去请求服务端数据，在每次表单执行输入停止的`500ms`后，才发起请求\n\n\t```javascript\n\tinput.addEventListener('change', debounce(handleRequest, 500));\n\t```  \n\t\n#### 代码实现  \n   \n```javascript\nfunction debounce(event, delay) {\n  let timer = null;\n  return function (...args) {  // ...args用来接受fun原有的参数，比如事件就是event对象\n    clearTimeout(timer); // 利用clearTimeout的特性，处理delay内，再此触发函数不做处理\n    timer = setTimeout(() => {\n      event.apply(this, args);\n    }, delay);\n  };\n}\n```\n## 节流（throttle）   \n \n#### 什么是节流？  \n\n - 单位时间内多次触发函数，函数只进行一次执行\n - 如果在这个单位时间内，多余的触发，全部不做处理。使函数按照规定的速率执行\n \n 这样的函数 **执行行为** 叫做函数节流。  \n \n#### 应用场景    \n\n - 滚动事件，持续滚动，间隔`200ms`执行    \n \n\t```javascript\n\tdom.addEventListener('scroll', throttle(handleScroll, 200)); \n\t```  \n - 鼠标滑动事件，一秒钟大概可以执行`60`次。使用节流函数优化，`200ms`执行一次。如果不做节流处理，可想而知浏览器压力有多大   \n\n\t```javascript\n\tdom.addEventListener('mousemove', throttle(handleMove, 200)); \n\t```     \n\t \n#### 代码实现    \n\n```javascript\nfunction throttle(fun, delay) {            \n　　let prev = Date.now();            \n　　return function(...args) {   // ...args用来接受fun原有的参数，比如事件就是event对象                        \n　　　　let now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　fun.apply(this, args);  \n　　　　　　prev = Date.now();                                    \n　　　　}            \n　　}        \n}\n```","slug":"last/docs/函数的防抖和节流","published":0,"date":"2021-10-22T09:38:36.425Z","updated":"2021-10-22T09:38:36.425Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer9001wh7vm0kkacwwt","content":"<h2 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h2><h4 id=\"什么是防抖？\"><a href=\"#什么是防抖？\" class=\"headerlink\" title=\"什么是防抖？\"></a>什么是防抖？</h4><ul>\n<li>一个函数被触发<code>n</code>秒后，才执行此函数</li>\n<li>如果<code>n</code>秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟n秒后执行此函数  </li>\n</ul>\n<p>这样的函数 <strong>执行行为</strong> 叫做函数防抖。 </p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li><p>监听设备窗口大小发生改变，只有停止改变后的<code>200ms</code>执行<code>handleResize</code>方法</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>handleResize<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>监听表单填写，表达内容改变都去请求服务端数据，在每次表单执行输入停止的<code>500ms</code>后，才发起请求</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\tinput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>handleRequest<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n\t\n#### 代码实现  \n   \n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用clearTimeout的特性，处理delay内，再此触发函数不做处理</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h2></li>\n</ul>\n<h4 id=\"什么是节流？\"><a href=\"#什么是节流？\" class=\"headerlink\" title=\"什么是节流？\"></a>什么是节流？</h4><ul>\n<li>单位时间内多次触发函数，函数只进行一次执行</li>\n<li>如果在这个单位时间内，多余的触发，全部不做处理。使函数按照规定的速率执行</li>\n</ul>\n<p> 这样的函数 <strong>执行行为</strong> 叫做函数节流。  </p>\n<h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>滚动事件，持续滚动，间隔<code>200ms</code>执行     <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\tdom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>handleScroll<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n - 鼠标滑动事件，一秒钟大概可以执行</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">60</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">次。使用节流函数优化，</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">200</span>ms<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行一次。如果不做节流处理，可想而知浏览器压力有多大   \n\n\t</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\tdom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>handleMove<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">     \n\t \n#### 代码实现    \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象                        </span>\n　　　　<span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">>=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    \n　　　　　　<span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    \n　　　　<span class=\"token punctuation\">&#125;</span>            \n　　<span class=\"token punctuation\">&#125;</span>        \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防抖（debounce）\"><a href=\"#防抖（debounce）\" class=\"headerlink\" title=\"防抖（debounce）\"></a>防抖（debounce）</h2><h4 id=\"什么是防抖？\"><a href=\"#什么是防抖？\" class=\"headerlink\" title=\"什么是防抖？\"></a>什么是防抖？</h4><ul>\n<li>一个函数被触发<code>n</code>秒后，才执行此函数</li>\n<li>如果<code>n</code>秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟n秒后执行此函数  </li>\n</ul>\n<p>这样的函数 <strong>执行行为</strong> 叫做函数防抖。 </p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li><p>监听设备窗口大小发生改变，只有停止改变后的<code>200ms</code>执行<code>handleResize</code>方法</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>handleResize<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>监听表单填写，表达内容改变都去请求服务端数据，在每次表单执行输入停止的<code>500ms</code>后，才发起请求</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\tinput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>handleRequest<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n\t\n#### 代码实现  \n   \n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用clearTimeout的特性，处理delay内，再此触发函数不做处理</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"节流（throttle）\"><a href=\"#节流（throttle）\" class=\"headerlink\" title=\"节流（throttle）\"></a>节流（throttle）</h2></li>\n</ul>\n<h4 id=\"什么是节流？\"><a href=\"#什么是节流？\" class=\"headerlink\" title=\"什么是节流？\"></a>什么是节流？</h4><ul>\n<li>单位时间内多次触发函数，函数只进行一次执行</li>\n<li>如果在这个单位时间内，多余的触发，全部不做处理。使函数按照规定的速率执行</li>\n</ul>\n<p> 这样的函数 <strong>执行行为</strong> 叫做函数节流。  </p>\n<h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>滚动事件，持续滚动，间隔<code>200ms</code>执行     <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\tdom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>handleScroll<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n - 鼠标滑动事件，一秒钟大概可以执行</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">60</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">次。使用节流函数优化，</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">200</span>ms<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">执行一次。如果不做节流处理，可想而知浏览器压力有多大   \n\n\t</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\tdom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>handleMove<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">     \n\t \n#### 代码实现    \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象                        </span>\n　　　　<span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">>=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    \n　　　　　　<span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    \n　　　　<span class=\"token punctuation\">&#125;</span>            \n　　<span class=\"token punctuation\">&#125;</span>        \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"_content":"持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～\n\n## 实现sleep函数\n\n```javascript\n// 运行log函数后，希望得到结果：打印1，等待一秒钟，打印2，实现sleep函数\nfunction log() {\n  console.log(1);\n  sleep(1000);\n  console.log(2);\n}\nlog();\n\n\n// 解1：阻塞主线程\nfunction sleep(time) {\n  let t = Date.now()\n  while(Date.now() - t <= time) {}\n}\n// 解2：async/await调用\nfunction sleep(time) {\n  return new Promise((res)=> {\n  \tsetTimeOut(()=>{\n  \t\tresolve()\n  \t},time)\n  })\n}\n```\n\n## 柯里化(currying)\n\n```javascript\n// 题目：实现add函数, 输出6\nadd(1, 2, 3)\nadd(1)(2)(3)\nadd(1, 2)(3)\nadd(1)(2, 3)\n\n// 解1：不确定参数数量，一个方法\nfunction add (...agrg1) {\n  let t = function (...agrg2) {\n    return add(Array.from(agrg1).concat(Array.from(agrg2)).reduce((a, b)=> {return a+b}))\n  }\n  t.toString = ()=>{\n    return Array.from(agrg1).reduce((a, b)=> {return a+b})\n  }\n  return t\n}\n\nconsole.log(add(1, 2, 3)) // 6\nconsole.log(add(1)(2)(3)) // 6\nconsole.log(add(1, 2)(3)) // 6\nconsole.log(add(1)(2, 3)) // 6\n// 解2：确定参数数量，两个方法\nfunction currying(fn, ...args) {\n  if (args.length >= fn.length) {\n    return fn(...args);\n  } else {\n    return (...args2) => currying(fn, ...args, ...args2);\n  }\n}\n// add只可以接受三个参数\nlet add = function (a, b, c) {\n  return a+b+c\n}\n// 利用currying函数改造add函数，使add函数具备柯里化\nconst curry_add = currying(add)\n\nconsole.log(curry_add(1, 2, 3)) // 6\nconsole.log(curry_add(1)(2)(3)) // 6\nconsole.log(curry_add(1, 2)(3)) // 6\nconsole.log(curry_add(1)(2, 3)) // 6\n```\n## 约瑟夫环问题\n\n```javascript\n// N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下两个，求最后的胜利者。\nfunction f(n) {\n  if(n <= 2) {\n    return n === 1 ? [1] : [1, 2]\n  }\n  let temp = []\n  for(let i = 1, len = n+1; i < len; i++) {\n    temp.push(i)\n  }\n  return fun_inner(temp)\n  function fun_inner(temp, count) {\n    if(temp.length == 2) {\n      return temp\n    }\n    count = count || 1\n    for(let i = 0, len = temp.wlength; i < len; i++) {\n      count++\n      if(count === 3) {\n        temp.splice(i, 1)\n        count = 1\n      }\n    }\n    return fun_inner(temp, count)\n  }\n}\nconsole.log(f(10)) // [4, 10]\nconsole.log(f(11)) // [3, 9]\nconsole.log(f(12)) // [6, 9]\n```\n\n## 字符串相加\n\n```javascript\nlet addStrings = function(a, b) {\n  let res = []\n  let temp = 0\n  if(a.length > b.length) {\n    let t = a.length - b.length\n    for(let i = 0; i < t; i++) {\n      b = '0' + b\n    }\n  } else {\n    let t = b.length - a.length\n    for(let i = 0; i < t; i++) {\n      a = '0' + a\n    }\n  }\n  for(let len = Math.max(a.length, b.length) - 1; len >= 0; len--) {\n      let i = len\n      let t_a = Number(a.charAt(i) || 0)\n      let t_b = Number(b.charAt(i) || 0)\n      let count = String(t_a + t_b + temp)\n      temp = 0\n      if(count.length > 1) {\n        temp = Number(count.charAt(0))\n        res.push(count.charAt(1))\n      } else {\n        res.push(count)\n      }\n  }\n  if(temp !== 0) {\n    res.push(temp)\n  }\n  return res.reverse().join('')\n}\n```\n\n## 插入排序\n\n```javascript\nlet insertion = function(arr) {\n  let len = arr.length\n  for(let i = 1; i < len; i++) {\n    let cur = i\n    let j = i - 1\n    while(j >= 0) {\n      if(arr[cur] < arr[j]) {\n        [arr[cur], arr[j]] = [arr[j], arr[cur]]\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      }\n      j--\n    }\n  }\n  return arr\n}\n```\n\n## 选择排序\n\n```javascript\nlet selection = function(arr) {\n  let len = arr.length;\n  for(let i = 0; i < len; i++) {\n    let idx = i;\n    for(let j = i+1; j < len; j++) {\n      if(arr[j] < arr[idx]) {\n        idx = j\n      }\n    }\n    [arr[idx], arr[i]] = [arr[i], arr[idx]]\n  }\n  return arr\n}\n```\n\n## 快速排序\n\n```javascript\nlet quickSort = function(arr) {\n  if(arr.length <= 1) {return arr} // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i < len; i++) {\n    if(arr[i] < point) { // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    }else{\n      right.push(arr[i]) \n    }\n  }\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n}\n```\n\n## call & apply & bind实现\n\n```javascript\nwindow.name = 2\nlet obj = {\n  name: 1\n}\nfunction fn(a, b) {\n  console.log(this.name, a, b)\n  return 1\n}\n\n// call\nFunction.prototype.myCall = function(context) {\n  context = context || window // 如果上下文是null或者undefined，那么默认为window\n  context.fn = this // 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换\n  // let arg = Array.from(arguments).slice(1) 截取参数也能这么写\n  let arg = [...arguments].slice(1)// 截取除了第一个参数以后的参数\n  let t = context.fn(...arg) // 传参执行\n  delete context.fn // 设置完成后删除\n  return t // 并返回\n}\n\n// apply\nFunction.prototype.myApply = function(context) {\n  context = context || window \n  context.fn = this // 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换\n  let arg = [...arguments][1] // 参数是一个数组\n  if(!arg) { // 如果没参数，那么就不传参执行\n      return context.fn()\n  }\n  let t = context.fn(...arg)\n  delete context.fn\n  return t\n}\n\n// bind\nFunction.prototype.Mybind = function (ref, ...arg) {\n  // 当这个函数被new调用，需要解决两个问题\n  // 1: 不应该使用ref为this，根据情况判断，如果new调用那么this为实例。普通调用this为ref\n  // 2: \b因为bind返回是新函数，所有要bind新函数要继承_this的原型\n  let _this = this\n  let fun = function(...arg2) {\n    // 1的实现：this instanceof fun表达式为true说明被new调用，那么this就是新函数的this，也就是一个新的对象，否则就是第一个参数ref\n    thisArg = this instanceof fun ? this : ref;\n    return _this.apply(ref, [...arg, ...arg2])\n  }\n\n  // 2的实现：如果有prototype，那么继承\n  _this.prototype && (fun.prototype = Object.create(_this.prototype))\n  return fun\n}\n\nconsole.log(fn(1,2))\nconsole.log(fn.myCall(obj, 1,2))\nconsole.log(fn.myApply(obj, [1,2]))\nconsole.log(fn.Mybind(obj, [1,2])())\n```\n\n## 二叉树反转\n```javascript\nlet reverseTree = function(root) {\n    if(!root) return null\n    if(root.left || root.right) {\n        let temp = root.left\n        root.left = root.right\n        root.right = temp\n        reverseTree(root.left)\n        reverseTree(root.right)\n    }\n    return root\n};\n```\n## 链表反转\n```javascript\nvar reverseList = function(head) {\n  let [prev, curr] = [null, head]\n    while (curr) {\n      let tmp = curr.next    // 1. 临时存储当前指针后续内容\n      curr.next = prev       // 2. 反转链表\n      prev = curr            // 3. 接收反转结果\n      curr = tmp             // 4. 接回临时存储的后续内容\n    }\n  return prev\n}\n```\n## 二叉树遍历\n> 以`前序`遍历举例\n\n```javascript\n// 递归版\nfunction preTraverse(root) {\n  if(root) {\n    console.log(root.value)\n    preOrder(root.left)\n    preOrder(root.right)\n  }\n}\n// 非递归版\nfunction preTraverse(root) {\n   if(!root) {return false}\n   let stack = []\n   let p = root\n   while(stack.length || p) { \n     if(p) { \n       console.log(p.val)\n       stack.push(p)\n       p = p.left\n     } else { \n       p = stack.pop()\n       p = p.right\n     }\n  }\n}\n```\n\n\n\n\n","source":"_drafts/last/docs/手写代码面试题记录.md","raw":"持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～\n\n## 实现sleep函数\n\n```javascript\n// 运行log函数后，希望得到结果：打印1，等待一秒钟，打印2，实现sleep函数\nfunction log() {\n  console.log(1);\n  sleep(1000);\n  console.log(2);\n}\nlog();\n\n\n// 解1：阻塞主线程\nfunction sleep(time) {\n  let t = Date.now()\n  while(Date.now() - t <= time) {}\n}\n// 解2：async/await调用\nfunction sleep(time) {\n  return new Promise((res)=> {\n  \tsetTimeOut(()=>{\n  \t\tresolve()\n  \t},time)\n  })\n}\n```\n\n## 柯里化(currying)\n\n```javascript\n// 题目：实现add函数, 输出6\nadd(1, 2, 3)\nadd(1)(2)(3)\nadd(1, 2)(3)\nadd(1)(2, 3)\n\n// 解1：不确定参数数量，一个方法\nfunction add (...agrg1) {\n  let t = function (...agrg2) {\n    return add(Array.from(agrg1).concat(Array.from(agrg2)).reduce((a, b)=> {return a+b}))\n  }\n  t.toString = ()=>{\n    return Array.from(agrg1).reduce((a, b)=> {return a+b})\n  }\n  return t\n}\n\nconsole.log(add(1, 2, 3)) // 6\nconsole.log(add(1)(2)(3)) // 6\nconsole.log(add(1, 2)(3)) // 6\nconsole.log(add(1)(2, 3)) // 6\n// 解2：确定参数数量，两个方法\nfunction currying(fn, ...args) {\n  if (args.length >= fn.length) {\n    return fn(...args);\n  } else {\n    return (...args2) => currying(fn, ...args, ...args2);\n  }\n}\n// add只可以接受三个参数\nlet add = function (a, b, c) {\n  return a+b+c\n}\n// 利用currying函数改造add函数，使add函数具备柯里化\nconst curry_add = currying(add)\n\nconsole.log(curry_add(1, 2, 3)) // 6\nconsole.log(curry_add(1)(2)(3)) // 6\nconsole.log(curry_add(1, 2)(3)) // 6\nconsole.log(curry_add(1)(2, 3)) // 6\n```\n## 约瑟夫环问题\n\n```javascript\n// N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下两个，求最后的胜利者。\nfunction f(n) {\n  if(n <= 2) {\n    return n === 1 ? [1] : [1, 2]\n  }\n  let temp = []\n  for(let i = 1, len = n+1; i < len; i++) {\n    temp.push(i)\n  }\n  return fun_inner(temp)\n  function fun_inner(temp, count) {\n    if(temp.length == 2) {\n      return temp\n    }\n    count = count || 1\n    for(let i = 0, len = temp.wlength; i < len; i++) {\n      count++\n      if(count === 3) {\n        temp.splice(i, 1)\n        count = 1\n      }\n    }\n    return fun_inner(temp, count)\n  }\n}\nconsole.log(f(10)) // [4, 10]\nconsole.log(f(11)) // [3, 9]\nconsole.log(f(12)) // [6, 9]\n```\n\n## 字符串相加\n\n```javascript\nlet addStrings = function(a, b) {\n  let res = []\n  let temp = 0\n  if(a.length > b.length) {\n    let t = a.length - b.length\n    for(let i = 0; i < t; i++) {\n      b = '0' + b\n    }\n  } else {\n    let t = b.length - a.length\n    for(let i = 0; i < t; i++) {\n      a = '0' + a\n    }\n  }\n  for(let len = Math.max(a.length, b.length) - 1; len >= 0; len--) {\n      let i = len\n      let t_a = Number(a.charAt(i) || 0)\n      let t_b = Number(b.charAt(i) || 0)\n      let count = String(t_a + t_b + temp)\n      temp = 0\n      if(count.length > 1) {\n        temp = Number(count.charAt(0))\n        res.push(count.charAt(1))\n      } else {\n        res.push(count)\n      }\n  }\n  if(temp !== 0) {\n    res.push(temp)\n  }\n  return res.reverse().join('')\n}\n```\n\n## 插入排序\n\n```javascript\nlet insertion = function(arr) {\n  let len = arr.length\n  for(let i = 1; i < len; i++) {\n    let cur = i\n    let j = i - 1\n    while(j >= 0) {\n      if(arr[cur] < arr[j]) {\n        [arr[cur], arr[j]] = [arr[j], arr[cur]]\n        cur = j // 交换后i值变了，那把交换后的i找回来就可以了\n      }\n      j--\n    }\n  }\n  return arr\n}\n```\n\n## 选择排序\n\n```javascript\nlet selection = function(arr) {\n  let len = arr.length;\n  for(let i = 0; i < len; i++) {\n    let idx = i;\n    for(let j = i+1; j < len; j++) {\n      if(arr[j] < arr[idx]) {\n        idx = j\n      }\n    }\n    [arr[idx], arr[i]] = [arr[i], arr[idx]]\n  }\n  return arr\n}\n```\n\n## 快速排序\n\n```javascript\nlet quickSort = function(arr) {\n  if(arr.length <= 1) {return arr} // 递归边界条件\n  let pointIdx = Math.floor(arr.length / 2) // 在数组中间位置取一个基准点\n  let point = arr.splice(pointIdx, 1)[0] // 通过基准点找到这个值\n  let left = []\n  let right = []\n  for(let i = 0, len = arr.length; i < len; i++) {\n    if(arr[i] < point) { // 循环数组，小于point的放在left中，大的放在right中\n      left.push(arr[i])\n    }else{\n      right.push(arr[i]) \n    }\n  }\n  // 递归，让每一个left和right继续排序，直到left或right只有一项为止\n  return quickSort(left).concat(point, quickSort(right))\n}\n```\n\n## call & apply & bind实现\n\n```javascript\nwindow.name = 2\nlet obj = {\n  name: 1\n}\nfunction fn(a, b) {\n  console.log(this.name, a, b)\n  return 1\n}\n\n// call\nFunction.prototype.myCall = function(context) {\n  context = context || window // 如果上下文是null或者undefined，那么默认为window\n  context.fn = this // 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换\n  // let arg = Array.from(arguments).slice(1) 截取参数也能这么写\n  let arg = [...arguments].slice(1)// 截取除了第一个参数以后的参数\n  let t = context.fn(...arg) // 传参执行\n  delete context.fn // 设置完成后删除\n  return t // 并返回\n}\n\n// apply\nFunction.prototype.myApply = function(context) {\n  context = context || window \n  context.fn = this // 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换\n  let arg = [...arguments][1] // 参数是一个数组\n  if(!arg) { // 如果没参数，那么就不传参执行\n      return context.fn()\n  }\n  let t = context.fn(...arg)\n  delete context.fn\n  return t\n}\n\n// bind\nFunction.prototype.Mybind = function (ref, ...arg) {\n  // 当这个函数被new调用，需要解决两个问题\n  // 1: 不应该使用ref为this，根据情况判断，如果new调用那么this为实例。普通调用this为ref\n  // 2: \b因为bind返回是新函数，所有要bind新函数要继承_this的原型\n  let _this = this\n  let fun = function(...arg2) {\n    // 1的实现：this instanceof fun表达式为true说明被new调用，那么this就是新函数的this，也就是一个新的对象，否则就是第一个参数ref\n    thisArg = this instanceof fun ? this : ref;\n    return _this.apply(ref, [...arg, ...arg2])\n  }\n\n  // 2的实现：如果有prototype，那么继承\n  _this.prototype && (fun.prototype = Object.create(_this.prototype))\n  return fun\n}\n\nconsole.log(fn(1,2))\nconsole.log(fn.myCall(obj, 1,2))\nconsole.log(fn.myApply(obj, [1,2]))\nconsole.log(fn.Mybind(obj, [1,2])())\n```\n\n## 二叉树反转\n```javascript\nlet reverseTree = function(root) {\n    if(!root) return null\n    if(root.left || root.right) {\n        let temp = root.left\n        root.left = root.right\n        root.right = temp\n        reverseTree(root.left)\n        reverseTree(root.right)\n    }\n    return root\n};\n```\n## 链表反转\n```javascript\nvar reverseList = function(head) {\n  let [prev, curr] = [null, head]\n    while (curr) {\n      let tmp = curr.next    // 1. 临时存储当前指针后续内容\n      curr.next = prev       // 2. 反转链表\n      prev = curr            // 3. 接收反转结果\n      curr = tmp             // 4. 接回临时存储的后续内容\n    }\n  return prev\n}\n```\n## 二叉树遍历\n> 以`前序`遍历举例\n\n```javascript\n// 递归版\nfunction preTraverse(root) {\n  if(root) {\n    console.log(root.value)\n    preOrder(root.left)\n    preOrder(root.right)\n  }\n}\n// 非递归版\nfunction preTraverse(root) {\n   if(!root) {return false}\n   let stack = []\n   let p = root\n   while(stack.length || p) { \n     if(p) { \n       console.log(p.val)\n       stack.push(p)\n       p = p.left\n     } else { \n       p = stack.pop()\n       p = p.right\n     }\n  }\n}\n```\n\n\n\n\n","slug":"last/docs/手写代码面试题记录","published":0,"date":"2021-10-22T09:38:36.425Z","updated":"2021-10-22T09:38:36.425Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mer9001xh7vmcs0jav4z","content":"<p>持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～</p>\n<h2 id=\"实现sleep函数\"><a href=\"#实现sleep函数\" class=\"headerlink\" title=\"实现sleep函数\"></a>实现sleep函数</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 运行log函数后，希望得到结果：打印1，等待一秒钟，打印2，实现sleep函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 解1：阻塞主线程</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;=</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 解2：async/await调用</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  \t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"柯里化-currying\"><a href=\"#柯里化-currying\" class=\"headerlink\" title=\"柯里化(currying)\"></a>柯里化(currying)</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 题目：实现add函数, 输出6</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 解1：不确定参数数量，一个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>agrg1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">t</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>agrg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 解2：确定参数数量，两个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// add只可以接受三个参数</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 利用currying函数改造add函数，使add函数具备柯里化</span>\n<span class=\"token keyword\">const</span> curry_add <span class=\"token operator\">=</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"约瑟夫环问题\"><a href=\"#约瑟夫环问题\" class=\"headerlink\" title=\"约瑟夫环问题\"></a>约瑟夫环问题</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下两个，求最后的胜利者。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temp<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> temp\n    <span class=\"token punctuation\">&#125;</span>\n    count <span class=\"token operator\">=</span> count <span class=\"token operator\">||</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>wlength<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 10]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 9]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [6, 9]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串相加\"><a href=\"#字符串相加\" class=\"headerlink\" title=\"字符串相加\"></a>字符串相加</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">addStrings</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      b <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      a <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> a\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> len\n      <span class=\"token keyword\">let</span> t_a <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> t_b <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>t_a <span class=\"token operator\">+</span> t_b <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">)</span>\n      temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        temp <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">insertion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> i\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        cur <span class=\"token operator\">=</span> j <span class=\"token comment\">// 交换后i值变了，那把交换后的i找回来就可以了</span>\n      <span class=\"token punctuation\">&#125;</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">selection</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        idx <span class=\"token operator\">=</span> j\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">quickSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 递归边界条件</span>\n  <span class=\"token keyword\">let</span> pointIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在数组中间位置取一个基准点</span>\n  <span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pointIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 通过基准点找到这个值</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环数组，小于point的放在left中，大的放在right中</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 递归，让每一个left和right继续排序，直到left或right只有一项为止</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"call-amp-apply-amp-bind实现\"><a href=\"#call-amp-apply-amp-bind实现\" class=\"headerlink\" title=\"call &amp; apply &amp; bind实现\"></a>call &amp; apply &amp; bind实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// call</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window <span class=\"token comment\">// 如果上下文是null或者undefined，那么默认为window</span>\n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换</span>\n  <span class=\"token comment\">// let arg = Array.from(arguments).slice(1) 截取参数也能这么写</span>\n  <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 截取除了第一个参数以后的参数</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传参执行</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn <span class=\"token comment\">// 设置完成后删除</span>\n  <span class=\"token keyword\">return</span> t <span class=\"token comment\">// 并返回</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// apply</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window \n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换</span>\n  <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 参数是一个数组</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果没参数，那么就不传参执行</span>\n      <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn\n  <span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// bind</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Mybind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ref<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 当这个函数被new调用，需要解决两个问题</span>\n  <span class=\"token comment\">// 1: 不应该使用ref为this，根据情况判断，如果new调用那么this为实例。普通调用this为ref</span>\n  <span class=\"token comment\">// 2: \b因为bind返回是新函数，所有要bind新函数要继承_this的原型</span>\n  <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1的实现：this instanceof fun表达式为true说明被new调用，那么this就是新函数的this，也就是一个新的对象，否则就是第一个参数ref</span>\n    thisArg <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">fun</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> ref<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_this</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 2的实现：如果有prototype，那么继承</span>\n  <span class=\"token class-name\">_this</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">_this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> fun\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">myCall</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">myApply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">Mybind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二叉树反转\"><a href=\"#二叉树反转\" class=\"headerlink\" title=\"二叉树反转\"></a>二叉树反转</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">reverseTree</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">||</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> temp\n        <span class=\"token function\">reverseTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">reverseTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> root\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"链表反转\"><a href=\"#链表反转\" class=\"headerlink\" title=\"链表反转\"></a>链表反转</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reverseList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next    <span class=\"token comment\">// 1. 临时存储当前指针后续内容</span>\n      curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prev       <span class=\"token comment\">// 2. 反转链表</span>\n      prev <span class=\"token operator\">=</span> curr            <span class=\"token comment\">// 3. 接收反转结果</span>\n      curr <span class=\"token operator\">=</span> tmp             <span class=\"token comment\">// 4. 接回临时存储的后续内容</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> prev\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h2><blockquote>\n<p>以<code>前序</code>遍历举例</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 递归版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preTraverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 非递归版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preTraverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> root\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n       stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n       p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left\n     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \n       p <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～</p>\n<h2 id=\"实现sleep函数\"><a href=\"#实现sleep函数\" class=\"headerlink\" title=\"实现sleep函数\"></a>实现sleep函数</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 运行log函数后，希望得到结果：打印1，等待一秒钟，打印2，实现sleep函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 解1：阻塞主线程</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;=</span> time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 解2：async/await调用</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  \t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"柯里化-currying\"><a href=\"#柯里化-currying\" class=\"headerlink\" title=\"柯里化(currying)\"></a>柯里化(currying)</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 题目：实现add函数, 输出6</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 解1：不确定参数数量，一个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>agrg1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">t</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>agrg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>agrg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 解2：确定参数数量，两个方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// add只可以接受三个参数</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 利用currying函数改造add函数，使add函数具备柯里化</span>\n<span class=\"token keyword\">const</span> curry_add <span class=\"token operator\">=</span> <span class=\"token function\">currying</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">curry_add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"约瑟夫环问题\"><a href=\"#约瑟夫环问题\" class=\"headerlink\" title=\"约瑟夫环问题\"></a>约瑟夫环问题</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下两个，求最后的胜利者。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">temp<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> temp\n    <span class=\"token punctuation\">&#125;</span>\n    count <span class=\"token operator\">=</span> count <span class=\"token operator\">||</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>wlength<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fun_inner</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 10]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 9]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [6, 9]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串相加\"><a href=\"#字符串相加\" class=\"headerlink\" title=\"字符串相加\"></a>字符串相加</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">addStrings</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      b <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      a <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> a\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> len\n      <span class=\"token keyword\">let</span> t_a <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> t_b <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>t_a <span class=\"token operator\">+</span> t_b <span class=\"token operator\">+</span> temp<span class=\"token punctuation\">)</span>\n      temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        temp <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">insertion</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> i\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        cur <span class=\"token operator\">=</span> j <span class=\"token comment\">// 交换后i值变了，那把交换后的i找回来就可以了</span>\n      <span class=\"token punctuation\">&#125;</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">selection</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        idx <span class=\"token operator\">=</span> j\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">quickSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 递归边界条件</span>\n  <span class=\"token keyword\">let</span> pointIdx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在数组中间位置取一个基准点</span>\n  <span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pointIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 通过基准点找到这个值</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 循环数组，小于point的放在left中，大的放在right中</span>\n      left<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      right<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 递归，让每一个left和right继续排序，直到left或right只有一项为止</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"call-amp-apply-amp-bind实现\"><a href=\"#call-amp-apply-amp-bind实现\" class=\"headerlink\" title=\"call &amp; apply &amp; bind实现\"></a>call &amp; apply &amp; bind实现</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// call</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window <span class=\"token comment\">// 如果上下文是null或者undefined，那么默认为window</span>\n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换</span>\n  <span class=\"token comment\">// let arg = Array.from(arguments).slice(1) 截取参数也能这么写</span>\n  <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 截取除了第一个参数以后的参数</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传参执行</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn <span class=\"token comment\">// 设置完成后删除</span>\n  <span class=\"token keyword\">return</span> t <span class=\"token comment\">// 并返回</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// apply</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window \n  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 设置执行函数到obj上，利用谁调用，谁就是this的特性，来实现this转换</span>\n  <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 参数是一个数组</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果没参数，那么就不传参执行</span>\n      <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn\n  <span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// bind</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Mybind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ref<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 当这个函数被new调用，需要解决两个问题</span>\n  <span class=\"token comment\">// 1: 不应该使用ref为this，根据情况判断，如果new调用那么this为实例。普通调用this为ref</span>\n  <span class=\"token comment\">// 2: \b因为bind返回是新函数，所有要bind新函数要继承_this的原型</span>\n  <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 1的实现：this instanceof fun表达式为true说明被new调用，那么this就是新函数的this，也就是一个新的对象，否则就是第一个参数ref</span>\n    thisArg <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">fun</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> ref<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_this</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arg<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 2的实现：如果有prototype，那么继承</span>\n  <span class=\"token class-name\">_this</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">_this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> fun\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">myCall</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">myApply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">Mybind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二叉树反转\"><a href=\"#二叉树反转\" class=\"headerlink\" title=\"二叉树反转\"></a>二叉树反转</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">reverseTree</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">||</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> temp\n        <span class=\"token function\">reverseTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">reverseTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> root\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"链表反转\"><a href=\"#链表反转\" class=\"headerlink\" title=\"链表反转\"></a>链表反转</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reverseList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next    <span class=\"token comment\">// 1. 临时存储当前指针后续内容</span>\n      curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prev       <span class=\"token comment\">// 2. 反转链表</span>\n      prev <span class=\"token operator\">=</span> curr            <span class=\"token comment\">// 3. 接收反转结果</span>\n      curr <span class=\"token operator\">=</span> tmp             <span class=\"token comment\">// 4. 接回临时存储的后续内容</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> prev\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h2><blockquote>\n<p>以<code>前序</code>遍历举例</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 递归版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preTraverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 非递归版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">preTraverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">let</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> root\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n       stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n       p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left\n     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \n       p <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n"},{"_content":"## 旅行者计划\n30多年前，美国发起了一项太空计划：**旅行者计划**。目的是为了探测木星和土星，其中包含`旅行者1号`和`旅行者2号`，在1977年，美国向太空发射了这两颗探测器。\n\n## 伟大的旅行者1号\n> 它重800公斤，上面搭载了11个探测器，有16个推进器和一个燃料箱，和三个核能电池，上面还有一台电脑，只有74kb，没有内存和硬盘，用磁带存储，就这样一个简陋的设备，到目前为止还在工作。\n\n旅行者1号自1977年9月5号发射，已经飞行了**44**年，距离地球**214**亿公里，他已经不在太阳系以内了，是目前人造探测器飞行距离最远的一颗探测器，部分功能到目前为止仍可正常运作。\n![WechatIMG4674.png](./img/about-traveller/2d6MCQ3TKquiVyF.png)\n![WechatIMG4676.png](./img/about-traveller/MgVjFXxtsENKv4l.png)\n\n选择在1977年发射也是有原因的，正好那个时候，土星木星天王星海王星冥王星，都在太阳的同一侧，几乎连成一条线。这种情况175～176年才会出现一次。大大减少了探测成本。\n![WechatIMG4675.png](./img/about-traveller/4Wa2eSdZ3X98BfK.png)\n\n关于动力，为什么可以飞这么久，因为它采用两个飞行方式，一个是惯性飞行，一个是重力协助，惯性飞行就是宇宙真空没什么阻力，给它一个力就可以一直飞。重力协助是当飞行到大行星附近时，会被大行星的重力拉过来，当和大行星有一定距离后，也由于重力会被甩出去，也叫引力弹弓。利用这两个飞行方式非常节约能源，基本不需要什么燃料，搭载三颗核能电池也是用于照相机和探测器的工作消耗。\n![WechatIMG4677.png](./img/about-traveller/Mi9vh214uZgD8z5.png)\n\n发射旅行者1号主要有两个目的：一个是**探测木星和土星**，另外一个**探测地外文明**。第一个目的完美的完成了，设计之初，就没准备让这这颗飞行器回到地球，一直飞出太阳系向宇宙深处进发，考虑到这一点，在上面装了一个*金唱盘*，铜制的，表面镀金。\n![WechatIMG4679.png](./img/about-traveller/bszNOfBKhiYaQv7.png)\n![WechatIMG4678.png](./img/about-traveller/n3kxjOqDQASw4Wz.png)\n这个上面记载了太阳系的坐标，里面的行星的具体参数，特别标注的地球，证明唱盘来自这里。大自然的声音，包括滑浪，风，雷，鸟鸣，歌声，鲸鱼等其他动物叫声，并挑选来自不同文化的及年代的音乐。人体构造解刨图，计量单位的标准，时间和长度，里面还有一块非常纯的`铀238`，\n![WechatIMG4680.png](./img/about-traveller/upB4hvTydZ9IP1r.png)因为铀238的半衰期是`44.7`亿年，收到的人根据衰变程度就可以推断出，就能反推唱盘的生产日期。\n![WechatIMG4666.png](./img/about-traveller/p5kXGl2DtbcaSnW.png)\n如上图，在唱盘的一面上，标注了使用方法，包括旋转周期，唱片的时间单位，地球在银河系的位置，图片读取方式等，内容有一些人类生活，自然的图片。\n![WechatIMG4667.png](./img/about-traveller/KJPlgxfCpuGHndB.png)\n![WechatIMG4668.png](./img/about-traveller/Ia7qdlQ4PT1ws3j.png)\n![WechatIMG4670.png](./img/about-traveller/vTfbrW8JKkQFRcP.png)\n![WechatIMG4669.png](./img/about-traveller/BvYORyZgq9amV7A.png)\n除此外，还有90分钟的歌曲，包括不同文化的古典音乐，其中包括有一首中国曲子：高山流水。还有用55种语言说的\"你好\"，包括普通话和粤语。\n\n金唱盘内全部内容，[见B站](https://www.bilibili.com/video/av41308060/)\n\n旅行者1号，去土星其实是为了要去探测土星的一个卫星，泰坦，因为泰坦的环境地球类似，当旅行者1号到达泰坦，果然泰坦上有着厚厚的黄色大气，主要是氮气和甲烷，地表温度为零下`179`度。\n![WechatIMG4672.png](./img/about-traveller/TewXOIzalCK5Egh.png)\n旅行者1号在探测完泰坦之后，由于土星重力，偏移了黄道面，也就是9大行星的平面。在九年后，nasa又联系了旅行者1号，让它拍一张**太阳系全家福**，就分别拍了39张九大行星照片。\n![WechatIMG4673.png](./img/about-traveller/NqjhKXn3kgIrDlS.png)这个项目的首席天文学家：卡尔萨根看完地球照片后写了一本非常著名的书《暗淡蓝点》，其中非常经典的一段话：   \n \n**如果再来看一眼这个小点  \n那是我们的家园，我们的所有。\n你所爱所知的每一个人、所听说乃至所存在过的每一个人，都在小点上度过一生。\n欢乐与痛苦，宗教与学说，猎人与强盗，英雄与懦夫，文明的创造者与毁灭者，国王与农夫，情侣，父母，儿童，发明家和探险家，崇高的老师，腐败的政客，耀眼的明星，至高无上的领袖，历史上所有的圣人与罪犯，都住在这里——它仅仅是一粒悬浮再阳光中的浮尘。**  \n\n拍完暗淡蓝点后，nasa就把旅行者1号的相机永久关闭了，为了省电。现在正在以每秒14公里的速度远离太阳向宇宙深处进发，但在2025年之后，旅行者一号就会彻底和地球失去联系，并成为漂浮在宇宙中的一艘“流浪探测器”。  \n推测再过4万年，他将利用引力弹弓到达离太阳系最近的一颗恒星上`gliese 445`，大概几百万年后，就能到另外一颗恒星附近，或许那个时候人类已经不存在了。对于最多有120年寿命的梦想着星辰大海的人类来说，的确让人感到绝望，可有金唱盘，它可以证明人类在浩瀚无垠的宇宙存在过的的一个证据吧，在`21/05/13`，也就是两天前，有一条关于旅行者1号的新闻，[“旅行者1号”听到星际“温柔雨声”](https://finance.sina.com.cn/tech/2021-05-13/doc-ikmxzfmm2145469.shtml)\n\n","source":"_drafts/last/docs/旅行者1号.md","raw":"## 旅行者计划\n30多年前，美国发起了一项太空计划：**旅行者计划**。目的是为了探测木星和土星，其中包含`旅行者1号`和`旅行者2号`，在1977年，美国向太空发射了这两颗探测器。\n\n## 伟大的旅行者1号\n> 它重800公斤，上面搭载了11个探测器，有16个推进器和一个燃料箱，和三个核能电池，上面还有一台电脑，只有74kb，没有内存和硬盘，用磁带存储，就这样一个简陋的设备，到目前为止还在工作。\n\n旅行者1号自1977年9月5号发射，已经飞行了**44**年，距离地球**214**亿公里，他已经不在太阳系以内了，是目前人造探测器飞行距离最远的一颗探测器，部分功能到目前为止仍可正常运作。\n![WechatIMG4674.png](./img/about-traveller/2d6MCQ3TKquiVyF.png)\n![WechatIMG4676.png](./img/about-traveller/MgVjFXxtsENKv4l.png)\n\n选择在1977年发射也是有原因的，正好那个时候，土星木星天王星海王星冥王星，都在太阳的同一侧，几乎连成一条线。这种情况175～176年才会出现一次。大大减少了探测成本。\n![WechatIMG4675.png](./img/about-traveller/4Wa2eSdZ3X98BfK.png)\n\n关于动力，为什么可以飞这么久，因为它采用两个飞行方式，一个是惯性飞行，一个是重力协助，惯性飞行就是宇宙真空没什么阻力，给它一个力就可以一直飞。重力协助是当飞行到大行星附近时，会被大行星的重力拉过来，当和大行星有一定距离后，也由于重力会被甩出去，也叫引力弹弓。利用这两个飞行方式非常节约能源，基本不需要什么燃料，搭载三颗核能电池也是用于照相机和探测器的工作消耗。\n![WechatIMG4677.png](./img/about-traveller/Mi9vh214uZgD8z5.png)\n\n发射旅行者1号主要有两个目的：一个是**探测木星和土星**，另外一个**探测地外文明**。第一个目的完美的完成了，设计之初，就没准备让这这颗飞行器回到地球，一直飞出太阳系向宇宙深处进发，考虑到这一点，在上面装了一个*金唱盘*，铜制的，表面镀金。\n![WechatIMG4679.png](./img/about-traveller/bszNOfBKhiYaQv7.png)\n![WechatIMG4678.png](./img/about-traveller/n3kxjOqDQASw4Wz.png)\n这个上面记载了太阳系的坐标，里面的行星的具体参数，特别标注的地球，证明唱盘来自这里。大自然的声音，包括滑浪，风，雷，鸟鸣，歌声，鲸鱼等其他动物叫声，并挑选来自不同文化的及年代的音乐。人体构造解刨图，计量单位的标准，时间和长度，里面还有一块非常纯的`铀238`，\n![WechatIMG4680.png](./img/about-traveller/upB4hvTydZ9IP1r.png)因为铀238的半衰期是`44.7`亿年，收到的人根据衰变程度就可以推断出，就能反推唱盘的生产日期。\n![WechatIMG4666.png](./img/about-traveller/p5kXGl2DtbcaSnW.png)\n如上图，在唱盘的一面上，标注了使用方法，包括旋转周期，唱片的时间单位，地球在银河系的位置，图片读取方式等，内容有一些人类生活，自然的图片。\n![WechatIMG4667.png](./img/about-traveller/KJPlgxfCpuGHndB.png)\n![WechatIMG4668.png](./img/about-traveller/Ia7qdlQ4PT1ws3j.png)\n![WechatIMG4670.png](./img/about-traveller/vTfbrW8JKkQFRcP.png)\n![WechatIMG4669.png](./img/about-traveller/BvYORyZgq9amV7A.png)\n除此外，还有90分钟的歌曲，包括不同文化的古典音乐，其中包括有一首中国曲子：高山流水。还有用55种语言说的\"你好\"，包括普通话和粤语。\n\n金唱盘内全部内容，[见B站](https://www.bilibili.com/video/av41308060/)\n\n旅行者1号，去土星其实是为了要去探测土星的一个卫星，泰坦，因为泰坦的环境地球类似，当旅行者1号到达泰坦，果然泰坦上有着厚厚的黄色大气，主要是氮气和甲烷，地表温度为零下`179`度。\n![WechatIMG4672.png](./img/about-traveller/TewXOIzalCK5Egh.png)\n旅行者1号在探测完泰坦之后，由于土星重力，偏移了黄道面，也就是9大行星的平面。在九年后，nasa又联系了旅行者1号，让它拍一张**太阳系全家福**，就分别拍了39张九大行星照片。\n![WechatIMG4673.png](./img/about-traveller/NqjhKXn3kgIrDlS.png)这个项目的首席天文学家：卡尔萨根看完地球照片后写了一本非常著名的书《暗淡蓝点》，其中非常经典的一段话：   \n \n**如果再来看一眼这个小点  \n那是我们的家园，我们的所有。\n你所爱所知的每一个人、所听说乃至所存在过的每一个人，都在小点上度过一生。\n欢乐与痛苦，宗教与学说，猎人与强盗，英雄与懦夫，文明的创造者与毁灭者，国王与农夫，情侣，父母，儿童，发明家和探险家，崇高的老师，腐败的政客，耀眼的明星，至高无上的领袖，历史上所有的圣人与罪犯，都住在这里——它仅仅是一粒悬浮再阳光中的浮尘。**  \n\n拍完暗淡蓝点后，nasa就把旅行者1号的相机永久关闭了，为了省电。现在正在以每秒14公里的速度远离太阳向宇宙深处进发，但在2025年之后，旅行者一号就会彻底和地球失去联系，并成为漂浮在宇宙中的一艘“流浪探测器”。  \n推测再过4万年，他将利用引力弹弓到达离太阳系最近的一颗恒星上`gliese 445`，大概几百万年后，就能到另外一颗恒星附近，或许那个时候人类已经不存在了。对于最多有120年寿命的梦想着星辰大海的人类来说，的确让人感到绝望，可有金唱盘，它可以证明人类在浩瀚无垠的宇宙存在过的的一个证据吧，在`21/05/13`，也就是两天前，有一条关于旅行者1号的新闻，[“旅行者1号”听到星际“温柔雨声”](https://finance.sina.com.cn/tech/2021-05-13/doc-ikmxzfmm2145469.shtml)\n\n","slug":"last/docs/旅行者1号","published":0,"date":"2021-10-22T09:38:36.425Z","updated":"2021-10-22T09:38:36.425Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28merc001yh7vmclqt3v0n","content":"<h2 id=\"旅行者计划\"><a href=\"#旅行者计划\" class=\"headerlink\" title=\"旅行者计划\"></a>旅行者计划</h2><p>30多年前，美国发起了一项太空计划：<strong>旅行者计划</strong>。目的是为了探测木星和土星，其中包含<code>旅行者1号</code>和<code>旅行者2号</code>，在1977年，美国向太空发射了这两颗探测器。</p>\n<h2 id=\"伟大的旅行者1号\"><a href=\"#伟大的旅行者1号\" class=\"headerlink\" title=\"伟大的旅行者1号\"></a>伟大的旅行者1号</h2><blockquote>\n<p>它重800公斤，上面搭载了11个探测器，有16个推进器和一个燃料箱，和三个核能电池，上面还有一台电脑，只有74kb，没有内存和硬盘，用磁带存储，就这样一个简陋的设备，到目前为止还在工作。</p>\n</blockquote>\n<p>旅行者1号自1977年9月5号发射，已经飞行了<strong>44</strong>年，距离地球<strong>214</strong>亿公里，他已经不在太阳系以内了，是目前人造探测器飞行距离最远的一颗探测器，部分功能到目前为止仍可正常运作。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/2d6MCQ3TKquiVyF.png\" alt=\"WechatIMG4674.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/MgVjFXxtsENKv4l.png\" alt=\"WechatIMG4676.png\"></p>\n<p>选择在1977年发射也是有原因的，正好那个时候，土星木星天王星海王星冥王星，都在太阳的同一侧，几乎连成一条线。这种情况175～176年才会出现一次。大大减少了探测成本。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/4Wa2eSdZ3X98BfK.png\" alt=\"WechatIMG4675.png\"></p>\n<p>关于动力，为什么可以飞这么久，因为它采用两个飞行方式，一个是惯性飞行，一个是重力协助，惯性飞行就是宇宙真空没什么阻力，给它一个力就可以一直飞。重力协助是当飞行到大行星附近时，会被大行星的重力拉过来，当和大行星有一定距离后，也由于重力会被甩出去，也叫引力弹弓。利用这两个飞行方式非常节约能源，基本不需要什么燃料，搭载三颗核能电池也是用于照相机和探测器的工作消耗。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/Mi9vh214uZgD8z5.png\" alt=\"WechatIMG4677.png\"></p>\n<p>发射旅行者1号主要有两个目的：一个是<strong>探测木星和土星</strong>，另外一个<strong>探测地外文明</strong>。第一个目的完美的完成了，设计之初，就没准备让这这颗飞行器回到地球，一直飞出太阳系向宇宙深处进发，考虑到这一点，在上面装了一个<em>金唱盘</em>，铜制的，表面镀金。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/bszNOfBKhiYaQv7.png\" alt=\"WechatIMG4679.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/n3kxjOqDQASw4Wz.png\" alt=\"WechatIMG4678.png\"><br>这个上面记载了太阳系的坐标，里面的行星的具体参数，特别标注的地球，证明唱盘来自这里。大自然的声音，包括滑浪，风，雷，鸟鸣，歌声，鲸鱼等其他动物叫声，并挑选来自不同文化的及年代的音乐。人体构造解刨图，计量单位的标准，时间和长度，里面还有一块非常纯的<code>铀238</code>，<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/upB4hvTydZ9IP1r.png\" alt=\"WechatIMG4680.png\">因为铀238的半衰期是<code>44.7</code>亿年，收到的人根据衰变程度就可以推断出，就能反推唱盘的生产日期。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/p5kXGl2DtbcaSnW.png\" alt=\"WechatIMG4666.png\"><br>如上图，在唱盘的一面上，标注了使用方法，包括旋转周期，唱片的时间单位，地球在银河系的位置，图片读取方式等，内容有一些人类生活，自然的图片。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/KJPlgxfCpuGHndB.png\" alt=\"WechatIMG4667.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/Ia7qdlQ4PT1ws3j.png\" alt=\"WechatIMG4668.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/vTfbrW8JKkQFRcP.png\" alt=\"WechatIMG4670.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/BvYORyZgq9amV7A.png\" alt=\"WechatIMG4669.png\"><br>除此外，还有90分钟的歌曲，包括不同文化的古典音乐，其中包括有一首中国曲子：高山流水。还有用55种语言说的”你好”，包括普通话和粤语。</p>\n<p>金唱盘内全部内容，<a href=\"https://www.bilibili.com/video/av41308060/\">见B站</a></p>\n<p>旅行者1号，去土星其实是为了要去探测土星的一个卫星，泰坦，因为泰坦的环境地球类似，当旅行者1号到达泰坦，果然泰坦上有着厚厚的黄色大气，主要是氮气和甲烷，地表温度为零下<code>179</code>度。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/TewXOIzalCK5Egh.png\" alt=\"WechatIMG4672.png\"><br>旅行者1号在探测完泰坦之后，由于土星重力，偏移了黄道面，也就是9大行星的平面。在九年后，nasa又联系了旅行者1号，让它拍一张<strong>太阳系全家福</strong>，就分别拍了39张九大行星照片。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/NqjhKXn3kgIrDlS.png\" alt=\"WechatIMG4673.png\">这个项目的首席天文学家：卡尔萨根看完地球照片后写了一本非常著名的书《暗淡蓝点》，其中非常经典的一段话：   </p>\n<p><strong>如果再来看一眼这个小点<br>那是我们的家园，我们的所有。<br>你所爱所知的每一个人、所听说乃至所存在过的每一个人，都在小点上度过一生。<br>欢乐与痛苦，宗教与学说，猎人与强盗，英雄与懦夫，文明的创造者与毁灭者，国王与农夫，情侣，父母，儿童，发明家和探险家，崇高的老师，腐败的政客，耀眼的明星，至高无上的领袖，历史上所有的圣人与罪犯，都住在这里——它仅仅是一粒悬浮再阳光中的浮尘。</strong>  </p>\n<p>拍完暗淡蓝点后，nasa就把旅行者1号的相机永久关闭了，为了省电。现在正在以每秒14公里的速度远离太阳向宇宙深处进发，但在2025年之后，旅行者一号就会彻底和地球失去联系，并成为漂浮在宇宙中的一艘“流浪探测器”。<br>推测再过4万年，他将利用引力弹弓到达离太阳系最近的一颗恒星上<code>gliese 445</code>，大概几百万年后，就能到另外一颗恒星附近，或许那个时候人类已经不存在了。对于最多有120年寿命的梦想着星辰大海的人类来说，的确让人感到绝望，可有金唱盘，它可以证明人类在浩瀚无垠的宇宙存在过的的一个证据吧，在<code>21/05/13</code>，也就是两天前，有一条关于旅行者1号的新闻，<a href=\"https://finance.sina.com.cn/tech/2021-05-13/doc-ikmxzfmm2145469.shtml\">“旅行者1号”听到星际“温柔雨声”</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"旅行者计划\"><a href=\"#旅行者计划\" class=\"headerlink\" title=\"旅行者计划\"></a>旅行者计划</h2><p>30多年前，美国发起了一项太空计划：<strong>旅行者计划</strong>。目的是为了探测木星和土星，其中包含<code>旅行者1号</code>和<code>旅行者2号</code>，在1977年，美国向太空发射了这两颗探测器。</p>\n<h2 id=\"伟大的旅行者1号\"><a href=\"#伟大的旅行者1号\" class=\"headerlink\" title=\"伟大的旅行者1号\"></a>伟大的旅行者1号</h2><blockquote>\n<p>它重800公斤，上面搭载了11个探测器，有16个推进器和一个燃料箱，和三个核能电池，上面还有一台电脑，只有74kb，没有内存和硬盘，用磁带存储，就这样一个简陋的设备，到目前为止还在工作。</p>\n</blockquote>\n<p>旅行者1号自1977年9月5号发射，已经飞行了<strong>44</strong>年，距离地球<strong>214</strong>亿公里，他已经不在太阳系以内了，是目前人造探测器飞行距离最远的一颗探测器，部分功能到目前为止仍可正常运作。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/2d6MCQ3TKquiVyF.png\" alt=\"WechatIMG4674.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/MgVjFXxtsENKv4l.png\" alt=\"WechatIMG4676.png\"></p>\n<p>选择在1977年发射也是有原因的，正好那个时候，土星木星天王星海王星冥王星，都在太阳的同一侧，几乎连成一条线。这种情况175～176年才会出现一次。大大减少了探测成本。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/4Wa2eSdZ3X98BfK.png\" alt=\"WechatIMG4675.png\"></p>\n<p>关于动力，为什么可以飞这么久，因为它采用两个飞行方式，一个是惯性飞行，一个是重力协助，惯性飞行就是宇宙真空没什么阻力，给它一个力就可以一直飞。重力协助是当飞行到大行星附近时，会被大行星的重力拉过来，当和大行星有一定距离后，也由于重力会被甩出去，也叫引力弹弓。利用这两个飞行方式非常节约能源，基本不需要什么燃料，搭载三颗核能电池也是用于照相机和探测器的工作消耗。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/Mi9vh214uZgD8z5.png\" alt=\"WechatIMG4677.png\"></p>\n<p>发射旅行者1号主要有两个目的：一个是<strong>探测木星和土星</strong>，另外一个<strong>探测地外文明</strong>。第一个目的完美的完成了，设计之初，就没准备让这这颗飞行器回到地球，一直飞出太阳系向宇宙深处进发，考虑到这一点，在上面装了一个<em>金唱盘</em>，铜制的，表面镀金。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/bszNOfBKhiYaQv7.png\" alt=\"WechatIMG4679.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/n3kxjOqDQASw4Wz.png\" alt=\"WechatIMG4678.png\"><br>这个上面记载了太阳系的坐标，里面的行星的具体参数，特别标注的地球，证明唱盘来自这里。大自然的声音，包括滑浪，风，雷，鸟鸣，歌声，鲸鱼等其他动物叫声，并挑选来自不同文化的及年代的音乐。人体构造解刨图，计量单位的标准，时间和长度，里面还有一块非常纯的<code>铀238</code>，<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/upB4hvTydZ9IP1r.png\" alt=\"WechatIMG4680.png\">因为铀238的半衰期是<code>44.7</code>亿年，收到的人根据衰变程度就可以推断出，就能反推唱盘的生产日期。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/p5kXGl2DtbcaSnW.png\" alt=\"WechatIMG4666.png\"><br>如上图，在唱盘的一面上，标注了使用方法，包括旋转周期，唱片的时间单位，地球在银河系的位置，图片读取方式等，内容有一些人类生活，自然的图片。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/KJPlgxfCpuGHndB.png\" alt=\"WechatIMG4667.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/Ia7qdlQ4PT1ws3j.png\" alt=\"WechatIMG4668.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/vTfbrW8JKkQFRcP.png\" alt=\"WechatIMG4670.png\"><br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/BvYORyZgq9amV7A.png\" alt=\"WechatIMG4669.png\"><br>除此外，还有90分钟的歌曲，包括不同文化的古典音乐，其中包括有一首中国曲子：高山流水。还有用55种语言说的”你好”，包括普通话和粤语。</p>\n<p>金唱盘内全部内容，<a href=\"https://www.bilibili.com/video/av41308060/\">见B站</a></p>\n<p>旅行者1号，去土星其实是为了要去探测土星的一个卫星，泰坦，因为泰坦的环境地球类似，当旅行者1号到达泰坦，果然泰坦上有着厚厚的黄色大气，主要是氮气和甲烷，地表温度为零下<code>179</code>度。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/TewXOIzalCK5Egh.png\" alt=\"WechatIMG4672.png\"><br>旅行者1号在探测完泰坦之后，由于土星重力，偏移了黄道面，也就是9大行星的平面。在九年后，nasa又联系了旅行者1号，让它拍一张<strong>太阳系全家福</strong>，就分别拍了39张九大行星照片。<br><img src=\"/2021/10/22/last/docs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/about-traveller/NqjhKXn3kgIrDlS.png\" alt=\"WechatIMG4673.png\">这个项目的首席天文学家：卡尔萨根看完地球照片后写了一本非常著名的书《暗淡蓝点》，其中非常经典的一段话：   </p>\n<p><strong>如果再来看一眼这个小点<br>那是我们的家园，我们的所有。<br>你所爱所知的每一个人、所听说乃至所存在过的每一个人，都在小点上度过一生。<br>欢乐与痛苦，宗教与学说，猎人与强盗，英雄与懦夫，文明的创造者与毁灭者，国王与农夫，情侣，父母，儿童，发明家和探险家，崇高的老师，腐败的政客，耀眼的明星，至高无上的领袖，历史上所有的圣人与罪犯，都住在这里——它仅仅是一粒悬浮再阳光中的浮尘。</strong>  </p>\n<p>拍完暗淡蓝点后，nasa就把旅行者1号的相机永久关闭了，为了省电。现在正在以每秒14公里的速度远离太阳向宇宙深处进发，但在2025年之后，旅行者一号就会彻底和地球失去联系，并成为漂浮在宇宙中的一艘“流浪探测器”。<br>推测再过4万年，他将利用引力弹弓到达离太阳系最近的一颗恒星上<code>gliese 445</code>，大概几百万年后，就能到另外一颗恒星附近，或许那个时候人类已经不存在了。对于最多有120年寿命的梦想着星辰大海的人类来说，的确让人感到绝望，可有金唱盘，它可以证明人类在浩瀚无垠的宇宙存在过的的一个证据吧，在<code>21/05/13</code>，也就是两天前，有一条关于旅行者1号的新闻，<a href=\"https://finance.sina.com.cn/tech/2021-05-13/doc-ikmxzfmm2145469.shtml\">“旅行者1号”听到星际“温柔雨声”</a></p>\n"},{"_content":"## 开始之前\n\n在大概2个月前，我在国内某论坛看到一个挖矿帖子，很感兴趣，家里也有一台用于娱乐的高配电脑，当天下班后我就开始搭建环境，几个小时后成功开始工作。有朋友问如何操作，也算总结下过程，所以写了这篇教程。\n\n先说一下结果，当前`以太坊eth`币价为`2057`刀，折合人民币`1.39w`一个，24小时挖矿，我的电脑可以产出`0.0016`个不计成本24小时持续挖矿收入为`22.24元`。\n\n再来算一下成本，显卡满载功率为125w， 挖矿时100%占用，cpu是`i5-9400f`，满载功率为`65w`，挖矿时，占用可以忽略不计，图中是我在跑着其他程序，其他主板，风扇，硬盘等功率假设为50w，可以得到整机在挖矿时，功率为175w，按照北京民电`0.4883/度`计算，24小时电费成本约为`2`元，不算其他线材损耗，一天净利润22-2=`20`元。\n\n![QQ20210405-0.png](./img/eth-miner/YA4dIRbSgNVsvKE.png)\n\n## 我的配置\n- **显卡**： 技嘉GeForce GTX 1660s(实测这款卡算力稳定在26mh/s左右)\n- **操作系统**： windows 10\n- **挖矿软件**： PhoenixMiner 5.5c\n- **矿池**： 火币矿币pro\n- **钱包**： 中心化火币钱包\n\n## 选择矿池\n\n>先选择挖矿软件，主流挖矿软件有很多，只推荐几个开源项目，支持linux和windows的，不推荐轻松矿工等国产软件，抽水多，不适合单机挖矿\n\n- claymore\n- PhoenixMiner\n- lolMiner\n- Bminer\n\n我只使用过`PhoenixMiner`和`lolMiner`，这介绍这两款，下载[lolminer](https://github.com/Lolliedieb/lolMiner-releases/releases)和[PhoenixMiner](https://phoenixminer.org/)。  \n\n## 获取矿池地址和钱包地址\n - 矿池   \n 我使用的火币矿池，地址[huobipool](https://www.huobipool.com/)  \n\n `火币矿池网站首页` => `导航选择pow挖矿` => `添加挖矿子账号`\n\n 添加好之后就可以拿到挖矿地址，有测速选项，优先选择速度最快的节点作为矿池地址，来提升挖矿速度    \n\n - 钱包\n 我使用的火币  \n\n `进入火币app` => `导航资产` => `列表中找到ETH进入` => `充币` => `充币地址即钱包地址`\n\n矿池地址和钱包地址，保存下来。除了货币矿池，还有很多其他的矿池，比如鱼池，蚂蚁矿池，可他们的提现门槛太高了，需要0.1个ETH才可以提现，最开始用鱼池挖了一周放弃了，0.1个ETH需要我的机器挖矿`62.5天`，周期太长了，所以我就选择了用火币矿池，搭配火币钱包，今日的产出会在每天下午3点自动提现到火币钱包，虽然提现手续费`2%`有点高，但这种方式适合我这样的散户。\n\n## 开始挖矿\n - *PhoenixMiner*\n\t下载完后，解压缩文件包，找到`start_miner.bat`,使用记事本或者vscode打开，删除所有内容，重新填入  \n\t\n```\nREM\nREM Example bat file for starting PhoenixMiner.exe to mine ETH\nREM\n\nsetx GPU_FORCE_64BIT_PTR 0\nsetx GPU_MAX_HEAP_SIZE 100\nsetx GPU_USE_SYNC_OBJECTS 1\nsetx GPU_MAX_ALLOC_PERCENT 100\nsetx GPU_SINGLE_ALLOC_PERCENT 100\n\nREM IMPORTANT: Replace the ETH address with your own ETH wallet address in the -wal option (Rig001 is the name of the rig)\nPhoenixMiner.exe -pool 矿池地址 -wal 以太坊钱包地址.矿工名称 -dagrestart 1 -rvram -1 -eres 0\npause\n```\n\n把`矿池地址`和`以太坊钱包地址`替换，矿工名，可以随意填，英文+数字。替换好保存关闭。回到解压目录，打开PhoenixMiner.exe可执行程序，之后会打开一个终端窗口，就开始挖矿了，如果断网或者其他异常，程序会10s后自动重新连接，无需关心\n![43264BBC6D73E4F446FE70FA11DB2A5D.png](./img/eth-miner/grXvl26PoEtMFpa.png)\n\n - *lolMiner*\n\n \t设置也一样，下载解压缩，根目录下找到`mine_eth.bat`文件并编辑：\n\n```\n@echo off\n\nsetlocal enableDelayedExpansion\n\nRem #################################\nRem ## Begin of user-editable part ##\nRem #################################\n\nset \"POOL=矿池地址\"\nset \"WALLET=以太坊钱包地址.矿工名\"\t\t\t\t\t\t\t\t\t\t\n\nRem #################################\nRem ##  End of user-editable part  ##\nRem #################################\n\n:loop\nlolMiner.exe --algo ETHASH --pool !POOL! --user !WALLET! --watchdog exit\nif %ERRORLEVEL% == 42 (\n\ttimeout 10\n\tgoto loop\n)\n```\n把`矿池地址`和`以太坊钱包地址`替换，矿工名，可以随意填，英文+数字。注意钱包地址和矿工名之间的英文句号，你也可以设置`timeout`右侧的遇到异常的重启时间，替换好保存关闭。回到解压目录，执行`miner_eth.bat`文件，打开命令行开始。\n\n## 关于算力\n算力也叫哈希率(Hashrate)，是显卡计算能力的度量单位，即计算机计算哈希函数的输出速度。入门级挖矿显卡需要**至少6G的显存**，算力越高，你的收益越大，之间的关系不是线性的，应该是递减的关系。当然显卡价格也越贵，20年底，全球疫情来袭，比特币暴涨，导致显卡价格水涨船高，甚至涨了一倍。做矿老板有风险，用闲置机器赚一点零花钱还是很不错滴，俺也浪费国家电能了哈哈。另贴出主流a卡和n卡算力表，enjoy it。\n\nA卡：\n![WechatIMG4346.png](./img/eth-miner/ZD6ML8tjkGXdeWf.png)\n\nN卡：![WechatIMG4347.png](./img/eth-miner/rhvAF538ynVWtlY.png)\n\n\n\n  ","source":"_drafts/last/docs/真睡后收入-以太坊挖矿教程.md","raw":"## 开始之前\n\n在大概2个月前，我在国内某论坛看到一个挖矿帖子，很感兴趣，家里也有一台用于娱乐的高配电脑，当天下班后我就开始搭建环境，几个小时后成功开始工作。有朋友问如何操作，也算总结下过程，所以写了这篇教程。\n\n先说一下结果，当前`以太坊eth`币价为`2057`刀，折合人民币`1.39w`一个，24小时挖矿，我的电脑可以产出`0.0016`个不计成本24小时持续挖矿收入为`22.24元`。\n\n再来算一下成本，显卡满载功率为125w， 挖矿时100%占用，cpu是`i5-9400f`，满载功率为`65w`，挖矿时，占用可以忽略不计，图中是我在跑着其他程序，其他主板，风扇，硬盘等功率假设为50w，可以得到整机在挖矿时，功率为175w，按照北京民电`0.4883/度`计算，24小时电费成本约为`2`元，不算其他线材损耗，一天净利润22-2=`20`元。\n\n![QQ20210405-0.png](./img/eth-miner/YA4dIRbSgNVsvKE.png)\n\n## 我的配置\n- **显卡**： 技嘉GeForce GTX 1660s(实测这款卡算力稳定在26mh/s左右)\n- **操作系统**： windows 10\n- **挖矿软件**： PhoenixMiner 5.5c\n- **矿池**： 火币矿币pro\n- **钱包**： 中心化火币钱包\n\n## 选择矿池\n\n>先选择挖矿软件，主流挖矿软件有很多，只推荐几个开源项目，支持linux和windows的，不推荐轻松矿工等国产软件，抽水多，不适合单机挖矿\n\n- claymore\n- PhoenixMiner\n- lolMiner\n- Bminer\n\n我只使用过`PhoenixMiner`和`lolMiner`，这介绍这两款，下载[lolminer](https://github.com/Lolliedieb/lolMiner-releases/releases)和[PhoenixMiner](https://phoenixminer.org/)。  \n\n## 获取矿池地址和钱包地址\n - 矿池   \n 我使用的火币矿池，地址[huobipool](https://www.huobipool.com/)  \n\n `火币矿池网站首页` => `导航选择pow挖矿` => `添加挖矿子账号`\n\n 添加好之后就可以拿到挖矿地址，有测速选项，优先选择速度最快的节点作为矿池地址，来提升挖矿速度    \n\n - 钱包\n 我使用的火币  \n\n `进入火币app` => `导航资产` => `列表中找到ETH进入` => `充币` => `充币地址即钱包地址`\n\n矿池地址和钱包地址，保存下来。除了货币矿池，还有很多其他的矿池，比如鱼池，蚂蚁矿池，可他们的提现门槛太高了，需要0.1个ETH才可以提现，最开始用鱼池挖了一周放弃了，0.1个ETH需要我的机器挖矿`62.5天`，周期太长了，所以我就选择了用火币矿池，搭配火币钱包，今日的产出会在每天下午3点自动提现到火币钱包，虽然提现手续费`2%`有点高，但这种方式适合我这样的散户。\n\n## 开始挖矿\n - *PhoenixMiner*\n\t下载完后，解压缩文件包，找到`start_miner.bat`,使用记事本或者vscode打开，删除所有内容，重新填入  \n\t\n```\nREM\nREM Example bat file for starting PhoenixMiner.exe to mine ETH\nREM\n\nsetx GPU_FORCE_64BIT_PTR 0\nsetx GPU_MAX_HEAP_SIZE 100\nsetx GPU_USE_SYNC_OBJECTS 1\nsetx GPU_MAX_ALLOC_PERCENT 100\nsetx GPU_SINGLE_ALLOC_PERCENT 100\n\nREM IMPORTANT: Replace the ETH address with your own ETH wallet address in the -wal option (Rig001 is the name of the rig)\nPhoenixMiner.exe -pool 矿池地址 -wal 以太坊钱包地址.矿工名称 -dagrestart 1 -rvram -1 -eres 0\npause\n```\n\n把`矿池地址`和`以太坊钱包地址`替换，矿工名，可以随意填，英文+数字。替换好保存关闭。回到解压目录，打开PhoenixMiner.exe可执行程序，之后会打开一个终端窗口，就开始挖矿了，如果断网或者其他异常，程序会10s后自动重新连接，无需关心\n![43264BBC6D73E4F446FE70FA11DB2A5D.png](./img/eth-miner/grXvl26PoEtMFpa.png)\n\n - *lolMiner*\n\n \t设置也一样，下载解压缩，根目录下找到`mine_eth.bat`文件并编辑：\n\n```\n@echo off\n\nsetlocal enableDelayedExpansion\n\nRem #################################\nRem ## Begin of user-editable part ##\nRem #################################\n\nset \"POOL=矿池地址\"\nset \"WALLET=以太坊钱包地址.矿工名\"\t\t\t\t\t\t\t\t\t\t\n\nRem #################################\nRem ##  End of user-editable part  ##\nRem #################################\n\n:loop\nlolMiner.exe --algo ETHASH --pool !POOL! --user !WALLET! --watchdog exit\nif %ERRORLEVEL% == 42 (\n\ttimeout 10\n\tgoto loop\n)\n```\n把`矿池地址`和`以太坊钱包地址`替换，矿工名，可以随意填，英文+数字。注意钱包地址和矿工名之间的英文句号，你也可以设置`timeout`右侧的遇到异常的重启时间，替换好保存关闭。回到解压目录，执行`miner_eth.bat`文件，打开命令行开始。\n\n## 关于算力\n算力也叫哈希率(Hashrate)，是显卡计算能力的度量单位，即计算机计算哈希函数的输出速度。入门级挖矿显卡需要**至少6G的显存**，算力越高，你的收益越大，之间的关系不是线性的，应该是递减的关系。当然显卡价格也越贵，20年底，全球疫情来袭，比特币暴涨，导致显卡价格水涨船高，甚至涨了一倍。做矿老板有风险，用闲置机器赚一点零花钱还是很不错滴，俺也浪费国家电能了哈哈。另贴出主流a卡和n卡算力表，enjoy it。\n\nA卡：\n![WechatIMG4346.png](./img/eth-miner/ZD6ML8tjkGXdeWf.png)\n\nN卡：![WechatIMG4347.png](./img/eth-miner/rhvAF538ynVWtlY.png)\n\n\n\n  ","slug":"last/docs/真睡后收入-以太坊挖矿教程","published":0,"date":"2021-10-22T09:38:36.425Z","updated":"2021-10-22T09:38:36.426Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28merd001zh7vm7yra3h5n","content":"<h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>在大概2个月前，我在国内某论坛看到一个挖矿帖子，很感兴趣，家里也有一台用于娱乐的高配电脑，当天下班后我就开始搭建环境，几个小时后成功开始工作。有朋友问如何操作，也算总结下过程，所以写了这篇教程。</p>\n<p>先说一下结果，当前<code>以太坊eth</code>币价为<code>2057</code>刀，折合人民币<code>1.39w</code>一个，24小时挖矿，我的电脑可以产出<code>0.0016</code>个不计成本24小时持续挖矿收入为<code>22.24元</code>。</p>\n<p>再来算一下成本，显卡满载功率为125w， 挖矿时100%占用，cpu是<code>i5-9400f</code>，满载功率为<code>65w</code>，挖矿时，占用可以忽略不计，图中是我在跑着其他程序，其他主板，风扇，硬盘等功率假设为50w，可以得到整机在挖矿时，功率为175w，按照北京民电<code>0.4883/度</code>计算，24小时电费成本约为<code>2</code>元，不算其他线材损耗，一天净利润22-2=<code>20</code>元。</p>\n<p><img src=\"/2021/10/22/last/docs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/eth-miner/YA4dIRbSgNVsvKE.png\" alt=\"QQ20210405-0.png\"></p>\n<h2 id=\"我的配置\"><a href=\"#我的配置\" class=\"headerlink\" title=\"我的配置\"></a>我的配置</h2><ul>\n<li><strong>显卡</strong>： 技嘉GeForce GTX 1660s(实测这款卡算力稳定在26mh/s左右)</li>\n<li><strong>操作系统</strong>： windows 10</li>\n<li><strong>挖矿软件</strong>： PhoenixMiner 5.5c</li>\n<li><strong>矿池</strong>： 火币矿币pro</li>\n<li><strong>钱包</strong>： 中心化火币钱包</li>\n</ul>\n<h2 id=\"选择矿池\"><a href=\"#选择矿池\" class=\"headerlink\" title=\"选择矿池\"></a>选择矿池</h2><blockquote>\n<p>先选择挖矿软件，主流挖矿软件有很多，只推荐几个开源项目，支持linux和windows的，不推荐轻松矿工等国产软件，抽水多，不适合单机挖矿</p>\n</blockquote>\n<ul>\n<li>claymore</li>\n<li>PhoenixMiner</li>\n<li>lolMiner</li>\n<li>Bminer</li>\n</ul>\n<p>我只使用过<code>PhoenixMiner</code>和<code>lolMiner</code>，这介绍这两款，下载<a href=\"https://github.com/Lolliedieb/lolMiner-releases/releases\">lolminer</a>和<a href=\"https://phoenixminer.org/\">PhoenixMiner</a>。  </p>\n<h2 id=\"获取矿池地址和钱包地址\"><a href=\"#获取矿池地址和钱包地址\" class=\"headerlink\" title=\"获取矿池地址和钱包地址\"></a>获取矿池地址和钱包地址</h2><ul>\n<li>矿池<br>我使用的火币矿池，地址<a href=\"https://www.huobipool.com/\">huobipool</a>  </li>\n</ul>\n<p> <code>火币矿池网站首页</code> =&gt; <code>导航选择pow挖矿</code> =&gt; <code>添加挖矿子账号</code></p>\n<p> 添加好之后就可以拿到挖矿地址，有测速选项，优先选择速度最快的节点作为矿池地址，来提升挖矿速度    </p>\n<ul>\n<li>钱包<br>我使用的火币  </li>\n</ul>\n<p> <code>进入火币app</code> =&gt; <code>导航资产</code> =&gt; <code>列表中找到ETH进入</code> =&gt; <code>充币</code> =&gt; <code>充币地址即钱包地址</code></p>\n<p>矿池地址和钱包地址，保存下来。除了货币矿池，还有很多其他的矿池，比如鱼池，蚂蚁矿池，可他们的提现门槛太高了，需要0.1个ETH才可以提现，最开始用鱼池挖了一周放弃了，0.1个ETH需要我的机器挖矿<code>62.5天</code>，周期太长了，所以我就选择了用火币矿池，搭配火币钱包，今日的产出会在每天下午3点自动提现到火币钱包，虽然提现手续费<code>2%</code>有点高，但这种方式适合我这样的散户。</p>\n<h2 id=\"开始挖矿\"><a href=\"#开始挖矿\" class=\"headerlink\" title=\"开始挖矿\"></a>开始挖矿</h2><ul>\n<li><em>PhoenixMiner</em><br> 下载完后，解压缩文件包，找到<code>start_miner.bat</code>,使用记事本或者vscode打开，删除所有内容，重新填入  </li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">REM\nREM Example bat file for starting PhoenixMiner.exe to mine ETH\nREM\n\nsetx GPU_FORCE_64BIT_PTR 0\nsetx GPU_MAX_HEAP_SIZE 100\nsetx GPU_USE_SYNC_OBJECTS 1\nsetx GPU_MAX_ALLOC_PERCENT 100\nsetx GPU_SINGLE_ALLOC_PERCENT 100\n\nREM IMPORTANT: Replace the ETH address with your own ETH wallet address in the -wal option (Rig001 is the name of the rig)\nPhoenixMiner.exe -pool 矿池地址 -wal 以太坊钱包地址.矿工名称 -dagrestart 1 -rvram -1 -eres 0\npause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把<code>矿池地址</code>和<code>以太坊钱包地址</code>替换，矿工名，可以随意填，英文+数字。替换好保存关闭。回到解压目录，打开PhoenixMiner.exe可执行程序，之后会打开一个终端窗口，就开始挖矿了，如果断网或者其他异常，程序会10s后自动重新连接，无需关心<br><img src=\"/2021/10/22/last/docs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/eth-miner/grXvl26PoEtMFpa.png\" alt=\"43264BBC6D73E4F446FE70FA11DB2A5D.png\"></p>\n<ul>\n<li><p><em>lolMiner</em></p>\n<p>  设置也一样，下载解压缩，根目录下找到<code>mine_eth.bat</code>文件并编辑：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@echo off\n\nsetlocal enableDelayedExpansion\n\nRem #################################\nRem ## Begin of user-editable part ##\nRem #################################\n\nset &quot;POOL&#x3D;矿池地址&quot;\nset &quot;WALLET&#x3D;以太坊钱包地址.矿工名&quot;\t\t\t\t\t\t\t\t\t\t\n\nRem #################################\nRem ##  End of user-editable part  ##\nRem #################################\n\n:loop\nlolMiner.exe --algo ETHASH --pool !POOL! --user !WALLET! --watchdog exit\nif %ERRORLEVEL% &#x3D;&#x3D; 42 (\n\ttimeout 10\n\tgoto loop\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把<code>矿池地址</code>和<code>以太坊钱包地址</code>替换，矿工名，可以随意填，英文+数字。注意钱包地址和矿工名之间的英文句号，你也可以设置<code>timeout</code>右侧的遇到异常的重启时间，替换好保存关闭。回到解压目录，执行<code>miner_eth.bat</code>文件，打开命令行开始。</p>\n<h2 id=\"关于算力\"><a href=\"#关于算力\" class=\"headerlink\" title=\"关于算力\"></a>关于算力</h2><p>算力也叫哈希率(Hashrate)，是显卡计算能力的度量单位，即计算机计算哈希函数的输出速度。入门级挖矿显卡需要<strong>至少6G的显存</strong>，算力越高，你的收益越大，之间的关系不是线性的，应该是递减的关系。当然显卡价格也越贵，20年底，全球疫情来袭，比特币暴涨，导致显卡价格水涨船高，甚至涨了一倍。做矿老板有风险，用闲置机器赚一点零花钱还是很不错滴，俺也浪费国家电能了哈哈。另贴出主流a卡和n卡算力表，enjoy it。</p>\n<p>A卡：<br><img src=\"/2021/10/22/last/docs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/eth-miner/ZD6ML8tjkGXdeWf.png\" alt=\"WechatIMG4346.png\"></p>\n<p>N卡：<img src=\"/2021/10/22/last/docs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/eth-miner/rhvAF538ynVWtlY.png\" alt=\"WechatIMG4347.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h2><p>在大概2个月前，我在国内某论坛看到一个挖矿帖子，很感兴趣，家里也有一台用于娱乐的高配电脑，当天下班后我就开始搭建环境，几个小时后成功开始工作。有朋友问如何操作，也算总结下过程，所以写了这篇教程。</p>\n<p>先说一下结果，当前<code>以太坊eth</code>币价为<code>2057</code>刀，折合人民币<code>1.39w</code>一个，24小时挖矿，我的电脑可以产出<code>0.0016</code>个不计成本24小时持续挖矿收入为<code>22.24元</code>。</p>\n<p>再来算一下成本，显卡满载功率为125w， 挖矿时100%占用，cpu是<code>i5-9400f</code>，满载功率为<code>65w</code>，挖矿时，占用可以忽略不计，图中是我在跑着其他程序，其他主板，风扇，硬盘等功率假设为50w，可以得到整机在挖矿时，功率为175w，按照北京民电<code>0.4883/度</code>计算，24小时电费成本约为<code>2</code>元，不算其他线材损耗，一天净利润22-2=<code>20</code>元。</p>\n<p><img src=\"/2021/10/22/last/docs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/eth-miner/YA4dIRbSgNVsvKE.png\" alt=\"QQ20210405-0.png\"></p>\n<h2 id=\"我的配置\"><a href=\"#我的配置\" class=\"headerlink\" title=\"我的配置\"></a>我的配置</h2><ul>\n<li><strong>显卡</strong>： 技嘉GeForce GTX 1660s(实测这款卡算力稳定在26mh/s左右)</li>\n<li><strong>操作系统</strong>： windows 10</li>\n<li><strong>挖矿软件</strong>： PhoenixMiner 5.5c</li>\n<li><strong>矿池</strong>： 火币矿币pro</li>\n<li><strong>钱包</strong>： 中心化火币钱包</li>\n</ul>\n<h2 id=\"选择矿池\"><a href=\"#选择矿池\" class=\"headerlink\" title=\"选择矿池\"></a>选择矿池</h2><blockquote>\n<p>先选择挖矿软件，主流挖矿软件有很多，只推荐几个开源项目，支持linux和windows的，不推荐轻松矿工等国产软件，抽水多，不适合单机挖矿</p>\n</blockquote>\n<ul>\n<li>claymore</li>\n<li>PhoenixMiner</li>\n<li>lolMiner</li>\n<li>Bminer</li>\n</ul>\n<p>我只使用过<code>PhoenixMiner</code>和<code>lolMiner</code>，这介绍这两款，下载<a href=\"https://github.com/Lolliedieb/lolMiner-releases/releases\">lolminer</a>和<a href=\"https://phoenixminer.org/\">PhoenixMiner</a>。  </p>\n<h2 id=\"获取矿池地址和钱包地址\"><a href=\"#获取矿池地址和钱包地址\" class=\"headerlink\" title=\"获取矿池地址和钱包地址\"></a>获取矿池地址和钱包地址</h2><ul>\n<li>矿池<br>我使用的火币矿池，地址<a href=\"https://www.huobipool.com/\">huobipool</a>  </li>\n</ul>\n<p> <code>火币矿池网站首页</code> =&gt; <code>导航选择pow挖矿</code> =&gt; <code>添加挖矿子账号</code></p>\n<p> 添加好之后就可以拿到挖矿地址，有测速选项，优先选择速度最快的节点作为矿池地址，来提升挖矿速度    </p>\n<ul>\n<li>钱包<br>我使用的火币  </li>\n</ul>\n<p> <code>进入火币app</code> =&gt; <code>导航资产</code> =&gt; <code>列表中找到ETH进入</code> =&gt; <code>充币</code> =&gt; <code>充币地址即钱包地址</code></p>\n<p>矿池地址和钱包地址，保存下来。除了货币矿池，还有很多其他的矿池，比如鱼池，蚂蚁矿池，可他们的提现门槛太高了，需要0.1个ETH才可以提现，最开始用鱼池挖了一周放弃了，0.1个ETH需要我的机器挖矿<code>62.5天</code>，周期太长了，所以我就选择了用火币矿池，搭配火币钱包，今日的产出会在每天下午3点自动提现到火币钱包，虽然提现手续费<code>2%</code>有点高，但这种方式适合我这样的散户。</p>\n<h2 id=\"开始挖矿\"><a href=\"#开始挖矿\" class=\"headerlink\" title=\"开始挖矿\"></a>开始挖矿</h2><ul>\n<li><em>PhoenixMiner</em><br> 下载完后，解压缩文件包，找到<code>start_miner.bat</code>,使用记事本或者vscode打开，删除所有内容，重新填入  </li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">REM\nREM Example bat file for starting PhoenixMiner.exe to mine ETH\nREM\n\nsetx GPU_FORCE_64BIT_PTR 0\nsetx GPU_MAX_HEAP_SIZE 100\nsetx GPU_USE_SYNC_OBJECTS 1\nsetx GPU_MAX_ALLOC_PERCENT 100\nsetx GPU_SINGLE_ALLOC_PERCENT 100\n\nREM IMPORTANT: Replace the ETH address with your own ETH wallet address in the -wal option (Rig001 is the name of the rig)\nPhoenixMiner.exe -pool 矿池地址 -wal 以太坊钱包地址.矿工名称 -dagrestart 1 -rvram -1 -eres 0\npause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把<code>矿池地址</code>和<code>以太坊钱包地址</code>替换，矿工名，可以随意填，英文+数字。替换好保存关闭。回到解压目录，打开PhoenixMiner.exe可执行程序，之后会打开一个终端窗口，就开始挖矿了，如果断网或者其他异常，程序会10s后自动重新连接，无需关心<br><img src=\"/2021/10/22/last/docs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/eth-miner/grXvl26PoEtMFpa.png\" alt=\"43264BBC6D73E4F446FE70FA11DB2A5D.png\"></p>\n<ul>\n<li><p><em>lolMiner</em></p>\n<p>  设置也一样，下载解压缩，根目录下找到<code>mine_eth.bat</code>文件并编辑：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@echo off\n\nsetlocal enableDelayedExpansion\n\nRem #################################\nRem ## Begin of user-editable part ##\nRem #################################\n\nset &quot;POOL&#x3D;矿池地址&quot;\nset &quot;WALLET&#x3D;以太坊钱包地址.矿工名&quot;\t\t\t\t\t\t\t\t\t\t\n\nRem #################################\nRem ##  End of user-editable part  ##\nRem #################################\n\n:loop\nlolMiner.exe --algo ETHASH --pool !POOL! --user !WALLET! --watchdog exit\nif %ERRORLEVEL% &#x3D;&#x3D; 42 (\n\ttimeout 10\n\tgoto loop\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把<code>矿池地址</code>和<code>以太坊钱包地址</code>替换，矿工名，可以随意填，英文+数字。注意钱包地址和矿工名之间的英文句号，你也可以设置<code>timeout</code>右侧的遇到异常的重启时间，替换好保存关闭。回到解压目录，执行<code>miner_eth.bat</code>文件，打开命令行开始。</p>\n<h2 id=\"关于算力\"><a href=\"#关于算力\" class=\"headerlink\" title=\"关于算力\"></a>关于算力</h2><p>算力也叫哈希率(Hashrate)，是显卡计算能力的度量单位，即计算机计算哈希函数的输出速度。入门级挖矿显卡需要<strong>至少6G的显存</strong>，算力越高，你的收益越大，之间的关系不是线性的，应该是递减的关系。当然显卡价格也越贵，20年底，全球疫情来袭，比特币暴涨，导致显卡价格水涨船高，甚至涨了一倍。做矿老板有风险，用闲置机器赚一点零花钱还是很不错滴，俺也浪费国家电能了哈哈。另贴出主流a卡和n卡算力表，enjoy it。</p>\n<p>A卡：<br><img src=\"/2021/10/22/last/docs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/eth-miner/ZD6ML8tjkGXdeWf.png\" alt=\"WechatIMG4346.png\"></p>\n<p>N卡：<img src=\"/2021/10/22/last/docs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/eth-miner/rhvAF538ynVWtlY.png\" alt=\"WechatIMG4347.png\"></p>\n"},{"_content":"## 发布订阅模式\n\n简单来说，需要三个角色\n\n - 发布者\n - 事件队列\n - 订阅者\n\n\n**发布者** -> **事件队列** <=> **订阅者**\n\n一次完整流程\n\n - `订阅者`向事件队列订阅`事件E`\n - `发布者`向事件队列发布`事件E`\n - 事件队列通知`事件E`的所有`订阅者`，`订阅者`接收\n\n```javascript\nclass Event {\n  constructor() {\n    // 事件队列\n    this.listeners = {}\n  }\n  // 订阅方法\n  on(eventType, listener) {\n    if (!this.listeners[eventType]) {\n      this.listeners[eventType] = []\n    }\n    this.listeners[eventType].push(listener)\n  }\n  // 发布方法\n  emit(eventType, data) {\n    const callbacks = this.listeners[eventType]\n    if (callbacks) {\n      callbacks.forEach((c) => {\n        c(data)\n      })\n    }\n  }\n}\n\nconst event = new Event()\nevent.on('open', (data) => {\n  console.log(data)\n})\nevent.emit('open', { open: true })\n```\n\n## 观察者模式\n\n需要两个角色\n\n - 目标\n - 观察者\n\n**目标** <=> **观察者**\n\n一次完整流程\n\n - `观察者`观察目标\n - 一旦目标`发生`变化，目标会主动通知`观察者`\n\n```javascript\nfunction observer(obj, target, callback) {\n  if (!obj.data) {\n    obj.data = {}\n  }\n  Object.defineProperty(obj, target, {\n    get() {\n      return this.data[target]\n    },\n    set(val) {\n      this.data[target] = val\n      // 目标通知观察者\n      callback && callback(val)\n    },\n  })\n  if (obj.data[target]) {\n    callback && callback(obj.data[target])\n  }\n}\n```\n","source":"_drafts/last/docs/记发布订阅和观察者模式.md","raw":"## 发布订阅模式\n\n简单来说，需要三个角色\n\n - 发布者\n - 事件队列\n - 订阅者\n\n\n**发布者** -> **事件队列** <=> **订阅者**\n\n一次完整流程\n\n - `订阅者`向事件队列订阅`事件E`\n - `发布者`向事件队列发布`事件E`\n - 事件队列通知`事件E`的所有`订阅者`，`订阅者`接收\n\n```javascript\nclass Event {\n  constructor() {\n    // 事件队列\n    this.listeners = {}\n  }\n  // 订阅方法\n  on(eventType, listener) {\n    if (!this.listeners[eventType]) {\n      this.listeners[eventType] = []\n    }\n    this.listeners[eventType].push(listener)\n  }\n  // 发布方法\n  emit(eventType, data) {\n    const callbacks = this.listeners[eventType]\n    if (callbacks) {\n      callbacks.forEach((c) => {\n        c(data)\n      })\n    }\n  }\n}\n\nconst event = new Event()\nevent.on('open', (data) => {\n  console.log(data)\n})\nevent.emit('open', { open: true })\n```\n\n## 观察者模式\n\n需要两个角色\n\n - 目标\n - 观察者\n\n**目标** <=> **观察者**\n\n一次完整流程\n\n - `观察者`观察目标\n - 一旦目标`发生`变化，目标会主动通知`观察者`\n\n```javascript\nfunction observer(obj, target, callback) {\n  if (!obj.data) {\n    obj.data = {}\n  }\n  Object.defineProperty(obj, target, {\n    get() {\n      return this.data[target]\n    },\n    set(val) {\n      this.data[target] = val\n      // 目标通知观察者\n      callback && callback(val)\n    },\n  })\n  if (obj.data[target]) {\n    callback && callback(obj.data[target])\n  }\n}\n```\n","slug":"last/docs/记发布订阅和观察者模式","published":0,"date":"2021-10-22T09:38:36.426Z","updated":"2021-10-22T09:38:36.426Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mere0020h7vm2vuxc7xg","content":"<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p>简单来说，需要三个角色</p>\n<ul>\n<li>发布者</li>\n<li>事件队列</li>\n<li>订阅者</li>\n</ul>\n<p><strong>发布者</strong> -&gt; <strong>事件队列</strong> &lt;=&gt; <strong>订阅者</strong></p>\n<p>一次完整流程</p>\n<ul>\n<li><code>订阅者</code>向事件队列订阅<code>事件E</code></li>\n<li><code>发布者</code>向事件队列发布<code>事件E</code></li>\n<li>事件队列通知<code>事件E</code>的所有<code>订阅者</code>，<code>订阅者</code>接收</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 事件队列</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 订阅方法</span>\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> listener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 发布方法</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callbacks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> open<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>需要两个角色</p>\n<ul>\n<li>目标</li>\n<li>观察者</li>\n</ul>\n<p><strong>目标</strong> &lt;=&gt; <strong>观察者</strong></p>\n<p>一次完整流程</p>\n<ul>\n<li><code>观察者</code>观察目标</li>\n<li>一旦目标<code>发生</code>变化，目标会主动通知<code>观察者</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n      <span class=\"token comment\">// 目标通知观察者</span>\n      callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><p>简单来说，需要三个角色</p>\n<ul>\n<li>发布者</li>\n<li>事件队列</li>\n<li>订阅者</li>\n</ul>\n<p><strong>发布者</strong> -&gt; <strong>事件队列</strong> &lt;=&gt; <strong>订阅者</strong></p>\n<p>一次完整流程</p>\n<ul>\n<li><code>订阅者</code>向事件队列订阅<code>事件E</code></li>\n<li><code>发布者</code>向事件队列发布<code>事件E</code></li>\n<li>事件队列通知<code>事件E</code>的所有<code>订阅者</code>，<code>订阅者</code>接收</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 事件队列</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 订阅方法</span>\n  <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> listener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 发布方法</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callbacks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> open<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>需要两个角色</p>\n<ul>\n<li>目标</li>\n<li>观察者</li>\n</ul>\n<p><strong>目标</strong> &lt;=&gt; <strong>观察者</strong></p>\n<p>一次完整流程</p>\n<ul>\n<li><code>观察者</code>观察目标</li>\n<li>一旦目标<code>发生</code>变化，目标会主动通知<code>观察者</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    obj<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n      <span class=\"token comment\">// 目标通知观察者</span>\n      callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"_content":"## 黑洞\n- 爱因斯坦在了广义相对论中提出了引力场方程\n- 史瓦西在求解引力场方程时，发现一个特别的解，这个解被他叫做黑洞\n- 霍金在爱因斯坦的广义相对论的基础上，又引入了量子场论，霍金对黑洞性质有更加细致的描述\n\n## 黑洞性质\n - 质量非常大，光都无法逃逸","source":"_drafts/last/docs/黑洞是什么.md","raw":"## 黑洞\n- 爱因斯坦在了广义相对论中提出了引力场方程\n- 史瓦西在求解引力场方程时，发现一个特别的解，这个解被他叫做黑洞\n- 霍金在爱因斯坦的广义相对论的基础上，又引入了量子场论，霍金对黑洞性质有更加细致的描述\n\n## 黑洞性质\n - 质量非常大，光都无法逃逸","slug":"last/docs/黑洞是什么","published":0,"date":"2021-10-22T09:38:36.427Z","updated":"2021-10-22T09:38:36.427Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mere0021h7vmhm6e0cz7","content":"<h2 id=\"黑洞\"><a href=\"#黑洞\" class=\"headerlink\" title=\"黑洞\"></a>黑洞</h2><ul>\n<li>爱因斯坦在了广义相对论中提出了引力场方程</li>\n<li>史瓦西在求解引力场方程时，发现一个特别的解，这个解被他叫做黑洞</li>\n<li>霍金在爱因斯坦的广义相对论的基础上，又引入了量子场论，霍金对黑洞性质有更加细致的描述</li>\n</ul>\n<h2 id=\"黑洞性质\"><a href=\"#黑洞性质\" class=\"headerlink\" title=\"黑洞性质\"></a>黑洞性质</h2><ul>\n<li>质量非常大，光都无法逃逸</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"黑洞\"><a href=\"#黑洞\" class=\"headerlink\" title=\"黑洞\"></a>黑洞</h2><ul>\n<li>爱因斯坦在了广义相对论中提出了引力场方程</li>\n<li>史瓦西在求解引力场方程时，发现一个特别的解，这个解被他叫做黑洞</li>\n<li>霍金在爱因斯坦的广义相对论的基础上，又引入了量子场论，霍金对黑洞性质有更加细致的描述</li>\n</ul>\n<h2 id=\"黑洞性质\"><a href=\"#黑洞性质\" class=\"headerlink\" title=\"黑洞性质\"></a>黑洞性质</h2><ul>\n<li>质量非常大，光都无法逃逸</li>\n</ul>\n"},{"_content":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" href=\"/favicon.ico\"><title>@codedance98/ohmybox</title><link href=\"/css/index.64e3982f.css\" rel=\"preload\" as=\"style\"><link href=\"/js/chunk-vendors.854fd5c2.js\" rel=\"preload\" as=\"script\"><link href=\"/js/index.e8ace4ad.js\" rel=\"preload\" as=\"script\"><link href=\"/css/index.64e3982f.css\" rel=\"stylesheet\"></head><body><noscript><strong>We're sorry but @codedance98/ohmybox doesn't work properly without JavaScript enabled. Please enable it to continue.</strong></noscript><div id=\"app\"></div><script src=\"/js/chunk-vendors.854fd5c2.js\"></script><script src=\"/js/index.e8ace4ad.js\"></script></body></html>","source":"_drafts/last/ohmybox/index.html","raw":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" href=\"/favicon.ico\"><title>@codedance98/ohmybox</title><link href=\"/css/index.64e3982f.css\" rel=\"preload\" as=\"style\"><link href=\"/js/chunk-vendors.854fd5c2.js\" rel=\"preload\" as=\"script\"><link href=\"/js/index.e8ace4ad.js\" rel=\"preload\" as=\"script\"><link href=\"/css/index.64e3982f.css\" rel=\"stylesheet\"></head><body><noscript><strong>We're sorry but @codedance98/ohmybox doesn't work properly without JavaScript enabled. Please enable it to continue.</strong></noscript><div id=\"app\"></div><script src=\"/js/chunk-vendors.854fd5c2.js\"></script><script src=\"/js/index.e8ace4ad.js\"></script></body></html>","slug":"last/ohmybox/index","published":0,"date":"2021-10-22T09:38:36.432Z","updated":"2021-10-22T09:38:36.432Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28merf0022h7vm8h1cbfd4","content":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" href=\"/favicon.ico\"><title>@codedance98/ohmybox</title><link href=\"/css/index.64e3982f.css\" rel=\"preload\" as=\"style\"><link href=\"/js/chunk-vendors.854fd5c2.js\" rel=\"preload\" as=\"script\"><link href=\"/js/index.e8ace4ad.js\" rel=\"preload\" as=\"script\"><link href=\"/css/index.64e3982f.css\" rel=\"stylesheet\"></head><body><noscript><strong>We're sorry but @codedance98/ohmybox doesn't work properly without JavaScript enabled. Please enable it to continue.</strong></noscript><div id=\"app\"></div><script src=\"/js/chunk-vendors.854fd5c2.js\"></script><script src=\"/js/index.e8ace4ad.js\"></script></body></html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><link rel=\"icon\" href=\"/favicon.ico\"><title>@codedance98/ohmybox</title><link href=\"/css/index.64e3982f.css\" rel=\"preload\" as=\"style\"><link href=\"/js/chunk-vendors.854fd5c2.js\" rel=\"preload\" as=\"script\"><link href=\"/js/index.e8ace4ad.js\" rel=\"preload\" as=\"script\"><link href=\"/css/index.64e3982f.css\" rel=\"stylesheet\"></head><body><noscript><strong>We're sorry but @codedance98/ohmybox doesn't work properly without JavaScript enabled. Please enable it to continue.</strong></noscript><div id=\"app\"></div><script src=\"/js/chunk-vendors.854fd5c2.js\"></script><script src=\"/js/index.e8ace4ad.js\"></script></body></html>"},{"_content":"#ohmybox-component[data-v-23a495f6]{position:fixed;overflow:hidden;width:100vw;height:100vh}.ohmybox-gesture[data-v-23a495f6]{-webkit-transform:translateZ(0);-webkit-backface-visibility:hidden;-webkit-perspective:1000;will-change:--webkit-transform}.trans[data-v-23a495f6]{-webkit-transition:all .3s ease-out}.ohmybox-item{width:100vw;height:100vh}*{padding:0;margin:0}.ohmybox-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:60px}","source":"_drafts/last/ohmybox/css/index.64e3982f.css","raw":"#ohmybox-component[data-v-23a495f6]{position:fixed;overflow:hidden;width:100vw;height:100vh}.ohmybox-gesture[data-v-23a495f6]{-webkit-transform:translateZ(0);-webkit-backface-visibility:hidden;-webkit-perspective:1000;will-change:--webkit-transform}.trans[data-v-23a495f6]{-webkit-transition:all .3s ease-out}.ohmybox-item{width:100vw;height:100vh}*{padding:0;margin:0}.ohmybox-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:60px}","slug":"last/ohmybox/css/index.64e3982f","published":0,"date":"2021-10-22T09:38:36.430Z","updated":"2021-10-22T09:38:36.431Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28merg0023h7vm3wib9e1x","content":"#ohmybox-component[data-v-23a495f6]{position:fixed;overflow:hidden;width:100vw;height:100vh}.ohmybox-gesture[data-v-23a495f6]{-webkit-transform:translateZ(0);-webkit-backface-visibility:hidden;-webkit-perspective:1000;will-change:--webkit-transform}.trans[data-v-23a495f6]{-webkit-transition:all .3s ease-out}.ohmybox-item{width:100vw;height:100vh}*{padding:0;margin:0}.ohmybox-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:60px}","site":{"data":{}},"excerpt":"","more":"#ohmybox-component[data-v-23a495f6]{position:fixed;overflow:hidden;width:100vw;height:100vh}.ohmybox-gesture[data-v-23a495f6]{-webkit-transform:translateZ(0);-webkit-backface-visibility:hidden;-webkit-perspective:1000;will-change:--webkit-transform}.trans[data-v-23a495f6]{-webkit-transition:all .3s ease-out}.ohmybox-item{width:100vw;height:100vh}*{padding:0;margin:0}.ohmybox-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-size:60px}"},{"_content":"(function(t){function e(e){for(var i,c,s=e[0],a=e[1],u=e[2],h=0,f=[];h<s.length;h++)c=s[h],Object.prototype.hasOwnProperty.call(o,c)&&o[c]&&f.push(o[c][0]),o[c]=0;for(i in a)Object.prototype.hasOwnProperty.call(a,i)&&(t[i]=a[i]);l&&l(e);while(f.length)f.shift()();return r.push.apply(r,u||[]),n()}function n(){for(var t,e=0;e<r.length;e++){for(var n=r[e],i=!0,s=1;s<n.length;s++){var a=n[s];0!==o[a]&&(i=!1)}i&&(r.splice(e--,1),t=c(c.s=n[0]))}return t}var i={},o={index:0},r=[];function c(e){if(i[e])return i[e].exports;var n=i[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,c),n.l=!0,n.exports}c.m=t,c.c=i,c.d=function(t,e,n){c.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},c.r=function(t){\"undefined\"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},c.t=function(t,e){if(1&e&&(t=c(t)),8&e)return t;if(4&e&&\"object\"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var i in t)c.d(n,i,function(e){return t[e]}.bind(null,i));return n},c.n=function(t){var e=t&&t.__esModule?function(){return t[\"default\"]}:function(){return t};return c.d(e,\"a\",e),e},c.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},c.p=\"/\";var s=window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[],a=s.push.bind(s);s.push=e,s=s.slice();for(var u=0;u<s.length;u++)e(s[u]);var l=a;r.push([0,\"chunk-vendors\"]),n()})({0:function(t,e,n){t.exports=n(\"c31f\")},\"1fb9\":function(t,e,n){},\"42b1\":function(t,e,n){\"use strict\";n(\"f381\")},\"42c9\":function(t,e,n){\"use strict\";n(\"a0b2\")},\"8e4e\":function(t,e,n){\"use strict\";n(\"1fb9\")},a0b2:function(t,e,n){},c31f:function(t,e,n){\"use strict\";n.r(e);n(\"e260\"),n(\"e6cf\"),n(\"cca6\"),n(\"a79d\");var i=n(\"2b0e\"),o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{attrs:{id:\"app\"}},[n(\"button\",{on:{click:function(e){return t.scroll(2)}}},[t._v(\"强制滚动到下标为2的item\")]),n(\"OhMyBox\",{ref:\"ohmybox\",attrs:{scrollHeight:t.scrollHeight,quickScrollHeight:t.quickScrollHeight,scrollDuration:t.scrollDuration,clickDuration:t.clickDuration,clickDistance:t.clickDistance},on:{change:t.change,click:t.click}},t._l(5,(function(e,i){return n(\"OhMyBoxItem\",{key:i,staticClass:\"item\"},[t._v(t._s(e))])})),1)],1)},r=[],c=(n(\"d81d\"),n(\"b0c0\"),function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"section\",{attrs:{id:\"ohmybox-component\"}},[n(\"div\",{ref:\"ohmyboxContainter\",staticClass:\"ohmybox-gesture\",style:{webkitTransform:\"translate3d(0,\"+t.currentPosition+\"px,0)\"},on:{touchstart:function(e){return e.stopPropagation(),t.touchStart(e)},touchmove:function(e){return e.stopPropagation(),t.touchMove(e)},touchend:function(e){return e.stopPropagation(),t.touchEnd(e)},touchcancel:function(e){return e.stopPropagation(),t.touchEnd(e)}}},[n(\"div\",{staticClass:\"ohmybox-item-wrap\"},[t._t(\"default\")],2)])])}),s=[],a={name:\"ohmybox\",props:{scrollHeight:{default:function(){return 300}},quickScrollHeight:{default:function(){return 20}},clickDuration:{default:function(){return 10}},clickDistance:{default:function(){return 30}},scrollDuration:{default:function(){return 400}},itemHeight:{default:function(){return 0}},change:{default:function(){}},click:{default:function(){}}},data:function(){return{startTime:0,page:0,defaultItemHeight:window.innerHeight,initialPosition:0,currentPosition:0,startY:0,direction:\"\"}},created:function(){this.resetOffsetHandle()},mounted:function(){window.addEventListener(\"resize\",this.onresize)},activated:function(){this.resetOffsetHandle()},methods:{touchStart:function(t){this.$refs.ohmyboxContainter.classList.remove(\"trans\"),this.startTime=(new Date).getTime(),this.startY=t.touches[0].pageY,this.initialPosition=this.currentPosition},touchMove:function(t){var e=t.touches[0].pageY-this.startY,n=this.initialPosition+e;this.currentPosition=n},touchEnd:function(t){this.$refs.ohmyboxContainter.classList.add(\"trans\");var e=t.changedTouches[0].pageY,n=(new Date).getTime();if(n-this.startTime<this.clickDuration&&e-this.startY<this.clickDistance){var i=document.querySelector(\".ohmybox-item-wrap\").children.length;this.$emit(\"click\",this.page,i,this._self)}else if(n-this.startTime<this.scrollDuration)e-this.startY>this.quickScrollHeight?this.prevHandle():this.startY-e>this.quickScrollHeight?this.nextHandle():this.resetOffsetHandle();else{var o=e-this.startY;o>this.scrollHeight?this.prevHandle():-o>this.scrollHeight?this.nextHandle():this.resetOffsetHandle()}},nextHandle:function(){this.direction=\"next\";var t=document.querySelector(\".ohmybox-item-wrap\").children.length;t==this.page+1?(this.resetOffsetHandle(),this.$emit(\"change\",t,t,this._self)):(this.page++,this.resetOffsetHandle(),this.$emit(\"change\",this.page,t,this._self))},prevHandle:function(){this.direction=\"prev\";var t=document.querySelector(\".ohmybox-item-wrap\").children.length;this.page<=0?(this.page=0,this.$emit(\"change\",this.page,t,this._self),this.resetOffsetHandle()):(this.page--,this.resetOffsetHandle(),this.$emit(\"change\",this.page,t,this._self))},resetOffsetHandle:function(){this.currentPosition=-this.page*(this.itemHeight||this.defaultItemHeight)},onresize:function(){this.defaultItemHeight=window.innerHeight},forceScrollHandle:function(t){var e=this;t&&(this.$refs.ohmyboxContainter.classList.add(\"trans\"),setTimeout((function(){e.page=t,e.currentPosition=-e.page*(e.itemHeight||e.defaultItemHeight)}),0))}}},u=a,l=(n(\"8e4e\"),n(\"2877\")),h=Object(l[\"a\"])(u,c,s,!1,null,\"23a495f6\",null),f=h.exports;f.install=function(t){t.component(f.name,f)};var d=f,p=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"ohmybox-item\"},[t._t(\"default\")],2)},m=[],g={name:\"ohmybox-item\",data:function(){return{}}},b=g,v=(n(\"42c9\"),Object(l[\"a\"])(b,p,m,!1,null,null,null)),y=v.exports;y.install=function(t){t.component(y.name,y)};var H=y,x=[d,H],w=function t(e){t.installed||x.map((function(t){return e.component(t.name,t)}))};\"undefined\"!==typeof window&&window.Vue&&w(window.Vue);var k={name:\"App\",data:function(){return{scrollHeight:300,quickScrollHeight:20,scrollDuration:400,clickDuration:10,clickDistance:30}},methods:{change:function(t,e,n){console.log(t,e,n)},click:function(t,e,n){console.log(t,e,n)},scroll:function(t){this.$refs.ohmybox.forceScrollHandle(t)}},components:{OhMyBox:d,OhMyBoxItem:H}},O=k,_=(n(\"42b1\"),Object(l[\"a\"])(O,o,r,!1,null,null,null)),P=_.exports;i[\"a\"].config.productionTip=!1,new i[\"a\"]({render:function(t){return t(P)}}).$mount(\"#app\")},f381:function(t,e,n){}});\n//# sourceMappingURL=index.e8ace4ad.js.map","source":"_drafts/last/ohmybox/js/index.e8ace4ad.js","raw":"(function(t){function e(e){for(var i,c,s=e[0],a=e[1],u=e[2],h=0,f=[];h<s.length;h++)c=s[h],Object.prototype.hasOwnProperty.call(o,c)&&o[c]&&f.push(o[c][0]),o[c]=0;for(i in a)Object.prototype.hasOwnProperty.call(a,i)&&(t[i]=a[i]);l&&l(e);while(f.length)f.shift()();return r.push.apply(r,u||[]),n()}function n(){for(var t,e=0;e<r.length;e++){for(var n=r[e],i=!0,s=1;s<n.length;s++){var a=n[s];0!==o[a]&&(i=!1)}i&&(r.splice(e--,1),t=c(c.s=n[0]))}return t}var i={},o={index:0},r=[];function c(e){if(i[e])return i[e].exports;var n=i[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,c),n.l=!0,n.exports}c.m=t,c.c=i,c.d=function(t,e,n){c.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},c.r=function(t){\"undefined\"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},c.t=function(t,e){if(1&e&&(t=c(t)),8&e)return t;if(4&e&&\"object\"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var i in t)c.d(n,i,function(e){return t[e]}.bind(null,i));return n},c.n=function(t){var e=t&&t.__esModule?function(){return t[\"default\"]}:function(){return t};return c.d(e,\"a\",e),e},c.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},c.p=\"/\";var s=window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[],a=s.push.bind(s);s.push=e,s=s.slice();for(var u=0;u<s.length;u++)e(s[u]);var l=a;r.push([0,\"chunk-vendors\"]),n()})({0:function(t,e,n){t.exports=n(\"c31f\")},\"1fb9\":function(t,e,n){},\"42b1\":function(t,e,n){\"use strict\";n(\"f381\")},\"42c9\":function(t,e,n){\"use strict\";n(\"a0b2\")},\"8e4e\":function(t,e,n){\"use strict\";n(\"1fb9\")},a0b2:function(t,e,n){},c31f:function(t,e,n){\"use strict\";n.r(e);n(\"e260\"),n(\"e6cf\"),n(\"cca6\"),n(\"a79d\");var i=n(\"2b0e\"),o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{attrs:{id:\"app\"}},[n(\"button\",{on:{click:function(e){return t.scroll(2)}}},[t._v(\"强制滚动到下标为2的item\")]),n(\"OhMyBox\",{ref:\"ohmybox\",attrs:{scrollHeight:t.scrollHeight,quickScrollHeight:t.quickScrollHeight,scrollDuration:t.scrollDuration,clickDuration:t.clickDuration,clickDistance:t.clickDistance},on:{change:t.change,click:t.click}},t._l(5,(function(e,i){return n(\"OhMyBoxItem\",{key:i,staticClass:\"item\"},[t._v(t._s(e))])})),1)],1)},r=[],c=(n(\"d81d\"),n(\"b0c0\"),function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"section\",{attrs:{id:\"ohmybox-component\"}},[n(\"div\",{ref:\"ohmyboxContainter\",staticClass:\"ohmybox-gesture\",style:{webkitTransform:\"translate3d(0,\"+t.currentPosition+\"px,0)\"},on:{touchstart:function(e){return e.stopPropagation(),t.touchStart(e)},touchmove:function(e){return e.stopPropagation(),t.touchMove(e)},touchend:function(e){return e.stopPropagation(),t.touchEnd(e)},touchcancel:function(e){return e.stopPropagation(),t.touchEnd(e)}}},[n(\"div\",{staticClass:\"ohmybox-item-wrap\"},[t._t(\"default\")],2)])])}),s=[],a={name:\"ohmybox\",props:{scrollHeight:{default:function(){return 300}},quickScrollHeight:{default:function(){return 20}},clickDuration:{default:function(){return 10}},clickDistance:{default:function(){return 30}},scrollDuration:{default:function(){return 400}},itemHeight:{default:function(){return 0}},change:{default:function(){}},click:{default:function(){}}},data:function(){return{startTime:0,page:0,defaultItemHeight:window.innerHeight,initialPosition:0,currentPosition:0,startY:0,direction:\"\"}},created:function(){this.resetOffsetHandle()},mounted:function(){window.addEventListener(\"resize\",this.onresize)},activated:function(){this.resetOffsetHandle()},methods:{touchStart:function(t){this.$refs.ohmyboxContainter.classList.remove(\"trans\"),this.startTime=(new Date).getTime(),this.startY=t.touches[0].pageY,this.initialPosition=this.currentPosition},touchMove:function(t){var e=t.touches[0].pageY-this.startY,n=this.initialPosition+e;this.currentPosition=n},touchEnd:function(t){this.$refs.ohmyboxContainter.classList.add(\"trans\");var e=t.changedTouches[0].pageY,n=(new Date).getTime();if(n-this.startTime<this.clickDuration&&e-this.startY<this.clickDistance){var i=document.querySelector(\".ohmybox-item-wrap\").children.length;this.$emit(\"click\",this.page,i,this._self)}else if(n-this.startTime<this.scrollDuration)e-this.startY>this.quickScrollHeight?this.prevHandle():this.startY-e>this.quickScrollHeight?this.nextHandle():this.resetOffsetHandle();else{var o=e-this.startY;o>this.scrollHeight?this.prevHandle():-o>this.scrollHeight?this.nextHandle():this.resetOffsetHandle()}},nextHandle:function(){this.direction=\"next\";var t=document.querySelector(\".ohmybox-item-wrap\").children.length;t==this.page+1?(this.resetOffsetHandle(),this.$emit(\"change\",t,t,this._self)):(this.page++,this.resetOffsetHandle(),this.$emit(\"change\",this.page,t,this._self))},prevHandle:function(){this.direction=\"prev\";var t=document.querySelector(\".ohmybox-item-wrap\").children.length;this.page<=0?(this.page=0,this.$emit(\"change\",this.page,t,this._self),this.resetOffsetHandle()):(this.page--,this.resetOffsetHandle(),this.$emit(\"change\",this.page,t,this._self))},resetOffsetHandle:function(){this.currentPosition=-this.page*(this.itemHeight||this.defaultItemHeight)},onresize:function(){this.defaultItemHeight=window.innerHeight},forceScrollHandle:function(t){var e=this;t&&(this.$refs.ohmyboxContainter.classList.add(\"trans\"),setTimeout((function(){e.page=t,e.currentPosition=-e.page*(e.itemHeight||e.defaultItemHeight)}),0))}}},u=a,l=(n(\"8e4e\"),n(\"2877\")),h=Object(l[\"a\"])(u,c,s,!1,null,\"23a495f6\",null),f=h.exports;f.install=function(t){t.component(f.name,f)};var d=f,p=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"ohmybox-item\"},[t._t(\"default\")],2)},m=[],g={name:\"ohmybox-item\",data:function(){return{}}},b=g,v=(n(\"42c9\"),Object(l[\"a\"])(b,p,m,!1,null,null,null)),y=v.exports;y.install=function(t){t.component(y.name,y)};var H=y,x=[d,H],w=function t(e){t.installed||x.map((function(t){return e.component(t.name,t)}))};\"undefined\"!==typeof window&&window.Vue&&w(window.Vue);var k={name:\"App\",data:function(){return{scrollHeight:300,quickScrollHeight:20,scrollDuration:400,clickDuration:10,clickDistance:30}},methods:{change:function(t,e,n){console.log(t,e,n)},click:function(t,e,n){console.log(t,e,n)},scroll:function(t){this.$refs.ohmybox.forceScrollHandle(t)}},components:{OhMyBox:d,OhMyBoxItem:H}},O=k,_=(n(\"42b1\"),Object(l[\"a\"])(O,o,r,!1,null,null,null)),P=_.exports;i[\"a\"].config.productionTip=!1,new i[\"a\"]({render:function(t){return t(P)}}).$mount(\"#app\")},f381:function(t,e,n){}});\n//# sourceMappingURL=index.e8ace4ad.js.map","slug":"last/ohmybox/js/index.e8ace4ad","published":0,"date":"2021-10-22T09:38:36.439Z","updated":"2021-10-22T09:38:36.439Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28merl0024h7vmd7gd36k2","content":"(function(t){function e(e){for(var i,c,s=e[0],a=e[1],u=e[2],h=0,f=[];h<s.length;h++)c=s[h],Object.prototype.hasOwnProperty.call(o,c)&&o[c]&&f.push(o[c][0]),o[c]=0;for(i in a)object.prototype.hasownproperty.call(a,i)&&(t[i]=\"a[i]);l&&l(e);while(f.length)f.shift()();return\" r.push.apply(r,u||[]),n()}function n(){for(var t,e=\"0;e<r.length;e++){for(var\" n=\"r[e],i=!0,s=1;s<n.length;s++){var\" a=\"n[s];0!==o[a]&&(i=!1)}i&&(r.splice(e--,1),t=c(c.s=n[0]))}return\" t}var i=\"{},o={index:0},r=[];function\" c(e){if(i[e])return i[e].exports;var t[e].call(n.exports,n,n.exports,c),n.l=\"!0,n.exports}c.m=t,c.c=i,c.d=function(t,e,n){c.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},c.r=function(t){\"undefined\"!==typeof\" symbol&&symbol.tostringtag&&object.defineproperty(t,symbol.tostringtag,{value:\"module\"}),object.defineproperty(t,\"__esmodule\",{value:!0})},c.t=\"function(t,e){if(1&e&&(t=c(t)),8&e)return\" t;if(4&e&&\"object\"=\"==typeof\" t&&t&&t.__esmodule)return t;var t)for(var t)c.d(n,i,function(e){return t[e]}.bind(null,i));return n},c.n=\"function(t){var\" e=\"t&&t.__esModule?function(){return\" t[\"default\"]}:function(){return t};return c.d(e,\"a\",e),e},c.o=\"function(t,e){return\" object.prototype.hasownproperty.call(t,e)},c.p=\"/\" ;var s=\"window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[],a=s.push.bind(s);s.push=e,s=s.slice();for(var\" u=\"0;u<s.length;u++)e(s[u]);var\" l=\"a;r.push([0,\"chunk-vendors\"]),n()})({0:function(t,e,n){t.exports=n(\"c31f\")},\"1fb9\":function(t,e,n){},\"42b1\":function(t,e,n){\"use\" strict\";n(\"f381\")},\"42c9\":function(t,e,n){\"use strict\";n(\"a0b2\")},\"8e4e\":function(t,e,n){\"use strict\";n(\"1fb9\")},a0b2:function(t,e,n){},c31f:function(t,e,n){\"use strict\";n.r(e);n(\"e260\"),n(\"e6cf\"),n(\"cca6\"),n(\"a79d\");var t=\"this,e=t.$createElement,n=t._self._c||e;return\" n(\"div\",{attrs:{id:\"app\"}},[n(\"button\",{on:{click:function(e){return t.scroll(2)}}},[t._v(\"强制滚动到下标为2的item\")]),n(\"ohmybox\",{ref:\"ohmybox\",attrs:{scrollheight:t.scrollheight,quickscrollheight:t.quickscrollheight,scrollduration:t.scrollduration,clickduration:t.clickduration,clickdistance:t.clickdistance},on:{change:t.change,click:t.click}},t._l(5,(function(e,i){return n(\"ohmyboxitem\",{key:i,staticclass:\"item\"},[t._v(t._s(e))])})),1)],1)},r=\"[],c=(n(\"d81d\"),n(\"b0c0\"),function(){var\" n(\"section\",{attrs:{id:\"ohmybox-component\"}},[n(\"div\",{ref:\"ohmyboxcontainter\",staticclass:\"ohmybox-gesture\",style:{webkittransform:\"translate3d(0,\"+t.currentposition+\"px,0)\"},on:{touchstart:function(e){return e.stoppropagation(),t.touchstart(e)},touchmove:function(e){return e.stoppropagation(),t.touchmove(e)},touchend:function(e){return e.stoppropagation(),t.touchend(e)},touchcancel:function(e){return e.stoppropagation(),t.touchend(e)}}},[n(\"div\",{staticclass:\"ohmybox-item-wrap\"},[t._t(\"default\")],2)])])}),s=\"[],a={name:\"ohmybox\",props:{scrollHeight:{default:function(){return\" 300}},quickscrollheight:{default:function(){return 20}},clickduration:{default:function(){return 10}},clickdistance:{default:function(){return 30}},scrollduration:{default:function(){return 400}},itemheight:{default:function(){return 0}},change:{default:function(){}},click:{default:function(){}}},data:function(){return{starttime:0,page:0,defaultitemheight:window.innerheight,initialposition:0,currentposition:0,starty:0,direction:\"\"}},created:function(){this.resetoffsethandle()},mounted:function(){window.addeventlistener(\"resize\",this.onresize)},activated:function(){this.resetoffsethandle()},methods:{touchstart:function(t){this.$refs.ohmyboxcontainter.classlist.remove(\"trans\"),this.starttime=\"(new\" date).gettime(),this.starty=\"t.touches[0].pageY,this.initialPosition=this.currentPosition},touchMove:function(t){var\" date).gettime();if(n-this.starttime<this.clickduration&&e-this.starty<this.clickdistance){var if(n-this.starttime<this.scrollduration)e-this.starty>this.quickScrollHeight?this.prevHandle():this.startY-e>this.quickScrollHeight?this.nextHandle():this.resetOffsetHandle();else{var o=e-this.startY;o>this.scrollHeight?this.prevHandle():-o>this.scrollHeight?this.nextHandle():this.resetOffsetHandle()}},nextHandle:function(){this.direction=\"next\";var t=document.querySelector(\".ohmybox-item-wrap\").children.length;t==this.page+1?(this.resetOffsetHandle(),this.$emit(\"change\",t,t,this._self)):(this.page++,this.resetOffsetHandle(),this.$emit(\"change\",this.page,t,this._self))},prevHandle:function(){this.direction=\"prev\";var t=document.querySelector(\".ohmybox-item-wrap\").children.length;this.page</s.length;h++)c=s[h],Object.prototype.hasOwnProperty.call(o,c)&&o[c]&&f.push(o[c][0]),o[c]=0;for(i>","site":{"data":{}},"excerpt":"","more":"(function(t){function e(e){for(var i,c,s=e[0],a=e[1],u=e[2],h=0,f=[];h<s.length;h++)c=s[h],Object.prototype.hasOwnProperty.call(o,c)&&o[c]&&f.push(o[c][0]),o[c]=0;for(i in a)object.prototype.hasownproperty.call(a,i)&&(t[i]=\"a[i]);l&&l(e);while(f.length)f.shift()();return\" r.push.apply(r,u||[]),n()}function n(){for(var t,e=\"0;e<r.length;e++){for(var\" n=\"r[e],i=!0,s=1;s<n.length;s++){var\" a=\"n[s];0!==o[a]&&(i=!1)}i&&(r.splice(e--,1),t=c(c.s=n[0]))}return\" t}var i=\"{},o={index:0},r=[];function\" c(e){if(i[e])return i[e].exports;var t[e].call(n.exports,n,n.exports,c),n.l=\"!0,n.exports}c.m=t,c.c=i,c.d=function(t,e,n){c.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},c.r=function(t){\"undefined\"!==typeof\" symbol&&symbol.tostringtag&&object.defineproperty(t,symbol.tostringtag,{value:\"module\"}),object.defineproperty(t,\"__esmodule\",{value:!0})},c.t=\"function(t,e){if(1&e&&(t=c(t)),8&e)return\" t;if(4&e&&\"object\"=\"==typeof\" t&&t&&t.__esmodule)return t;var t)for(var t)c.d(n,i,function(e){return t[e]}.bind(null,i));return n},c.n=\"function(t){var\" e=\"t&&t.__esModule?function(){return\" t[\"default\"]}:function(){return t};return c.d(e,\"a\",e),e},c.o=\"function(t,e){return\" object.prototype.hasownproperty.call(t,e)},c.p=\"/\" ;var s=\"window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[],a=s.push.bind(s);s.push=e,s=s.slice();for(var\" u=\"0;u<s.length;u++)e(s[u]);var\" l=\"a;r.push([0,\"chunk-vendors\"]),n()})({0:function(t,e,n){t.exports=n(\"c31f\")},\"1fb9\":function(t,e,n){},\"42b1\":function(t,e,n){\"use\" strict\";n(\"f381\")},\"42c9\":function(t,e,n){\"use strict\";n(\"a0b2\")},\"8e4e\":function(t,e,n){\"use strict\";n(\"1fb9\")},a0b2:function(t,e,n){},c31f:function(t,e,n){\"use strict\";n.r(e);n(\"e260\"),n(\"e6cf\"),n(\"cca6\"),n(\"a79d\");var t=\"this,e=t.$createElement,n=t._self._c||e;return\" n(\"div\",{attrs:{id:\"app\"}},[n(\"button\",{on:{click:function(e){return t.scroll(2)}}},[t._v(\"强制滚动到下标为2的item\")]),n(\"ohmybox\",{ref:\"ohmybox\",attrs:{scrollheight:t.scrollheight,quickscrollheight:t.quickscrollheight,scrollduration:t.scrollduration,clickduration:t.clickduration,clickdistance:t.clickdistance},on:{change:t.change,click:t.click}},t._l(5,(function(e,i){return n(\"ohmyboxitem\",{key:i,staticclass:\"item\"},[t._v(t._s(e))])})),1)],1)},r=\"[],c=(n(\"d81d\"),n(\"b0c0\"),function(){var\" n(\"section\",{attrs:{id:\"ohmybox-component\"}},[n(\"div\",{ref:\"ohmyboxcontainter\",staticclass:\"ohmybox-gesture\",style:{webkittransform:\"translate3d(0,\"+t.currentposition+\"px,0)\"},on:{touchstart:function(e){return e.stoppropagation(),t.touchstart(e)},touchmove:function(e){return e.stoppropagation(),t.touchmove(e)},touchend:function(e){return e.stoppropagation(),t.touchend(e)},touchcancel:function(e){return e.stoppropagation(),t.touchend(e)}}},[n(\"div\",{staticclass:\"ohmybox-item-wrap\"},[t._t(\"default\")],2)])])}),s=\"[],a={name:\"ohmybox\",props:{scrollHeight:{default:function(){return\" 300}},quickscrollheight:{default:function(){return 20}},clickduration:{default:function(){return 10}},clickdistance:{default:function(){return 30}},scrollduration:{default:function(){return 400}},itemheight:{default:function(){return 0}},change:{default:function(){}},click:{default:function(){}}},data:function(){return{starttime:0,page:0,defaultitemheight:window.innerheight,initialposition:0,currentposition:0,starty:0,direction:\"\"}},created:function(){this.resetoffsethandle()},mounted:function(){window.addeventlistener(\"resize\",this.onresize)},activated:function(){this.resetoffsethandle()},methods:{touchstart:function(t){this.$refs.ohmyboxcontainter.classlist.remove(\"trans\"),this.starttime=\"(new\" date).gettime(),this.starty=\"t.touches[0].pageY,this.initialPosition=this.currentPosition},touchMove:function(t){var\" date).gettime();if(n-this.starttime<this.clickduration&&e-this.starty<this.clickdistance){var if(n-this.starttime<this.scrollduration)e-this.starty>this.quickScrollHeight?this.prevHandle():this.startY-e>this.quickScrollHeight?this.nextHandle():this.resetOffsetHandle();else{var o=e-this.startY;o>this.scrollHeight?this.prevHandle():-o>this.scrollHeight?this.nextHandle():this.resetOffsetHandle()}},nextHandle:function(){this.direction=\"next\";var t=document.querySelector(\".ohmybox-item-wrap\").children.length;t==this.page+1?(this.resetOffsetHandle(),this.$emit(\"change\",t,t,this._self)):(this.page++,this.resetOffsetHandle(),this.$emit(\"change\",this.page,t,this._self))},prevHandle:function(){this.direction=\"prev\";var t=document.querySelector(\".ohmybox-item-wrap\").children.length;this.page</s.length;h++)c=s[h],Object.prototype.hasOwnProperty.call(o,c)&&o[c]&&f.push(o[c][0]),o[c]=0;for(i>"},{"title":"前端面试题总结","date":"2020-12-21T11:06:55.000Z","_content":"\n## cookie的几种属性和作用\n - **name**: 名字\n - **value**: 值\n - **domain**: 可以访问此cookie的域名\n - **path**: 可以访问此cookie的路径\n - **sameSite**: 跨站点携带cookie设置\n \t- None：不限制； \n \t- Lax：默认值，介于None和Strict之间，会合理判断携带cookie时机，如链接a会携带cookie；\n \t- Strict：完全禁止跨站点传送cookie；\n - **httponly**: 值为true则仅在http请求中会传递cookie，不可用document.cookie等操作获取\n - **secure**: 是否只能使用https传递此cookie\n - **expires**: 过期时间；值是时间意思是到这个时间，cookie失效，否则是session，即退出浏览器后自动失效\n\n   \n## 重排和重绘  \n\n网页加载过程大致分为5步：  \n  \n 1. HTML代码转化成DOM  \n 2. CSS代码转化成CSSOM\n 3. 结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）\n 4. 生成布局（layout），即将所有渲染树的所有节点进行平面合成\n 5. 将布局绘制（paint）在屏幕上  \n \n其中第4步为排列布局，重排指的就是第4步重做；第5步是绘制，那重绘指的就是第5步重做。按照网页加载顺序，第4步之后执行第5步，所以重排必将触发重绘，而重绘不一定会触发重排。\n\n**重绘**：修改元素字体颜色，背景颜色，阴影效果等\n**重排**：位置发生改变，如`margin` `padding` `width`。 `删除增加dom` `调用offsetHeight`等读取实时量值时\n\n由于重排性能消耗大，那么减少重排次数也就成了一个优化页面的方法，下面总结几个常用方法：  \n\n1. 不要一条一条修改css，尽量通过class修改，或者csstext  \n2. 先display: none; 再修改样式，然后再display: block;\n3. 一个元素大量修改css，可以设置为position: fixed | absolute, 这样重排消耗少，因为不用考虑其他元素位置  \n4. react vue虚拟dom\n\n## 深拷贝\n\n```javascript\n// 冷门深拷贝利用MessageChannel\nfunction deepClone(obj) {\n  return new Promise(function(resolve, reject) {\n    var { port1, port2 } = new MessageChannel();\n    port1.onmessage = function(e) {\n      resolve(e.data);\n    };\n    port2.postMessage(obj);\n  });\n}\n```\n```javascript\n// 利用weakmap解决了循环引用报错问题，完全版\nfunction deepClone1(_target, map = new WeakMap()) {\n  if(!_target || typeof _target !== 'object'){\n    return _target\n  }\n  if(map.get(_target)) {\n    console.log('进入map判断')\n    console.log(map.get(_target))\n    return map.get(_target);\n  }\n  let res = Array.isArray(_target) ? [] : {}; \n  console.log('map set')\n  console.log(_target, res)\n  map.set(_target, res);\n  for(let i in _target){\n    console.log('循环')\n    if(typeof _target[i] === 'object'){\n      console.log('是对象')\n      res[i] = deepClone1(_target[i], map);\n    }else{\n      console.log('不是对象')\n      res[i] = _target[i]\n    }\n  }\n  return res;\n}\n```\n## 函数防抖和节流\n- **防抖**：\n```javascript\nfunction debounce(event, delay) {\n  let timer = null;\n  return function (...args) {  // ...args用来接受fun原有的参数，比如事件就是event对象\n    clearTimeout(timer); // 利用clearTimeout的特性，处理delay内，再此触发函数不做处理\n    timer = setTimeout(() => {\n      event.apply(this, args);\n    }, delay);\n  };\n} \n```\n- **节流**：\n```javascript\nfunction throttle(fun, delay) {            \n　　let prev = Date.now();            \n　　return function(...args) {   // ...args用来接受fun原有的参数，比如事件就是event对象                        \n　　　　let now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　fun.apply(this, args);  \n　　　　　　prev = Date.now();                                    \n　　　　}            \n　　}        \n}\n```\n\n[查看详解](http://cd98.xyz/d/2020/10/20/debounce-and-throttle)\n\n## 实现换肤功能\n - 设置多种颜色类名，覆盖实现\n - http 请求动态加载 .css 文件\n - 预编译 css 变量\n\n## https证书作用 \n - 证书中存在一个公钥，一个私钥，私钥保密存在服务器不公开\n - 用户通过浏览器向服务器443端口连接，服务端收到请求，发给客户端一个带有公钥的证书\n - 客户端收到证书，先验证合法性（是否在有效期内、证书的域名与请求的域名是否匹配，通过继续，不通过提示警告\n - 客户端再生成一个随机key，通过公钥加密，发给服务端\n - 服务端收到随机key密文，用私钥解密，拿到客户端的随机key，通过随机key对内容进行对称加密，发给客户端\n - 客户端收到密文，用随机key解密，完成\n\n## bfc\n\n> 全称「块格式化上下文」(Block Formatting Context), 是一块独立的css作用域，外部如何变化都影响不到他。  \n\n##### 怎么触发：  \n  \n - 根元素body  \n - float： right | left\n - position： absolute | fixed\n - display：inline-block | tabel-cells | flex\n - overflow： hidden | auto | scroll\n \n##### 效果\n - 清除浮动，常用overflow hidde\n - 垂直方向margin会重叠\n\n## 数组方法\n#### 改变原数组：  \n\n - splice: array.splice(index,howmany,item1,.....,itemX) 删除/添加\n - sort: 排序\n - unshift: 首加 shift: 首删;  pop: 尾删; push: 尾加\n - reverse: 倒序排列\n - fill: 数组填充 \n \n \n ```javascript\n array.fill(value, startIndex | 0, endIndex | array.length)\n  \n [1,2,3,4,5].fill('a', 1, 3) \n // [1, \"a\", \"a\", 4, 5]\n ```  \n \n#### 不改变原数组，生成新数组\n \n - slice: 浅拷贝 array.slice(startIdx, endIdx)\n - join: 转字符串并分割\n - toLocaleString: 转换成字符串数组\n - concat: 连接数组 可用...替代\n - indexOf: 检查下标\n - includes: 是否包含。可替代indexOf，indexOf === -1不够语义化\n\n#### 循环方法\n  - forEach、map、filter\n  - every、some、reduce、reduceRight(和reduce区别是相反方向)\n   \n   \n   \n## 字符串方法\n\n\n```javascript\nvar str = \"hello world\";\n\nstr.charAt(1) //e 返回指定下标的字符\nstr.charcodeAt(1) //101 返回指定下标字符的字符编码\nstr.concat(123) // hello world123 连接字符串，生成新的\nstr.slice(0, 2) // he 截取字符串，参数为下标\nstr.substring(0, 2) // he 截取字符串，参数为下标\nstr.substr(0, 2) // he 截取字符串，第一个参数是起始下标，第二个参数为截取数量\nstr.indexOf('h', 0) // 0 查子字符下标，第一个参数是字符，第二个参数是起始下标\nstr.lastIndexOf('h', 0) // 0 查子字符下标，第一个参数是字符，第二个参数是结尾下标(和indexof区别)\n\nstr.toLowerCase() // hello world 转小写\nstr.toUpperCase() // HELLO WORLD 转大写\nstr.trim() // 删除前后空格\n\nstr.split('e') // [\"h\", \"llo world\"] 转数组，参数为分割符\nstr.replace('o', 'a') // hella world 替换字符，第一个参数可以是正则\nstr.match(/hello/g) // [\"hello\"] 匹配字符串返回一个数组，参数常是正则\n```\n\n## http1.1长连接 & http2多路复用区别：\n\n**http1.1长连接**：**同一个域名访问同一个文件的多个请求**都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接，但不是并行，只能按顺序执行。\n\n**http2多路复用**：**同一个域名访问多个文件的多个请求**也可以复用一个tcp连接，且多个请求可以被并行处理。  \n\n## 懒加载\n页面中一些大资源加载较慢，比如iframe，img。针对这个问题可以通过懒加载解决。    \n\n拿`img`举例，先设置`img`的`src`属性为一个默认的资源，然后把真实`url`放在标签的某个属性中。并设置好图片的宽高，避免完成加载时出现页面闪动问题。  \n\n然后实时监听页面滚动，如果当前图片是可见状态，那么把图片的真实url属性值取出替换到默认`src`上来实现加载图片资源，从而提升页面打开速度和合理使用客户端流量。\n\n```javascript\n// 获取浏览设备的网页可视高度\nlet clientHeight = document.documentElement.clientHeight; \n// 获取已被滚出的页面高度\nlet scrollTop = document.documentElement.scrollTop; \n// 图片顶部到网页顶部的高度\nlet imgOffsetTop = document.querySelector(\"img\").offsetTop;\n\n// 判断img在可视区域内：\nimgOffsetTop < clientHeight + scrollTop\n```\n\n## vue组件通信\n - props 和 $emit\n - provide inject：在组件a声明，在a下面所有子组件通过inject调用，通过参数传递\n - event bus： new出一个vue，通过emit和on来派发和监控\n - vuex 全局状态管理\n - this.$children 和 this.$parent 层级较深不推荐，provid可以替代此方法\n\n## 输入url到页面展示经历了什么\n - **dns解析**：按照这个步骤查询，找到ip，立即中断返回给客户端（浏览器缓存 => 操作系统缓存(host) => 路由器缓存 => 本地服务器缓存 => isp dnf服务器查询 => 根dns服务器）\n - **tcp三次握手**\n - **发送http请求报文**：报文包括：请求行，请求头，请求体\n - **服务端接收到请求**： 进入web服务器，如apache、nginx，然后进入后台程序\n - **服务器响应报文**：报文包括：响应行，响应头，响应体\n - **浏览器渲染页面**\n \t1. 根据html得到dom树\n \t2. 根据css得到css树\n \t3. 根据dom树和css树，生成渲染树\n \t4. 根据渲染树计算每一个节点的信息\n \t5. 根据计算好的信息绘制页面\n \n - **数据传送完成，四次挥手关闭**： \n\n\n## commonjs模块和es6模块有什么区别\ncommonjs:  \n\n - 对于基本数据类型，是值的拷贝\n - 对于复杂数据类型，是浅拷贝，也就是修改一个模块的值，引用他的值也会发生改变\n - 第一次加载模块会缓存，往后再加载会读取缓存的数据\n \nes6：\n - 所有数据都是只读引用，当遇到import语句时，会生成一个只读引用，等到文件中真的使用到模块中的值时，根据只读引用，到加载中的模块取值\n - 不允许修改模块中的数据，并且是动态的，比如模块中的值发生改变，引入得到的值也会改变。\n\n## 几种跨域\n - **jsonp**： 利用script标签跨域，本质是加载一个外部js\n - **cors**：全程跨域资源共享，服务端操作，把请求头的`origin`的值取出，响应头会增加`Access-Control-Allow-Origin` key并把值设置为`origin`取出的值也可以是通配符，浏览器就不会拦截响应了，从而解决跨域问题\n - **postMassage**：利用可访问服务资源的`iframe`，和当前页面互相通信，传递消息，来实现跨域，`postMassage`本质是两个页面的消息传递方法。  \n   \n\t```javascript\n\t// 页面1(可以获取后端数据的)传递数据，第二个参数是url匹配规则，可以是通配符\n\twindow.frames[0].postMessage(data,'*')\n\t \n\t// 页面2(不能接收后端数据的)，接收页面1的数据\n\twindow.addEventListener('message',function(e){\n\tconsole.log(e.data)\n\t})\n\t```\n- **服务器中转**： 由于服务端没跨域，服务端代替客户端请求目标接口，并把响应数据返回给客户端\n\n## react生命周期  \n \n - **componentWillMount**：在渲染前调用，客户端服务端都会调用\n - **componentDidMount**：第一次渲染后调用，只在客户端\n - **componentWillReceiveProps**： 接收新的props被调用，初始化时不会被调用\n - **shouldComponentUpdate**： 组件更新(props,state)时调用；返回布尔值，T为允许更新组件，F为不更新组件\n - **componentWillUpdate**： 组件更新(props,state)前渲染前被调用，初始化时不会调用\n - **componentDidUpdate**：组件完成更新后调用。初始化时不会被调用\n - **componentWillUnmount**： 组件要销毁前调用\n\n## vue生命周期父子组件执行顺序\n - 父beforeCreate -> 父created -> 父beforeMount -> 子beforeCreate -> 子created -> 子beforeMount->子mounted->父mounted\n\n - 子组件更新：父beforeUpdate -> 子beforeUpdate -> 子updated -> 父updated\n\n - 父组件更新：父beforeUpdate -> 父updated\n\n - 销毁：父beforeDestroy -> 子beforeDestroy -> 子destroyed -> 父destroyed\n\n总结带beofre的生命周期都是**从父到子**调用，带ed的生命周期都是**从子到父**\n\n \n## js变量声明提升\njs中，函数及变量的声明都将被提升到作用域最顶部，且函数的提升比变量优先级高\n\n## 继承\n - **原型链继承**： Cat继承了Animal，缺点：所有Cat实例都会共享原型链，不可以向Animal传参。  \n \n \t```javascript\n \tfunction Cat(){};\n \t\n\tCat.prototype = new Animal();\n \t```\n - **call继承/构造继承**: 解决上面原型链建成俩问题，但是只是Cat实例，不是Animal的实例\n\n \t```javascript\n \tfunction Cat(name){\n\t  Animal.call(this);\n\t}\n \t```\n - **组合继承**：也就是前面两个方法合并，解决上面两个继承的缺点，唯一的缺点调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了） \n \n\t```javascript\n \tfunction Cat(name){\n\t  Animal.call(this);\n\t}\n\t\n\tCat.prototype = new Animal();\n\tCat.prototype.constructor = Cat; //修复构造函数指向\n\t// 优点：\n\t// 既是cat实例，又是Animal实例\n\t// 没有共享原型方法问题，并可以传参数\n\n \t```\n \t\n## 事件循环  \n \n 同步任务在执行栈，异步任务执行后回调区分微任务和宏任务放入对应的微宏队列中，等同步执行栈执行完毕，会先检查微任务队列，执行完毕后，检查宏任务队列，执行。其中Promise.resolve调用静态方法，会优先于正常的promise的resolve方法  \n \n异步微任务有哪些：  \n \n  - new Promise()\n    \n异步宏任务有哪些：  \n\n  - setInterval()\n  - setTimeout()\n \n## 前端优化\n\n - 静态资源放在cdn\n - 首屏加载服务端渲染\n - 可以升级到http2，可以使用http2 多路复用 多个请求并行，可以打乱顺序，最后重组\n - 使用字体图标替代图片\n - gzip压缩\n - uglify plugin优化压缩代码\n - 图片懒加载\n - 图片压缩，优先使用webp\n - 减少重排，多使用类名或者csstext处理样式\n - 多使用flex，性能优，兼容性好\n  \n## 行内元素特点\n - 可以设置所有方向`margin`和`padding`，但是垂直方向无法更改布局\n - 设置`width`和`height`属性无效\n - 不会另起一行  \n  \n## 实现instanceof\n> instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。\n![6D190A1F-A82A-4F86-BC85-3AD9F5EA672B.png](./面试题总结/bB3Sj9h8nyoOIVs.png)\n  \n```javascript\nlet objProto = obj.__proto__;\n   while(objProto) {\n      if (objProto === ctor.prototype) {\n        return true;\n      }\n      objProto = objProto.__proto__;\n   }\n   return false;\n}\n\nvar Food = function() {};\nvar Meat = function() {};\nMeat.prototype = new Food();\nvar meat = new Meat();\n\nnewInstanceof(meat, Meat) // true\nnewInstanceof(meat, Food) // true\nmeat instanceof Meat // true\nmeat instanceof Food // true\n```\n\n总的来说就是`meat.__proto__.constructor === Meat`，由于原型链是一条链，所以循环所有`__proto__`;\n直到`null`为止，符合`Meat.prototype === meat.__proto__`即返回`true`，否则返回`false`。\n\n## http缓存机制\n\n分为两类：**强制缓存** 和 **协商缓存**\n通过查看`http header`中`Cache-Control`字段，（`Cache-Control`优先`Expires`）他有以下几种值：   \n\n - private:  客户端可以缓存\n - public: 客户端和代理服务器都可以缓存  \n - max-age=xxx: 缓存将在xxx秒后失效\n - no-cache: 需要使用对比缓存来验证数据\n - no-store: 不缓存  \n \n强缓存：不会向服务器发起请求，直接从缓存中获取资源  \n\n协商缓存：（1 优先 2）    \n\n1.  客户端第一次请求，从http响应头中拿到Etag，是一个资源的唯一标识，随后客户端的每次请求会携带If-None-Match字段到请求头，服务器收到后，和当前资源唯一标识对比，如果不同，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n2. 客户端第一次请求，从http响应头中拿到Last-Modified，是内容最后修改时间，随后客户端的每次请求会携带If-Modified-Since字段到请求头，服务器拿到后，和Last-Modified对比，如果If-Modified-Since 小于 Last-Modified，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n引用网上一张图：\n![632130-20170210141453338-1263276228.png](./面试题总结/FvAIM258yHCTQba.png)  \n\n## constructor和super关键字\n`class`是`ES6`新增的关键字，为了看起来更像`java`等面向对象语言，实际上是一个语法糖，等同于`ES5`的`function`来创建构造函数。  \n\n - constructor ：`constructors`是class中默认的一个关键字，会自动调用该方法，`class`中必须要有`constructor`，如果没有，会被默认添加。当new时，`constructor`会被执行返回一个this，就是实例。  \n - super ： 当`class`有继承时，在`constructor`内部必须执行一遍super()函数，B继承A，`super`相当于`A.prototype.constructor.call(this, props)`，另外super()也指向父亲A的原型对象 [这里](https://juejin.cn/post/6844903638674980872)\n\n## js垃圾回收机制算法  \n> 当内存中的数据不需要时候，js会自动使用垃圾回收算法释放掉      \n\n - **引用计算** : 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。这是最初级的垃圾收集算法。 该算法有个限制：无法处理引用循环，两个对象互相引用的情况下，引用次数至少是1，所以不会被回收掉  \n \n - **标记清除** : 此算法把“对象是否不再需要”简化定义为“对象是否可以获得”。这个算法从根（root）全局对象开始先下查找，找到不可以被获得的对象，然后清除掉  \n  \n## 常见算法种类\n - **二分查找**：也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。  \n \n - **贪心算法**：又名贪婪法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心原则，选取当前状态下最好/最优的选择（局部最有利的选择），贪图眼前局部的利益最大化。\n - **回溯算法**：实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。\n - **分治算法**：分治法是构建基于多项分支递归的一种很重要的算法范式。字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。\n - **动态规划**：动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动态规划往往用于优化递归问题，例如斐波那契数列，如果运用递归的方式来求解会重复计算很多相同的子问题，利用动态规划的思想可以减少计算量。\n\n## 关于promise async/await执行顺序面试题\n - 执行顺序： 同步放入执行栈 => 异步放入任务队列 => 异步区分微宏任务 => 微任务 => 宏任务\n - async/await，await后的语句是同步的，在函数体内，await下的语句会被放入promise回调函数体中，async函数默认返回一个promise对象  \n \n经典面试题：  \n\n```javascript\nasync function async1(){\n\tconsole.log('async1 start');\n\tawait async2();\n\tconsole.log('async1 end')\n}\nasync function async2(){\n\tconsole.log('async2')\n}\nconsole.log('script start');\nsetTimeout(function(){\n\tconsole.log('setTimeout')\n},0);\nasync1();\nnew Promise(function(resolve){\n\tconsole.log('promise1');\n\tresolve();\n}).then(function(){\n\tconsole.log('promise2')\n});\nconsole.log('script end')\n```\n解析：按照从上往下顺序先执行同步代码，前两个函数`async1`和`async2`是函数声明，忽略。然后第1个输出的是`script start`，然后看到`setTimeout`, 由于它是异步且属于宏任务，放到最后执行。然后看到async1函数被执行了，进入`async1`函数体，第2个输出的是`async1 start`, 看到await规则是：await右的语句被同步执行，所以第3个输出的是`async2`，await下的语句(函数体内)被当作async函数返回一个promsise的回调函数体的语句去处理，且被放入了异步任务队列中，等待中。然后跳出async1函数体，继续执行同步代码，遇到new Promise，第4次输出`promise1`，看到resolve，就把then中回调，放入任务队列中，然后继续向下执行同步代码，第5次输出的最后的`script end`。至此同步执行栈空了，开始把任务队列中的上下文拿到执行栈执行，由于队列先进先出，所以第一个被入栈的是async1的回调，也就是第6次输出的是`async1 end`，然后把第二个队列中的上下文放入执行栈，也就是promise的resolve，所以第7次输出`promise2`，至此微任务执行完成，现在执行宏任务，也就是timeout，所以第8次输出为`setTimeout`。  \n\n结果：  \n\n```\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n```\n\n## 迭代器和生成器\n先来瞅一段代码：  \n\n```javascript\nfunction createIterator(items) {\n    var i = 0;\n    return { // 返回一个迭代器对象\n        next: function() { // 迭代器对象一定有个next()方法\n            let done = (i >= items.length);\n            let value = !done ? items[i++] : undefined;\n            return { \n                value: value,\n                done: done\n            }\n        }\n    }\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next());  // \"{ value: 1, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 2, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 3, done: false}\"\nconsole.log(iterator.next());  // \"{ value: undefiend, done: true}\"\n```\n这就是迭代器，迭代器是一个特殊对象，可以通过每调用一次next，获取下一项结果。可以用迭代器替代for循环，因为for通过下标获取，多层嵌套比较复杂。\n\n```javascript\n// 用迭代器模拟for\nvar colors = [\"red\", \"green\", \"blue\"];\nvar iterator = createIterator(colors);\nwhile(!iterator.next().done){\n    console.log(iterator.next().value);\n}\n```\n\n迭代器模拟for的方法看起来太麻烦了，不如for来的方便，这个时候可以用`生成器`(* 和 yield)来快速生成迭代器。\n\n```javascript\nfunction *createIterator(items) {\n    for(let i = 0; i < items.length; i++) {\n        yield items[i];\n    }\n}\n\nlet iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next());  // \"{ value: 1, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 2, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 3, done: false}\"\nconsole.log(iterator.next());  // \"{ value: undefiend, done: true}\"\n```\n通过`*`和`yield`关键字创建，`*`来表示这个函数内部是可以用yield返回每次迭代的值，和async、await一样。需要组合使用，`yield`后面接每次迭代的值。这样就可以外部调用.next()获取下一个值。\n\n在es6中，数组、Set、Map、字符串集合，都属于可迭代对象，内部都有默认迭代器，可通过`object[Symbol.iterator]()`访问默认迭代器。  \n\nes6中也提供了一个通过方法来快速使用迭代器\n```\nfor(item of 集合迭代器) {...}\n```\n常见的迭代器和得到item的值：    \n \n - object.keys(): key(对象)/下标(数组)\n - object.values(): 每项value\n - object.entries(): [下标/key, value]\n \n## 前端路由\n\n#### hash\n14年前，前端路由都是用hash的方式实现的，地址长这个样子**url#hash**， 修改`hash`部分不会重载这个页面，每次hash改变，可以用window的`hashchange`方法来监听，通过这个方法就可以实现前端路由了\n \n#### history\n在14年，HTML5标准发布，window上新增了两个api：`pushState`和`replaceState`，也hash一样，不刷新来实现前端路由，而且少了#更美观了，由于没#，所以刷新时候，默认会从服务器下载对应url资源，这个时候我们需要改下服务器配置，都加载前端index.html文件，来实现前端路由\n\n```javascript\n// 第一个参数是state，用于描述一些特性，会被放入历史栈中，开发者使用\n// 第二个参数是title，表示新页面的标题，浏览器都会忽略这个参数\n// 第二个参数是url，表示新页面的相对地址\n// 跳转\nwindow.history.pushState(null, null, \"/profile\");\nwindow.history.replaceState(null, null, \"/profile\"); 和pushState的区别是不会把记录放入历史栈中\n```\n\n#### 共同点\n- 都不会重载页面\n- 都会把历史记录放入栈中\n\n#### 不同点\n - hash只可以#后部分，必须是同源url，history没有限制\n - history需要修改服务器配置，来解决刷新空白问题，hash本身就是属于前端的，不需要设置\n\n \n## babel工作原理\n>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。简单来说就是一种描述源代码的结构，用于被计算机识别到，并成语言引擎执行\n\n工作原理大致可以理解成，`字符串输入`=>`转换`=>`输出`  \n\n - 根据babylon解析器，把js代码按照规范解析成AST语法树\n - 按照规则(stage-0,1,2,3),修改AST语法树，常见把高级语法，转换成低级语法\n - 最后通过babel-generator将修改后的AST语法树转换成js代码\n\n## js类型检测\n\n \n - **typeof**: 除了基本数据类型，检测不到具体object类型(数组，对象，时间对象，正则，set，map)\n - **instanceof**: 例a instanceof Fun原理是检测a是不是Fun的实例，缺点就是被检测的值必须是引用，如下所示\n \n ```javascript\n new Number(1) instanceof Number\n // true\n 1 instanceof Number\n // false\n ```\n - **constructor**: 实例.constructor === 构造器，缺点是constructor属性容易被修改\n - **Object.prototype.toString.call**: 目前最好用的一个方法，缺点是使用object构造函数的toString方法，此方法可能被修改\n  \n ```javascript\n \tObject.prototype.toString.call(1)\n \t// \"[object Number]\"\n \tObject.prototype.toString.call('1')\n \t// \"[object String]\"\n \tObject.prototype.toString.call([1])\n \t// \"[object Array]\"\n \t// 如果修改原型\n \tObject.prototype.toString = Array.prototype.toString\n \tObject.prototype.toString.call([1,2,3])\n \t// \"1,2,3\"\n \t...\n ```\n \n## Object的valueOf和toString方法\n \n  - **valueOf**: 返回对象的原始值表示\n  - **toString**: 返回对象的字符串表示\n  \n  对象转字符串或者数字的过程：如果专程字符串，会优先调用toString方法，转数字，会优先调用valueOf方法\n  \n  相关面试题：\n  \n  ```javascript\n   // 下面代码a在什么值情况下会输出1\n\n\tvar a = ?;\n\tif (a == 1 && a == 2 && a == 3) {\n\t    console.log(1);\n\t}\n\t\n\t// 解\n\tvar a = {\n\t    n : 0,\n\t    valueOf(){\n\t        return ++this.n;\n\t    }\n\t};\n  ```\n  \n## vue slot插槽\n - 匿名插插: 子组件包裹的内容会被显示到`slot`标签中中\n\n - 具名插插：感觉名字多次显示，可复用\n \n ```javascript\n <div slot=\"down\"></div>的内容\n 会被显示到<slot name=\"down\"></slot>里\n \n ```\n - 数据插槽：\n \n ```javascript\n // 父亲中\n <div v-slot:data=\"{data}\"></div>\n// 组件中就可以用data了\n<myslot v-slot=\"data\">\n  {{ slotProps.user.firstName }}\n</myslot>\n\n ```\n \n## mixin\nvue mixin是针对组件间功能共享来做的。可以对组件的任意部分进行mixin，也就是说不同的组件，想使用同一个数组，或者方法，那么mixin就是来做这个事的，把公共部分提取出来作为mixin\n\n声明：\n\n```javascript\n// 声明\nconst toggle = {\n    data () {\n        isshowing: false\n    },\n    methods: {\n        toggleShow() {\n            this.isshowing = !this.isshowing\n        }\n    }\n}\n// 使用，toggle的方法会自动合并到当前组件中\nmixins: [toggle]\n```\n\n## vuex使用\n核心概念：  \n\n - state：数据\n - getter：类似计算属性，用来获取state\n - mutation： 同步方法，用于修改state\n - action： 异步方法，最后调用mutation修改state  \n \n``` javascript\n// 声明\nimport Vuex from 'vuex'\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  getter: {\n    doneTodos: (state, getters) => {\n      return state.todos.filter(todo => todo.done)\n    },\n    count: (state) => {\n    \treturn state.count\n    }\n  },\n  mutations: {\n    increment (state, payload) {\n      state.count++\n    }\n  },\n  actions: {\n    addCount(context) {\n      // 可以包含异步操作\n      // context 是一个与 store 实例具有相同方法和属性的 context 对象\n    }\n  }\n})\n\n// 使用\n// 调用mutation\nthis.$store.commit('increment', 10)\n// 调用actions\nthis.$store.dispatch('increment', 10)\n// 利用mapGetters mapGetters mapMutations mapActions便捷使用\ncomputed: {\n\t...mapGetters(['audio']),\n\t...mapState({\n\t    this.count 等同于 state.count + this.localCount\n\t    count(state) {\n\t      return state.count + this.localCount\n\t    }\n},\nmethods: {\n  ...mapMutations({\n  \t  add: 'increment' // 将 `this.add()` 映射为`this.$store.commit('increment')`\n  }),\t\n  ...mapActions({\n     add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')`\n  })\n}\n\n\n```\n\n## 事件委托与冒泡和捕获\n>什么是事件委托：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 \n>\n>什么是冒泡和捕获：其实都是事件传播路径。冒泡：从外到事件源进行事件传播；捕获：从内向事件源进行事件传播；\n>\n\nDOM标准事件流的触发的先后顺序为：先捕获再冒泡。即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。\n`addEventListener`事件监听方法的第三个参数默认值是`false`，表示冒泡阶段调用，`true`为捕获阶段调用\n \n```html\n<body>\n  <button>append</button>\n  <ul>\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n  </ul>\n</body>\n```\n\n```javascript\nwindow.onload = function() {\n    document.querySelector('button').onclick = function (e) {\n      let li = document.createElement('li')\n      li.innerHTML = '5'\n      document.querySelector('ul').appendChild(li)\n    }\n\n    document.querySelector('ul').onclick = function(e) {\n      // li 新增的li也是可以被点击的\n      console.log(e.target.nodeName.toLowerCase()) \n    }\n  }\n```\naddeventListener和onclick不同点：\n - addeventListener可以给一个事件注册多个listener\n - addEventListener可以控制时间传播行为（捕获/冒泡，使用removeEventListener来解决\n - \n\n## ES6 proxy和reflect\n\n### proxy\n\n> 对目标读取、函数调用等操作进行拦截，然后操作处理。它不直接操作对象，而是像代理模式。\n\n```javascript\nlet target = {\n    name: 'Tom',\n    age: 24\n}\nlet handler = {\n    get: function(target, key) {\n        console.log('getting '+key);\n        return target[key]; // 不是target.key\n    },\n    set: function(target, key, value) {\n        console.log('setting '+key);\n        target[key] = value;\n    }\n}\n// target为目标对象，handler为代理处理\nlet proxy = new Proxy(target, handler)\n\n```\n\n### reflect\n\n> 优化了object内部操作，修改一些函数的返回值，如Object.defineProperty，Reflect与Proxy是一一对应的对象，是Proxy的方法也是Reflect的方法，Proxy修改的过的方法可以在Reflect获取默认值。\n\n```javascript\n// 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。\nObject.defineProperty(target, property, attributes) // 报错\nReflect.defineProperty(target, property, attributes // false\n\n// 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n'assign' in Object // true\nReflect.has(Object, 'assign') // true\n```\n\n \n\n\n","source":"_posts/面试题总结.md","raw":"---\ntitle: 前端面试题总结\ndate: 2020/12/21 19:06:55\ntags: [前端]\n---\n\n## cookie的几种属性和作用\n - **name**: 名字\n - **value**: 值\n - **domain**: 可以访问此cookie的域名\n - **path**: 可以访问此cookie的路径\n - **sameSite**: 跨站点携带cookie设置\n \t- None：不限制； \n \t- Lax：默认值，介于None和Strict之间，会合理判断携带cookie时机，如链接a会携带cookie；\n \t- Strict：完全禁止跨站点传送cookie；\n - **httponly**: 值为true则仅在http请求中会传递cookie，不可用document.cookie等操作获取\n - **secure**: 是否只能使用https传递此cookie\n - **expires**: 过期时间；值是时间意思是到这个时间，cookie失效，否则是session，即退出浏览器后自动失效\n\n   \n## 重排和重绘  \n\n网页加载过程大致分为5步：  \n  \n 1. HTML代码转化成DOM  \n 2. CSS代码转化成CSSOM\n 3. 结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）\n 4. 生成布局（layout），即将所有渲染树的所有节点进行平面合成\n 5. 将布局绘制（paint）在屏幕上  \n \n其中第4步为排列布局，重排指的就是第4步重做；第5步是绘制，那重绘指的就是第5步重做。按照网页加载顺序，第4步之后执行第5步，所以重排必将触发重绘，而重绘不一定会触发重排。\n\n**重绘**：修改元素字体颜色，背景颜色，阴影效果等\n**重排**：位置发生改变，如`margin` `padding` `width`。 `删除增加dom` `调用offsetHeight`等读取实时量值时\n\n由于重排性能消耗大，那么减少重排次数也就成了一个优化页面的方法，下面总结几个常用方法：  \n\n1. 不要一条一条修改css，尽量通过class修改，或者csstext  \n2. 先display: none; 再修改样式，然后再display: block;\n3. 一个元素大量修改css，可以设置为position: fixed | absolute, 这样重排消耗少，因为不用考虑其他元素位置  \n4. react vue虚拟dom\n\n## 深拷贝\n\n```javascript\n// 冷门深拷贝利用MessageChannel\nfunction deepClone(obj) {\n  return new Promise(function(resolve, reject) {\n    var { port1, port2 } = new MessageChannel();\n    port1.onmessage = function(e) {\n      resolve(e.data);\n    };\n    port2.postMessage(obj);\n  });\n}\n```\n```javascript\n// 利用weakmap解决了循环引用报错问题，完全版\nfunction deepClone1(_target, map = new WeakMap()) {\n  if(!_target || typeof _target !== 'object'){\n    return _target\n  }\n  if(map.get(_target)) {\n    console.log('进入map判断')\n    console.log(map.get(_target))\n    return map.get(_target);\n  }\n  let res = Array.isArray(_target) ? [] : {}; \n  console.log('map set')\n  console.log(_target, res)\n  map.set(_target, res);\n  for(let i in _target){\n    console.log('循环')\n    if(typeof _target[i] === 'object'){\n      console.log('是对象')\n      res[i] = deepClone1(_target[i], map);\n    }else{\n      console.log('不是对象')\n      res[i] = _target[i]\n    }\n  }\n  return res;\n}\n```\n## 函数防抖和节流\n- **防抖**：\n```javascript\nfunction debounce(event, delay) {\n  let timer = null;\n  return function (...args) {  // ...args用来接受fun原有的参数，比如事件就是event对象\n    clearTimeout(timer); // 利用clearTimeout的特性，处理delay内，再此触发函数不做处理\n    timer = setTimeout(() => {\n      event.apply(this, args);\n    }, delay);\n  };\n} \n```\n- **节流**：\n```javascript\nfunction throttle(fun, delay) {            \n　　let prev = Date.now();            \n　　return function(...args) {   // ...args用来接受fun原有的参数，比如事件就是event对象                        \n　　　　let now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　fun.apply(this, args);  \n　　　　　　prev = Date.now();                                    \n　　　　}            \n　　}        \n}\n```\n\n[查看详解](http://cd98.xyz/d/2020/10/20/debounce-and-throttle)\n\n## 实现换肤功能\n - 设置多种颜色类名，覆盖实现\n - http 请求动态加载 .css 文件\n - 预编译 css 变量\n\n## https证书作用 \n - 证书中存在一个公钥，一个私钥，私钥保密存在服务器不公开\n - 用户通过浏览器向服务器443端口连接，服务端收到请求，发给客户端一个带有公钥的证书\n - 客户端收到证书，先验证合法性（是否在有效期内、证书的域名与请求的域名是否匹配，通过继续，不通过提示警告\n - 客户端再生成一个随机key，通过公钥加密，发给服务端\n - 服务端收到随机key密文，用私钥解密，拿到客户端的随机key，通过随机key对内容进行对称加密，发给客户端\n - 客户端收到密文，用随机key解密，完成\n\n## bfc\n\n> 全称「块格式化上下文」(Block Formatting Context), 是一块独立的css作用域，外部如何变化都影响不到他。  \n\n##### 怎么触发：  \n  \n - 根元素body  \n - float： right | left\n - position： absolute | fixed\n - display：inline-block | tabel-cells | flex\n - overflow： hidden | auto | scroll\n \n##### 效果\n - 清除浮动，常用overflow hidde\n - 垂直方向margin会重叠\n\n## 数组方法\n#### 改变原数组：  \n\n - splice: array.splice(index,howmany,item1,.....,itemX) 删除/添加\n - sort: 排序\n - unshift: 首加 shift: 首删;  pop: 尾删; push: 尾加\n - reverse: 倒序排列\n - fill: 数组填充 \n \n \n ```javascript\n array.fill(value, startIndex | 0, endIndex | array.length)\n  \n [1,2,3,4,5].fill('a', 1, 3) \n // [1, \"a\", \"a\", 4, 5]\n ```  \n \n#### 不改变原数组，生成新数组\n \n - slice: 浅拷贝 array.slice(startIdx, endIdx)\n - join: 转字符串并分割\n - toLocaleString: 转换成字符串数组\n - concat: 连接数组 可用...替代\n - indexOf: 检查下标\n - includes: 是否包含。可替代indexOf，indexOf === -1不够语义化\n\n#### 循环方法\n  - forEach、map、filter\n  - every、some、reduce、reduceRight(和reduce区别是相反方向)\n   \n   \n   \n## 字符串方法\n\n\n```javascript\nvar str = \"hello world\";\n\nstr.charAt(1) //e 返回指定下标的字符\nstr.charcodeAt(1) //101 返回指定下标字符的字符编码\nstr.concat(123) // hello world123 连接字符串，生成新的\nstr.slice(0, 2) // he 截取字符串，参数为下标\nstr.substring(0, 2) // he 截取字符串，参数为下标\nstr.substr(0, 2) // he 截取字符串，第一个参数是起始下标，第二个参数为截取数量\nstr.indexOf('h', 0) // 0 查子字符下标，第一个参数是字符，第二个参数是起始下标\nstr.lastIndexOf('h', 0) // 0 查子字符下标，第一个参数是字符，第二个参数是结尾下标(和indexof区别)\n\nstr.toLowerCase() // hello world 转小写\nstr.toUpperCase() // HELLO WORLD 转大写\nstr.trim() // 删除前后空格\n\nstr.split('e') // [\"h\", \"llo world\"] 转数组，参数为分割符\nstr.replace('o', 'a') // hella world 替换字符，第一个参数可以是正则\nstr.match(/hello/g) // [\"hello\"] 匹配字符串返回一个数组，参数常是正则\n```\n\n## http1.1长连接 & http2多路复用区别：\n\n**http1.1长连接**：**同一个域名访问同一个文件的多个请求**都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接，但不是并行，只能按顺序执行。\n\n**http2多路复用**：**同一个域名访问多个文件的多个请求**也可以复用一个tcp连接，且多个请求可以被并行处理。  \n\n## 懒加载\n页面中一些大资源加载较慢，比如iframe，img。针对这个问题可以通过懒加载解决。    \n\n拿`img`举例，先设置`img`的`src`属性为一个默认的资源，然后把真实`url`放在标签的某个属性中。并设置好图片的宽高，避免完成加载时出现页面闪动问题。  \n\n然后实时监听页面滚动，如果当前图片是可见状态，那么把图片的真实url属性值取出替换到默认`src`上来实现加载图片资源，从而提升页面打开速度和合理使用客户端流量。\n\n```javascript\n// 获取浏览设备的网页可视高度\nlet clientHeight = document.documentElement.clientHeight; \n// 获取已被滚出的页面高度\nlet scrollTop = document.documentElement.scrollTop; \n// 图片顶部到网页顶部的高度\nlet imgOffsetTop = document.querySelector(\"img\").offsetTop;\n\n// 判断img在可视区域内：\nimgOffsetTop < clientHeight + scrollTop\n```\n\n## vue组件通信\n - props 和 $emit\n - provide inject：在组件a声明，在a下面所有子组件通过inject调用，通过参数传递\n - event bus： new出一个vue，通过emit和on来派发和监控\n - vuex 全局状态管理\n - this.$children 和 this.$parent 层级较深不推荐，provid可以替代此方法\n\n## 输入url到页面展示经历了什么\n - **dns解析**：按照这个步骤查询，找到ip，立即中断返回给客户端（浏览器缓存 => 操作系统缓存(host) => 路由器缓存 => 本地服务器缓存 => isp dnf服务器查询 => 根dns服务器）\n - **tcp三次握手**\n - **发送http请求报文**：报文包括：请求行，请求头，请求体\n - **服务端接收到请求**： 进入web服务器，如apache、nginx，然后进入后台程序\n - **服务器响应报文**：报文包括：响应行，响应头，响应体\n - **浏览器渲染页面**\n \t1. 根据html得到dom树\n \t2. 根据css得到css树\n \t3. 根据dom树和css树，生成渲染树\n \t4. 根据渲染树计算每一个节点的信息\n \t5. 根据计算好的信息绘制页面\n \n - **数据传送完成，四次挥手关闭**： \n\n\n## commonjs模块和es6模块有什么区别\ncommonjs:  \n\n - 对于基本数据类型，是值的拷贝\n - 对于复杂数据类型，是浅拷贝，也就是修改一个模块的值，引用他的值也会发生改变\n - 第一次加载模块会缓存，往后再加载会读取缓存的数据\n \nes6：\n - 所有数据都是只读引用，当遇到import语句时，会生成一个只读引用，等到文件中真的使用到模块中的值时，根据只读引用，到加载中的模块取值\n - 不允许修改模块中的数据，并且是动态的，比如模块中的值发生改变，引入得到的值也会改变。\n\n## 几种跨域\n - **jsonp**： 利用script标签跨域，本质是加载一个外部js\n - **cors**：全程跨域资源共享，服务端操作，把请求头的`origin`的值取出，响应头会增加`Access-Control-Allow-Origin` key并把值设置为`origin`取出的值也可以是通配符，浏览器就不会拦截响应了，从而解决跨域问题\n - **postMassage**：利用可访问服务资源的`iframe`，和当前页面互相通信，传递消息，来实现跨域，`postMassage`本质是两个页面的消息传递方法。  \n   \n\t```javascript\n\t// 页面1(可以获取后端数据的)传递数据，第二个参数是url匹配规则，可以是通配符\n\twindow.frames[0].postMessage(data,'*')\n\t \n\t// 页面2(不能接收后端数据的)，接收页面1的数据\n\twindow.addEventListener('message',function(e){\n\tconsole.log(e.data)\n\t})\n\t```\n- **服务器中转**： 由于服务端没跨域，服务端代替客户端请求目标接口，并把响应数据返回给客户端\n\n## react生命周期  \n \n - **componentWillMount**：在渲染前调用，客户端服务端都会调用\n - **componentDidMount**：第一次渲染后调用，只在客户端\n - **componentWillReceiveProps**： 接收新的props被调用，初始化时不会被调用\n - **shouldComponentUpdate**： 组件更新(props,state)时调用；返回布尔值，T为允许更新组件，F为不更新组件\n - **componentWillUpdate**： 组件更新(props,state)前渲染前被调用，初始化时不会调用\n - **componentDidUpdate**：组件完成更新后调用。初始化时不会被调用\n - **componentWillUnmount**： 组件要销毁前调用\n\n## vue生命周期父子组件执行顺序\n - 父beforeCreate -> 父created -> 父beforeMount -> 子beforeCreate -> 子created -> 子beforeMount->子mounted->父mounted\n\n - 子组件更新：父beforeUpdate -> 子beforeUpdate -> 子updated -> 父updated\n\n - 父组件更新：父beforeUpdate -> 父updated\n\n - 销毁：父beforeDestroy -> 子beforeDestroy -> 子destroyed -> 父destroyed\n\n总结带beofre的生命周期都是**从父到子**调用，带ed的生命周期都是**从子到父**\n\n \n## js变量声明提升\njs中，函数及变量的声明都将被提升到作用域最顶部，且函数的提升比变量优先级高\n\n## 继承\n - **原型链继承**： Cat继承了Animal，缺点：所有Cat实例都会共享原型链，不可以向Animal传参。  \n \n \t```javascript\n \tfunction Cat(){};\n \t\n\tCat.prototype = new Animal();\n \t```\n - **call继承/构造继承**: 解决上面原型链建成俩问题，但是只是Cat实例，不是Animal的实例\n\n \t```javascript\n \tfunction Cat(name){\n\t  Animal.call(this);\n\t}\n \t```\n - **组合继承**：也就是前面两个方法合并，解决上面两个继承的缺点，唯一的缺点调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了） \n \n\t```javascript\n \tfunction Cat(name){\n\t  Animal.call(this);\n\t}\n\t\n\tCat.prototype = new Animal();\n\tCat.prototype.constructor = Cat; //修复构造函数指向\n\t// 优点：\n\t// 既是cat实例，又是Animal实例\n\t// 没有共享原型方法问题，并可以传参数\n\n \t```\n \t\n## 事件循环  \n \n 同步任务在执行栈，异步任务执行后回调区分微任务和宏任务放入对应的微宏队列中，等同步执行栈执行完毕，会先检查微任务队列，执行完毕后，检查宏任务队列，执行。其中Promise.resolve调用静态方法，会优先于正常的promise的resolve方法  \n \n异步微任务有哪些：  \n \n  - new Promise()\n    \n异步宏任务有哪些：  \n\n  - setInterval()\n  - setTimeout()\n \n## 前端优化\n\n - 静态资源放在cdn\n - 首屏加载服务端渲染\n - 可以升级到http2，可以使用http2 多路复用 多个请求并行，可以打乱顺序，最后重组\n - 使用字体图标替代图片\n - gzip压缩\n - uglify plugin优化压缩代码\n - 图片懒加载\n - 图片压缩，优先使用webp\n - 减少重排，多使用类名或者csstext处理样式\n - 多使用flex，性能优，兼容性好\n  \n## 行内元素特点\n - 可以设置所有方向`margin`和`padding`，但是垂直方向无法更改布局\n - 设置`width`和`height`属性无效\n - 不会另起一行  \n  \n## 实现instanceof\n> instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。\n![6D190A1F-A82A-4F86-BC85-3AD9F5EA672B.png](./面试题总结/bB3Sj9h8nyoOIVs.png)\n  \n```javascript\nlet objProto = obj.__proto__;\n   while(objProto) {\n      if (objProto === ctor.prototype) {\n        return true;\n      }\n      objProto = objProto.__proto__;\n   }\n   return false;\n}\n\nvar Food = function() {};\nvar Meat = function() {};\nMeat.prototype = new Food();\nvar meat = new Meat();\n\nnewInstanceof(meat, Meat) // true\nnewInstanceof(meat, Food) // true\nmeat instanceof Meat // true\nmeat instanceof Food // true\n```\n\n总的来说就是`meat.__proto__.constructor === Meat`，由于原型链是一条链，所以循环所有`__proto__`;\n直到`null`为止，符合`Meat.prototype === meat.__proto__`即返回`true`，否则返回`false`。\n\n## http缓存机制\n\n分为两类：**强制缓存** 和 **协商缓存**\n通过查看`http header`中`Cache-Control`字段，（`Cache-Control`优先`Expires`）他有以下几种值：   \n\n - private:  客户端可以缓存\n - public: 客户端和代理服务器都可以缓存  \n - max-age=xxx: 缓存将在xxx秒后失效\n - no-cache: 需要使用对比缓存来验证数据\n - no-store: 不缓存  \n \n强缓存：不会向服务器发起请求，直接从缓存中获取资源  \n\n协商缓存：（1 优先 2）    \n\n1.  客户端第一次请求，从http响应头中拿到Etag，是一个资源的唯一标识，随后客户端的每次请求会携带If-None-Match字段到请求头，服务器收到后，和当前资源唯一标识对比，如果不同，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n2. 客户端第一次请求，从http响应头中拿到Last-Modified，是内容最后修改时间，随后客户端的每次请求会携带If-Modified-Since字段到请求头，服务器拿到后，和Last-Modified对比，如果If-Modified-Since 小于 Last-Modified，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n引用网上一张图：\n![632130-20170210141453338-1263276228.png](./面试题总结/FvAIM258yHCTQba.png)  \n\n## constructor和super关键字\n`class`是`ES6`新增的关键字，为了看起来更像`java`等面向对象语言，实际上是一个语法糖，等同于`ES5`的`function`来创建构造函数。  \n\n - constructor ：`constructors`是class中默认的一个关键字，会自动调用该方法，`class`中必须要有`constructor`，如果没有，会被默认添加。当new时，`constructor`会被执行返回一个this，就是实例。  \n - super ： 当`class`有继承时，在`constructor`内部必须执行一遍super()函数，B继承A，`super`相当于`A.prototype.constructor.call(this, props)`，另外super()也指向父亲A的原型对象 [这里](https://juejin.cn/post/6844903638674980872)\n\n## js垃圾回收机制算法  \n> 当内存中的数据不需要时候，js会自动使用垃圾回收算法释放掉      \n\n - **引用计算** : 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。这是最初级的垃圾收集算法。 该算法有个限制：无法处理引用循环，两个对象互相引用的情况下，引用次数至少是1，所以不会被回收掉  \n \n - **标记清除** : 此算法把“对象是否不再需要”简化定义为“对象是否可以获得”。这个算法从根（root）全局对象开始先下查找，找到不可以被获得的对象，然后清除掉  \n  \n## 常见算法种类\n - **二分查找**：也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。  \n \n - **贪心算法**：又名贪婪法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心原则，选取当前状态下最好/最优的选择（局部最有利的选择），贪图眼前局部的利益最大化。\n - **回溯算法**：实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。\n - **分治算法**：分治法是构建基于多项分支递归的一种很重要的算法范式。字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。\n - **动态规划**：动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动态规划往往用于优化递归问题，例如斐波那契数列，如果运用递归的方式来求解会重复计算很多相同的子问题，利用动态规划的思想可以减少计算量。\n\n## 关于promise async/await执行顺序面试题\n - 执行顺序： 同步放入执行栈 => 异步放入任务队列 => 异步区分微宏任务 => 微任务 => 宏任务\n - async/await，await后的语句是同步的，在函数体内，await下的语句会被放入promise回调函数体中，async函数默认返回一个promise对象  \n \n经典面试题：  \n\n```javascript\nasync function async1(){\n\tconsole.log('async1 start');\n\tawait async2();\n\tconsole.log('async1 end')\n}\nasync function async2(){\n\tconsole.log('async2')\n}\nconsole.log('script start');\nsetTimeout(function(){\n\tconsole.log('setTimeout')\n},0);\nasync1();\nnew Promise(function(resolve){\n\tconsole.log('promise1');\n\tresolve();\n}).then(function(){\n\tconsole.log('promise2')\n});\nconsole.log('script end')\n```\n解析：按照从上往下顺序先执行同步代码，前两个函数`async1`和`async2`是函数声明，忽略。然后第1个输出的是`script start`，然后看到`setTimeout`, 由于它是异步且属于宏任务，放到最后执行。然后看到async1函数被执行了，进入`async1`函数体，第2个输出的是`async1 start`, 看到await规则是：await右的语句被同步执行，所以第3个输出的是`async2`，await下的语句(函数体内)被当作async函数返回一个promsise的回调函数体的语句去处理，且被放入了异步任务队列中，等待中。然后跳出async1函数体，继续执行同步代码，遇到new Promise，第4次输出`promise1`，看到resolve，就把then中回调，放入任务队列中，然后继续向下执行同步代码，第5次输出的最后的`script end`。至此同步执行栈空了，开始把任务队列中的上下文拿到执行栈执行，由于队列先进先出，所以第一个被入栈的是async1的回调，也就是第6次输出的是`async1 end`，然后把第二个队列中的上下文放入执行栈，也就是promise的resolve，所以第7次输出`promise2`，至此微任务执行完成，现在执行宏任务，也就是timeout，所以第8次输出为`setTimeout`。  \n\n结果：  \n\n```\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n```\n\n## 迭代器和生成器\n先来瞅一段代码：  \n\n```javascript\nfunction createIterator(items) {\n    var i = 0;\n    return { // 返回一个迭代器对象\n        next: function() { // 迭代器对象一定有个next()方法\n            let done = (i >= items.length);\n            let value = !done ? items[i++] : undefined;\n            return { \n                value: value,\n                done: done\n            }\n        }\n    }\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next());  // \"{ value: 1, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 2, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 3, done: false}\"\nconsole.log(iterator.next());  // \"{ value: undefiend, done: true}\"\n```\n这就是迭代器，迭代器是一个特殊对象，可以通过每调用一次next，获取下一项结果。可以用迭代器替代for循环，因为for通过下标获取，多层嵌套比较复杂。\n\n```javascript\n// 用迭代器模拟for\nvar colors = [\"red\", \"green\", \"blue\"];\nvar iterator = createIterator(colors);\nwhile(!iterator.next().done){\n    console.log(iterator.next().value);\n}\n```\n\n迭代器模拟for的方法看起来太麻烦了，不如for来的方便，这个时候可以用`生成器`(* 和 yield)来快速生成迭代器。\n\n```javascript\nfunction *createIterator(items) {\n    for(let i = 0; i < items.length; i++) {\n        yield items[i];\n    }\n}\n\nlet iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next());  // \"{ value: 1, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 2, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 3, done: false}\"\nconsole.log(iterator.next());  // \"{ value: undefiend, done: true}\"\n```\n通过`*`和`yield`关键字创建，`*`来表示这个函数内部是可以用yield返回每次迭代的值，和async、await一样。需要组合使用，`yield`后面接每次迭代的值。这样就可以外部调用.next()获取下一个值。\n\n在es6中，数组、Set、Map、字符串集合，都属于可迭代对象，内部都有默认迭代器，可通过`object[Symbol.iterator]()`访问默认迭代器。  \n\nes6中也提供了一个通过方法来快速使用迭代器\n```\nfor(item of 集合迭代器) {...}\n```\n常见的迭代器和得到item的值：    \n \n - object.keys(): key(对象)/下标(数组)\n - object.values(): 每项value\n - object.entries(): [下标/key, value]\n \n## 前端路由\n\n#### hash\n14年前，前端路由都是用hash的方式实现的，地址长这个样子**url#hash**， 修改`hash`部分不会重载这个页面，每次hash改变，可以用window的`hashchange`方法来监听，通过这个方法就可以实现前端路由了\n \n#### history\n在14年，HTML5标准发布，window上新增了两个api：`pushState`和`replaceState`，也hash一样，不刷新来实现前端路由，而且少了#更美观了，由于没#，所以刷新时候，默认会从服务器下载对应url资源，这个时候我们需要改下服务器配置，都加载前端index.html文件，来实现前端路由\n\n```javascript\n// 第一个参数是state，用于描述一些特性，会被放入历史栈中，开发者使用\n// 第二个参数是title，表示新页面的标题，浏览器都会忽略这个参数\n// 第二个参数是url，表示新页面的相对地址\n// 跳转\nwindow.history.pushState(null, null, \"/profile\");\nwindow.history.replaceState(null, null, \"/profile\"); 和pushState的区别是不会把记录放入历史栈中\n```\n\n#### 共同点\n- 都不会重载页面\n- 都会把历史记录放入栈中\n\n#### 不同点\n - hash只可以#后部分，必须是同源url，history没有限制\n - history需要修改服务器配置，来解决刷新空白问题，hash本身就是属于前端的，不需要设置\n\n \n## babel工作原理\n>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。简单来说就是一种描述源代码的结构，用于被计算机识别到，并成语言引擎执行\n\n工作原理大致可以理解成，`字符串输入`=>`转换`=>`输出`  \n\n - 根据babylon解析器，把js代码按照规范解析成AST语法树\n - 按照规则(stage-0,1,2,3),修改AST语法树，常见把高级语法，转换成低级语法\n - 最后通过babel-generator将修改后的AST语法树转换成js代码\n\n## js类型检测\n\n \n - **typeof**: 除了基本数据类型，检测不到具体object类型(数组，对象，时间对象，正则，set，map)\n - **instanceof**: 例a instanceof Fun原理是检测a是不是Fun的实例，缺点就是被检测的值必须是引用，如下所示\n \n ```javascript\n new Number(1) instanceof Number\n // true\n 1 instanceof Number\n // false\n ```\n - **constructor**: 实例.constructor === 构造器，缺点是constructor属性容易被修改\n - **Object.prototype.toString.call**: 目前最好用的一个方法，缺点是使用object构造函数的toString方法，此方法可能被修改\n  \n ```javascript\n \tObject.prototype.toString.call(1)\n \t// \"[object Number]\"\n \tObject.prototype.toString.call('1')\n \t// \"[object String]\"\n \tObject.prototype.toString.call([1])\n \t// \"[object Array]\"\n \t// 如果修改原型\n \tObject.prototype.toString = Array.prototype.toString\n \tObject.prototype.toString.call([1,2,3])\n \t// \"1,2,3\"\n \t...\n ```\n \n## Object的valueOf和toString方法\n \n  - **valueOf**: 返回对象的原始值表示\n  - **toString**: 返回对象的字符串表示\n  \n  对象转字符串或者数字的过程：如果专程字符串，会优先调用toString方法，转数字，会优先调用valueOf方法\n  \n  相关面试题：\n  \n  ```javascript\n   // 下面代码a在什么值情况下会输出1\n\n\tvar a = ?;\n\tif (a == 1 && a == 2 && a == 3) {\n\t    console.log(1);\n\t}\n\t\n\t// 解\n\tvar a = {\n\t    n : 0,\n\t    valueOf(){\n\t        return ++this.n;\n\t    }\n\t};\n  ```\n  \n## vue slot插槽\n - 匿名插插: 子组件包裹的内容会被显示到`slot`标签中中\n\n - 具名插插：感觉名字多次显示，可复用\n \n ```javascript\n <div slot=\"down\"></div>的内容\n 会被显示到<slot name=\"down\"></slot>里\n \n ```\n - 数据插槽：\n \n ```javascript\n // 父亲中\n <div v-slot:data=\"{data}\"></div>\n// 组件中就可以用data了\n<myslot v-slot=\"data\">\n  {{ slotProps.user.firstName }}\n</myslot>\n\n ```\n \n## mixin\nvue mixin是针对组件间功能共享来做的。可以对组件的任意部分进行mixin，也就是说不同的组件，想使用同一个数组，或者方法，那么mixin就是来做这个事的，把公共部分提取出来作为mixin\n\n声明：\n\n```javascript\n// 声明\nconst toggle = {\n    data () {\n        isshowing: false\n    },\n    methods: {\n        toggleShow() {\n            this.isshowing = !this.isshowing\n        }\n    }\n}\n// 使用，toggle的方法会自动合并到当前组件中\nmixins: [toggle]\n```\n\n## vuex使用\n核心概念：  \n\n - state：数据\n - getter：类似计算属性，用来获取state\n - mutation： 同步方法，用于修改state\n - action： 异步方法，最后调用mutation修改state  \n \n``` javascript\n// 声明\nimport Vuex from 'vuex'\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  getter: {\n    doneTodos: (state, getters) => {\n      return state.todos.filter(todo => todo.done)\n    },\n    count: (state) => {\n    \treturn state.count\n    }\n  },\n  mutations: {\n    increment (state, payload) {\n      state.count++\n    }\n  },\n  actions: {\n    addCount(context) {\n      // 可以包含异步操作\n      // context 是一个与 store 实例具有相同方法和属性的 context 对象\n    }\n  }\n})\n\n// 使用\n// 调用mutation\nthis.$store.commit('increment', 10)\n// 调用actions\nthis.$store.dispatch('increment', 10)\n// 利用mapGetters mapGetters mapMutations mapActions便捷使用\ncomputed: {\n\t...mapGetters(['audio']),\n\t...mapState({\n\t    this.count 等同于 state.count + this.localCount\n\t    count(state) {\n\t      return state.count + this.localCount\n\t    }\n},\nmethods: {\n  ...mapMutations({\n  \t  add: 'increment' // 将 `this.add()` 映射为`this.$store.commit('increment')`\n  }),\t\n  ...mapActions({\n     add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')`\n  })\n}\n\n\n```\n\n## 事件委托与冒泡和捕获\n>什么是事件委托：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 \n>\n>什么是冒泡和捕获：其实都是事件传播路径。冒泡：从外到事件源进行事件传播；捕获：从内向事件源进行事件传播；\n>\n\nDOM标准事件流的触发的先后顺序为：先捕获再冒泡。即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。\n`addEventListener`事件监听方法的第三个参数默认值是`false`，表示冒泡阶段调用，`true`为捕获阶段调用\n \n```html\n<body>\n  <button>append</button>\n  <ul>\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n  </ul>\n</body>\n```\n\n```javascript\nwindow.onload = function() {\n    document.querySelector('button').onclick = function (e) {\n      let li = document.createElement('li')\n      li.innerHTML = '5'\n      document.querySelector('ul').appendChild(li)\n    }\n\n    document.querySelector('ul').onclick = function(e) {\n      // li 新增的li也是可以被点击的\n      console.log(e.target.nodeName.toLowerCase()) \n    }\n  }\n```\naddeventListener和onclick不同点：\n - addeventListener可以给一个事件注册多个listener\n - addEventListener可以控制时间传播行为（捕获/冒泡，使用removeEventListener来解决\n - \n\n## ES6 proxy和reflect\n\n### proxy\n\n> 对目标读取、函数调用等操作进行拦截，然后操作处理。它不直接操作对象，而是像代理模式。\n\n```javascript\nlet target = {\n    name: 'Tom',\n    age: 24\n}\nlet handler = {\n    get: function(target, key) {\n        console.log('getting '+key);\n        return target[key]; // 不是target.key\n    },\n    set: function(target, key, value) {\n        console.log('setting '+key);\n        target[key] = value;\n    }\n}\n// target为目标对象，handler为代理处理\nlet proxy = new Proxy(target, handler)\n\n```\n\n### reflect\n\n> 优化了object内部操作，修改一些函数的返回值，如Object.defineProperty，Reflect与Proxy是一一对应的对象，是Proxy的方法也是Reflect的方法，Proxy修改的过的方法可以在Reflect获取默认值。\n\n```javascript\n// 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。\nObject.defineProperty(target, property, attributes) // 报错\nReflect.defineProperty(target, property, attributes // false\n\n// 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n'assign' in Object // true\nReflect.has(Object, 'assign') // true\n```\n\n \n\n\n","slug":"面试题总结","published":1,"updated":"2021-10-22T09:38:36.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mero0025h7vmesbbf6ua","content":"<h2 id=\"cookie的几种属性和作用\"><a href=\"#cookie的几种属性和作用\" class=\"headerlink\" title=\"cookie的几种属性和作用\"></a>cookie的几种属性和作用</h2><ul>\n<li><strong>name</strong>: 名字</li>\n<li><strong>value</strong>: 值</li>\n<li><strong>domain</strong>: 可以访问此cookie的域名</li>\n<li><strong>path</strong>: 可以访问此cookie的路径</li>\n<li><strong>sameSite</strong>: 跨站点携带cookie设置<ul>\n<li>None：不限制； </li>\n<li>Lax：默认值，介于None和Strict之间，会合理判断携带cookie时机，如链接a会携带cookie；</li>\n<li>Strict：完全禁止跨站点传送cookie；</li>\n</ul>\n</li>\n<li><strong>httponly</strong>: 值为true则仅在http请求中会传递cookie，不可用document.cookie等操作获取</li>\n<li><strong>secure</strong>: 是否只能使用https传递此cookie</li>\n<li><strong>expires</strong>: 过期时间；值是时间意思是到这个时间，cookie失效，否则是session，即退出浏览器后自动失效</li>\n</ul>\n<h2 id=\"重排和重绘\"><a href=\"#重排和重绘\" class=\"headerlink\" title=\"重排和重绘\"></a>重排和重绘</h2><p>网页加载过程大致分为5步：  </p>\n<ol>\n<li>HTML代码转化成DOM  </li>\n<li>CSS代码转化成CSSOM</li>\n<li>结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）</li>\n<li>生成布局（layout），即将所有渲染树的所有节点进行平面合成</li>\n<li>将布局绘制（paint）在屏幕上  </li>\n</ol>\n<p>其中第4步为排列布局，重排指的就是第4步重做；第5步是绘制，那重绘指的就是第5步重做。按照网页加载顺序，第4步之后执行第5步，所以重排必将触发重绘，而重绘不一定会触发重排。</p>\n<p><strong>重绘</strong>：修改元素字体颜色，背景颜色，阴影效果等<br><strong>重排</strong>：位置发生改变，如<code>margin</code> <code>padding</code> <code>width</code>。 <code>删除增加dom</code> <code>调用offsetHeight</code>等读取实时量值时</p>\n<p>由于重排性能消耗大，那么减少重排次数也就成了一个优化页面的方法，下面总结几个常用方法：  </p>\n<ol>\n<li>不要一条一条修改css，尽量通过class修改，或者csstext  </li>\n<li>先display: none; 再修改样式，然后再display: block;</li>\n<li>一个元素大量修改css，可以设置为position: fixed | absolute, 这样重排消耗少，因为不用考虑其他元素位置  </li>\n<li>react vue虚拟dom</li>\n</ol>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 冷门深拷贝利用MessageChannel</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span> port1<span class=\"token punctuation\">,</span> port2 <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    port1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    port2<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 利用weakmap解决了循环引用报错问题，完全版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepClone1</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_target <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> _target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> _target\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'进入map判断'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'map set'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> _target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> _target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'是对象'</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone1</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不是对象'</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数防抖和节流\"><a href=\"#函数防抖和节流\" class=\"headerlink\" title=\"函数防抖和节流\"></a>函数防抖和节流</h2><ul>\n<li><strong>防抖</strong>：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用clearTimeout的特性，处理delay内，再此触发函数不做处理</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><strong>节流</strong>：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象                        </span>\n　　　　<span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">>=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    \n　　　　　　<span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    \n　　　　<span class=\"token punctuation\">&#125;</span>            \n　　<span class=\"token punctuation\">&#125;</span>        \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><a href=\"http://cd98.xyz/d/2020/10/20/debounce-and-throttle\">查看详解</a></p>\n<h2 id=\"实现换肤功能\"><a href=\"#实现换肤功能\" class=\"headerlink\" title=\"实现换肤功能\"></a>实现换肤功能</h2><ul>\n<li>设置多种颜色类名，覆盖实现</li>\n<li>http 请求动态加载 .css 文件</li>\n<li>预编译 css 变量</li>\n</ul>\n<h2 id=\"https证书作用\"><a href=\"#https证书作用\" class=\"headerlink\" title=\"https证书作用\"></a>https证书作用</h2><ul>\n<li>证书中存在一个公钥，一个私钥，私钥保密存在服务器不公开</li>\n<li>用户通过浏览器向服务器443端口连接，服务端收到请求，发给客户端一个带有公钥的证书</li>\n<li>客户端收到证书，先验证合法性（是否在有效期内、证书的域名与请求的域名是否匹配，通过继续，不通过提示警告</li>\n<li>客户端再生成一个随机key，通过公钥加密，发给服务端</li>\n<li>服务端收到随机key密文，用私钥解密，拿到客户端的随机key，通过随机key对内容进行对称加密，发给客户端</li>\n<li>客户端收到密文，用随机key解密，完成</li>\n</ul>\n<h2 id=\"bfc\"><a href=\"#bfc\" class=\"headerlink\" title=\"bfc\"></a>bfc</h2><blockquote>\n<p>全称「块格式化上下文」(Block Formatting Context), 是一块独立的css作用域，外部如何变化都影响不到他。  </p>\n</blockquote>\n<h5 id=\"怎么触发：\"><a href=\"#怎么触发：\" class=\"headerlink\" title=\"怎么触发：\"></a>怎么触发：</h5><ul>\n<li>根元素body  </li>\n<li>float： right | left</li>\n<li>position： absolute | fixed</li>\n<li>display：inline-block | tabel-cells | flex</li>\n<li>overflow： hidden | auto | scroll</li>\n</ul>\n<h5 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h5><ul>\n<li>清除浮动，常用overflow hidde</li>\n<li>垂直方向margin会重叠</li>\n</ul>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><h4 id=\"改变原数组：\"><a href=\"#改变原数组：\" class=\"headerlink\" title=\"改变原数组：\"></a>改变原数组：</h4><ul>\n<li>splice: array.splice(index,howmany,item1,…..,itemX) 删除/添加</li>\n<li>sort: 排序</li>\n<li>unshift: 首加 shift: 首删;  pop: 尾删; push: 尾加</li>\n<li>reverse: 倒序排列</li>\n<li>fill: 数组填充 </li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> array<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> startIndex <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> endIndex <span class=\"token operator\">|</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  \n <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n <span class=\"token comment\">// [1, \"a\", \"a\", 4, 5]</span>\n <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n \n#### 不改变原数组，生成新数组\n \n - slice: 浅拷贝 array.slice(startIdx, endIdx)\n - join: 转字符串并分割\n - toLocaleString: 转换成字符串数组\n - concat: 连接数组 可用...替代\n - indexOf: 检查下标\n - includes: 是否包含。可替代indexOf，indexOf === -1不够语义化\n\n#### 循环方法\n  - forEach、map、filter\n  - every、some、reduce、reduceRight(和reduce区别是相反方向)\n   \n   \n   \n## 字符串方法\n\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//e 返回指定下标的字符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">charcodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//101 返回指定下标字符的字符编码</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello world123 连接字符串，生成新的</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，参数为下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，参数为下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，第一个参数是起始下标，第二个参数为截取数量</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 查子字符下标，第一个参数是字符，第二个参数是起始下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 查子字符下标，第一个参数是字符，第二个参数是结尾下标(和indexof区别)</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello world 转小写</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// HELLO WORLD 转大写</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 删除前后空格</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"h\", \"llo world\"] 转数组，参数为分割符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hella world 替换字符，第一个参数可以是正则</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hello</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"hello\"] 匹配字符串返回一个数组，参数常是正则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"http1-1长连接-amp-http2多路复用区别：\"><a href=\"#http1-1长连接-amp-http2多路复用区别：\" class=\"headerlink\" title=\"http1.1长连接 &amp; http2多路复用区别：\"></a>http1.1长连接 &amp; http2多路复用区别：</h2><p><strong>http1.1长连接</strong>：<strong>同一个域名访问同一个文件的多个请求</strong>都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接，但不是并行，只能按顺序执行。</p>\n<p><strong>http2多路复用</strong>：<strong>同一个域名访问多个文件的多个请求</strong>也可以复用一个tcp连接，且多个请求可以被并行处理。  </p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><p>页面中一些大资源加载较慢，比如iframe，img。针对这个问题可以通过懒加载解决。    </p>\n<p>拿<code>img</code>举例，先设置<code>img</code>的<code>src</code>属性为一个默认的资源，然后把真实<code>url</code>放在标签的某个属性中。并设置好图片的宽高，避免完成加载时出现页面闪动问题。  </p>\n<p>然后实时监听页面滚动，如果当前图片是可见状态，那么把图片的真实url属性值取出替换到默认<code>src</code>上来实现加载图片资源，从而提升页面打开速度和合理使用客户端流量。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 获取浏览设备的网页可视高度</span>\n<span class=\"token keyword\">let</span> clientHeight <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 获取已被滚出的页面高度</span>\n<span class=\"token keyword\">let</span> scrollTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 图片顶部到网页顶部的高度</span>\n<span class=\"token keyword\">let</span> imgOffsetTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 判断img在可视区域内：</span>\nimgOffsetTop <span class=\"token operator\">&lt;</span> clientHeight <span class=\"token operator\">+</span> scrollTop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"vue组件通信\"><a href=\"#vue组件通信\" class=\"headerlink\" title=\"vue组件通信\"></a>vue组件通信</h2><ul>\n<li>props 和 $emit</li>\n<li>provide inject：在组件a声明，在a下面所有子组件通过inject调用，通过参数传递</li>\n<li>event bus： new出一个vue，通过emit和on来派发和监控</li>\n<li>vuex 全局状态管理</li>\n<li>this.$children 和 this.$parent 层级较深不推荐，provid可以替代此方法</li>\n</ul>\n<h2 id=\"输入url到页面展示经历了什么\"><a href=\"#输入url到页面展示经历了什么\" class=\"headerlink\" title=\"输入url到页面展示经历了什么\"></a>输入url到页面展示经历了什么</h2><ul>\n<li><strong>dns解析</strong>：按照这个步骤查询，找到ip，立即中断返回给客户端（浏览器缓存 =&gt; 操作系统缓存(host) =&gt; 路由器缓存 =&gt; 本地服务器缓存 =&gt; isp dnf服务器查询 =&gt; 根dns服务器）</li>\n<li><strong>tcp三次握手</strong></li>\n<li><strong>发送http请求报文</strong>：报文包括：请求行，请求头，请求体</li>\n<li><strong>服务端接收到请求</strong>： 进入web服务器，如apache、nginx，然后进入后台程序</li>\n<li><strong>服务器响应报文</strong>：报文包括：响应行，响应头，响应体</li>\n<li><strong>浏览器渲染页面</strong><ol>\n<li>根据html得到dom树</li>\n<li>根据css得到css树</li>\n<li>根据dom树和css树，生成渲染树</li>\n<li>根据渲染树计算每一个节点的信息</li>\n<li>根据计算好的信息绘制页面</li>\n</ol>\n</li>\n<li><strong>数据传送完成，四次挥手关闭</strong>： </li>\n</ul>\n<h2 id=\"commonjs模块和es6模块有什么区别\"><a href=\"#commonjs模块和es6模块有什么区别\" class=\"headerlink\" title=\"commonjs模块和es6模块有什么区别\"></a>commonjs模块和es6模块有什么区别</h2><p>commonjs:  </p>\n<ul>\n<li>对于基本数据类型，是值的拷贝</li>\n<li>对于复杂数据类型，是浅拷贝，也就是修改一个模块的值，引用他的值也会发生改变</li>\n<li>第一次加载模块会缓存，往后再加载会读取缓存的数据</li>\n</ul>\n<p>es6：</p>\n<ul>\n<li>所有数据都是只读引用，当遇到import语句时，会生成一个只读引用，等到文件中真的使用到模块中的值时，根据只读引用，到加载中的模块取值</li>\n<li>不允许修改模块中的数据，并且是动态的，比如模块中的值发生改变，引入得到的值也会改变。</li>\n</ul>\n<h2 id=\"几种跨域\"><a href=\"#几种跨域\" class=\"headerlink\" title=\"几种跨域\"></a>几种跨域</h2><ul>\n<li><strong>jsonp</strong>： 利用script标签跨域，本质是加载一个外部js</li>\n<li><strong>cors</strong>：全程跨域资源共享，服务端操作，把请求头的<code>origin</code>的值取出，响应头会增加<code>Access-Control-Allow-Origin</code> key并把值设置为<code>origin</code>取出的值也可以是通配符，浏览器就不会拦截响应了，从而解决跨域问题</li>\n<li><strong>postMassage</strong>：利用可访问服务资源的<code>iframe</code>，和当前页面互相通信，传递消息，来实现跨域，<code>postMassage</code>本质是两个页面的消息传递方法。   <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 页面1(可以获取后端数据的)传递数据，第二个参数是url匹配规则，可以是通配符</span>\nwindow<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 页面2(不能接收后端数据的)，接收页面1的数据</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><strong>服务器中转</strong>： 由于服务端没跨域，服务端代替客户端请求目标接口，并把响应数据返回给客户端</li>\n</ul>\n<h2 id=\"react生命周期\"><a href=\"#react生命周期\" class=\"headerlink\" title=\"react生命周期\"></a>react生命周期</h2><ul>\n<li><strong>componentWillMount</strong>：在渲染前调用，客户端服务端都会调用</li>\n<li><strong>componentDidMount</strong>：第一次渲染后调用，只在客户端</li>\n<li><strong>componentWillReceiveProps</strong>： 接收新的props被调用，初始化时不会被调用</li>\n<li><strong>shouldComponentUpdate</strong>： 组件更新(props,state)时调用；返回布尔值，T为允许更新组件，F为不更新组件</li>\n<li><strong>componentWillUpdate</strong>： 组件更新(props,state)前渲染前被调用，初始化时不会调用</li>\n<li><strong>componentDidUpdate</strong>：组件完成更新后调用。初始化时不会被调用</li>\n<li><strong>componentWillUnmount</strong>： 组件要销毁前调用</li>\n</ul>\n<h2 id=\"vue生命周期父子组件执行顺序\"><a href=\"#vue生命周期父子组件执行顺序\" class=\"headerlink\" title=\"vue生命周期父子组件执行顺序\"></a>vue生命周期父子组件执行顺序</h2><ul>\n<li><p>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount-&gt;子mounted-&gt;父mounted</p>\n</li>\n<li><p>子组件更新：父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated</p>\n</li>\n<li><p>父组件更新：父beforeUpdate -&gt; 父updated</p>\n</li>\n<li><p>销毁：父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p>\n</li>\n</ul>\n<p>总结带beofre的生命周期都是<strong>从父到子</strong>调用，带ed的生命周期都是<strong>从子到父</strong></p>\n<h2 id=\"js变量声明提升\"><a href=\"#js变量声明提升\" class=\"headerlink\" title=\"js变量声明提升\"></a>js变量声明提升</h2><p>js中，函数及变量的声明都将被提升到作用域最顶部，且函数的提升比变量优先级高</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li><p><strong>原型链继承</strong>： Cat继承了Animal，缺点：所有Cat实例都会共享原型链，不可以向Animal传参。  </p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>call继承/构造继承</strong>: 解决上面原型链建成俩问题，但是只是Cat实例，不是Animal的实例</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>组合继承</strong>：也就是前面两个方法合并，解决上面两个继承的缺点，唯一的缺点调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了） </p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">;</span> <span class=\"token comment\">//修复构造函数指向</span>\n<span class=\"token comment\">// 优点：</span>\n<span class=\"token comment\">// 既是cat实例，又是Animal实例</span>\n<span class=\"token comment\">// 没有共享原型方法问题，并可以传参数</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p> 同步任务在执行栈，异步任务执行后回调区分微任务和宏任务放入对应的微宏队列中，等同步执行栈执行完毕，会先检查微任务队列，执行完毕后，检查宏任务队列，执行。其中Promise.resolve调用静态方法，会优先于正常的promise的resolve方法  </p>\n<p>异步微任务有哪些：  </p>\n<ul>\n<li>new Promise()</li>\n</ul>\n<p>异步宏任务有哪些：  </p>\n<ul>\n<li>setInterval()</li>\n<li>setTimeout()</li>\n</ul>\n<h2 id=\"前端优化\"><a href=\"#前端优化\" class=\"headerlink\" title=\"前端优化\"></a>前端优化</h2><ul>\n<li>静态资源放在cdn</li>\n<li>首屏加载服务端渲染</li>\n<li>可以升级到http2，可以使用http2 多路复用 多个请求并行，可以打乱顺序，最后重组</li>\n<li>使用字体图标替代图片</li>\n<li>gzip压缩</li>\n<li>uglify plugin优化压缩代码</li>\n<li>图片懒加载</li>\n<li>图片压缩，优先使用webp</li>\n<li>减少重排，多使用类名或者csstext处理样式</li>\n<li>多使用flex，性能优，兼容性好</li>\n</ul>\n<h2 id=\"行内元素特点\"><a href=\"#行内元素特点\" class=\"headerlink\" title=\"行内元素特点\"></a>行内元素特点</h2><ul>\n<li>可以设置所有方向<code>margin</code>和<code>padding</code>，但是垂直方向无法更改布局</li>\n<li>设置<code>width</code>和<code>height</code>属性无效</li>\n<li>不会另起一行  </li>\n</ul>\n<h2 id=\"实现instanceof\"><a href=\"#实现instanceof\" class=\"headerlink\" title=\"实现instanceof\"></a>实现instanceof</h2><blockquote>\n<p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。<br><img src=\"/2020/12/21/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/bB3Sj9h8nyoOIVs.png\" alt=\"6D190A1F-A82A-4F86-BC85-3AD9F5EA672B.png\"></p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> objProto <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>objProto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objProto <span class=\"token operator\">===</span> ctor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      objProto <span class=\"token operator\">=</span> objProto<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Food</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Meat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Meat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Food</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> meat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Meat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">newInstanceof</span><span class=\"token punctuation\">(</span>meat<span class=\"token punctuation\">,</span> Meat<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">newInstanceof</span><span class=\"token punctuation\">(</span>meat<span class=\"token punctuation\">,</span> Food<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmeat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Meat</span> <span class=\"token comment\">// true</span>\nmeat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Food</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总的来说就是<code>meat.__proto__.constructor === Meat</code>，由于原型链是一条链，所以循环所有<code>__proto__</code>;<br>直到<code>null</code>为止，符合<code>Meat.prototype === meat.__proto__</code>即返回<code>true</code>，否则返回<code>false</code>。</p>\n<h2 id=\"http缓存机制\"><a href=\"#http缓存机制\" class=\"headerlink\" title=\"http缓存机制\"></a>http缓存机制</h2><p>分为两类：<strong>强制缓存</strong> 和 <strong>协商缓存</strong><br>通过查看<code>http header</code>中<code>Cache-Control</code>字段，（<code>Cache-Control</code>优先<code>Expires</code>）他有以下几种值：   </p>\n<ul>\n<li>private:  客户端可以缓存</li>\n<li>public: 客户端和代理服务器都可以缓存  </li>\n<li>max-age=xxx: 缓存将在xxx秒后失效</li>\n<li>no-cache: 需要使用对比缓存来验证数据</li>\n<li>no-store: 不缓存  </li>\n</ul>\n<p>强缓存：不会向服务器发起请求，直接从缓存中获取资源  </p>\n<p>协商缓存：（1 优先 2）    </p>\n<ol>\n<li><p> 客户端第一次请求，从http响应头中拿到Etag，是一个资源的唯一标识，随后客户端的每次请求会携带If-None-Match字段到请求头，服务器收到后，和当前资源唯一标识对比，如果不同，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。</p>\n</li>\n<li><p>客户端第一次请求，从http响应头中拿到Last-Modified，是内容最后修改时间，随后客户端的每次请求会携带If-Modified-Since字段到请求头，服务器拿到后，和Last-Modified对比，如果If-Modified-Since 小于 Last-Modified，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。</p>\n</li>\n</ol>\n<p>引用网上一张图：<br><img src=\"/2020/12/21/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/FvAIM258yHCTQba.png\" alt=\"632130-20170210141453338-1263276228.png\">  </p>\n<h2 id=\"constructor和super关键字\"><a href=\"#constructor和super关键字\" class=\"headerlink\" title=\"constructor和super关键字\"></a>constructor和super关键字</h2><p><code>class</code>是<code>ES6</code>新增的关键字，为了看起来更像<code>java</code>等面向对象语言，实际上是一个语法糖，等同于<code>ES5</code>的<code>function</code>来创建构造函数。  </p>\n<ul>\n<li>constructor ：<code>constructors</code>是class中默认的一个关键字，会自动调用该方法，<code>class</code>中必须要有<code>constructor</code>，如果没有，会被默认添加。当new时，<code>constructor</code>会被执行返回一个this，就是实例。  </li>\n<li>super ： 当<code>class</code>有继承时，在<code>constructor</code>内部必须执行一遍super()函数，B继承A，<code>super</code>相当于<code>A.prototype.constructor.call(this, props)</code>，另外super()也指向父亲A的原型对象 <a href=\"https://juejin.cn/post/6844903638674980872\">这里</a></li>\n</ul>\n<h2 id=\"js垃圾回收机制算法\"><a href=\"#js垃圾回收机制算法\" class=\"headerlink\" title=\"js垃圾回收机制算法\"></a>js垃圾回收机制算法</h2><blockquote>\n<p>当内存中的数据不需要时候，js会自动使用垃圾回收算法释放掉      </p>\n</blockquote>\n<ul>\n<li><strong>引用计算</strong> : 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。这是最初级的垃圾收集算法。 该算法有个限制：无法处理引用循环，两个对象互相引用的情况下，引用次数至少是1，所以不会被回收掉  </li>\n<li><strong>标记清除</strong> : 此算法把“对象是否不再需要”简化定义为“对象是否可以获得”。这个算法从根（root）全局对象开始先下查找，找到不可以被获得的对象，然后清除掉  </li>\n</ul>\n<h2 id=\"常见算法种类\"><a href=\"#常见算法种类\" class=\"headerlink\" title=\"常见算法种类\"></a>常见算法种类</h2><ul>\n<li><strong>二分查找</strong>：也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。  </li>\n<li><strong>贪心算法</strong>：又名贪婪法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心原则，选取当前状态下最好/最优的选择（局部最有利的选择），贪图眼前局部的利益最大化。</li>\n<li><strong>回溯算法</strong>：实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。</li>\n<li><strong>分治算法</strong>：分治法是构建基于多项分支递归的一种很重要的算法范式。字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。</li>\n<li><strong>动态规划</strong>：动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动态规划往往用于优化递归问题，例如斐波那契数列，如果运用递归的方式来求解会重复计算很多相同的子问题，利用动态规划的思想可以减少计算量。</li>\n</ul>\n<h2 id=\"关于promise-async-await执行顺序面试题\"><a href=\"#关于promise-async-await执行顺序面试题\" class=\"headerlink\" title=\"关于promise async/await执行顺序面试题\"></a>关于promise async/await执行顺序面试题</h2><ul>\n<li>执行顺序： 同步放入执行栈 =&gt; 异步放入任务队列 =&gt; 异步区分微宏任务 =&gt; 微任务 =&gt; 宏任务</li>\n<li>async/await，await后的语句是同步的，在函数体内，await下的语句会被放入promise回调函数体中，async函数默认返回一个promise对象  </li>\n</ul>\n<p>经典面试题：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解析：按照从上往下顺序先执行同步代码，前两个函数<code>async1</code>和<code>async2</code>是函数声明，忽略。然后第1个输出的是<code>script start</code>，然后看到<code>setTimeout</code>, 由于它是异步且属于宏任务，放到最后执行。然后看到async1函数被执行了，进入<code>async1</code>函数体，第2个输出的是<code>async1 start</code>, 看到await规则是：await右的语句被同步执行，所以第3个输出的是<code>async2</code>，await下的语句(函数体内)被当作async函数返回一个promsise的回调函数体的语句去处理，且被放入了异步任务队列中，等待中。然后跳出async1函数体，继续执行同步代码，遇到new Promise，第4次输出<code>promise1</code>，看到resolve，就把then中回调，放入任务队列中，然后继续向下执行同步代码，第5次输出的最后的<code>script end</code>。至此同步执行栈空了，开始把任务队列中的上下文拿到执行栈执行，由于队列先进先出，所以第一个被入栈的是async1的回调，也就是第6次输出的是<code>async1 end</code>，然后把第二个队列中的上下文放入执行栈，也就是promise的resolve，所以第7次输出<code>promise2</code>，至此微任务执行完成，现在执行宏任务，也就是timeout，所以第8次输出为<code>setTimeout</code>。  </p>\n<p>结果：  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"迭代器和生成器\"><a href=\"#迭代器和生成器\" class=\"headerlink\" title=\"迭代器和生成器\"></a>迭代器和生成器</h2><p>先来瞅一段代码：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回一个迭代器对象</span>\n        <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 迭代器对象一定有个next()方法</span>\n            <span class=\"token keyword\">let</span> done <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>done <span class=\"token operator\">?</span> items<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> \n                value<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n                done<span class=\"token operator\">:</span> done\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 1, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 2, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 3, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: undefiend, done: true&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这就是迭代器，迭代器是一个特殊对象，可以通过每调用一次next，获取下一项结果。可以用迭代器替代for循环，因为for通过下标获取，多层嵌套比较复杂。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用迭代器模拟for</span>\n<span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>迭代器模拟for的方法看起来太麻烦了，不如for来的方便，这个时候可以用<code>生成器</code>(* 和 yield)来快速生成迭代器。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">yield</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 1, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 2, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 3, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: undefiend, done: true&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过<code>*</code>和<code>yield</code>关键字创建，<code>*</code>来表示这个函数内部是可以用yield返回每次迭代的值，和async、await一样。需要组合使用，<code>yield</code>后面接每次迭代的值。这样就可以外部调用.next()获取下一个值。</p>\n<p>在es6中，数组、Set、Map、字符串集合，都属于可迭代对象，内部都有默认迭代器，可通过<code>object[Symbol.iterator]()</code>访问默认迭代器。  </p>\n<p>es6中也提供了一个通过方法来快速使用迭代器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for(item of 集合迭代器) &#123;...&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>常见的迭代器和得到item的值：    </p>\n<ul>\n<li>object.keys(): key(对象)/下标(数组)</li>\n<li>object.values(): 每项value</li>\n<li>object.entries(): [下标/key, value]</li>\n</ul>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><h4 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h4><p>14年前，前端路由都是用hash的方式实现的，地址长这个样子<strong>url#hash</strong>， 修改<code>hash</code>部分不会重载这个页面，每次hash改变，可以用window的<code>hashchange</code>方法来监听，通过这个方法就可以实现前端路由了</p>\n<h4 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h4><p>在14年，HTML5标准发布，window上新增了两个api：<code>pushState</code>和<code>replaceState</code>，也hash一样，不刷新来实现前端路由，而且少了#更美观了，由于没#，所以刷新时候，默认会从服务器下载对应url资源，这个时候我们需要改下服务器配置，都加载前端index.html文件，来实现前端路由</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 第一个参数是state，用于描述一些特性，会被放入历史栈中，开发者使用</span>\n<span class=\"token comment\">// 第二个参数是title，表示新页面的标题，浏览器都会忽略这个参数</span>\n<span class=\"token comment\">// 第二个参数是url，表示新页面的相对地址</span>\n<span class=\"token comment\">// 跳转</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 和pushState的区别是不会把记录放入历史栈中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><ul>\n<li>都不会重载页面</li>\n<li>都会把历史记录放入栈中</li>\n</ul>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><ul>\n<li>hash只可以#后部分，必须是同源url，history没有限制</li>\n<li>history需要修改服务器配置，来解决刷新空白问题，hash本身就是属于前端的，不需要设置</li>\n</ul>\n<h2 id=\"babel工作原理\"><a href=\"#babel工作原理\" class=\"headerlink\" title=\"babel工作原理\"></a>babel工作原理</h2><blockquote>\n<p>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。简单来说就是一种描述源代码的结构，用于被计算机识别到，并成语言引擎执行</p>\n</blockquote>\n<p>工作原理大致可以理解成，<code>字符串输入</code>=&gt;<code>转换</code>=&gt;<code>输出</code>  </p>\n<ul>\n<li>根据babylon解析器，把js代码按照规范解析成AST语法树</li>\n<li>按照规则(stage-0,1,2,3),修改AST语法树，常见把高级语法，转换成低级语法</li>\n<li>最后通过babel-generator将修改后的AST语法树转换成js代码</li>\n</ul>\n<h2 id=\"js类型检测\"><a href=\"#js类型检测\" class=\"headerlink\" title=\"js类型检测\"></a>js类型检测</h2><ul>\n<li><strong>typeof</strong>: 除了基本数据类型，检测不到具体object类型(数组，对象，时间对象，正则，set，map)</li>\n<li><strong>instanceof</strong>: 例a instanceof Fun原理是检测a是不是Fun的实例，缺点就是被检测的值必须是引用，如下所示</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span>\n<span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span>\n<span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>constructor</strong>: 实例.constructor === 构造器，缺点是constructor属性容易被修改</li>\n<li><strong>Object.prototype.toString.call</strong>: 目前最好用的一个方法，缺点是使用object构造函数的toString方法，此方法可能被修改</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object Array]\"</span>\n<span class=\"token comment\">// 如果修改原型</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"1,2,3\"</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Object的valueOf和toString方法\"><a href=\"#Object的valueOf和toString方法\" class=\"headerlink\" title=\"Object的valueOf和toString方法\"></a>Object的valueOf和toString方法</h2><ul>\n<li><strong>valueOf</strong>: 返回对象的原始值表示</li>\n<li><strong>toString</strong>: 返回对象的字符串表示</li>\n</ul>\n<p>  对象转字符串或者数字的过程：如果专程字符串，会优先调用toString方法，转数字，会优先调用valueOf方法</p>\n<p>  相关面试题：</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// 下面代码a在什么值情况下会输出1</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 解</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"vue-slot插槽\"><a href=\"#vue-slot插槽\" class=\"headerlink\" title=\"vue slot插槽\"></a>vue slot插槽</h2><ul>\n<li><p>匿名插插: 子组件包裹的内容会被显示到<code>slot</code>标签中中</p>\n</li>\n<li><p>具名插插：感觉名字多次显示，可复用</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div slot<span class=\"token operator\">=</span><span class=\"token string\">\"down\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>的内容\n会被显示到<span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"down\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span>里\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>数据插槽：</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token comment\">// 父亲中</span>\n <span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>slot<span class=\"token operator\">:</span>data<span class=\"token operator\">=</span><span class=\"token string\">\"&#123;data&#125;\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token comment\">// 组件中就可以用data了</span>\n<span class=\"token operator\">&lt;</span>myslot v<span class=\"token operator\">-</span>slot<span class=\"token operator\">=</span><span class=\"token string\">\"data\"</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> slotProps<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>firstName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>myslot<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>vue mixin是针对组件间功能共享来做的。可以对组件的任意部分进行mixin，也就是说不同的组件，想使用同一个数组，或者方法，那么mixin就是来做这个事的，把公共部分提取出来作为mixin</p>\n<p>声明：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">const</span> toggle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        isshowing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">toggleShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isshowing <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isshowing\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 使用，toggle的方法会自动合并到当前组件中</span>\nmixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"vuex使用\"><a href=\"#vuex使用\" class=\"headerlink\" title=\"vuex使用\"></a>vuex使用</h2><p>核心概念：  </p>\n<ul>\n<li>state：数据</li>\n<li>getter：类似计算属性，用来获取state</li>\n<li>mutation： 同步方法，用于修改state</li>\n<li>action： 异步方法，最后调用mutation修改state  </li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  getter<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">doneTodos</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 可以包含异步操作</span>\n      <span class=\"token comment\">// context 是一个与 store 实例具有相同方法和属性的 context 对象</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 使用</span>\n<span class=\"token comment\">// 调用mutation</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 调用actions</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 利用mapGetters mapGetters mapMutations mapActions便捷使用</span>\ncomputed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count 等同于 state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount\n\t    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount\n\t    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\nmethods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  \t  add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add()` 映射为`this.$store.commit('increment')`</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\n  <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n     add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"事件委托与冒泡和捕获\"><a href=\"#事件委托与冒泡和捕获\" class=\"headerlink\" title=\"事件委托与冒泡和捕获\"></a>事件委托与冒泡和捕获</h2><blockquote>\n<p>什么是事件委托：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 </p>\n<p>什么是冒泡和捕获：其实都是事件传播路径。冒泡：从外到事件源进行事件传播；捕获：从内向事件源进行事件传播；</p>\n</blockquote>\n<p>DOM标准事件流的触发的先后顺序为：先捕获再冒泡。即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。<br><code>addEventListener</code>事件监听方法的第三个参数默认值是<code>false</code>，表示冒泡阶段调用，<code>true</code>为捕获阶段调用</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>append<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n      li<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'5'</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// li 新增的li也是可以被点击的</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>addeventListener和onclick不同点：</p>\n<ul>\n<li>addeventListener可以给一个事件注册多个listener</li>\n<li>addEventListener可以控制时间传播行为（捕获/冒泡，使用removeEventListener来解决</li>\n<li></li>\n</ul>\n<h2 id=\"ES6-proxy和reflect\"><a href=\"#ES6-proxy和reflect\" class=\"headerlink\" title=\"ES6 proxy和reflect\"></a>ES6 proxy和reflect</h2><h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h3><blockquote>\n<p>对目标读取、函数调用等操作进行拦截，然后操作处理。它不直接操作对象，而是像代理模式。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">24</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getting '</span><span class=\"token operator\">+</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不是target.key</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setting '</span><span class=\"token operator\">+</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// target为目标对象，handler为代理处理</span>\n<span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h3><blockquote>\n<p>优化了object内部操作，修改一些函数的返回值，如Object.defineProperty，Reflect与Proxy是一一对应的对象，是Proxy的方法也是Reflect的方法，Proxy修改的过的方法可以在Reflect获取默认值。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> attributes <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。</span>\n<span class=\"token string\">'assign'</span> <span class=\"token keyword\">in</span> Object <span class=\"token comment\">// true</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">,</span> <span class=\"token string\">'assign'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"cookie的几种属性和作用\"><a href=\"#cookie的几种属性和作用\" class=\"headerlink\" title=\"cookie的几种属性和作用\"></a>cookie的几种属性和作用</h2><ul>\n<li><strong>name</strong>: 名字</li>\n<li><strong>value</strong>: 值</li>\n<li><strong>domain</strong>: 可以访问此cookie的域名</li>\n<li><strong>path</strong>: 可以访问此cookie的路径</li>\n<li><strong>sameSite</strong>: 跨站点携带cookie设置<ul>\n<li>None：不限制； </li>\n<li>Lax：默认值，介于None和Strict之间，会合理判断携带cookie时机，如链接a会携带cookie；</li>\n<li>Strict：完全禁止跨站点传送cookie；</li>\n</ul>\n</li>\n<li><strong>httponly</strong>: 值为true则仅在http请求中会传递cookie，不可用document.cookie等操作获取</li>\n<li><strong>secure</strong>: 是否只能使用https传递此cookie</li>\n<li><strong>expires</strong>: 过期时间；值是时间意思是到这个时间，cookie失效，否则是session，即退出浏览器后自动失效</li>\n</ul>\n<h2 id=\"重排和重绘\"><a href=\"#重排和重绘\" class=\"headerlink\" title=\"重排和重绘\"></a>重排和重绘</h2><p>网页加载过程大致分为5步：  </p>\n<ol>\n<li>HTML代码转化成DOM  </li>\n<li>CSS代码转化成CSSOM</li>\n<li>结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）</li>\n<li>生成布局（layout），即将所有渲染树的所有节点进行平面合成</li>\n<li>将布局绘制（paint）在屏幕上  </li>\n</ol>\n<p>其中第4步为排列布局，重排指的就是第4步重做；第5步是绘制，那重绘指的就是第5步重做。按照网页加载顺序，第4步之后执行第5步，所以重排必将触发重绘，而重绘不一定会触发重排。</p>\n<p><strong>重绘</strong>：修改元素字体颜色，背景颜色，阴影效果等<br><strong>重排</strong>：位置发生改变，如<code>margin</code> <code>padding</code> <code>width</code>。 <code>删除增加dom</code> <code>调用offsetHeight</code>等读取实时量值时</p>\n<p>由于重排性能消耗大，那么减少重排次数也就成了一个优化页面的方法，下面总结几个常用方法：  </p>\n<ol>\n<li>不要一条一条修改css，尽量通过class修改，或者csstext  </li>\n<li>先display: none; 再修改样式，然后再display: block;</li>\n<li>一个元素大量修改css，可以设置为position: fixed | absolute, 这样重排消耗少，因为不用考虑其他元素位置  </li>\n<li>react vue虚拟dom</li>\n</ol>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 冷门深拷贝利用MessageChannel</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span> port1<span class=\"token punctuation\">,</span> port2 <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    port1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    port2<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 利用weakmap解决了循环引用报错问题，完全版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepClone1</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_target <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> _target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> _target\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'进入map判断'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'map set'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> _target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> _target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'是对象'</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone1</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不是对象'</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数防抖和节流\"><a href=\"#函数防抖和节流\" class=\"headerlink\" title=\"函数防抖和节流\"></a>函数防抖和节流</h2><ul>\n<li><strong>防抖</strong>：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用clearTimeout的特性，处理delay内，再此触发函数不做处理</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><strong>节流</strong>：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象                        </span>\n　　　　<span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">>=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    \n　　　　　　<span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    \n　　　　<span class=\"token punctuation\">&#125;</span>            \n　　<span class=\"token punctuation\">&#125;</span>        \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><a href=\"http://cd98.xyz/d/2020/10/20/debounce-and-throttle\">查看详解</a></p>\n<h2 id=\"实现换肤功能\"><a href=\"#实现换肤功能\" class=\"headerlink\" title=\"实现换肤功能\"></a>实现换肤功能</h2><ul>\n<li>设置多种颜色类名，覆盖实现</li>\n<li>http 请求动态加载 .css 文件</li>\n<li>预编译 css 变量</li>\n</ul>\n<h2 id=\"https证书作用\"><a href=\"#https证书作用\" class=\"headerlink\" title=\"https证书作用\"></a>https证书作用</h2><ul>\n<li>证书中存在一个公钥，一个私钥，私钥保密存在服务器不公开</li>\n<li>用户通过浏览器向服务器443端口连接，服务端收到请求，发给客户端一个带有公钥的证书</li>\n<li>客户端收到证书，先验证合法性（是否在有效期内、证书的域名与请求的域名是否匹配，通过继续，不通过提示警告</li>\n<li>客户端再生成一个随机key，通过公钥加密，发给服务端</li>\n<li>服务端收到随机key密文，用私钥解密，拿到客户端的随机key，通过随机key对内容进行对称加密，发给客户端</li>\n<li>客户端收到密文，用随机key解密，完成</li>\n</ul>\n<h2 id=\"bfc\"><a href=\"#bfc\" class=\"headerlink\" title=\"bfc\"></a>bfc</h2><blockquote>\n<p>全称「块格式化上下文」(Block Formatting Context), 是一块独立的css作用域，外部如何变化都影响不到他。  </p>\n</blockquote>\n<h5 id=\"怎么触发：\"><a href=\"#怎么触发：\" class=\"headerlink\" title=\"怎么触发：\"></a>怎么触发：</h5><ul>\n<li>根元素body  </li>\n<li>float： right | left</li>\n<li>position： absolute | fixed</li>\n<li>display：inline-block | tabel-cells | flex</li>\n<li>overflow： hidden | auto | scroll</li>\n</ul>\n<h5 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h5><ul>\n<li>清除浮动，常用overflow hidde</li>\n<li>垂直方向margin会重叠</li>\n</ul>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><h4 id=\"改变原数组：\"><a href=\"#改变原数组：\" class=\"headerlink\" title=\"改变原数组：\"></a>改变原数组：</h4><ul>\n<li>splice: array.splice(index,howmany,item1,…..,itemX) 删除/添加</li>\n<li>sort: 排序</li>\n<li>unshift: 首加 shift: 首删;  pop: 尾删; push: 尾加</li>\n<li>reverse: 倒序排列</li>\n<li>fill: 数组填充 </li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> array<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> startIndex <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> endIndex <span class=\"token operator\">|</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  \n <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n <span class=\"token comment\">// [1, \"a\", \"a\", 4, 5]</span>\n <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n \n#### 不改变原数组，生成新数组\n \n - slice: 浅拷贝 array.slice(startIdx, endIdx)\n - join: 转字符串并分割\n - toLocaleString: 转换成字符串数组\n - concat: 连接数组 可用...替代\n - indexOf: 检查下标\n - includes: 是否包含。可替代indexOf，indexOf === -1不够语义化\n\n#### 循环方法\n  - forEach、map、filter\n  - every、some、reduce、reduceRight(和reduce区别是相反方向)\n   \n   \n   \n## 字符串方法\n\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//e 返回指定下标的字符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">charcodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//101 返回指定下标字符的字符编码</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello world123 连接字符串，生成新的</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，参数为下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，参数为下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，第一个参数是起始下标，第二个参数为截取数量</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 查子字符下标，第一个参数是字符，第二个参数是起始下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 查子字符下标，第一个参数是字符，第二个参数是结尾下标(和indexof区别)</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello world 转小写</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// HELLO WORLD 转大写</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 删除前后空格</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"h\", \"llo world\"] 转数组，参数为分割符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hella world 替换字符，第一个参数可以是正则</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hello</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"hello\"] 匹配字符串返回一个数组，参数常是正则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"http1-1长连接-amp-http2多路复用区别：\"><a href=\"#http1-1长连接-amp-http2多路复用区别：\" class=\"headerlink\" title=\"http1.1长连接 &amp; http2多路复用区别：\"></a>http1.1长连接 &amp; http2多路复用区别：</h2><p><strong>http1.1长连接</strong>：<strong>同一个域名访问同一个文件的多个请求</strong>都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接，但不是并行，只能按顺序执行。</p>\n<p><strong>http2多路复用</strong>：<strong>同一个域名访问多个文件的多个请求</strong>也可以复用一个tcp连接，且多个请求可以被并行处理。  </p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><p>页面中一些大资源加载较慢，比如iframe，img。针对这个问题可以通过懒加载解决。    </p>\n<p>拿<code>img</code>举例，先设置<code>img</code>的<code>src</code>属性为一个默认的资源，然后把真实<code>url</code>放在标签的某个属性中。并设置好图片的宽高，避免完成加载时出现页面闪动问题。  </p>\n<p>然后实时监听页面滚动，如果当前图片是可见状态，那么把图片的真实url属性值取出替换到默认<code>src</code>上来实现加载图片资源，从而提升页面打开速度和合理使用客户端流量。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 获取浏览设备的网页可视高度</span>\n<span class=\"token keyword\">let</span> clientHeight <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 获取已被滚出的页面高度</span>\n<span class=\"token keyword\">let</span> scrollTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 图片顶部到网页顶部的高度</span>\n<span class=\"token keyword\">let</span> imgOffsetTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 判断img在可视区域内：</span>\nimgOffsetTop <span class=\"token operator\">&lt;</span> clientHeight <span class=\"token operator\">+</span> scrollTop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"vue组件通信\"><a href=\"#vue组件通信\" class=\"headerlink\" title=\"vue组件通信\"></a>vue组件通信</h2><ul>\n<li>props 和 $emit</li>\n<li>provide inject：在组件a声明，在a下面所有子组件通过inject调用，通过参数传递</li>\n<li>event bus： new出一个vue，通过emit和on来派发和监控</li>\n<li>vuex 全局状态管理</li>\n<li>this.$children 和 this.$parent 层级较深不推荐，provid可以替代此方法</li>\n</ul>\n<h2 id=\"输入url到页面展示经历了什么\"><a href=\"#输入url到页面展示经历了什么\" class=\"headerlink\" title=\"输入url到页面展示经历了什么\"></a>输入url到页面展示经历了什么</h2><ul>\n<li><strong>dns解析</strong>：按照这个步骤查询，找到ip，立即中断返回给客户端（浏览器缓存 =&gt; 操作系统缓存(host) =&gt; 路由器缓存 =&gt; 本地服务器缓存 =&gt; isp dnf服务器查询 =&gt; 根dns服务器）</li>\n<li><strong>tcp三次握手</strong></li>\n<li><strong>发送http请求报文</strong>：报文包括：请求行，请求头，请求体</li>\n<li><strong>服务端接收到请求</strong>： 进入web服务器，如apache、nginx，然后进入后台程序</li>\n<li><strong>服务器响应报文</strong>：报文包括：响应行，响应头，响应体</li>\n<li><strong>浏览器渲染页面</strong><ol>\n<li>根据html得到dom树</li>\n<li>根据css得到css树</li>\n<li>根据dom树和css树，生成渲染树</li>\n<li>根据渲染树计算每一个节点的信息</li>\n<li>根据计算好的信息绘制页面</li>\n</ol>\n</li>\n<li><strong>数据传送完成，四次挥手关闭</strong>： </li>\n</ul>\n<h2 id=\"commonjs模块和es6模块有什么区别\"><a href=\"#commonjs模块和es6模块有什么区别\" class=\"headerlink\" title=\"commonjs模块和es6模块有什么区别\"></a>commonjs模块和es6模块有什么区别</h2><p>commonjs:  </p>\n<ul>\n<li>对于基本数据类型，是值的拷贝</li>\n<li>对于复杂数据类型，是浅拷贝，也就是修改一个模块的值，引用他的值也会发生改变</li>\n<li>第一次加载模块会缓存，往后再加载会读取缓存的数据</li>\n</ul>\n<p>es6：</p>\n<ul>\n<li>所有数据都是只读引用，当遇到import语句时，会生成一个只读引用，等到文件中真的使用到模块中的值时，根据只读引用，到加载中的模块取值</li>\n<li>不允许修改模块中的数据，并且是动态的，比如模块中的值发生改变，引入得到的值也会改变。</li>\n</ul>\n<h2 id=\"几种跨域\"><a href=\"#几种跨域\" class=\"headerlink\" title=\"几种跨域\"></a>几种跨域</h2><ul>\n<li><strong>jsonp</strong>： 利用script标签跨域，本质是加载一个外部js</li>\n<li><strong>cors</strong>：全程跨域资源共享，服务端操作，把请求头的<code>origin</code>的值取出，响应头会增加<code>Access-Control-Allow-Origin</code> key并把值设置为<code>origin</code>取出的值也可以是通配符，浏览器就不会拦截响应了，从而解决跨域问题</li>\n<li><strong>postMassage</strong>：利用可访问服务资源的<code>iframe</code>，和当前页面互相通信，传递消息，来实现跨域，<code>postMassage</code>本质是两个页面的消息传递方法。   <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 页面1(可以获取后端数据的)传递数据，第二个参数是url匹配规则，可以是通配符</span>\nwindow<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 页面2(不能接收后端数据的)，接收页面1的数据</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><strong>服务器中转</strong>： 由于服务端没跨域，服务端代替客户端请求目标接口，并把响应数据返回给客户端</li>\n</ul>\n<h2 id=\"react生命周期\"><a href=\"#react生命周期\" class=\"headerlink\" title=\"react生命周期\"></a>react生命周期</h2><ul>\n<li><strong>componentWillMount</strong>：在渲染前调用，客户端服务端都会调用</li>\n<li><strong>componentDidMount</strong>：第一次渲染后调用，只在客户端</li>\n<li><strong>componentWillReceiveProps</strong>： 接收新的props被调用，初始化时不会被调用</li>\n<li><strong>shouldComponentUpdate</strong>： 组件更新(props,state)时调用；返回布尔值，T为允许更新组件，F为不更新组件</li>\n<li><strong>componentWillUpdate</strong>： 组件更新(props,state)前渲染前被调用，初始化时不会调用</li>\n<li><strong>componentDidUpdate</strong>：组件完成更新后调用。初始化时不会被调用</li>\n<li><strong>componentWillUnmount</strong>： 组件要销毁前调用</li>\n</ul>\n<h2 id=\"vue生命周期父子组件执行顺序\"><a href=\"#vue生命周期父子组件执行顺序\" class=\"headerlink\" title=\"vue生命周期父子组件执行顺序\"></a>vue生命周期父子组件执行顺序</h2><ul>\n<li><p>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount-&gt;子mounted-&gt;父mounted</p>\n</li>\n<li><p>子组件更新：父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated</p>\n</li>\n<li><p>父组件更新：父beforeUpdate -&gt; 父updated</p>\n</li>\n<li><p>销毁：父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p>\n</li>\n</ul>\n<p>总结带beofre的生命周期都是<strong>从父到子</strong>调用，带ed的生命周期都是<strong>从子到父</strong></p>\n<h2 id=\"js变量声明提升\"><a href=\"#js变量声明提升\" class=\"headerlink\" title=\"js变量声明提升\"></a>js变量声明提升</h2><p>js中，函数及变量的声明都将被提升到作用域最顶部，且函数的提升比变量优先级高</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li><p><strong>原型链继承</strong>： Cat继承了Animal，缺点：所有Cat实例都会共享原型链，不可以向Animal传参。  </p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>call继承/构造继承</strong>: 解决上面原型链建成俩问题，但是只是Cat实例，不是Animal的实例</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>组合继承</strong>：也就是前面两个方法合并，解决上面两个继承的缺点，唯一的缺点调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了） </p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">;</span> <span class=\"token comment\">//修复构造函数指向</span>\n<span class=\"token comment\">// 优点：</span>\n<span class=\"token comment\">// 既是cat实例，又是Animal实例</span>\n<span class=\"token comment\">// 没有共享原型方法问题，并可以传参数</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p> 同步任务在执行栈，异步任务执行后回调区分微任务和宏任务放入对应的微宏队列中，等同步执行栈执行完毕，会先检查微任务队列，执行完毕后，检查宏任务队列，执行。其中Promise.resolve调用静态方法，会优先于正常的promise的resolve方法  </p>\n<p>异步微任务有哪些：  </p>\n<ul>\n<li>new Promise()</li>\n</ul>\n<p>异步宏任务有哪些：  </p>\n<ul>\n<li>setInterval()</li>\n<li>setTimeout()</li>\n</ul>\n<h2 id=\"前端优化\"><a href=\"#前端优化\" class=\"headerlink\" title=\"前端优化\"></a>前端优化</h2><ul>\n<li>静态资源放在cdn</li>\n<li>首屏加载服务端渲染</li>\n<li>可以升级到http2，可以使用http2 多路复用 多个请求并行，可以打乱顺序，最后重组</li>\n<li>使用字体图标替代图片</li>\n<li>gzip压缩</li>\n<li>uglify plugin优化压缩代码</li>\n<li>图片懒加载</li>\n<li>图片压缩，优先使用webp</li>\n<li>减少重排，多使用类名或者csstext处理样式</li>\n<li>多使用flex，性能优，兼容性好</li>\n</ul>\n<h2 id=\"行内元素特点\"><a href=\"#行内元素特点\" class=\"headerlink\" title=\"行内元素特点\"></a>行内元素特点</h2><ul>\n<li>可以设置所有方向<code>margin</code>和<code>padding</code>，但是垂直方向无法更改布局</li>\n<li>设置<code>width</code>和<code>height</code>属性无效</li>\n<li>不会另起一行  </li>\n</ul>\n<h2 id=\"实现instanceof\"><a href=\"#实现instanceof\" class=\"headerlink\" title=\"实现instanceof\"></a>实现instanceof</h2><blockquote>\n<p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。<br><img src=\"/2020/12/21/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/bB3Sj9h8nyoOIVs.png\" alt=\"6D190A1F-A82A-4F86-BC85-3AD9F5EA672B.png\"></p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> objProto <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>objProto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objProto <span class=\"token operator\">===</span> ctor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      objProto <span class=\"token operator\">=</span> objProto<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Food</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Meat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Meat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Food</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> meat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Meat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">newInstanceof</span><span class=\"token punctuation\">(</span>meat<span class=\"token punctuation\">,</span> Meat<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">newInstanceof</span><span class=\"token punctuation\">(</span>meat<span class=\"token punctuation\">,</span> Food<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmeat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Meat</span> <span class=\"token comment\">// true</span>\nmeat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Food</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总的来说就是<code>meat.__proto__.constructor === Meat</code>，由于原型链是一条链，所以循环所有<code>__proto__</code>;<br>直到<code>null</code>为止，符合<code>Meat.prototype === meat.__proto__</code>即返回<code>true</code>，否则返回<code>false</code>。</p>\n<h2 id=\"http缓存机制\"><a href=\"#http缓存机制\" class=\"headerlink\" title=\"http缓存机制\"></a>http缓存机制</h2><p>分为两类：<strong>强制缓存</strong> 和 <strong>协商缓存</strong><br>通过查看<code>http header</code>中<code>Cache-Control</code>字段，（<code>Cache-Control</code>优先<code>Expires</code>）他有以下几种值：   </p>\n<ul>\n<li>private:  客户端可以缓存</li>\n<li>public: 客户端和代理服务器都可以缓存  </li>\n<li>max-age=xxx: 缓存将在xxx秒后失效</li>\n<li>no-cache: 需要使用对比缓存来验证数据</li>\n<li>no-store: 不缓存  </li>\n</ul>\n<p>强缓存：不会向服务器发起请求，直接从缓存中获取资源  </p>\n<p>协商缓存：（1 优先 2）    </p>\n<ol>\n<li><p> 客户端第一次请求，从http响应头中拿到Etag，是一个资源的唯一标识，随后客户端的每次请求会携带If-None-Match字段到请求头，服务器收到后，和当前资源唯一标识对比，如果不同，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。</p>\n</li>\n<li><p>客户端第一次请求，从http响应头中拿到Last-Modified，是内容最后修改时间，随后客户端的每次请求会携带If-Modified-Since字段到请求头，服务器拿到后，和Last-Modified对比，如果If-Modified-Since 小于 Last-Modified，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。</p>\n</li>\n</ol>\n<p>引用网上一张图：<br><img src=\"/2020/12/21/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/FvAIM258yHCTQba.png\" alt=\"632130-20170210141453338-1263276228.png\">  </p>\n<h2 id=\"constructor和super关键字\"><a href=\"#constructor和super关键字\" class=\"headerlink\" title=\"constructor和super关键字\"></a>constructor和super关键字</h2><p><code>class</code>是<code>ES6</code>新增的关键字，为了看起来更像<code>java</code>等面向对象语言，实际上是一个语法糖，等同于<code>ES5</code>的<code>function</code>来创建构造函数。  </p>\n<ul>\n<li>constructor ：<code>constructors</code>是class中默认的一个关键字，会自动调用该方法，<code>class</code>中必须要有<code>constructor</code>，如果没有，会被默认添加。当new时，<code>constructor</code>会被执行返回一个this，就是实例。  </li>\n<li>super ： 当<code>class</code>有继承时，在<code>constructor</code>内部必须执行一遍super()函数，B继承A，<code>super</code>相当于<code>A.prototype.constructor.call(this, props)</code>，另外super()也指向父亲A的原型对象 <a href=\"https://juejin.cn/post/6844903638674980872\">这里</a></li>\n</ul>\n<h2 id=\"js垃圾回收机制算法\"><a href=\"#js垃圾回收机制算法\" class=\"headerlink\" title=\"js垃圾回收机制算法\"></a>js垃圾回收机制算法</h2><blockquote>\n<p>当内存中的数据不需要时候，js会自动使用垃圾回收算法释放掉      </p>\n</blockquote>\n<ul>\n<li><strong>引用计算</strong> : 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。这是最初级的垃圾收集算法。 该算法有个限制：无法处理引用循环，两个对象互相引用的情况下，引用次数至少是1，所以不会被回收掉  </li>\n<li><strong>标记清除</strong> : 此算法把“对象是否不再需要”简化定义为“对象是否可以获得”。这个算法从根（root）全局对象开始先下查找，找到不可以被获得的对象，然后清除掉  </li>\n</ul>\n<h2 id=\"常见算法种类\"><a href=\"#常见算法种类\" class=\"headerlink\" title=\"常见算法种类\"></a>常见算法种类</h2><ul>\n<li><strong>二分查找</strong>：也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。  </li>\n<li><strong>贪心算法</strong>：又名贪婪法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心原则，选取当前状态下最好/最优的选择（局部最有利的选择），贪图眼前局部的利益最大化。</li>\n<li><strong>回溯算法</strong>：实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。</li>\n<li><strong>分治算法</strong>：分治法是构建基于多项分支递归的一种很重要的算法范式。字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。</li>\n<li><strong>动态规划</strong>：动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动态规划往往用于优化递归问题，例如斐波那契数列，如果运用递归的方式来求解会重复计算很多相同的子问题，利用动态规划的思想可以减少计算量。</li>\n</ul>\n<h2 id=\"关于promise-async-await执行顺序面试题\"><a href=\"#关于promise-async-await执行顺序面试题\" class=\"headerlink\" title=\"关于promise async/await执行顺序面试题\"></a>关于promise async/await执行顺序面试题</h2><ul>\n<li>执行顺序： 同步放入执行栈 =&gt; 异步放入任务队列 =&gt; 异步区分微宏任务 =&gt; 微任务 =&gt; 宏任务</li>\n<li>async/await，await后的语句是同步的，在函数体内，await下的语句会被放入promise回调函数体中，async函数默认返回一个promise对象  </li>\n</ul>\n<p>经典面试题：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解析：按照从上往下顺序先执行同步代码，前两个函数<code>async1</code>和<code>async2</code>是函数声明，忽略。然后第1个输出的是<code>script start</code>，然后看到<code>setTimeout</code>, 由于它是异步且属于宏任务，放到最后执行。然后看到async1函数被执行了，进入<code>async1</code>函数体，第2个输出的是<code>async1 start</code>, 看到await规则是：await右的语句被同步执行，所以第3个输出的是<code>async2</code>，await下的语句(函数体内)被当作async函数返回一个promsise的回调函数体的语句去处理，且被放入了异步任务队列中，等待中。然后跳出async1函数体，继续执行同步代码，遇到new Promise，第4次输出<code>promise1</code>，看到resolve，就把then中回调，放入任务队列中，然后继续向下执行同步代码，第5次输出的最后的<code>script end</code>。至此同步执行栈空了，开始把任务队列中的上下文拿到执行栈执行，由于队列先进先出，所以第一个被入栈的是async1的回调，也就是第6次输出的是<code>async1 end</code>，然后把第二个队列中的上下文放入执行栈，也就是promise的resolve，所以第7次输出<code>promise2</code>，至此微任务执行完成，现在执行宏任务，也就是timeout，所以第8次输出为<code>setTimeout</code>。  </p>\n<p>结果：  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"迭代器和生成器\"><a href=\"#迭代器和生成器\" class=\"headerlink\" title=\"迭代器和生成器\"></a>迭代器和生成器</h2><p>先来瞅一段代码：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回一个迭代器对象</span>\n        <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 迭代器对象一定有个next()方法</span>\n            <span class=\"token keyword\">let</span> done <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>done <span class=\"token operator\">?</span> items<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> \n                value<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n                done<span class=\"token operator\">:</span> done\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 1, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 2, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 3, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: undefiend, done: true&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这就是迭代器，迭代器是一个特殊对象，可以通过每调用一次next，获取下一项结果。可以用迭代器替代for循环，因为for通过下标获取，多层嵌套比较复杂。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用迭代器模拟for</span>\n<span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>迭代器模拟for的方法看起来太麻烦了，不如for来的方便，这个时候可以用<code>生成器</code>(* 和 yield)来快速生成迭代器。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">yield</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 1, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 2, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 3, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: undefiend, done: true&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过<code>*</code>和<code>yield</code>关键字创建，<code>*</code>来表示这个函数内部是可以用yield返回每次迭代的值，和async、await一样。需要组合使用，<code>yield</code>后面接每次迭代的值。这样就可以外部调用.next()获取下一个值。</p>\n<p>在es6中，数组、Set、Map、字符串集合，都属于可迭代对象，内部都有默认迭代器，可通过<code>object[Symbol.iterator]()</code>访问默认迭代器。  </p>\n<p>es6中也提供了一个通过方法来快速使用迭代器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for(item of 集合迭代器) &#123;...&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>常见的迭代器和得到item的值：    </p>\n<ul>\n<li>object.keys(): key(对象)/下标(数组)</li>\n<li>object.values(): 每项value</li>\n<li>object.entries(): [下标/key, value]</li>\n</ul>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><h4 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h4><p>14年前，前端路由都是用hash的方式实现的，地址长这个样子<strong>url#hash</strong>， 修改<code>hash</code>部分不会重载这个页面，每次hash改变，可以用window的<code>hashchange</code>方法来监听，通过这个方法就可以实现前端路由了</p>\n<h4 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h4><p>在14年，HTML5标准发布，window上新增了两个api：<code>pushState</code>和<code>replaceState</code>，也hash一样，不刷新来实现前端路由，而且少了#更美观了，由于没#，所以刷新时候，默认会从服务器下载对应url资源，这个时候我们需要改下服务器配置，都加载前端index.html文件，来实现前端路由</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 第一个参数是state，用于描述一些特性，会被放入历史栈中，开发者使用</span>\n<span class=\"token comment\">// 第二个参数是title，表示新页面的标题，浏览器都会忽略这个参数</span>\n<span class=\"token comment\">// 第二个参数是url，表示新页面的相对地址</span>\n<span class=\"token comment\">// 跳转</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 和pushState的区别是不会把记录放入历史栈中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><ul>\n<li>都不会重载页面</li>\n<li>都会把历史记录放入栈中</li>\n</ul>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><ul>\n<li>hash只可以#后部分，必须是同源url，history没有限制</li>\n<li>history需要修改服务器配置，来解决刷新空白问题，hash本身就是属于前端的，不需要设置</li>\n</ul>\n<h2 id=\"babel工作原理\"><a href=\"#babel工作原理\" class=\"headerlink\" title=\"babel工作原理\"></a>babel工作原理</h2><blockquote>\n<p>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。简单来说就是一种描述源代码的结构，用于被计算机识别到，并成语言引擎执行</p>\n</blockquote>\n<p>工作原理大致可以理解成，<code>字符串输入</code>=&gt;<code>转换</code>=&gt;<code>输出</code>  </p>\n<ul>\n<li>根据babylon解析器，把js代码按照规范解析成AST语法树</li>\n<li>按照规则(stage-0,1,2,3),修改AST语法树，常见把高级语法，转换成低级语法</li>\n<li>最后通过babel-generator将修改后的AST语法树转换成js代码</li>\n</ul>\n<h2 id=\"js类型检测\"><a href=\"#js类型检测\" class=\"headerlink\" title=\"js类型检测\"></a>js类型检测</h2><ul>\n<li><strong>typeof</strong>: 除了基本数据类型，检测不到具体object类型(数组，对象，时间对象，正则，set，map)</li>\n<li><strong>instanceof</strong>: 例a instanceof Fun原理是检测a是不是Fun的实例，缺点就是被检测的值必须是引用，如下所示</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span>\n<span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span>\n<span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>constructor</strong>: 实例.constructor === 构造器，缺点是constructor属性容易被修改</li>\n<li><strong>Object.prototype.toString.call</strong>: 目前最好用的一个方法，缺点是使用object构造函数的toString方法，此方法可能被修改</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object Array]\"</span>\n<span class=\"token comment\">// 如果修改原型</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"1,2,3\"</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Object的valueOf和toString方法\"><a href=\"#Object的valueOf和toString方法\" class=\"headerlink\" title=\"Object的valueOf和toString方法\"></a>Object的valueOf和toString方法</h2><ul>\n<li><strong>valueOf</strong>: 返回对象的原始值表示</li>\n<li><strong>toString</strong>: 返回对象的字符串表示</li>\n</ul>\n<p>  对象转字符串或者数字的过程：如果专程字符串，会优先调用toString方法，转数字，会优先调用valueOf方法</p>\n<p>  相关面试题：</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// 下面代码a在什么值情况下会输出1</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 解</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"vue-slot插槽\"><a href=\"#vue-slot插槽\" class=\"headerlink\" title=\"vue slot插槽\"></a>vue slot插槽</h2><ul>\n<li><p>匿名插插: 子组件包裹的内容会被显示到<code>slot</code>标签中中</p>\n</li>\n<li><p>具名插插：感觉名字多次显示，可复用</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div slot<span class=\"token operator\">=</span><span class=\"token string\">\"down\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>的内容\n会被显示到<span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"down\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span>里\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>数据插槽：</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token comment\">// 父亲中</span>\n <span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>slot<span class=\"token operator\">:</span>data<span class=\"token operator\">=</span><span class=\"token string\">\"&#123;data&#125;\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token comment\">// 组件中就可以用data了</span>\n<span class=\"token operator\">&lt;</span>myslot v<span class=\"token operator\">-</span>slot<span class=\"token operator\">=</span><span class=\"token string\">\"data\"</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> slotProps<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>firstName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>myslot<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>vue mixin是针对组件间功能共享来做的。可以对组件的任意部分进行mixin，也就是说不同的组件，想使用同一个数组，或者方法，那么mixin就是来做这个事的，把公共部分提取出来作为mixin</p>\n<p>声明：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">const</span> toggle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        isshowing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">toggleShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isshowing <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isshowing\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 使用，toggle的方法会自动合并到当前组件中</span>\nmixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"vuex使用\"><a href=\"#vuex使用\" class=\"headerlink\" title=\"vuex使用\"></a>vuex使用</h2><p>核心概念：  </p>\n<ul>\n<li>state：数据</li>\n<li>getter：类似计算属性，用来获取state</li>\n<li>mutation： 同步方法，用于修改state</li>\n<li>action： 异步方法，最后调用mutation修改state  </li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  getter<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">doneTodos</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 可以包含异步操作</span>\n      <span class=\"token comment\">// context 是一个与 store 实例具有相同方法和属性的 context 对象</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 使用</span>\n<span class=\"token comment\">// 调用mutation</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 调用actions</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 利用mapGetters mapGetters mapMutations mapActions便捷使用</span>\ncomputed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count 等同于 state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount\n\t    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount\n\t    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\nmethods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  \t  add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add()` 映射为`this.$store.commit('increment')`</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\n  <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n     add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"事件委托与冒泡和捕获\"><a href=\"#事件委托与冒泡和捕获\" class=\"headerlink\" title=\"事件委托与冒泡和捕获\"></a>事件委托与冒泡和捕获</h2><blockquote>\n<p>什么是事件委托：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 </p>\n<p>什么是冒泡和捕获：其实都是事件传播路径。冒泡：从外到事件源进行事件传播；捕获：从内向事件源进行事件传播；</p>\n</blockquote>\n<p>DOM标准事件流的触发的先后顺序为：先捕获再冒泡。即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。<br><code>addEventListener</code>事件监听方法的第三个参数默认值是<code>false</code>，表示冒泡阶段调用，<code>true</code>为捕获阶段调用</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>append<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n      li<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'5'</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// li 新增的li也是可以被点击的</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>addeventListener和onclick不同点：</p>\n<ul>\n<li>addeventListener可以给一个事件注册多个listener</li>\n<li>addEventListener可以控制时间传播行为（捕获/冒泡，使用removeEventListener来解决</li>\n<li></li>\n</ul>\n<h2 id=\"ES6-proxy和reflect\"><a href=\"#ES6-proxy和reflect\" class=\"headerlink\" title=\"ES6 proxy和reflect\"></a>ES6 proxy和reflect</h2><h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h3><blockquote>\n<p>对目标读取、函数调用等操作进行拦截，然后操作处理。它不直接操作对象，而是像代理模式。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">24</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getting '</span><span class=\"token operator\">+</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不是target.key</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setting '</span><span class=\"token operator\">+</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// target为目标对象，handler为代理处理</span>\n<span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h3><blockquote>\n<p>优化了object内部操作，修改一些函数的返回值，如Object.defineProperty，Reflect与Proxy是一一对应的对象，是Proxy的方法也是Reflect的方法，Proxy修改的过的方法可以在Reflect获取默认值。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> attributes <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。</span>\n<span class=\"token string\">'assign'</span> <span class=\"token keyword\">in</span> Object <span class=\"token comment\">// true</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">,</span> <span class=\"token string\">'assign'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"_content":"## cookie的几种属性和作用\n - `name`: 名字\n - `value`: 值\n - `domain`: 可以访问此cookie的域名\n - `path`: 可以访问此cookie的路径\n - `sameSite`: 跨站点携带cookie设置\n \t- None：不限制； \n \t- Lax：默认值，介于None和Strict之间，会合理判断携带cookie时机，如链接a会携带cookie；\n \t- Strict：完全禁止跨站点传送cookie；\n - `httponly`: 值为true则仅在http请求中会传递cookie，不可用document.cookie等操作获取\n - `secure`: 是否只能使用https传递此cookie\n - `expires`: 过期时间；值是时间意思是到这个时间，cookie失效，否则是session，即退出浏览器后自动失效\n\n   \n## 重排和重绘  \n\n网页加载过程大致分为5步：  \n  \n 1. HTML代码转化成DOM  \n 2. CSS代码转化成CSSOM\n 3. 结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）\n 4. 生成布局（layout），即将所有渲染树的所有节点进行平面合成\n 5. 将布局绘制（paint）在屏幕上  \n \n其中第4步为排列布局，重排指的就是第4步重做；第5步是绘制，那重绘指的就是第5步重做。按照网页加载顺序，第4步之后执行第5步，所以重排必将触发重绘，而重绘不一定会触发重排。\n\n**重绘**：修改元素字体颜色，背景颜色，阴影效果等\n**重排**：位置发生改变，如`margin` `padding` `width`。 `删除增加dom` `调用offsetHeight`等读取实时量值时\n\n由于重排性能消耗大，那么减少重排次数也就成了一个优化页面的方法，下面总结几个常用方法：  \n\n1. 不要一条一条修改css，尽量通过class修改，或者csstext  \n2. 先display: none; 再修改样式，然后再display: block;\n3. 一个元素大量修改css，可以设置为position: fixed | absolute, 这样重排消耗少，因为不用考虑其他元素位置  \n4. react vue虚拟dom\n\n## 深拷贝\n\n```javascript\n// 冷门深拷贝利用MessageChannel\nfunction deepClone(obj) {\n  return new Promise(function(resolve, reject) {\n    var { port1, port2 } = new MessageChannel();\n    port1.onmessage = function(e) {\n      resolve(e.data);\n    };\n    port2.postMessage(obj);\n  });\n}\n```\n```javascript\n// 利用weakmap解决了循环引用报错问题，完全版\nfunction deepClone1(_target, map = new WeakMap()) {\n  if(!_target || typeof _target !== 'object'){\n    return _target\n  }\n  if(map.get(_target)) {\n    console.log('进入map判断')\n    console.log(map.get(_target))\n    return map.get(_target);\n  }\n  let res = Array.isArray(_target) ? [] : {}; \n  console.log('map set')\n  console.log(_target, res)\n  map.set(_target, res);\n  for(let i in _target){\n    console.log('循环')\n    if(typeof _target[i] === 'object'){\n      console.log('是对象')\n      res[i] = deepClone1(_target[i], map);\n    }else{\n      console.log('不是对象')\n      res[i] = _target[i]\n    }\n  }\n  return res;\n}\n```\n## 函数防抖和节流\n- **防抖**：    \n  \n```javascript\nfunction debounce(event, delay) {\n  let timer = null;\n  return function (...args) {  // ...args用来接受fun原有的参数，比如事件就是event对象\n    clearTimeout(timer); // 利用clearTimeout的特性，处理delay内，再此触发函数不做处理\n    timer = setTimeout(() => {\n      event.apply(this, args);\n    }, delay);\n  };\n} \n```    \n\n - **节流**：  \n  \n```javascript\nfunction throttle(fun, delay) {            \n　　let prev = Date.now();            \n　　return function(...args) {   // ...args用来接受fun原有的参数，比如事件就是event对象                        \n　　　　let now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　fun.apply(this, args);  \n　　　　　　prev = Date.now();                                    \n　　　　}            \n　　}        \n}\n```  \n[查看详解](http://cd98.xyz/d/2020/10/20/debounce-and-throttle)\n\n## 实现换肤功能\n - 设置多种颜色类名，通过替换body元素类名实现\n - http请求动态加载.css问题\n - scss换肤 待补充 \n\n## https证书作用 \n - 证书中存在一个公钥，一个私钥，私钥保密存在服务器不公开\n - 用户通过浏览器向服务器443端口连接，服务端收到请求，发给客户端一个带有公钥的证书\n - 客户端收到证书，先验证合法性（是否在有效期内、证书的域名与请求的域名是否匹配，通过继续，不通过提示警告\n - 客户端再生成一个随机key，通过公钥加密，发给服务端\n - 服务端收到随机key密文，用私钥解密，拿到客户端的随机key，通过随机key对内容进行对称加密，发给客户端\n - 客户端收到密文，用随机key解密，完成\n\n## bfc\n\n> 全称「块格式化上下文」(Block Formatting Context), 是一块独立的css作用域，外部如何变化都影响不到他。  \n\n##### 怎么触发：  \n  \n - 根元素body  \n - float： right | left\n - position： absolute | fixed\n - display：inline-block | tabel-cells | flex\n - overflow： hidden | auto | scroll\n \n##### 效果\n - 清除浮动，常用overflow hidde\n - 垂直方向margin会重叠\n\n## 数组方法\n#### 改变原数组：  \n\n - splice: array.splice(index,howmany,item1,.....,itemX) 删除/添加\n - sort: 排序\n - unshift: 首加 shift: 首删;  pop: 尾删; push: 尾加\n - reverse: 倒序排列\n - fill: 数组填充 \n \n \n ```javascript\n array.fill(value, startIndex | 0, endIndex | array.length)\n  \n [1,2,3,4,5].fill('a', 1, 3) \n // [1, \"a\", \"a\", 4, 5]\n ```  \n \n#### 不改变原数组，生成新数组\n \n - slice: 浅拷贝 array.slice(startIdx, endIdx)\n - join: 转字符串并分割\n - toLocaleString: 转换成字符串数组\n - concat: 连接数组 可用...替代\n - indexOf: 检查下标\n - includes: 是否包含。可替代indexOf，indexOf === -1不够语义化\n\n#### 循环方法\n  - forEach、map、filter\n  - every、some、reduce、reduceRight(和reduce区别是相反方向)\n   \n   \n   \n## 字符串方法\n\n\n```javascript\nvar str = \"hello world\";\n\nstr.charAt(1) //e 返回指定下标的字符\nstr.charcodeAt(1) //101 返回指定下标字符的字符编码\nstr.concat(123) // hello world123 连接字符串，生成新的\nstr.slice(0, 2) // he 截取字符串，参数为下标\nstr.substring(0, 2) // he 截取字符串，参数为下标\nstr.substr(0, 2) // he 截取字符串，第一个参数是起始下标，第二个参数为截取数量\nstr.indexOf('h', 0) // 0 查子字符下标，第一个参数是字符，第二个参数是起始下标\nstr.lastIndexOf('h', 0) // 0 查子字符下标，第一个参数是字符，第二个参数是结尾下标(和indexof区别)\n\nstr.toLowerCase() // hello world 转小写\nstr.toUpperCase() // HELLO WORLD 转大写\nstr.trim() // 删除前后空格\n\nstr.split('e') // [\"h\", \"llo world\"] 转数组，参数为分割符\nstr.replace('o', 'a') // hella world 替换字符，第一个参数可以是正则\nstr.match(/hello/g) // [\"hello\"] 匹配字符串返回一个数组，参数常是正则\n```\n\n## http1.1长连接 & http2多路复用区别：\n\n**http1.1长连接**：**同一个域名访问同一个文件的多个请求**都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接，但不是并行，只能按顺序执行。\n\n**http2多路复用**：**同一个域名访问多个文件的多个请求**也可以复用一个tcp连接，且多个请求可以被并行处理。  \n\n## 懒加载\n页面中一些大资源加载较慢，比如iframe，img。针对这个问题可以通过懒加载解决。    \n\n拿`img`举例，先设置`img`的`src`属性为一个默认的资源，然后把真实`url`放在标签的某个属性中。并设置好图片的宽高，避免完成加载时出现页面闪动问题。  \n\n然后实时监听页面滚动，如果当前图片是可见状态，那么把图片的真实url属性值取出替换到默认`src`上来实现加载图片资源，从而提升页面打开速度和合理使用客户端流量。\n\n```javascript\n// 获取浏览设备的网页可视高度\nlet clientHeight = document.documentElement.clientHeight; \n// 获取已被滚出的页面高度\nlet scrollTop = document.documentElement.scrollTop; \n// 图片顶部到网页顶部的高度\nlet imgOffsetTop = document.querySelector(\"img\").offsetTop;\n\n// 判断img在可视区域内：\nimgOffsetTop < clientHeight + scrollTop\n```\n\n## vue组件通信\n - props 和 $emit\n - provide inject：在组件a声明，在a下面所有子组件通过inject调用，通过参数传递\n - event bus： new出一个vue，通过emit和on来派发和监控\n - vuex 全局状态管理\n - this.$children 和 this.$parent 层级较深不推荐，provid可以替代此方法\n\n## 输入url到页面展示经历了什么\n - **dns解析**：按照这个步骤查询，找到ip，立即中断返回给客户端（浏览器缓存 => 操作系统缓存(host) => 路由器缓存 => 本地服务器缓存 => isp dnf服务器查询 => 根dns服务器）\n - **tcp三次握手**\n - **发送http请求报文**：报文包括：请求行，请求头，请求体\n - **服务端接收到请求**： 进入web服务器，如apache、nginx，然后进入后台程序\n - **服务器响应报文**：报文包括：响应行，响应头，响应体\n - **浏览器渲染页面**\n \t1. 根据html得到dom树\n \t2. 根据css得到css树\n \t3. 根据dom树和css树，生成渲染树\n \t4. 根据渲染树计算每一个节点的信息\n \t5. 根据计算好的信息绘制页面\n \n - **数据传送完成，四次挥手关闭**： \n\n\n## commonjs模块和es6模块有什么区别\ncommonjs:  \n\n - 对于基本数据类型，是值的拷贝\n - 对于复杂数据类型，是浅拷贝，也就是修改一个模块的值，引用他的值也会发生改变\n - 第一次加载模块会缓存，往后再加载会读取缓存的数据\n \nes6：\n - 所有数据都是只读引用，当遇到import语句时，会生成一个只读引用，等到文件中真的使用到模块中的值时，根据只读引用，到加载中的模块取值\n - 不允许修改模块中的数据，并且是动态的，比如模块中的值发生改变，引入得到的值也会改变。\n\n## 几种跨域\n - **jsonp**： 利用script标签跨域，本质是加载一个外部js\n - **cors**：全程跨域资源共享，服务端操作，把请求头的`origin`的值取出，响应头会增加`Access-Control-Allow-Origin` key并把值设置为`origin`取出的值也可以是通配符，浏览器就不会拦截响应了，从而解决跨域问题\n - **postMassage**：利用可访问服务资源的`iframe`，和当前页面互相通信，传递消息，来实现跨域，`postMassage`本质是两个页面的消息传递方法。  \n   \n\t```javascript\n\t// 页面1(可以获取后端数据的)传递数据，第二个参数是url匹配规则，可以是通配符\n\twindow.frames[0].postMessage(data,'*')\n\t \n\t// 页面2(不能接收后端数据的)，接收页面1的数据\n\twindow.addEventListener('message',function(e){\n\tconsole.log(e.data)\n\t})\n\t```\n- **服务器中转**： 由于服务端没跨域，服务端代替客户端请求目标接口，并把响应数据返回给客户端\n\n## react生命周期  \n \n - **componentWillMount**：在渲染前调用，客户端服务端都会调用\n - **componentDidMount**：第一次渲染后调用，只在客户端\n - **componentWillReceiveProps**： 接收新的props被调用，初始化时不会被调用\n - **shouldComponentUpdate**： 组件更新(props,state)时调用；返回布尔值，T为允许更新组件，F为不更新组件\n - **componentWillUpdate**： 组件更新(props,state)前渲染前被调用，初始化时不会调用\n - **componentDidUpdate**：组件完成更新后调用。初始化时不会被调用\n - **componentWillUnmount**： 组件要销毁前调用\n\n## vue生命周期父子组件执行顺序\n - 父beforeCreate -> 父created -> 父beforeMount -> 子beforeCreate -> 子created -> 子beforeMount->子mounted->父mounted\n\n - 子组件更新：父beforeUpdate -> 子beforeUpdate -> 子updated -> 父updated\n\n - 父组件更新：父beforeUpdate -> 父updated\n\n - 销毁：父beforeDestroy -> 子beforeDestroy -> 子destroyed -> 父destroyed\n\n总结带beofre的生命周期都是**从父到子**调用，带ed的生命周期都是**从子到父**\n\n \n## js变量声明提升\njs中，函数及变量的声明都将被提升到作用域最顶部，且函数的提升比变量优先级高\n\n## 继承\n - **原型链继承**： Cat继承了Animal，缺点：所有Cat实例都会共享原型链，不可以向Animal传参。  \n \n \t```javascript\n \tfunction Cat(){};\n \t\n\tCat.prototype = new Animal();\n \t```\n - **call继承/构造继承**: 解决上面原型链建成俩问题，但是只是Cat实例，不是Animal的实例\n\n \t```javascript\n \tfunction Cat(name){\n\t  Animal.call(this);\n\t}\n \t```\n - **组合继承**：也就是前面两个方法合并，解决上面两个继承的缺点，唯一的缺点调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了） \n \n\t```javascript\n \tfunction Cat(name){\n\t  Animal.call(this);\n\t}\n\t\n\tCat.prototype = new Animal();\n\tCat.prototype.constructor = Cat; //修复构造函数指向\n\t// 优点：\n\t// 既是cat实例，又是Animal实例\n\t// 没有共享原型方法问题，并可以传参数\n\n \t```\n \t\n## 事件循环  \n \n 同步任务在执行栈，异步任务执行后回调区分微任务和宏任务放入对应的微宏队列中，等同步执行栈执行完毕，会先检查微任务队列，执行完毕后，检查宏任务队列，执行。其中Promise.resolve调用静态方法，会优先于正常的promise的resolve方法  \n \n异步微任务有哪些：  \n \n  - new Promise()\n    \n异步宏任务有哪些：  \n\n  - setInterval()\n  - setTimeout()\n \n## 前端优化\n\n - 静态资源放在cdn\n - 首屏加载服务端渲染\n - 可以升级到http2，可以使用http2 多路复用 多个请求并行，可以打乱顺序，最后重组\n - 使用字体图标替代图片\n - gzip压缩\n - uglify plugin优化压缩代码\n - 图片懒加载\n - 图片压缩，优先使用webp\n - 减少重排，多使用类名或者csstext处理样式\n - 多使用flex局部，性能优，兼容性好\n  \n## 行内元素特点\n - 可以设置所有方向`margin`和`padding`，但是垂直方向无法更改布局\n - 设置`width`和`height`属性无效\n - 不会另起一行  \n  \n## 实现instanceof\n> instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。\n![6D190A1F-A82A-4F86-BC85-3AD9F5EA672B.png](./img/interview/bB3Sj9h8nyoOIVs.png)\n  \n```javascript\nlet objProto = obj.__proto__;\n   while(objProto) {\n      if (objProto === ctor.prototype) {\n        return true;\n      }\n      objProto = objProto.__proto__;\n   }\n   return false;\n}\n\nvar Food = function() {};\nvar Meat = function() {};\nMeat.prototype = new Food();\nvar meat = new Meat();\n\nnewInstanceof(meat, Meat) // true\nnewInstanceof(meat, Food) // true\nmeat instanceof Meat // true\nmeat instanceof Food // true\n```  \n\n总的来说就是`meat.__proto__.constructor === Meat`，由于原型链是一条链，所以循环所有`__proto__`;\n直到`null`为止，符合`Meat.prototype === meat.__proto__`即返回`true`，否则返回`false`。\n\n## http缓存机制\n\n分为两类：**强制缓存** 和 **协商缓存**\n通过查看`http header`中`Cache-Control`字段，（`Cache-Control`优先`Expires`）他有以下几种值：   \n\n - private:  客户端可以缓存\n - public: 客户端和代理服务器都可以缓存  \n - max-age=xxx: 缓存将在xxx秒后失效\n - no-cache: 需要使用对比缓存来验证数据\n - no-store: 不缓存  \n \n强缓存：不会向服务器发起请求，直接从缓存中获取资源  \n\n协商缓存：（1 优先 2）    \n\n1.  客户端第一次请求，从http响应头中拿到Etag，是一个资源的唯一标识，随后客户端的每次请求会携带If-None-Match字段到请求头，服务器收到后，和当前资源唯一标识对比，如果不同，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n2. 客户端第一次请求，从http响应头中拿到Last-Modified，是内容最后修改时间，随后客户端的每次请求会携带If-Modified-Since字段到请求头，服务器拿到后，和Last-Modified对比，如果If-Modified-Since 小于 Last-Modified，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n引用网上一张图：\n![632130-20170210141453338-1263276228.png](./img/interview/FvAIM258yHCTQba.png)  \n\n## constructor和super关键字\n`class`是`ES6`新增的关键字，为了看起来更像`java`等面向对象语言，实际上是一个语法糖，等同于`ES5`的`function`来创建构造函数。  \n\n - constructor ：`constructors`是class中默认的一个关键字，会自动调用该方法，`class`中必须要有`constructor`，如果没有，会被默认添加。当new时，`constructor`会被执行返回一个this，就是实例。  \n - super ： 当`class`有继承时，在`constructor`内部必须执行一遍super()函数，B继承A，`super`相当于`A.prototype.constructor.call(this, props)`，另外super()也指向父亲A的原型对象 [这里](https://juejin.cn/post/6844903638674980872)\n\n## js垃圾回收机制算法  \n> 当内存中的数据不需要时候，js会自动使用垃圾回收算法释放掉      \n\n - **引用计算** : 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。这是最初级的垃圾收集算法。 该算法有个限制：无法处理引用循环，两个对象互相引用的情况下，引用次数至少是1，所以不会被回收掉  \n \n - **标记清除** : 此算法把“对象是否不再需要”简化定义为“对象是否可以获得”。这个算法从根（root）全局对象开始先下查找，找到不可以被获得的对象，然后清除掉  \n  \n## 常见算法种类\n - **二分查找**：也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。  \n \n - **贪心算法**：又名贪婪法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心原则，选取当前状态下最好/最优的选择（局部最有利的选择），贪图眼前局部的利益最大化。\n - **回溯算法**：实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。\n - **分治算法**：分治法是构建基于多项分支递归的一种很重要的算法范式。字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。\n - **动态规划**：动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动态规划往往用于优化递归问题，例如斐波那契数列，如果运用递归的方式来求解会重复计算很多相同的子问题，利用动态规划的思想可以减少计算量。\n\n## 关于promise async/await执行顺序面试题\n - 执行顺序： 同步放入执行栈 => 异步放入任务队列 => 异步区分微宏任务 => 微任务 => 宏任务\n - async/await，await后的语句是同步的，在函数体内，await下的语句会被放入promise回调函数体中，async函数默认返回一个promise对象  \n \n经典面试题：  \n\n```javascript\nasync function async1(){\n\tconsole.log('async1 start');\n\tawait async2();\n\tconsole.log('async1 end')\n}\nasync function async2(){\n\tconsole.log('async2')\n}\nconsole.log('script start');\nsetTimeout(function(){\n\tconsole.log('setTimeout')\n},0);\nasync1();\nnew Promise(function(resolve){\n\tconsole.log('promise1');\n\tresolve();\n}).then(function(){\n\tconsole.log('promise2')\n});\nconsole.log('script end')\n```\n解析：按照从上往下顺序先执行同步代码，前两个函数`async1`和`async2`是函数声明，忽略。然后第1个输出的是`script start`，然后看到`setTimeout`, 由于它是异步且属于宏任务，放到最后执行。然后看到async1函数被执行了，进入`async1`函数体，第2个输出的是`async1 start`, 看到await规则是：await右的语句被同步执行，所以第3个输出的是`async2`，await下的语句(函数体内)被当作async函数返回一个promsise的回调函数体的语句去处理，且被放入了异步任务队列中，等待中。然后跳出async1函数体，继续执行同步代码，遇到new Promise，第4次输出`promise1`，看到resolve，就把then中回调，放入任务队列中，然后继续向下执行同步代码，第5次输出的最后的`script end`。至此同步执行栈空了，开始把任务队列中的上下文拿到执行栈执行，由于队列先进先出，所以第一个被入栈的是async1的回调，也就是第6次输出的是`async1 end`，然后把第二个队列中的上下文放入执行栈，也就是promise的resolve，所以第7次输出`promise2`，至此微任务执行完成，现在执行宏任务，也就是timeout，所以第8次输出为`setTimeout`。  \n\n结果：  \n\n```\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n```\n\n## 迭代器和生成器\n先来瞅一段代码：  \n\n```javascript\nfunction createIterator(items) {\n    var i = 0;\n    return { // 返回一个迭代器对象\n        next: function() { // 迭代器对象一定有个next()方法\n            let done = (i >= items.length);\n            let value = !done ? items[i++] : undefined;\n            return { \n                value: value,\n                done: done\n            }\n        }\n    }\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next());  // \"{ value: 1, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 2, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 3, done: false}\"\nconsole.log(iterator.next());  // \"{ value: undefiend, done: true}\"\n```\n这就是迭代器，迭代器是一个特殊对象，可以通过每调用一次next，获取下一项结果。可以用迭代器替代for循环，因为for通过下标获取，多层嵌套比较复杂。\n\n```javascript\n// 用迭代器模拟for\nvar colors = [\"red\", \"green\", \"blue\"];\nvar iterator = createIterator(colors);\nwhile(!iterator.next().done){\n    console.log(iterator.next().value);\n}\n```\n\n迭代器模拟for的方法看起来太麻烦了，不如for来的方便，这个时候可以用`生成器`(* 和 yield)来快速生成迭代器。\n\n```javascript\nfunction *createIterator(items) {\n    for(let i = 0; i < items.length; i++) {\n        yield items[i];\n    }\n}\n\nlet iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next());  // \"{ value: 1, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 2, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 3, done: false}\"\nconsole.log(iterator.next());  // \"{ value: undefiend, done: true}\"\n```\n通过`*`和`yield`关键字创建，`*`来表示这个函数内部是可以用yield返回每次迭代的值，和async、await一样。需要组合使用，`yield`后面接每次迭代的值。这样就可以外部调用.next()获取下一个值。\n\n在es6中，数组、Set、Map、字符串集合，都属于可迭代对象，内部都有默认迭代器，可通过`object[Symbol.iterator]()`访问默认迭代器。  \n\nes6中也提供了一个通过方法来快速使用迭代器\n```\nfor(item of 集合迭代器) {...}\n```\n常见的迭代器和得到item的值：    \n \n - object.keys(): key(对象)/下标(数组)\n - object.values(): 每项value\n - object.entries(): [下标/key, value]\n \n## 前端路由\n\n#### hash\n14年前，前端路由都是用hash的方式实现的，地址长这个样子**url#hash**， 修改`hash`部分不会重载这个页面，每次hash改变，可以用window的`hashchange`方法来监听，通过这个方法就可以实现前端路由了\n \n#### history\n在14年，HTML5标准发布，window上新增了两个api：`pushState`和`replaceState`，也hash一样，不刷新来实现前端路由，而且少了#更美观了，由于没#，所以刷新时候，默认会从服务器下载对应url资源，这个时候我们需要改下服务器配置，都加载前端index.html文件，来实现前端路由\n\n```javascript\n// 第一个参数是state，用于描述一些特性，会被放入历史栈中，开发者使用\n// 第二个参数是title，表示新页面的标题，浏览器都会忽略这个参数\n// 第二个参数是url，表示新页面的相对地址\n// 跳转\nwindow.history.pushState(null, null, \"/profile\");\nwindow.history.replaceState(null, null, \"/profile\"); 和pushState的区别是不会把记录放入历史栈中\n```\n\n#### 共同点\n- 都不会重载页面\n- 都会把历史记录放入栈中\n\n#### 不同点\n - hash只可以#后部分，必须是同源url，history没有限制\n - history需要修改服务器配置，来解决刷新空白问题，hash本身就是属于前端的，不需要设置\n\n \n## babel工作原理\n>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。简单来说就是一种描述源代码的结构，用于被计算机识别到，并成语言引擎执行\n\n工作原理大致可以理解成，`字符串输入`=>`转换`=>`输出`  \n\n - 根据babylon解析器，把js代码按照规范解析成AST语法树\n - 按照规则(stage-0,1,2,3),修改AST语法树，常见把高级语法，转换成低级语法\n - 最后通过babel-generator将修改后的AST语法树转换成js代码\n\n## js类型检测\n\n \n - **typeof**: 除了基本数据类型，检测不到具体object类型(数组，对象，时间对象，正则，set，map)\n - **instanceof**: 例a instanceof Fun原理是检测a是不是Fun的实例，缺点就是被检测的值必须是引用，如下所示\n \n ```javascript\n new Number(1) instanceof Number\n // true\n 1 instanceof Number\n // false\n ```\n - **constructor**: 实例.constructor === 构造器，缺点是constructor属性容易被修改\n - **Object.prototype.toString.call**: 目前最好用的一个方法，缺点是使用object构造函数的toString方法，此方法可能被修改\n  \n ```javascript\n \tObject.prototype.toString.call(1)\n \t// \"[object Number]\"\n \tObject.prototype.toString.call('1')\n \t// \"[object String]\"\n \tObject.prototype.toString.call([1])\n \t// \"[object Array]\"\n \t// 如果修改原型\n \tObject.prototype.toString = Array.prototype.toString\n \tObject.prototype.toString.call([1,2,3])\n \t// \"1,2,3\"\n \t...\n ```\n \n## Object的valueOf和toString方法\n \n  - **valueOf**: 返回对象的原始值表示\n  - **toString**: 返回对象的字符串表示\n  \n  对象转字符串或者数字的过程：如果专程字符串，会优先调用toString方法，转数字，会优先调用valueOf方法\n  \n  相关面试题：\n  \n  ```javascript\n   // 下面代码a在什么值情况下会输出1\n\n\tvar a = ?;\n\tif (a == 1 && a == 2 && a == 3) {\n\t    console.log(1);\n\t}\n\t\n\t// 解\n\tvar a = {\n\t    n : 0,\n\t    valueOf(){\n\t        return ++this.n;\n\t    }\n\t};\n  ```\n  \n## vue slot插槽\n - 匿名插插: 子组件包裹的内容会被显示到`slot`标签中中\n\n - 具名插插：感觉名字多次显示，可复用\n \n ```javascript\n <div slot=\"down\"></div>的内容\n 会被显示到<slot name=\"down\"></slot>里\n \n ```\n - 数据插槽：\n \n ```javascript\n // 父亲中\n <div v-slot:data=\"{data}\"></div>\n// 组件中就可以用data了\n<myslot v-slot=\"data\">\n  {{ slotProps.user.firstName }}\n</myslot>\n\n ```\n \n## mixin\nvue mixin是针对组件间功能共享来做的。可以对组件的任意部分进行mixin，也就是说不同的组件，想使用同一个数组，或者方法，那么mixin就是来做这个事的，把公共部分提取出来作为mixin\n\n声明：\n\n```javascript\n// 声明\nconst toggle = {\n    data () {\n        isshowing: false\n    },\n    methods: {\n        toggleShow() {\n            this.isshowing = !this.isshowing\n        }\n    }\n}\n// 使用，toggle的方法会自动合并到当前组件中\nmixins: [toggle]\n```\n\n## vuex使用\n核心概念：  \n\n - state：数据\n - getter：类似计算属性，用来获取state\n - mutation： 同步方法，用于修改state\n - action： 异步方法，最后调用mutation修改state  \n \n``` javascript\n// 声明\nimport Vuex from 'vuex'\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  getter: {\n    doneTodos: (state, getters) => {\n      return state.todos.filter(todo => todo.done)\n    },\n    count: (state) => {\n    \treturn state.count\n    }\n  },\n  mutations: {\n    increment (state, payload) {\n      state.count++\n    }\n  },\n  actions: {\n    addCount(context) {\n      // 可以包含异步操作\n      // context 是一个与 store 实例具有相同方法和属性的 context 对象\n    }\n  }\n})\n\n// 使用\n// 调用mutation\nthis.$store.commit('increment', 10)\n// 调用actions\nthis.$store.dispatch('increment', 10)\n// 利用mapGetters mapGetters mapMutations mapActions便捷使用\ncomputed: {\n\t...mapGetters(['audio']),\n\t...mapState({\n\t    this.count 等同于 state.count + this.localCount\n\t    count(state) {\n\t      return state.count + this.localCount\n\t    }\n},\nmethods: {\n  ...mapMutations({\n  \t  add: 'increment' // 将 `this.add()` 映射为`this.$store.commit('increment')`\n  }),\t\n  ...mapActions({\n     add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')`\n  })\n}\n\n\n```\n\n## 事件委托与冒泡和捕获\n>什么是事件委托：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 \n>\n>什么是冒泡和捕获：其实都是事件传播路径。冒泡：从外到事件源进行事件传播；捕获：从内向事件源进行事件传播；\n>\n\nDOM标准事件流的触发的先后顺序为：先捕获再冒泡。即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。\n`addEventListener`事件监听方法的第三个参数默认值是`false`，表示冒泡阶段调用，`true`为捕获阶段调用\n \n```html\n<body>\n  <button>append</button>\n  <ul>\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n  </ul>\n</body>\n```\n\n```javascript\nwindow.onload = function() {\n    document.querySelector('button').onclick = function (e) {\n      let li = document.createElement('li')\n      li.innerHTML = '5'\n      document.querySelector('ul').appendChild(li)\n    }\n\n    document.querySelector('ul').onclick = function(e) {\n      // li 新增的li也是可以被点击的\n      console.log(e.target.nodeName.toLowerCase()) \n    }\n  }\n```\naddeventListener和onclick不同点：\n - addeventListener可以给一个事件注册多个listener\n - addEventListener可以控制时间传播行为（捕获/冒泡，使用removeEventListener来解决\n - \n\n## ES6 proxy和reflect\n\n### proxy\n\n> 对目标读取、函数调用等操作进行拦截，然后操作处理。它不直接操作对象，而是像代理模式。\n\n```javascript\nlet target = {\n    name: 'Tom',\n    age: 24\n}\nlet handler = {\n    get: function(target, key) {\n        console.log('getting '+key);\n        return target[key]; // 不是target.key\n    },\n    set: function(target, key, value) {\n        console.log('setting '+key);\n        target[key] = value;\n    }\n}\n// target为目标对象，handler为代理处理\nlet proxy = new Proxy(target, handler)\n\n```\n\n### reflect\n\n> 优化了object内部操作，修改一些函数的返回值，如Object.defineProperty，Reflect与Proxy是一一对应的对象，是Proxy的方法也是Reflect的方法，Proxy修改的过的方法可以在Reflect获取默认值。\n\n```javascript\n// 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。\nObject.defineProperty(target, property, attributes) // 报错\nReflect.defineProperty(target, property, attributes // false\n\n// 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n'assign' in Object // true\nReflect.has(Object, 'assign') // true\n```\n\n \n\n\n","source":"_drafts/last/docs/面试题总结.md","raw":"## cookie的几种属性和作用\n - `name`: 名字\n - `value`: 值\n - `domain`: 可以访问此cookie的域名\n - `path`: 可以访问此cookie的路径\n - `sameSite`: 跨站点携带cookie设置\n \t- None：不限制； \n \t- Lax：默认值，介于None和Strict之间，会合理判断携带cookie时机，如链接a会携带cookie；\n \t- Strict：完全禁止跨站点传送cookie；\n - `httponly`: 值为true则仅在http请求中会传递cookie，不可用document.cookie等操作获取\n - `secure`: 是否只能使用https传递此cookie\n - `expires`: 过期时间；值是时间意思是到这个时间，cookie失效，否则是session，即退出浏览器后自动失效\n\n   \n## 重排和重绘  \n\n网页加载过程大致分为5步：  \n  \n 1. HTML代码转化成DOM  \n 2. CSS代码转化成CSSOM\n 3. 结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）\n 4. 生成布局（layout），即将所有渲染树的所有节点进行平面合成\n 5. 将布局绘制（paint）在屏幕上  \n \n其中第4步为排列布局，重排指的就是第4步重做；第5步是绘制，那重绘指的就是第5步重做。按照网页加载顺序，第4步之后执行第5步，所以重排必将触发重绘，而重绘不一定会触发重排。\n\n**重绘**：修改元素字体颜色，背景颜色，阴影效果等\n**重排**：位置发生改变，如`margin` `padding` `width`。 `删除增加dom` `调用offsetHeight`等读取实时量值时\n\n由于重排性能消耗大，那么减少重排次数也就成了一个优化页面的方法，下面总结几个常用方法：  \n\n1. 不要一条一条修改css，尽量通过class修改，或者csstext  \n2. 先display: none; 再修改样式，然后再display: block;\n3. 一个元素大量修改css，可以设置为position: fixed | absolute, 这样重排消耗少，因为不用考虑其他元素位置  \n4. react vue虚拟dom\n\n## 深拷贝\n\n```javascript\n// 冷门深拷贝利用MessageChannel\nfunction deepClone(obj) {\n  return new Promise(function(resolve, reject) {\n    var { port1, port2 } = new MessageChannel();\n    port1.onmessage = function(e) {\n      resolve(e.data);\n    };\n    port2.postMessage(obj);\n  });\n}\n```\n```javascript\n// 利用weakmap解决了循环引用报错问题，完全版\nfunction deepClone1(_target, map = new WeakMap()) {\n  if(!_target || typeof _target !== 'object'){\n    return _target\n  }\n  if(map.get(_target)) {\n    console.log('进入map判断')\n    console.log(map.get(_target))\n    return map.get(_target);\n  }\n  let res = Array.isArray(_target) ? [] : {}; \n  console.log('map set')\n  console.log(_target, res)\n  map.set(_target, res);\n  for(let i in _target){\n    console.log('循环')\n    if(typeof _target[i] === 'object'){\n      console.log('是对象')\n      res[i] = deepClone1(_target[i], map);\n    }else{\n      console.log('不是对象')\n      res[i] = _target[i]\n    }\n  }\n  return res;\n}\n```\n## 函数防抖和节流\n- **防抖**：    \n  \n```javascript\nfunction debounce(event, delay) {\n  let timer = null;\n  return function (...args) {  // ...args用来接受fun原有的参数，比如事件就是event对象\n    clearTimeout(timer); // 利用clearTimeout的特性，处理delay内，再此触发函数不做处理\n    timer = setTimeout(() => {\n      event.apply(this, args);\n    }, delay);\n  };\n} \n```    \n\n - **节流**：  \n  \n```javascript\nfunction throttle(fun, delay) {            \n　　let prev = Date.now();            \n　　return function(...args) {   // ...args用来接受fun原有的参数，比如事件就是event对象                        \n　　　　let now = Date.now();                \n　　　　if (now - prev >= delay) {                    \n　　　　　　fun.apply(this, args);  \n　　　　　　prev = Date.now();                                    \n　　　　}            \n　　}        \n}\n```  \n[查看详解](http://cd98.xyz/d/2020/10/20/debounce-and-throttle)\n\n## 实现换肤功能\n - 设置多种颜色类名，通过替换body元素类名实现\n - http请求动态加载.css问题\n - scss换肤 待补充 \n\n## https证书作用 \n - 证书中存在一个公钥，一个私钥，私钥保密存在服务器不公开\n - 用户通过浏览器向服务器443端口连接，服务端收到请求，发给客户端一个带有公钥的证书\n - 客户端收到证书，先验证合法性（是否在有效期内、证书的域名与请求的域名是否匹配，通过继续，不通过提示警告\n - 客户端再生成一个随机key，通过公钥加密，发给服务端\n - 服务端收到随机key密文，用私钥解密，拿到客户端的随机key，通过随机key对内容进行对称加密，发给客户端\n - 客户端收到密文，用随机key解密，完成\n\n## bfc\n\n> 全称「块格式化上下文」(Block Formatting Context), 是一块独立的css作用域，外部如何变化都影响不到他。  \n\n##### 怎么触发：  \n  \n - 根元素body  \n - float： right | left\n - position： absolute | fixed\n - display：inline-block | tabel-cells | flex\n - overflow： hidden | auto | scroll\n \n##### 效果\n - 清除浮动，常用overflow hidde\n - 垂直方向margin会重叠\n\n## 数组方法\n#### 改变原数组：  \n\n - splice: array.splice(index,howmany,item1,.....,itemX) 删除/添加\n - sort: 排序\n - unshift: 首加 shift: 首删;  pop: 尾删; push: 尾加\n - reverse: 倒序排列\n - fill: 数组填充 \n \n \n ```javascript\n array.fill(value, startIndex | 0, endIndex | array.length)\n  \n [1,2,3,4,5].fill('a', 1, 3) \n // [1, \"a\", \"a\", 4, 5]\n ```  \n \n#### 不改变原数组，生成新数组\n \n - slice: 浅拷贝 array.slice(startIdx, endIdx)\n - join: 转字符串并分割\n - toLocaleString: 转换成字符串数组\n - concat: 连接数组 可用...替代\n - indexOf: 检查下标\n - includes: 是否包含。可替代indexOf，indexOf === -1不够语义化\n\n#### 循环方法\n  - forEach、map、filter\n  - every、some、reduce、reduceRight(和reduce区别是相反方向)\n   \n   \n   \n## 字符串方法\n\n\n```javascript\nvar str = \"hello world\";\n\nstr.charAt(1) //e 返回指定下标的字符\nstr.charcodeAt(1) //101 返回指定下标字符的字符编码\nstr.concat(123) // hello world123 连接字符串，生成新的\nstr.slice(0, 2) // he 截取字符串，参数为下标\nstr.substring(0, 2) // he 截取字符串，参数为下标\nstr.substr(0, 2) // he 截取字符串，第一个参数是起始下标，第二个参数为截取数量\nstr.indexOf('h', 0) // 0 查子字符下标，第一个参数是字符，第二个参数是起始下标\nstr.lastIndexOf('h', 0) // 0 查子字符下标，第一个参数是字符，第二个参数是结尾下标(和indexof区别)\n\nstr.toLowerCase() // hello world 转小写\nstr.toUpperCase() // HELLO WORLD 转大写\nstr.trim() // 删除前后空格\n\nstr.split('e') // [\"h\", \"llo world\"] 转数组，参数为分割符\nstr.replace('o', 'a') // hella world 替换字符，第一个参数可以是正则\nstr.match(/hello/g) // [\"hello\"] 匹配字符串返回一个数组，参数常是正则\n```\n\n## http1.1长连接 & http2多路复用区别：\n\n**http1.1长连接**：**同一个域名访问同一个文件的多个请求**都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接，但不是并行，只能按顺序执行。\n\n**http2多路复用**：**同一个域名访问多个文件的多个请求**也可以复用一个tcp连接，且多个请求可以被并行处理。  \n\n## 懒加载\n页面中一些大资源加载较慢，比如iframe，img。针对这个问题可以通过懒加载解决。    \n\n拿`img`举例，先设置`img`的`src`属性为一个默认的资源，然后把真实`url`放在标签的某个属性中。并设置好图片的宽高，避免完成加载时出现页面闪动问题。  \n\n然后实时监听页面滚动，如果当前图片是可见状态，那么把图片的真实url属性值取出替换到默认`src`上来实现加载图片资源，从而提升页面打开速度和合理使用客户端流量。\n\n```javascript\n// 获取浏览设备的网页可视高度\nlet clientHeight = document.documentElement.clientHeight; \n// 获取已被滚出的页面高度\nlet scrollTop = document.documentElement.scrollTop; \n// 图片顶部到网页顶部的高度\nlet imgOffsetTop = document.querySelector(\"img\").offsetTop;\n\n// 判断img在可视区域内：\nimgOffsetTop < clientHeight + scrollTop\n```\n\n## vue组件通信\n - props 和 $emit\n - provide inject：在组件a声明，在a下面所有子组件通过inject调用，通过参数传递\n - event bus： new出一个vue，通过emit和on来派发和监控\n - vuex 全局状态管理\n - this.$children 和 this.$parent 层级较深不推荐，provid可以替代此方法\n\n## 输入url到页面展示经历了什么\n - **dns解析**：按照这个步骤查询，找到ip，立即中断返回给客户端（浏览器缓存 => 操作系统缓存(host) => 路由器缓存 => 本地服务器缓存 => isp dnf服务器查询 => 根dns服务器）\n - **tcp三次握手**\n - **发送http请求报文**：报文包括：请求行，请求头，请求体\n - **服务端接收到请求**： 进入web服务器，如apache、nginx，然后进入后台程序\n - **服务器响应报文**：报文包括：响应行，响应头，响应体\n - **浏览器渲染页面**\n \t1. 根据html得到dom树\n \t2. 根据css得到css树\n \t3. 根据dom树和css树，生成渲染树\n \t4. 根据渲染树计算每一个节点的信息\n \t5. 根据计算好的信息绘制页面\n \n - **数据传送完成，四次挥手关闭**： \n\n\n## commonjs模块和es6模块有什么区别\ncommonjs:  \n\n - 对于基本数据类型，是值的拷贝\n - 对于复杂数据类型，是浅拷贝，也就是修改一个模块的值，引用他的值也会发生改变\n - 第一次加载模块会缓存，往后再加载会读取缓存的数据\n \nes6：\n - 所有数据都是只读引用，当遇到import语句时，会生成一个只读引用，等到文件中真的使用到模块中的值时，根据只读引用，到加载中的模块取值\n - 不允许修改模块中的数据，并且是动态的，比如模块中的值发生改变，引入得到的值也会改变。\n\n## 几种跨域\n - **jsonp**： 利用script标签跨域，本质是加载一个外部js\n - **cors**：全程跨域资源共享，服务端操作，把请求头的`origin`的值取出，响应头会增加`Access-Control-Allow-Origin` key并把值设置为`origin`取出的值也可以是通配符，浏览器就不会拦截响应了，从而解决跨域问题\n - **postMassage**：利用可访问服务资源的`iframe`，和当前页面互相通信，传递消息，来实现跨域，`postMassage`本质是两个页面的消息传递方法。  \n   \n\t```javascript\n\t// 页面1(可以获取后端数据的)传递数据，第二个参数是url匹配规则，可以是通配符\n\twindow.frames[0].postMessage(data,'*')\n\t \n\t// 页面2(不能接收后端数据的)，接收页面1的数据\n\twindow.addEventListener('message',function(e){\n\tconsole.log(e.data)\n\t})\n\t```\n- **服务器中转**： 由于服务端没跨域，服务端代替客户端请求目标接口，并把响应数据返回给客户端\n\n## react生命周期  \n \n - **componentWillMount**：在渲染前调用，客户端服务端都会调用\n - **componentDidMount**：第一次渲染后调用，只在客户端\n - **componentWillReceiveProps**： 接收新的props被调用，初始化时不会被调用\n - **shouldComponentUpdate**： 组件更新(props,state)时调用；返回布尔值，T为允许更新组件，F为不更新组件\n - **componentWillUpdate**： 组件更新(props,state)前渲染前被调用，初始化时不会调用\n - **componentDidUpdate**：组件完成更新后调用。初始化时不会被调用\n - **componentWillUnmount**： 组件要销毁前调用\n\n## vue生命周期父子组件执行顺序\n - 父beforeCreate -> 父created -> 父beforeMount -> 子beforeCreate -> 子created -> 子beforeMount->子mounted->父mounted\n\n - 子组件更新：父beforeUpdate -> 子beforeUpdate -> 子updated -> 父updated\n\n - 父组件更新：父beforeUpdate -> 父updated\n\n - 销毁：父beforeDestroy -> 子beforeDestroy -> 子destroyed -> 父destroyed\n\n总结带beofre的生命周期都是**从父到子**调用，带ed的生命周期都是**从子到父**\n\n \n## js变量声明提升\njs中，函数及变量的声明都将被提升到作用域最顶部，且函数的提升比变量优先级高\n\n## 继承\n - **原型链继承**： Cat继承了Animal，缺点：所有Cat实例都会共享原型链，不可以向Animal传参。  \n \n \t```javascript\n \tfunction Cat(){};\n \t\n\tCat.prototype = new Animal();\n \t```\n - **call继承/构造继承**: 解决上面原型链建成俩问题，但是只是Cat实例，不是Animal的实例\n\n \t```javascript\n \tfunction Cat(name){\n\t  Animal.call(this);\n\t}\n \t```\n - **组合继承**：也就是前面两个方法合并，解决上面两个继承的缺点，唯一的缺点调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了） \n \n\t```javascript\n \tfunction Cat(name){\n\t  Animal.call(this);\n\t}\n\t\n\tCat.prototype = new Animal();\n\tCat.prototype.constructor = Cat; //修复构造函数指向\n\t// 优点：\n\t// 既是cat实例，又是Animal实例\n\t// 没有共享原型方法问题，并可以传参数\n\n \t```\n \t\n## 事件循环  \n \n 同步任务在执行栈，异步任务执行后回调区分微任务和宏任务放入对应的微宏队列中，等同步执行栈执行完毕，会先检查微任务队列，执行完毕后，检查宏任务队列，执行。其中Promise.resolve调用静态方法，会优先于正常的promise的resolve方法  \n \n异步微任务有哪些：  \n \n  - new Promise()\n    \n异步宏任务有哪些：  \n\n  - setInterval()\n  - setTimeout()\n \n## 前端优化\n\n - 静态资源放在cdn\n - 首屏加载服务端渲染\n - 可以升级到http2，可以使用http2 多路复用 多个请求并行，可以打乱顺序，最后重组\n - 使用字体图标替代图片\n - gzip压缩\n - uglify plugin优化压缩代码\n - 图片懒加载\n - 图片压缩，优先使用webp\n - 减少重排，多使用类名或者csstext处理样式\n - 多使用flex局部，性能优，兼容性好\n  \n## 行内元素特点\n - 可以设置所有方向`margin`和`padding`，但是垂直方向无法更改布局\n - 设置`width`和`height`属性无效\n - 不会另起一行  \n  \n## 实现instanceof\n> instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。\n![6D190A1F-A82A-4F86-BC85-3AD9F5EA672B.png](./img/interview/bB3Sj9h8nyoOIVs.png)\n  \n```javascript\nlet objProto = obj.__proto__;\n   while(objProto) {\n      if (objProto === ctor.prototype) {\n        return true;\n      }\n      objProto = objProto.__proto__;\n   }\n   return false;\n}\n\nvar Food = function() {};\nvar Meat = function() {};\nMeat.prototype = new Food();\nvar meat = new Meat();\n\nnewInstanceof(meat, Meat) // true\nnewInstanceof(meat, Food) // true\nmeat instanceof Meat // true\nmeat instanceof Food // true\n```  \n\n总的来说就是`meat.__proto__.constructor === Meat`，由于原型链是一条链，所以循环所有`__proto__`;\n直到`null`为止，符合`Meat.prototype === meat.__proto__`即返回`true`，否则返回`false`。\n\n## http缓存机制\n\n分为两类：**强制缓存** 和 **协商缓存**\n通过查看`http header`中`Cache-Control`字段，（`Cache-Control`优先`Expires`）他有以下几种值：   \n\n - private:  客户端可以缓存\n - public: 客户端和代理服务器都可以缓存  \n - max-age=xxx: 缓存将在xxx秒后失效\n - no-cache: 需要使用对比缓存来验证数据\n - no-store: 不缓存  \n \n强缓存：不会向服务器发起请求，直接从缓存中获取资源  \n\n协商缓存：（1 优先 2）    \n\n1.  客户端第一次请求，从http响应头中拿到Etag，是一个资源的唯一标识，随后客户端的每次请求会携带If-None-Match字段到请求头，服务器收到后，和当前资源唯一标识对比，如果不同，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n2. 客户端第一次请求，从http响应头中拿到Last-Modified，是内容最后修改时间，随后客户端的每次请求会携带If-Modified-Since字段到请求头，服务器拿到后，和Last-Modified对比，如果If-Modified-Since 小于 Last-Modified，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n引用网上一张图：\n![632130-20170210141453338-1263276228.png](./img/interview/FvAIM258yHCTQba.png)  \n\n## constructor和super关键字\n`class`是`ES6`新增的关键字，为了看起来更像`java`等面向对象语言，实际上是一个语法糖，等同于`ES5`的`function`来创建构造函数。  \n\n - constructor ：`constructors`是class中默认的一个关键字，会自动调用该方法，`class`中必须要有`constructor`，如果没有，会被默认添加。当new时，`constructor`会被执行返回一个this，就是实例。  \n - super ： 当`class`有继承时，在`constructor`内部必须执行一遍super()函数，B继承A，`super`相当于`A.prototype.constructor.call(this, props)`，另外super()也指向父亲A的原型对象 [这里](https://juejin.cn/post/6844903638674980872)\n\n## js垃圾回收机制算法  \n> 当内存中的数据不需要时候，js会自动使用垃圾回收算法释放掉      \n\n - **引用计算** : 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。这是最初级的垃圾收集算法。 该算法有个限制：无法处理引用循环，两个对象互相引用的情况下，引用次数至少是1，所以不会被回收掉  \n \n - **标记清除** : 此算法把“对象是否不再需要”简化定义为“对象是否可以获得”。这个算法从根（root）全局对象开始先下查找，找到不可以被获得的对象，然后清除掉  \n  \n## 常见算法种类\n - **二分查找**：也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。  \n \n - **贪心算法**：又名贪婪法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心原则，选取当前状态下最好/最优的选择（局部最有利的选择），贪图眼前局部的利益最大化。\n - **回溯算法**：实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。\n - **分治算法**：分治法是构建基于多项分支递归的一种很重要的算法范式。字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。\n - **动态规划**：动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动态规划往往用于优化递归问题，例如斐波那契数列，如果运用递归的方式来求解会重复计算很多相同的子问题，利用动态规划的思想可以减少计算量。\n\n## 关于promise async/await执行顺序面试题\n - 执行顺序： 同步放入执行栈 => 异步放入任务队列 => 异步区分微宏任务 => 微任务 => 宏任务\n - async/await，await后的语句是同步的，在函数体内，await下的语句会被放入promise回调函数体中，async函数默认返回一个promise对象  \n \n经典面试题：  \n\n```javascript\nasync function async1(){\n\tconsole.log('async1 start');\n\tawait async2();\n\tconsole.log('async1 end')\n}\nasync function async2(){\n\tconsole.log('async2')\n}\nconsole.log('script start');\nsetTimeout(function(){\n\tconsole.log('setTimeout')\n},0);\nasync1();\nnew Promise(function(resolve){\n\tconsole.log('promise1');\n\tresolve();\n}).then(function(){\n\tconsole.log('promise2')\n});\nconsole.log('script end')\n```\n解析：按照从上往下顺序先执行同步代码，前两个函数`async1`和`async2`是函数声明，忽略。然后第1个输出的是`script start`，然后看到`setTimeout`, 由于它是异步且属于宏任务，放到最后执行。然后看到async1函数被执行了，进入`async1`函数体，第2个输出的是`async1 start`, 看到await规则是：await右的语句被同步执行，所以第3个输出的是`async2`，await下的语句(函数体内)被当作async函数返回一个promsise的回调函数体的语句去处理，且被放入了异步任务队列中，等待中。然后跳出async1函数体，继续执行同步代码，遇到new Promise，第4次输出`promise1`，看到resolve，就把then中回调，放入任务队列中，然后继续向下执行同步代码，第5次输出的最后的`script end`。至此同步执行栈空了，开始把任务队列中的上下文拿到执行栈执行，由于队列先进先出，所以第一个被入栈的是async1的回调，也就是第6次输出的是`async1 end`，然后把第二个队列中的上下文放入执行栈，也就是promise的resolve，所以第7次输出`promise2`，至此微任务执行完成，现在执行宏任务，也就是timeout，所以第8次输出为`setTimeout`。  \n\n结果：  \n\n```\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n```\n\n## 迭代器和生成器\n先来瞅一段代码：  \n\n```javascript\nfunction createIterator(items) {\n    var i = 0;\n    return { // 返回一个迭代器对象\n        next: function() { // 迭代器对象一定有个next()方法\n            let done = (i >= items.length);\n            let value = !done ? items[i++] : undefined;\n            return { \n                value: value,\n                done: done\n            }\n        }\n    }\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next());  // \"{ value: 1, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 2, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 3, done: false}\"\nconsole.log(iterator.next());  // \"{ value: undefiend, done: true}\"\n```\n这就是迭代器，迭代器是一个特殊对象，可以通过每调用一次next，获取下一项结果。可以用迭代器替代for循环，因为for通过下标获取，多层嵌套比较复杂。\n\n```javascript\n// 用迭代器模拟for\nvar colors = [\"red\", \"green\", \"blue\"];\nvar iterator = createIterator(colors);\nwhile(!iterator.next().done){\n    console.log(iterator.next().value);\n}\n```\n\n迭代器模拟for的方法看起来太麻烦了，不如for来的方便，这个时候可以用`生成器`(* 和 yield)来快速生成迭代器。\n\n```javascript\nfunction *createIterator(items) {\n    for(let i = 0; i < items.length; i++) {\n        yield items[i];\n    }\n}\n\nlet iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next());  // \"{ value: 1, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 2, done: false}\"\nconsole.log(iterator.next());  // \"{ value: 3, done: false}\"\nconsole.log(iterator.next());  // \"{ value: undefiend, done: true}\"\n```\n通过`*`和`yield`关键字创建，`*`来表示这个函数内部是可以用yield返回每次迭代的值，和async、await一样。需要组合使用，`yield`后面接每次迭代的值。这样就可以外部调用.next()获取下一个值。\n\n在es6中，数组、Set、Map、字符串集合，都属于可迭代对象，内部都有默认迭代器，可通过`object[Symbol.iterator]()`访问默认迭代器。  \n\nes6中也提供了一个通过方法来快速使用迭代器\n```\nfor(item of 集合迭代器) {...}\n```\n常见的迭代器和得到item的值：    \n \n - object.keys(): key(对象)/下标(数组)\n - object.values(): 每项value\n - object.entries(): [下标/key, value]\n \n## 前端路由\n\n#### hash\n14年前，前端路由都是用hash的方式实现的，地址长这个样子**url#hash**， 修改`hash`部分不会重载这个页面，每次hash改变，可以用window的`hashchange`方法来监听，通过这个方法就可以实现前端路由了\n \n#### history\n在14年，HTML5标准发布，window上新增了两个api：`pushState`和`replaceState`，也hash一样，不刷新来实现前端路由，而且少了#更美观了，由于没#，所以刷新时候，默认会从服务器下载对应url资源，这个时候我们需要改下服务器配置，都加载前端index.html文件，来实现前端路由\n\n```javascript\n// 第一个参数是state，用于描述一些特性，会被放入历史栈中，开发者使用\n// 第二个参数是title，表示新页面的标题，浏览器都会忽略这个参数\n// 第二个参数是url，表示新页面的相对地址\n// 跳转\nwindow.history.pushState(null, null, \"/profile\");\nwindow.history.replaceState(null, null, \"/profile\"); 和pushState的区别是不会把记录放入历史栈中\n```\n\n#### 共同点\n- 都不会重载页面\n- 都会把历史记录放入栈中\n\n#### 不同点\n - hash只可以#后部分，必须是同源url，history没有限制\n - history需要修改服务器配置，来解决刷新空白问题，hash本身就是属于前端的，不需要设置\n\n \n## babel工作原理\n>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。简单来说就是一种描述源代码的结构，用于被计算机识别到，并成语言引擎执行\n\n工作原理大致可以理解成，`字符串输入`=>`转换`=>`输出`  \n\n - 根据babylon解析器，把js代码按照规范解析成AST语法树\n - 按照规则(stage-0,1,2,3),修改AST语法树，常见把高级语法，转换成低级语法\n - 最后通过babel-generator将修改后的AST语法树转换成js代码\n\n## js类型检测\n\n \n - **typeof**: 除了基本数据类型，检测不到具体object类型(数组，对象，时间对象，正则，set，map)\n - **instanceof**: 例a instanceof Fun原理是检测a是不是Fun的实例，缺点就是被检测的值必须是引用，如下所示\n \n ```javascript\n new Number(1) instanceof Number\n // true\n 1 instanceof Number\n // false\n ```\n - **constructor**: 实例.constructor === 构造器，缺点是constructor属性容易被修改\n - **Object.prototype.toString.call**: 目前最好用的一个方法，缺点是使用object构造函数的toString方法，此方法可能被修改\n  \n ```javascript\n \tObject.prototype.toString.call(1)\n \t// \"[object Number]\"\n \tObject.prototype.toString.call('1')\n \t// \"[object String]\"\n \tObject.prototype.toString.call([1])\n \t// \"[object Array]\"\n \t// 如果修改原型\n \tObject.prototype.toString = Array.prototype.toString\n \tObject.prototype.toString.call([1,2,3])\n \t// \"1,2,3\"\n \t...\n ```\n \n## Object的valueOf和toString方法\n \n  - **valueOf**: 返回对象的原始值表示\n  - **toString**: 返回对象的字符串表示\n  \n  对象转字符串或者数字的过程：如果专程字符串，会优先调用toString方法，转数字，会优先调用valueOf方法\n  \n  相关面试题：\n  \n  ```javascript\n   // 下面代码a在什么值情况下会输出1\n\n\tvar a = ?;\n\tif (a == 1 && a == 2 && a == 3) {\n\t    console.log(1);\n\t}\n\t\n\t// 解\n\tvar a = {\n\t    n : 0,\n\t    valueOf(){\n\t        return ++this.n;\n\t    }\n\t};\n  ```\n  \n## vue slot插槽\n - 匿名插插: 子组件包裹的内容会被显示到`slot`标签中中\n\n - 具名插插：感觉名字多次显示，可复用\n \n ```javascript\n <div slot=\"down\"></div>的内容\n 会被显示到<slot name=\"down\"></slot>里\n \n ```\n - 数据插槽：\n \n ```javascript\n // 父亲中\n <div v-slot:data=\"{data}\"></div>\n// 组件中就可以用data了\n<myslot v-slot=\"data\">\n  {{ slotProps.user.firstName }}\n</myslot>\n\n ```\n \n## mixin\nvue mixin是针对组件间功能共享来做的。可以对组件的任意部分进行mixin，也就是说不同的组件，想使用同一个数组，或者方法，那么mixin就是来做这个事的，把公共部分提取出来作为mixin\n\n声明：\n\n```javascript\n// 声明\nconst toggle = {\n    data () {\n        isshowing: false\n    },\n    methods: {\n        toggleShow() {\n            this.isshowing = !this.isshowing\n        }\n    }\n}\n// 使用，toggle的方法会自动合并到当前组件中\nmixins: [toggle]\n```\n\n## vuex使用\n核心概念：  \n\n - state：数据\n - getter：类似计算属性，用来获取state\n - mutation： 同步方法，用于修改state\n - action： 异步方法，最后调用mutation修改state  \n \n``` javascript\n// 声明\nimport Vuex from 'vuex'\n\nconst store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  getter: {\n    doneTodos: (state, getters) => {\n      return state.todos.filter(todo => todo.done)\n    },\n    count: (state) => {\n    \treturn state.count\n    }\n  },\n  mutations: {\n    increment (state, payload) {\n      state.count++\n    }\n  },\n  actions: {\n    addCount(context) {\n      // 可以包含异步操作\n      // context 是一个与 store 实例具有相同方法和属性的 context 对象\n    }\n  }\n})\n\n// 使用\n// 调用mutation\nthis.$store.commit('increment', 10)\n// 调用actions\nthis.$store.dispatch('increment', 10)\n// 利用mapGetters mapGetters mapMutations mapActions便捷使用\ncomputed: {\n\t...mapGetters(['audio']),\n\t...mapState({\n\t    this.count 等同于 state.count + this.localCount\n\t    count(state) {\n\t      return state.count + this.localCount\n\t    }\n},\nmethods: {\n  ...mapMutations({\n  \t  add: 'increment' // 将 `this.add()` 映射为`this.$store.commit('increment')`\n  }),\t\n  ...mapActions({\n     add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')`\n  })\n}\n\n\n```\n\n## 事件委托与冒泡和捕获\n>什么是事件委托：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 \n>\n>什么是冒泡和捕获：其实都是事件传播路径。冒泡：从外到事件源进行事件传播；捕获：从内向事件源进行事件传播；\n>\n\nDOM标准事件流的触发的先后顺序为：先捕获再冒泡。即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。\n`addEventListener`事件监听方法的第三个参数默认值是`false`，表示冒泡阶段调用，`true`为捕获阶段调用\n \n```html\n<body>\n  <button>append</button>\n  <ul>\n    <li>0</li>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n  </ul>\n</body>\n```\n\n```javascript\nwindow.onload = function() {\n    document.querySelector('button').onclick = function (e) {\n      let li = document.createElement('li')\n      li.innerHTML = '5'\n      document.querySelector('ul').appendChild(li)\n    }\n\n    document.querySelector('ul').onclick = function(e) {\n      // li 新增的li也是可以被点击的\n      console.log(e.target.nodeName.toLowerCase()) \n    }\n  }\n```\naddeventListener和onclick不同点：\n - addeventListener可以给一个事件注册多个listener\n - addEventListener可以控制时间传播行为（捕获/冒泡，使用removeEventListener来解决\n - \n\n## ES6 proxy和reflect\n\n### proxy\n\n> 对目标读取、函数调用等操作进行拦截，然后操作处理。它不直接操作对象，而是像代理模式。\n\n```javascript\nlet target = {\n    name: 'Tom',\n    age: 24\n}\nlet handler = {\n    get: function(target, key) {\n        console.log('getting '+key);\n        return target[key]; // 不是target.key\n    },\n    set: function(target, key, value) {\n        console.log('setting '+key);\n        target[key] = value;\n    }\n}\n// target为目标对象，handler为代理处理\nlet proxy = new Proxy(target, handler)\n\n```\n\n### reflect\n\n> 优化了object内部操作，修改一些函数的返回值，如Object.defineProperty，Reflect与Proxy是一一对应的对象，是Proxy的方法也是Reflect的方法，Proxy修改的过的方法可以在Reflect获取默认值。\n\n```javascript\n// 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。\nObject.defineProperty(target, property, attributes) // 报错\nReflect.defineProperty(target, property, attributes // false\n\n// 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n'assign' in Object // true\nReflect.has(Object, 'assign') // true\n```\n\n \n\n\n","slug":"last/docs/面试题总结","published":0,"date":"2021-10-22T09:38:36.426Z","updated":"2021-10-22T09:38:36.427Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28merp0026h7vmhbspawai","content":"<h2 id=\"cookie的几种属性和作用\"><a href=\"#cookie的几种属性和作用\" class=\"headerlink\" title=\"cookie的几种属性和作用\"></a>cookie的几种属性和作用</h2><ul>\n<li><code>name</code>: 名字</li>\n<li><code>value</code>: 值</li>\n<li><code>domain</code>: 可以访问此cookie的域名</li>\n<li><code>path</code>: 可以访问此cookie的路径</li>\n<li><code>sameSite</code>: 跨站点携带cookie设置<ul>\n<li>None：不限制； </li>\n<li>Lax：默认值，介于None和Strict之间，会合理判断携带cookie时机，如链接a会携带cookie；</li>\n<li>Strict：完全禁止跨站点传送cookie；</li>\n</ul>\n</li>\n<li><code>httponly</code>: 值为true则仅在http请求中会传递cookie，不可用document.cookie等操作获取</li>\n<li><code>secure</code>: 是否只能使用https传递此cookie</li>\n<li><code>expires</code>: 过期时间；值是时间意思是到这个时间，cookie失效，否则是session，即退出浏览器后自动失效</li>\n</ul>\n<h2 id=\"重排和重绘\"><a href=\"#重排和重绘\" class=\"headerlink\" title=\"重排和重绘\"></a>重排和重绘</h2><p>网页加载过程大致分为5步：  </p>\n<ol>\n<li>HTML代码转化成DOM  </li>\n<li>CSS代码转化成CSSOM</li>\n<li>结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）</li>\n<li>生成布局（layout），即将所有渲染树的所有节点进行平面合成</li>\n<li>将布局绘制（paint）在屏幕上  </li>\n</ol>\n<p>其中第4步为排列布局，重排指的就是第4步重做；第5步是绘制，那重绘指的就是第5步重做。按照网页加载顺序，第4步之后执行第5步，所以重排必将触发重绘，而重绘不一定会触发重排。</p>\n<p><strong>重绘</strong>：修改元素字体颜色，背景颜色，阴影效果等<br><strong>重排</strong>：位置发生改变，如<code>margin</code> <code>padding</code> <code>width</code>。 <code>删除增加dom</code> <code>调用offsetHeight</code>等读取实时量值时</p>\n<p>由于重排性能消耗大，那么减少重排次数也就成了一个优化页面的方法，下面总结几个常用方法：  </p>\n<ol>\n<li>不要一条一条修改css，尽量通过class修改，或者csstext  </li>\n<li>先display: none; 再修改样式，然后再display: block;</li>\n<li>一个元素大量修改css，可以设置为position: fixed | absolute, 这样重排消耗少，因为不用考虑其他元素位置  </li>\n<li>react vue虚拟dom</li>\n</ol>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 冷门深拷贝利用MessageChannel</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span> port1<span class=\"token punctuation\">,</span> port2 <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    port1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    port2<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 利用weakmap解决了循环引用报错问题，完全版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepClone1</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_target <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> _target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> _target\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'进入map判断'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'map set'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> _target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> _target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'是对象'</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone1</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不是对象'</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数防抖和节流\"><a href=\"#函数防抖和节流\" class=\"headerlink\" title=\"函数防抖和节流\"></a>函数防抖和节流</h2><ul>\n<li><strong>防抖</strong>：    </li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用clearTimeout的特性，处理delay内，再此触发函数不做处理</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">    \n\n - **节流**：  \n  \n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象                        </span>\n　　　　<span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">>=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    \n　　　　　　<span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    \n　　　　<span class=\"token punctuation\">&#125;</span>            \n　　<span class=\"token punctuation\">&#125;</span>        \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n[查看详解](http://cd98.xyz/d/2020/10/20/debounce-and-throttle)\n\n## 实现换肤功能\n - 设置多种颜色类名，通过替换body元素类名实现\n - http请求动态加载.css问题\n - scss换肤 待补充 \n\n## https证书作用 \n - 证书中存在一个公钥，一个私钥，私钥保密存在服务器不公开\n - 用户通过浏览器向服务器443端口连接，服务端收到请求，发给客户端一个带有公钥的证书\n - 客户端收到证书，先验证合法性（是否在有效期内、证书的域名与请求的域名是否匹配，通过继续，不通过提示警告\n - 客户端再生成一个随机key，通过公钥加密，发给服务端\n - 服务端收到随机key密文，用私钥解密，拿到客户端的随机key，通过随机key对内容进行对称加密，发给客户端\n - 客户端收到密文，用随机key解密，完成\n\n## bfc\n\n> 全称「块格式化上下文」(Block Formatting Context), 是一块独立的css作用域，外部如何变化都影响不到他。  \n\n##### 怎么触发：  \n  \n - 根元素body  \n - float： right | left\n - position： absolute | fixed\n - display：inline-block | tabel-cells | flex\n - overflow： hidden | auto | scroll\n \n##### 效果\n - 清除浮动，常用overflow hidde\n - 垂直方向margin会重叠\n\n## 数组方法\n#### 改变原数组：  \n\n - splice: array.splice(index,howmany,item1,.....,itemX) 删除/添加\n - sort: 排序\n - unshift: 首加 shift: 首删;  pop: 尾删; push: 尾加\n - reverse: 倒序排列\n - fill: 数组填充 \n \n \n </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n array<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> startIndex <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> endIndex <span class=\"token operator\">|</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  \n <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n <span class=\"token comment\">// [1, \"a\", \"a\", 4, 5]</span>\n <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n \n#### 不改变原数组，生成新数组\n \n - slice: 浅拷贝 array.slice(startIdx, endIdx)\n - join: 转字符串并分割\n - toLocaleString: 转换成字符串数组\n - concat: 连接数组 可用...替代\n - indexOf: 检查下标\n - includes: 是否包含。可替代indexOf，indexOf === -1不够语义化\n\n#### 循环方法\n  - forEach、map、filter\n  - every、some、reduce、reduceRight(和reduce区别是相反方向)\n   \n   \n   \n## 字符串方法\n\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//e 返回指定下标的字符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">charcodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//101 返回指定下标字符的字符编码</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello world123 连接字符串，生成新的</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，参数为下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，参数为下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，第一个参数是起始下标，第二个参数为截取数量</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 查子字符下标，第一个参数是字符，第二个参数是起始下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 查子字符下标，第一个参数是字符，第二个参数是结尾下标(和indexof区别)</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello world 转小写</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// HELLO WORLD 转大写</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 删除前后空格</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"h\", \"llo world\"] 转数组，参数为分割符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hella world 替换字符，第一个参数可以是正则</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hello</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"hello\"] 匹配字符串返回一个数组，参数常是正则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"http1-1长连接-amp-http2多路复用区别：\"><a href=\"#http1-1长连接-amp-http2多路复用区别：\" class=\"headerlink\" title=\"http1.1长连接 &amp; http2多路复用区别：\"></a>http1.1长连接 &amp; http2多路复用区别：</h2><p><strong>http1.1长连接</strong>：<strong>同一个域名访问同一个文件的多个请求</strong>都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接，但不是并行，只能按顺序执行。</p>\n<p><strong>http2多路复用</strong>：<strong>同一个域名访问多个文件的多个请求</strong>也可以复用一个tcp连接，且多个请求可以被并行处理。  </p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><p>页面中一些大资源加载较慢，比如iframe，img。针对这个问题可以通过懒加载解决。    </p>\n<p>拿<code>img</code>举例，先设置<code>img</code>的<code>src</code>属性为一个默认的资源，然后把真实<code>url</code>放在标签的某个属性中。并设置好图片的宽高，避免完成加载时出现页面闪动问题。  </p>\n<p>然后实时监听页面滚动，如果当前图片是可见状态，那么把图片的真实url属性值取出替换到默认<code>src</code>上来实现加载图片资源，从而提升页面打开速度和合理使用客户端流量。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 获取浏览设备的网页可视高度</span>\n<span class=\"token keyword\">let</span> clientHeight <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 获取已被滚出的页面高度</span>\n<span class=\"token keyword\">let</span> scrollTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 图片顶部到网页顶部的高度</span>\n<span class=\"token keyword\">let</span> imgOffsetTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 判断img在可视区域内：</span>\nimgOffsetTop <span class=\"token operator\">&lt;</span> clientHeight <span class=\"token operator\">+</span> scrollTop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"vue组件通信\"><a href=\"#vue组件通信\" class=\"headerlink\" title=\"vue组件通信\"></a>vue组件通信</h2><ul>\n<li>props 和 $emit</li>\n<li>provide inject：在组件a声明，在a下面所有子组件通过inject调用，通过参数传递</li>\n<li>event bus： new出一个vue，通过emit和on来派发和监控</li>\n<li>vuex 全局状态管理</li>\n<li>this.$children 和 this.$parent 层级较深不推荐，provid可以替代此方法</li>\n</ul>\n<h2 id=\"输入url到页面展示经历了什么\"><a href=\"#输入url到页面展示经历了什么\" class=\"headerlink\" title=\"输入url到页面展示经历了什么\"></a>输入url到页面展示经历了什么</h2><ul>\n<li><strong>dns解析</strong>：按照这个步骤查询，找到ip，立即中断返回给客户端（浏览器缓存 =&gt; 操作系统缓存(host) =&gt; 路由器缓存 =&gt; 本地服务器缓存 =&gt; isp dnf服务器查询 =&gt; 根dns服务器）</li>\n<li><strong>tcp三次握手</strong></li>\n<li><strong>发送http请求报文</strong>：报文包括：请求行，请求头，请求体</li>\n<li><strong>服务端接收到请求</strong>： 进入web服务器，如apache、nginx，然后进入后台程序</li>\n<li><strong>服务器响应报文</strong>：报文包括：响应行，响应头，响应体</li>\n<li><strong>浏览器渲染页面</strong><ol>\n<li>根据html得到dom树</li>\n<li>根据css得到css树</li>\n<li>根据dom树和css树，生成渲染树</li>\n<li>根据渲染树计算每一个节点的信息</li>\n<li>根据计算好的信息绘制页面</li>\n</ol>\n</li>\n<li><strong>数据传送完成，四次挥手关闭</strong>： </li>\n</ul>\n<h2 id=\"commonjs模块和es6模块有什么区别\"><a href=\"#commonjs模块和es6模块有什么区别\" class=\"headerlink\" title=\"commonjs模块和es6模块有什么区别\"></a>commonjs模块和es6模块有什么区别</h2><p>commonjs:  </p>\n<ul>\n<li>对于基本数据类型，是值的拷贝</li>\n<li>对于复杂数据类型，是浅拷贝，也就是修改一个模块的值，引用他的值也会发生改变</li>\n<li>第一次加载模块会缓存，往后再加载会读取缓存的数据</li>\n</ul>\n<p>es6：</p>\n<ul>\n<li>所有数据都是只读引用，当遇到import语句时，会生成一个只读引用，等到文件中真的使用到模块中的值时，根据只读引用，到加载中的模块取值</li>\n<li>不允许修改模块中的数据，并且是动态的，比如模块中的值发生改变，引入得到的值也会改变。</li>\n</ul>\n<h2 id=\"几种跨域\"><a href=\"#几种跨域\" class=\"headerlink\" title=\"几种跨域\"></a>几种跨域</h2><ul>\n<li><strong>jsonp</strong>： 利用script标签跨域，本质是加载一个外部js</li>\n<li><strong>cors</strong>：全程跨域资源共享，服务端操作，把请求头的<code>origin</code>的值取出，响应头会增加<code>Access-Control-Allow-Origin</code> key并把值设置为<code>origin</code>取出的值也可以是通配符，浏览器就不会拦截响应了，从而解决跨域问题</li>\n<li><strong>postMassage</strong>：利用可访问服务资源的<code>iframe</code>，和当前页面互相通信，传递消息，来实现跨域，<code>postMassage</code>本质是两个页面的消息传递方法。   <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 页面1(可以获取后端数据的)传递数据，第二个参数是url匹配规则，可以是通配符</span>\nwindow<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 页面2(不能接收后端数据的)，接收页面1的数据</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><strong>服务器中转</strong>： 由于服务端没跨域，服务端代替客户端请求目标接口，并把响应数据返回给客户端</li>\n</ul>\n<h2 id=\"react生命周期\"><a href=\"#react生命周期\" class=\"headerlink\" title=\"react生命周期\"></a>react生命周期</h2><ul>\n<li><strong>componentWillMount</strong>：在渲染前调用，客户端服务端都会调用</li>\n<li><strong>componentDidMount</strong>：第一次渲染后调用，只在客户端</li>\n<li><strong>componentWillReceiveProps</strong>： 接收新的props被调用，初始化时不会被调用</li>\n<li><strong>shouldComponentUpdate</strong>： 组件更新(props,state)时调用；返回布尔值，T为允许更新组件，F为不更新组件</li>\n<li><strong>componentWillUpdate</strong>： 组件更新(props,state)前渲染前被调用，初始化时不会调用</li>\n<li><strong>componentDidUpdate</strong>：组件完成更新后调用。初始化时不会被调用</li>\n<li><strong>componentWillUnmount</strong>： 组件要销毁前调用</li>\n</ul>\n<h2 id=\"vue生命周期父子组件执行顺序\"><a href=\"#vue生命周期父子组件执行顺序\" class=\"headerlink\" title=\"vue生命周期父子组件执行顺序\"></a>vue生命周期父子组件执行顺序</h2><ul>\n<li><p>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount-&gt;子mounted-&gt;父mounted</p>\n</li>\n<li><p>子组件更新：父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated</p>\n</li>\n<li><p>父组件更新：父beforeUpdate -&gt; 父updated</p>\n</li>\n<li><p>销毁：父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p>\n</li>\n</ul>\n<p>总结带beofre的生命周期都是<strong>从父到子</strong>调用，带ed的生命周期都是<strong>从子到父</strong></p>\n<h2 id=\"js变量声明提升\"><a href=\"#js变量声明提升\" class=\"headerlink\" title=\"js变量声明提升\"></a>js变量声明提升</h2><p>js中，函数及变量的声明都将被提升到作用域最顶部，且函数的提升比变量优先级高</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li><p><strong>原型链继承</strong>： Cat继承了Animal，缺点：所有Cat实例都会共享原型链，不可以向Animal传参。  </p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>call继承/构造继承</strong>: 解决上面原型链建成俩问题，但是只是Cat实例，不是Animal的实例</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>组合继承</strong>：也就是前面两个方法合并，解决上面两个继承的缺点，唯一的缺点调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了） </p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">;</span> <span class=\"token comment\">//修复构造函数指向</span>\n<span class=\"token comment\">// 优点：</span>\n<span class=\"token comment\">// 既是cat实例，又是Animal实例</span>\n<span class=\"token comment\">// 没有共享原型方法问题，并可以传参数</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p> 同步任务在执行栈，异步任务执行后回调区分微任务和宏任务放入对应的微宏队列中，等同步执行栈执行完毕，会先检查微任务队列，执行完毕后，检查宏任务队列，执行。其中Promise.resolve调用静态方法，会优先于正常的promise的resolve方法  </p>\n<p>异步微任务有哪些：  </p>\n<ul>\n<li>new Promise()</li>\n</ul>\n<p>异步宏任务有哪些：  </p>\n<ul>\n<li>setInterval()</li>\n<li>setTimeout()</li>\n</ul>\n<h2 id=\"前端优化\"><a href=\"#前端优化\" class=\"headerlink\" title=\"前端优化\"></a>前端优化</h2><ul>\n<li>静态资源放在cdn</li>\n<li>首屏加载服务端渲染</li>\n<li>可以升级到http2，可以使用http2 多路复用 多个请求并行，可以打乱顺序，最后重组</li>\n<li>使用字体图标替代图片</li>\n<li>gzip压缩</li>\n<li>uglify plugin优化压缩代码</li>\n<li>图片懒加载</li>\n<li>图片压缩，优先使用webp</li>\n<li>减少重排，多使用类名或者csstext处理样式</li>\n<li>多使用flex局部，性能优，兼容性好</li>\n</ul>\n<h2 id=\"行内元素特点\"><a href=\"#行内元素特点\" class=\"headerlink\" title=\"行内元素特点\"></a>行内元素特点</h2><ul>\n<li>可以设置所有方向<code>margin</code>和<code>padding</code>，但是垂直方向无法更改布局</li>\n<li>设置<code>width</code>和<code>height</code>属性无效</li>\n<li>不会另起一行  </li>\n</ul>\n<h2 id=\"实现instanceof\"><a href=\"#实现instanceof\" class=\"headerlink\" title=\"实现instanceof\"></a>实现instanceof</h2><blockquote>\n<p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。<br><img src=\"/2021/10/22/last/docs/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/interview/bB3Sj9h8nyoOIVs.png\" alt=\"6D190A1F-A82A-4F86-BC85-3AD9F5EA672B.png\"></p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> objProto <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>objProto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objProto <span class=\"token operator\">===</span> ctor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      objProto <span class=\"token operator\">=</span> objProto<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Food</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Meat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Meat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Food</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> meat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Meat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">newInstanceof</span><span class=\"token punctuation\">(</span>meat<span class=\"token punctuation\">,</span> Meat<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">newInstanceof</span><span class=\"token punctuation\">(</span>meat<span class=\"token punctuation\">,</span> Food<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmeat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Meat</span> <span class=\"token comment\">// true</span>\nmeat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Food</span> <span class=\"token comment\">// true</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n\n总的来说就是</span><span class=\"token template-punctuation string\">`</span></span>meat<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Meat<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，由于原型链是一条链，所以循环所有</span><span class=\"token template-punctuation string\">`</span></span>__proto__<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">;\n直到</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">null</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">为止，符合</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token class-name\">Meat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">===</span> meat<span class=\"token punctuation\">.</span>__proto__<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">即返回</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token boolean\">true</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，否则返回</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token boolean\">false</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">。\n\n## http缓存机制\n\n分为两类：**强制缓存** 和 **协商缓存**\n通过查看</span><span class=\"token template-punctuation string\">`</span></span>http header<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">中</span><span class=\"token template-punctuation string\">`</span></span>Cache<span class=\"token operator\">-</span>Control<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">字段，（</span><span class=\"token template-punctuation string\">`</span></span>Cache<span class=\"token operator\">-</span>Control<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">优先</span><span class=\"token template-punctuation string\">`</span></span>Expires<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">）他有以下几种值：   \n\n - private:  客户端可以缓存\n - public: 客户端和代理服务器都可以缓存  \n - max-age=xxx: 缓存将在xxx秒后失效\n - no-cache: 需要使用对比缓存来验证数据\n - no-store: 不缓存  \n \n强缓存：不会向服务器发起请求，直接从缓存中获取资源  \n\n协商缓存：（1 优先 2）    \n\n1.  客户端第一次请求，从http响应头中拿到Etag，是一个资源的唯一标识，随后客户端的每次请求会携带If-None-Match字段到请求头，服务器收到后，和当前资源唯一标识对比，如果不同，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n2. 客户端第一次请求，从http响应头中拿到Last-Modified，是内容最后修改时间，随后客户端的每次请求会携带If-Modified-Since字段到请求头，服务器拿到后，和Last-Modified对比，如果If-Modified-Since 小于 Last-Modified，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n引用网上一张图：\n![632130-20170210141453338-1263276228.png](./img/interview/FvAIM258yHCTQba.png)  \n\n## constructor和super关键字\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">class</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">是</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token constant\">ES6</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">新增的关键字，为了看起来更像</span><span class=\"token template-punctuation string\">`</span></span>java<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">等面向对象语言，实际上是一个语法糖，等同于</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token constant\">ES5</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">的</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">function</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">来创建构造函数。  \n\n - constructor ：</span><span class=\"token template-punctuation string\">`</span></span>constructors<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">是class中默认的一个关键字，会自动调用该方法，</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">class</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">中必须要有</span><span class=\"token template-punctuation string\">`</span></span>constructor<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，如果没有，会被默认添加。当new时，</span><span class=\"token template-punctuation string\">`</span></span>constructor<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">会被执行返回一个this，就是实例。  \n - super ： 当</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">class</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">有继承时，在</span><span class=\"token template-punctuation string\">`</span></span>constructor<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">内部必须执行一遍super()函数，B继承A，</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">super</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">相当于</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，另外super()也指向父亲A的原型对象 [这里](https://juejin.cn/post/6844903638674980872)\n\n## js垃圾回收机制算法  \n> 当内存中的数据不需要时候，js会自动使用垃圾回收算法释放掉      \n\n - **引用计算** : 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。这是最初级的垃圾收集算法。 该算法有个限制：无法处理引用循环，两个对象互相引用的情况下，引用次数至少是1，所以不会被回收掉  \n \n - **标记清除** : 此算法把“对象是否不再需要”简化定义为“对象是否可以获得”。这个算法从根（root）全局对象开始先下查找，找到不可以被获得的对象，然后清除掉  \n  \n## 常见算法种类\n - **二分查找**：也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。  \n \n - **贪心算法**：又名贪婪法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心原则，选取当前状态下最好/最优的选择（局部最有利的选择），贪图眼前局部的利益最大化。\n - **回溯算法**：实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。\n - **分治算法**：分治法是构建基于多项分支递归的一种很重要的算法范式。字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。\n - **动态规划**：动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动态规划往往用于优化递归问题，例如斐波那契数列，如果运用递归的方式来求解会重复计算很多相同的子问题，利用动态规划的思想可以减少计算量。\n\n## 关于promise async/await执行顺序面试题\n - 执行顺序： 同步放入执行栈 => 异步放入任务队列 => 异步区分微宏任务 => 微任务 => 宏任务\n - async/await，await后的语句是同步的，在函数体内，await下的语句会被放入promise回调函数体中，async函数默认返回一个promise对象  \n \n经典面试题：  \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解析：按照从上往下顺序先执行同步代码，前两个函数<code>async1</code>和<code>async2</code>是函数声明，忽略。然后第1个输出的是<code>script start</code>，然后看到<code>setTimeout</code>, 由于它是异步且属于宏任务，放到最后执行。然后看到async1函数被执行了，进入<code>async1</code>函数体，第2个输出的是<code>async1 start</code>, 看到await规则是：await右的语句被同步执行，所以第3个输出的是<code>async2</code>，await下的语句(函数体内)被当作async函数返回一个promsise的回调函数体的语句去处理，且被放入了异步任务队列中，等待中。然后跳出async1函数体，继续执行同步代码，遇到new Promise，第4次输出<code>promise1</code>，看到resolve，就把then中回调，放入任务队列中，然后继续向下执行同步代码，第5次输出的最后的<code>script end</code>。至此同步执行栈空了，开始把任务队列中的上下文拿到执行栈执行，由于队列先进先出，所以第一个被入栈的是async1的回调，也就是第6次输出的是<code>async1 end</code>，然后把第二个队列中的上下文放入执行栈，也就是promise的resolve，所以第7次输出<code>promise2</code>，至此微任务执行完成，现在执行宏任务，也就是timeout，所以第8次输出为<code>setTimeout</code>。  </p>\n<p>结果：  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"迭代器和生成器\"><a href=\"#迭代器和生成器\" class=\"headerlink\" title=\"迭代器和生成器\"></a>迭代器和生成器</h2><p>先来瞅一段代码：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回一个迭代器对象</span>\n        <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 迭代器对象一定有个next()方法</span>\n            <span class=\"token keyword\">let</span> done <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>done <span class=\"token operator\">?</span> items<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> \n                value<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n                done<span class=\"token operator\">:</span> done\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 1, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 2, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 3, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: undefiend, done: true&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这就是迭代器，迭代器是一个特殊对象，可以通过每调用一次next，获取下一项结果。可以用迭代器替代for循环，因为for通过下标获取，多层嵌套比较复杂。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用迭代器模拟for</span>\n<span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>迭代器模拟for的方法看起来太麻烦了，不如for来的方便，这个时候可以用<code>生成器</code>(* 和 yield)来快速生成迭代器。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">yield</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 1, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 2, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 3, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: undefiend, done: true&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过<code>*</code>和<code>yield</code>关键字创建，<code>*</code>来表示这个函数内部是可以用yield返回每次迭代的值，和async、await一样。需要组合使用，<code>yield</code>后面接每次迭代的值。这样就可以外部调用.next()获取下一个值。</p>\n<p>在es6中，数组、Set、Map、字符串集合，都属于可迭代对象，内部都有默认迭代器，可通过<code>object[Symbol.iterator]()</code>访问默认迭代器。  </p>\n<p>es6中也提供了一个通过方法来快速使用迭代器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for(item of 集合迭代器) &#123;...&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>常见的迭代器和得到item的值：    </p>\n<ul>\n<li>object.keys(): key(对象)/下标(数组)</li>\n<li>object.values(): 每项value</li>\n<li>object.entries(): [下标/key, value]</li>\n</ul>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><h4 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h4><p>14年前，前端路由都是用hash的方式实现的，地址长这个样子<strong>url#hash</strong>， 修改<code>hash</code>部分不会重载这个页面，每次hash改变，可以用window的<code>hashchange</code>方法来监听，通过这个方法就可以实现前端路由了</p>\n<h4 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h4><p>在14年，HTML5标准发布，window上新增了两个api：<code>pushState</code>和<code>replaceState</code>，也hash一样，不刷新来实现前端路由，而且少了#更美观了，由于没#，所以刷新时候，默认会从服务器下载对应url资源，这个时候我们需要改下服务器配置，都加载前端index.html文件，来实现前端路由</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 第一个参数是state，用于描述一些特性，会被放入历史栈中，开发者使用</span>\n<span class=\"token comment\">// 第二个参数是title，表示新页面的标题，浏览器都会忽略这个参数</span>\n<span class=\"token comment\">// 第二个参数是url，表示新页面的相对地址</span>\n<span class=\"token comment\">// 跳转</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 和pushState的区别是不会把记录放入历史栈中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><ul>\n<li>都不会重载页面</li>\n<li>都会把历史记录放入栈中</li>\n</ul>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><ul>\n<li>hash只可以#后部分，必须是同源url，history没有限制</li>\n<li>history需要修改服务器配置，来解决刷新空白问题，hash本身就是属于前端的，不需要设置</li>\n</ul>\n<h2 id=\"babel工作原理\"><a href=\"#babel工作原理\" class=\"headerlink\" title=\"babel工作原理\"></a>babel工作原理</h2><blockquote>\n<p>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。简单来说就是一种描述源代码的结构，用于被计算机识别到，并成语言引擎执行</p>\n</blockquote>\n<p>工作原理大致可以理解成，<code>字符串输入</code>=&gt;<code>转换</code>=&gt;<code>输出</code>  </p>\n<ul>\n<li>根据babylon解析器，把js代码按照规范解析成AST语法树</li>\n<li>按照规则(stage-0,1,2,3),修改AST语法树，常见把高级语法，转换成低级语法</li>\n<li>最后通过babel-generator将修改后的AST语法树转换成js代码</li>\n</ul>\n<h2 id=\"js类型检测\"><a href=\"#js类型检测\" class=\"headerlink\" title=\"js类型检测\"></a>js类型检测</h2><ul>\n<li><strong>typeof</strong>: 除了基本数据类型，检测不到具体object类型(数组，对象，时间对象，正则，set，map)</li>\n<li><strong>instanceof</strong>: 例a instanceof Fun原理是检测a是不是Fun的实例，缺点就是被检测的值必须是引用，如下所示</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span>\n<span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span>\n<span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>constructor</strong>: 实例.constructor === 构造器，缺点是constructor属性容易被修改</li>\n<li><strong>Object.prototype.toString.call</strong>: 目前最好用的一个方法，缺点是使用object构造函数的toString方法，此方法可能被修改</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object Array]\"</span>\n<span class=\"token comment\">// 如果修改原型</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"1,2,3\"</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Object的valueOf和toString方法\"><a href=\"#Object的valueOf和toString方法\" class=\"headerlink\" title=\"Object的valueOf和toString方法\"></a>Object的valueOf和toString方法</h2><ul>\n<li><strong>valueOf</strong>: 返回对象的原始值表示</li>\n<li><strong>toString</strong>: 返回对象的字符串表示</li>\n</ul>\n<p>  对象转字符串或者数字的过程：如果专程字符串，会优先调用toString方法，转数字，会优先调用valueOf方法</p>\n<p>  相关面试题：</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// 下面代码a在什么值情况下会输出1</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 解</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"vue-slot插槽\"><a href=\"#vue-slot插槽\" class=\"headerlink\" title=\"vue slot插槽\"></a>vue slot插槽</h2><ul>\n<li><p>匿名插插: 子组件包裹的内容会被显示到<code>slot</code>标签中中</p>\n</li>\n<li><p>具名插插：感觉名字多次显示，可复用</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div slot<span class=\"token operator\">=</span><span class=\"token string\">\"down\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>的内容\n会被显示到<span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"down\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span>里\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>数据插槽：</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token comment\">// 父亲中</span>\n <span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>slot<span class=\"token operator\">:</span>data<span class=\"token operator\">=</span><span class=\"token string\">\"&#123;data&#125;\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token comment\">// 组件中就可以用data了</span>\n<span class=\"token operator\">&lt;</span>myslot v<span class=\"token operator\">-</span>slot<span class=\"token operator\">=</span><span class=\"token string\">\"data\"</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> slotProps<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>firstName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>myslot<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>vue mixin是针对组件间功能共享来做的。可以对组件的任意部分进行mixin，也就是说不同的组件，想使用同一个数组，或者方法，那么mixin就是来做这个事的，把公共部分提取出来作为mixin</p>\n<p>声明：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">const</span> toggle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        isshowing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">toggleShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isshowing <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isshowing\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 使用，toggle的方法会自动合并到当前组件中</span>\nmixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"vuex使用\"><a href=\"#vuex使用\" class=\"headerlink\" title=\"vuex使用\"></a>vuex使用</h2><p>核心概念：  </p>\n<ul>\n<li>state：数据</li>\n<li>getter：类似计算属性，用来获取state</li>\n<li>mutation： 同步方法，用于修改state</li>\n<li>action： 异步方法，最后调用mutation修改state  </li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  getter<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">doneTodos</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 可以包含异步操作</span>\n      <span class=\"token comment\">// context 是一个与 store 实例具有相同方法和属性的 context 对象</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 使用</span>\n<span class=\"token comment\">// 调用mutation</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 调用actions</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 利用mapGetters mapGetters mapMutations mapActions便捷使用</span>\ncomputed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count 等同于 state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount\n\t    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount\n\t    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\nmethods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  \t  add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add()` 映射为`this.$store.commit('increment')`</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\n  <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n     add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"事件委托与冒泡和捕获\"><a href=\"#事件委托与冒泡和捕获\" class=\"headerlink\" title=\"事件委托与冒泡和捕获\"></a>事件委托与冒泡和捕获</h2><blockquote>\n<p>什么是事件委托：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 </p>\n<p>什么是冒泡和捕获：其实都是事件传播路径。冒泡：从外到事件源进行事件传播；捕获：从内向事件源进行事件传播；</p>\n</blockquote>\n<p>DOM标准事件流的触发的先后顺序为：先捕获再冒泡。即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。<br><code>addEventListener</code>事件监听方法的第三个参数默认值是<code>false</code>，表示冒泡阶段调用，<code>true</code>为捕获阶段调用</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>append<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n      li<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'5'</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// li 新增的li也是可以被点击的</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>addeventListener和onclick不同点：</p>\n<ul>\n<li>addeventListener可以给一个事件注册多个listener</li>\n<li>addEventListener可以控制时间传播行为（捕获/冒泡，使用removeEventListener来解决</li>\n<li></li>\n</ul>\n<h2 id=\"ES6-proxy和reflect\"><a href=\"#ES6-proxy和reflect\" class=\"headerlink\" title=\"ES6 proxy和reflect\"></a>ES6 proxy和reflect</h2><h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h3><blockquote>\n<p>对目标读取、函数调用等操作进行拦截，然后操作处理。它不直接操作对象，而是像代理模式。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">24</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getting '</span><span class=\"token operator\">+</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不是target.key</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setting '</span><span class=\"token operator\">+</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// target为目标对象，handler为代理处理</span>\n<span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h3><blockquote>\n<p>优化了object内部操作，修改一些函数的返回值，如Object.defineProperty，Reflect与Proxy是一一对应的对象，是Proxy的方法也是Reflect的方法，Proxy修改的过的方法可以在Reflect获取默认值。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> attributes <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。</span>\n<span class=\"token string\">'assign'</span> <span class=\"token keyword\">in</span> Object <span class=\"token comment\">// true</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">,</span> <span class=\"token string\">'assign'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"cookie的几种属性和作用\"><a href=\"#cookie的几种属性和作用\" class=\"headerlink\" title=\"cookie的几种属性和作用\"></a>cookie的几种属性和作用</h2><ul>\n<li><code>name</code>: 名字</li>\n<li><code>value</code>: 值</li>\n<li><code>domain</code>: 可以访问此cookie的域名</li>\n<li><code>path</code>: 可以访问此cookie的路径</li>\n<li><code>sameSite</code>: 跨站点携带cookie设置<ul>\n<li>None：不限制； </li>\n<li>Lax：默认值，介于None和Strict之间，会合理判断携带cookie时机，如链接a会携带cookie；</li>\n<li>Strict：完全禁止跨站点传送cookie；</li>\n</ul>\n</li>\n<li><code>httponly</code>: 值为true则仅在http请求中会传递cookie，不可用document.cookie等操作获取</li>\n<li><code>secure</code>: 是否只能使用https传递此cookie</li>\n<li><code>expires</code>: 过期时间；值是时间意思是到这个时间，cookie失效，否则是session，即退出浏览器后自动失效</li>\n</ul>\n<h2 id=\"重排和重绘\"><a href=\"#重排和重绘\" class=\"headerlink\" title=\"重排和重绘\"></a>重排和重绘</h2><p>网页加载过程大致分为5步：  </p>\n<ol>\n<li>HTML代码转化成DOM  </li>\n<li>CSS代码转化成CSSOM</li>\n<li>结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）</li>\n<li>生成布局（layout），即将所有渲染树的所有节点进行平面合成</li>\n<li>将布局绘制（paint）在屏幕上  </li>\n</ol>\n<p>其中第4步为排列布局，重排指的就是第4步重做；第5步是绘制，那重绘指的就是第5步重做。按照网页加载顺序，第4步之后执行第5步，所以重排必将触发重绘，而重绘不一定会触发重排。</p>\n<p><strong>重绘</strong>：修改元素字体颜色，背景颜色，阴影效果等<br><strong>重排</strong>：位置发生改变，如<code>margin</code> <code>padding</code> <code>width</code>。 <code>删除增加dom</code> <code>调用offsetHeight</code>等读取实时量值时</p>\n<p>由于重排性能消耗大，那么减少重排次数也就成了一个优化页面的方法，下面总结几个常用方法：  </p>\n<ol>\n<li>不要一条一条修改css，尽量通过class修改，或者csstext  </li>\n<li>先display: none; 再修改样式，然后再display: block;</li>\n<li>一个元素大量修改css，可以设置为position: fixed | absolute, 这样重排消耗少，因为不用考虑其他元素位置  </li>\n<li>react vue虚拟dom</li>\n</ol>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 冷门深拷贝利用MessageChannel</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span> port1<span class=\"token punctuation\">,</span> port2 <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    port1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    port2<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 利用weakmap解决了循环引用报错问题，完全版</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deepClone1</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_target <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> _target <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> _target\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'进入map判断'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'map set'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n  map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> _target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'循环'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> _target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'是对象'</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone1</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不是对象'</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数防抖和节流\"><a href=\"#函数防抖和节流\" class=\"headerlink\" title=\"函数防抖和节流\"></a>函数防抖和节流</h2><ul>\n<li><strong>防抖</strong>：    </li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 利用clearTimeout的特性，处理delay内，再此触发函数不做处理</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">event</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">    \n\n - **节流**：  \n  \n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>            \n　　<span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n　　<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// ...args用来接受fun原有的参数，比如事件就是event对象                        </span>\n　　　　<span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n　　　　<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> prev <span class=\"token operator\">>=</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    \n　　　　　　<span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n　　　　　　prev <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                    \n　　　　<span class=\"token punctuation\">&#125;</span>            \n　　<span class=\"token punctuation\">&#125;</span>        \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n[查看详解](http://cd98.xyz/d/2020/10/20/debounce-and-throttle)\n\n## 实现换肤功能\n - 设置多种颜色类名，通过替换body元素类名实现\n - http请求动态加载.css问题\n - scss换肤 待补充 \n\n## https证书作用 \n - 证书中存在一个公钥，一个私钥，私钥保密存在服务器不公开\n - 用户通过浏览器向服务器443端口连接，服务端收到请求，发给客户端一个带有公钥的证书\n - 客户端收到证书，先验证合法性（是否在有效期内、证书的域名与请求的域名是否匹配，通过继续，不通过提示警告\n - 客户端再生成一个随机key，通过公钥加密，发给服务端\n - 服务端收到随机key密文，用私钥解密，拿到客户端的随机key，通过随机key对内容进行对称加密，发给客户端\n - 客户端收到密文，用随机key解密，完成\n\n## bfc\n\n> 全称「块格式化上下文」(Block Formatting Context), 是一块独立的css作用域，外部如何变化都影响不到他。  \n\n##### 怎么触发：  \n  \n - 根元素body  \n - float： right | left\n - position： absolute | fixed\n - display：inline-block | tabel-cells | flex\n - overflow： hidden | auto | scroll\n \n##### 效果\n - 清除浮动，常用overflow hidde\n - 垂直方向margin会重叠\n\n## 数组方法\n#### 改变原数组：  \n\n - splice: array.splice(index,howmany,item1,.....,itemX) 删除/添加\n - sort: 排序\n - unshift: 首加 shift: 首删;  pop: 尾删; push: 尾加\n - reverse: 倒序排列\n - fill: 数组填充 \n \n \n </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n array<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> startIndex <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> endIndex <span class=\"token operator\">|</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  \n <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> \n <span class=\"token comment\">// [1, \"a\", \"a\", 4, 5]</span>\n <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n \n#### 不改变原数组，生成新数组\n \n - slice: 浅拷贝 array.slice(startIdx, endIdx)\n - join: 转字符串并分割\n - toLocaleString: 转换成字符串数组\n - concat: 连接数组 可用...替代\n - indexOf: 检查下标\n - includes: 是否包含。可替代indexOf，indexOf === -1不够语义化\n\n#### 循环方法\n  - forEach、map、filter\n  - every、some、reduce、reduceRight(和reduce区别是相反方向)\n   \n   \n   \n## 字符串方法\n\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//e 返回指定下标的字符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">charcodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//101 返回指定下标字符的字符编码</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello world123 连接字符串，生成新的</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，参数为下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，参数为下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// he 截取字符串，第一个参数是起始下标，第二个参数为截取数量</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 查子字符下标，第一个参数是字符，第二个参数是起始下标</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 查子字符下标，第一个参数是字符，第二个参数是结尾下标(和indexof区别)</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello world 转小写</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// HELLO WORLD 转大写</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 删除前后空格</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"h\", \"llo world\"] 转数组，参数为分割符</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hella world 替换字符，第一个参数可以是正则</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hello</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"hello\"] 匹配字符串返回一个数组，参数常是正则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"http1-1长连接-amp-http2多路复用区别：\"><a href=\"#http1-1长连接-amp-http2多路复用区别：\" class=\"headerlink\" title=\"http1.1长连接 &amp; http2多路复用区别：\"></a>http1.1长连接 &amp; http2多路复用区别：</h2><p><strong>http1.1长连接</strong>：<strong>同一个域名访问同一个文件的多个请求</strong>都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接，但不是并行，只能按顺序执行。</p>\n<p><strong>http2多路复用</strong>：<strong>同一个域名访问多个文件的多个请求</strong>也可以复用一个tcp连接，且多个请求可以被并行处理。  </p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><p>页面中一些大资源加载较慢，比如iframe，img。针对这个问题可以通过懒加载解决。    </p>\n<p>拿<code>img</code>举例，先设置<code>img</code>的<code>src</code>属性为一个默认的资源，然后把真实<code>url</code>放在标签的某个属性中。并设置好图片的宽高，避免完成加载时出现页面闪动问题。  </p>\n<p>然后实时监听页面滚动，如果当前图片是可见状态，那么把图片的真实url属性值取出替换到默认<code>src</code>上来实现加载图片资源，从而提升页面打开速度和合理使用客户端流量。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 获取浏览设备的网页可视高度</span>\n<span class=\"token keyword\">let</span> clientHeight <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 获取已被滚出的页面高度</span>\n<span class=\"token keyword\">let</span> scrollTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 图片顶部到网页顶部的高度</span>\n<span class=\"token keyword\">let</span> imgOffsetTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 判断img在可视区域内：</span>\nimgOffsetTop <span class=\"token operator\">&lt;</span> clientHeight <span class=\"token operator\">+</span> scrollTop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"vue组件通信\"><a href=\"#vue组件通信\" class=\"headerlink\" title=\"vue组件通信\"></a>vue组件通信</h2><ul>\n<li>props 和 $emit</li>\n<li>provide inject：在组件a声明，在a下面所有子组件通过inject调用，通过参数传递</li>\n<li>event bus： new出一个vue，通过emit和on来派发和监控</li>\n<li>vuex 全局状态管理</li>\n<li>this.$children 和 this.$parent 层级较深不推荐，provid可以替代此方法</li>\n</ul>\n<h2 id=\"输入url到页面展示经历了什么\"><a href=\"#输入url到页面展示经历了什么\" class=\"headerlink\" title=\"输入url到页面展示经历了什么\"></a>输入url到页面展示经历了什么</h2><ul>\n<li><strong>dns解析</strong>：按照这个步骤查询，找到ip，立即中断返回给客户端（浏览器缓存 =&gt; 操作系统缓存(host) =&gt; 路由器缓存 =&gt; 本地服务器缓存 =&gt; isp dnf服务器查询 =&gt; 根dns服务器）</li>\n<li><strong>tcp三次握手</strong></li>\n<li><strong>发送http请求报文</strong>：报文包括：请求行，请求头，请求体</li>\n<li><strong>服务端接收到请求</strong>： 进入web服务器，如apache、nginx，然后进入后台程序</li>\n<li><strong>服务器响应报文</strong>：报文包括：响应行，响应头，响应体</li>\n<li><strong>浏览器渲染页面</strong><ol>\n<li>根据html得到dom树</li>\n<li>根据css得到css树</li>\n<li>根据dom树和css树，生成渲染树</li>\n<li>根据渲染树计算每一个节点的信息</li>\n<li>根据计算好的信息绘制页面</li>\n</ol>\n</li>\n<li><strong>数据传送完成，四次挥手关闭</strong>： </li>\n</ul>\n<h2 id=\"commonjs模块和es6模块有什么区别\"><a href=\"#commonjs模块和es6模块有什么区别\" class=\"headerlink\" title=\"commonjs模块和es6模块有什么区别\"></a>commonjs模块和es6模块有什么区别</h2><p>commonjs:  </p>\n<ul>\n<li>对于基本数据类型，是值的拷贝</li>\n<li>对于复杂数据类型，是浅拷贝，也就是修改一个模块的值，引用他的值也会发生改变</li>\n<li>第一次加载模块会缓存，往后再加载会读取缓存的数据</li>\n</ul>\n<p>es6：</p>\n<ul>\n<li>所有数据都是只读引用，当遇到import语句时，会生成一个只读引用，等到文件中真的使用到模块中的值时，根据只读引用，到加载中的模块取值</li>\n<li>不允许修改模块中的数据，并且是动态的，比如模块中的值发生改变，引入得到的值也会改变。</li>\n</ul>\n<h2 id=\"几种跨域\"><a href=\"#几种跨域\" class=\"headerlink\" title=\"几种跨域\"></a>几种跨域</h2><ul>\n<li><strong>jsonp</strong>： 利用script标签跨域，本质是加载一个外部js</li>\n<li><strong>cors</strong>：全程跨域资源共享，服务端操作，把请求头的<code>origin</code>的值取出，响应头会增加<code>Access-Control-Allow-Origin</code> key并把值设置为<code>origin</code>取出的值也可以是通配符，浏览器就不会拦截响应了，从而解决跨域问题</li>\n<li><strong>postMassage</strong>：利用可访问服务资源的<code>iframe</code>，和当前页面互相通信，传递消息，来实现跨域，<code>postMassage</code>本质是两个页面的消息传递方法。   <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 页面1(可以获取后端数据的)传递数据，第二个参数是url匹配规则，可以是通配符</span>\nwindow<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// 页面2(不能接收后端数据的)，接收页面1的数据</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><strong>服务器中转</strong>： 由于服务端没跨域，服务端代替客户端请求目标接口，并把响应数据返回给客户端</li>\n</ul>\n<h2 id=\"react生命周期\"><a href=\"#react生命周期\" class=\"headerlink\" title=\"react生命周期\"></a>react生命周期</h2><ul>\n<li><strong>componentWillMount</strong>：在渲染前调用，客户端服务端都会调用</li>\n<li><strong>componentDidMount</strong>：第一次渲染后调用，只在客户端</li>\n<li><strong>componentWillReceiveProps</strong>： 接收新的props被调用，初始化时不会被调用</li>\n<li><strong>shouldComponentUpdate</strong>： 组件更新(props,state)时调用；返回布尔值，T为允许更新组件，F为不更新组件</li>\n<li><strong>componentWillUpdate</strong>： 组件更新(props,state)前渲染前被调用，初始化时不会调用</li>\n<li><strong>componentDidUpdate</strong>：组件完成更新后调用。初始化时不会被调用</li>\n<li><strong>componentWillUnmount</strong>： 组件要销毁前调用</li>\n</ul>\n<h2 id=\"vue生命周期父子组件执行顺序\"><a href=\"#vue生命周期父子组件执行顺序\" class=\"headerlink\" title=\"vue生命周期父子组件执行顺序\"></a>vue生命周期父子组件执行顺序</h2><ul>\n<li><p>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount-&gt;子mounted-&gt;父mounted</p>\n</li>\n<li><p>子组件更新：父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated</p>\n</li>\n<li><p>父组件更新：父beforeUpdate -&gt; 父updated</p>\n</li>\n<li><p>销毁：父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p>\n</li>\n</ul>\n<p>总结带beofre的生命周期都是<strong>从父到子</strong>调用，带ed的生命周期都是<strong>从子到父</strong></p>\n<h2 id=\"js变量声明提升\"><a href=\"#js变量声明提升\" class=\"headerlink\" title=\"js变量声明提升\"></a>js变量声明提升</h2><p>js中，函数及变量的声明都将被提升到作用域最顶部，且函数的提升比变量优先级高</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li><p><strong>原型链继承</strong>： Cat继承了Animal，缺点：所有Cat实例都会共享原型链，不可以向Animal传参。  </p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>call继承/构造继承</strong>: 解决上面原型链建成俩问题，但是只是Cat实例，不是Animal的实例</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p><strong>组合继承</strong>：也就是前面两个方法合并，解决上面两个继承的缺点，唯一的缺点调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了） </p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Animal</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">;</span> <span class=\"token comment\">//修复构造函数指向</span>\n<span class=\"token comment\">// 优点：</span>\n<span class=\"token comment\">// 既是cat实例，又是Animal实例</span>\n<span class=\"token comment\">// 没有共享原型方法问题，并可以传参数</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p> 同步任务在执行栈，异步任务执行后回调区分微任务和宏任务放入对应的微宏队列中，等同步执行栈执行完毕，会先检查微任务队列，执行完毕后，检查宏任务队列，执行。其中Promise.resolve调用静态方法，会优先于正常的promise的resolve方法  </p>\n<p>异步微任务有哪些：  </p>\n<ul>\n<li>new Promise()</li>\n</ul>\n<p>异步宏任务有哪些：  </p>\n<ul>\n<li>setInterval()</li>\n<li>setTimeout()</li>\n</ul>\n<h2 id=\"前端优化\"><a href=\"#前端优化\" class=\"headerlink\" title=\"前端优化\"></a>前端优化</h2><ul>\n<li>静态资源放在cdn</li>\n<li>首屏加载服务端渲染</li>\n<li>可以升级到http2，可以使用http2 多路复用 多个请求并行，可以打乱顺序，最后重组</li>\n<li>使用字体图标替代图片</li>\n<li>gzip压缩</li>\n<li>uglify plugin优化压缩代码</li>\n<li>图片懒加载</li>\n<li>图片压缩，优先使用webp</li>\n<li>减少重排，多使用类名或者csstext处理样式</li>\n<li>多使用flex局部，性能优，兼容性好</li>\n</ul>\n<h2 id=\"行内元素特点\"><a href=\"#行内元素特点\" class=\"headerlink\" title=\"行内元素特点\"></a>行内元素特点</h2><ul>\n<li>可以设置所有方向<code>margin</code>和<code>padding</code>，但是垂直方向无法更改布局</li>\n<li>设置<code>width</code>和<code>height</code>属性无效</li>\n<li>不会另起一行  </li>\n</ul>\n<h2 id=\"实现instanceof\"><a href=\"#实现instanceof\" class=\"headerlink\" title=\"实现instanceof\"></a>实现instanceof</h2><blockquote>\n<p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。<br><img src=\"/2021/10/22/last/docs/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/interview/bB3Sj9h8nyoOIVs.png\" alt=\"6D190A1F-A82A-4F86-BC85-3AD9F5EA672B.png\"></p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> objProto <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>objProto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objProto <span class=\"token operator\">===</span> ctor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      objProto <span class=\"token operator\">=</span> objProto<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Food</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Meat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Meat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Food</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> meat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Meat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">newInstanceof</span><span class=\"token punctuation\">(</span>meat<span class=\"token punctuation\">,</span> Meat<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">newInstanceof</span><span class=\"token punctuation\">(</span>meat<span class=\"token punctuation\">,</span> Food<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nmeat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Meat</span> <span class=\"token comment\">// true</span>\nmeat <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Food</span> <span class=\"token comment\">// true</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">  \n\n总的来说就是</span><span class=\"token template-punctuation string\">`</span></span>meat<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Meat<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，由于原型链是一条链，所以循环所有</span><span class=\"token template-punctuation string\">`</span></span>__proto__<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">;\n直到</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">null</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">为止，符合</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token class-name\">Meat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">===</span> meat<span class=\"token punctuation\">.</span>__proto__<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">即返回</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token boolean\">true</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，否则返回</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token boolean\">false</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">。\n\n## http缓存机制\n\n分为两类：**强制缓存** 和 **协商缓存**\n通过查看</span><span class=\"token template-punctuation string\">`</span></span>http header<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">中</span><span class=\"token template-punctuation string\">`</span></span>Cache<span class=\"token operator\">-</span>Control<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">字段，（</span><span class=\"token template-punctuation string\">`</span></span>Cache<span class=\"token operator\">-</span>Control<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">优先</span><span class=\"token template-punctuation string\">`</span></span>Expires<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">）他有以下几种值：   \n\n - private:  客户端可以缓存\n - public: 客户端和代理服务器都可以缓存  \n - max-age=xxx: 缓存将在xxx秒后失效\n - no-cache: 需要使用对比缓存来验证数据\n - no-store: 不缓存  \n \n强缓存：不会向服务器发起请求，直接从缓存中获取资源  \n\n协商缓存：（1 优先 2）    \n\n1.  客户端第一次请求，从http响应头中拿到Etag，是一个资源的唯一标识，随后客户端的每次请求会携带If-None-Match字段到请求头，服务器收到后，和当前资源唯一标识对比，如果不同，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n2. 客户端第一次请求，从http响应头中拿到Last-Modified，是内容最后修改时间，随后客户端的每次请求会携带If-Modified-Since字段到请求头，服务器拿到后，和Last-Modified对比，如果If-Modified-Since 小于 Last-Modified，则说明有内容有更新了，则发送最新的数据，否则告诉客户端使用缓存。\n\n引用网上一张图：\n![632130-20170210141453338-1263276228.png](./img/interview/FvAIM258yHCTQba.png)  \n\n## constructor和super关键字\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">class</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">是</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token constant\">ES6</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">新增的关键字，为了看起来更像</span><span class=\"token template-punctuation string\">`</span></span>java<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">等面向对象语言，实际上是一个语法糖，等同于</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token constant\">ES5</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">的</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">function</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">来创建构造函数。  \n\n - constructor ：</span><span class=\"token template-punctuation string\">`</span></span>constructors<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">是class中默认的一个关键字，会自动调用该方法，</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">class</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">中必须要有</span><span class=\"token template-punctuation string\">`</span></span>constructor<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，如果没有，会被默认添加。当new时，</span><span class=\"token template-punctuation string\">`</span></span>constructor<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">会被执行返回一个this，就是实例。  \n - super ： 当</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">class</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">有继承时，在</span><span class=\"token template-punctuation string\">`</span></span>constructor<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">内部必须执行一遍super()函数，B继承A，</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">super</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">相当于</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">，另外super()也指向父亲A的原型对象 [这里](https://juejin.cn/post/6844903638674980872)\n\n## js垃圾回收机制算法  \n> 当内存中的数据不需要时候，js会自动使用垃圾回收算法释放掉      \n\n - **引用计算** : 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。这是最初级的垃圾收集算法。 该算法有个限制：无法处理引用循环，两个对象互相引用的情况下，引用次数至少是1，所以不会被回收掉  \n \n - **标记清除** : 此算法把“对象是否不再需要”简化定义为“对象是否可以获得”。这个算法从根（root）全局对象开始先下查找，找到不可以被获得的对象，然后清除掉  \n  \n## 常见算法种类\n - **二分查找**：也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。  \n \n - **贪心算法**：又名贪婪法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心原则，选取当前状态下最好/最优的选择（局部最有利的选择），贪图眼前局部的利益最大化。\n - **回溯算法**：实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。\n - **分治算法**：分治法是构建基于多项分支递归的一种很重要的算法范式。字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。\n - **动态规划**：动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动态规划往往用于优化递归问题，例如斐波那契数列，如果运用递归的方式来求解会重复计算很多相同的子问题，利用动态规划的思想可以减少计算量。\n\n## 关于promise async/await执行顺序面试题\n - 执行顺序： 同步放入执行栈 => 异步放入任务队列 => 异步区分微宏任务 => 微任务 => 宏任务\n - async/await，await后的语句是同步的，在函数体内，await下的语句会被放入promise回调函数体中，async函数默认返回一个promise对象  \n \n经典面试题：  \n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解析：按照从上往下顺序先执行同步代码，前两个函数<code>async1</code>和<code>async2</code>是函数声明，忽略。然后第1个输出的是<code>script start</code>，然后看到<code>setTimeout</code>, 由于它是异步且属于宏任务，放到最后执行。然后看到async1函数被执行了，进入<code>async1</code>函数体，第2个输出的是<code>async1 start</code>, 看到await规则是：await右的语句被同步执行，所以第3个输出的是<code>async2</code>，await下的语句(函数体内)被当作async函数返回一个promsise的回调函数体的语句去处理，且被放入了异步任务队列中，等待中。然后跳出async1函数体，继续执行同步代码，遇到new Promise，第4次输出<code>promise1</code>，看到resolve，就把then中回调，放入任务队列中，然后继续向下执行同步代码，第5次输出的最后的<code>script end</code>。至此同步执行栈空了，开始把任务队列中的上下文拿到执行栈执行，由于队列先进先出，所以第一个被入栈的是async1的回调，也就是第6次输出的是<code>async1 end</code>，然后把第二个队列中的上下文放入执行栈，也就是promise的resolve，所以第7次输出<code>promise2</code>，至此微任务执行完成，现在执行宏任务，也就是timeout，所以第8次输出为<code>setTimeout</code>。  </p>\n<p>结果：  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"迭代器和生成器\"><a href=\"#迭代器和生成器\" class=\"headerlink\" title=\"迭代器和生成器\"></a>迭代器和生成器</h2><p>先来瞅一段代码：  </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 返回一个迭代器对象</span>\n        <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 迭代器对象一定有个next()方法</span>\n            <span class=\"token keyword\">let</span> done <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>done <span class=\"token operator\">?</span> items<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> \n                value<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n                done<span class=\"token operator\">:</span> done\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 1, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 2, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 3, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: undefiend, done: true&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这就是迭代器，迭代器是一个特殊对象，可以通过每调用一次next，获取下一项结果。可以用迭代器替代for循环，因为for通过下标获取，多层嵌套比较复杂。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用迭代器模拟for</span>\n<span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>迭代器模拟for的方法看起来太麻烦了，不如for来的方便，这个时候可以用<code>生成器</code>(* 和 yield)来快速生成迭代器。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">yield</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 1, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 2, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: 3, done: false&#125;\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"&#123; value: undefiend, done: true&#125;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过<code>*</code>和<code>yield</code>关键字创建，<code>*</code>来表示这个函数内部是可以用yield返回每次迭代的值，和async、await一样。需要组合使用，<code>yield</code>后面接每次迭代的值。这样就可以外部调用.next()获取下一个值。</p>\n<p>在es6中，数组、Set、Map、字符串集合，都属于可迭代对象，内部都有默认迭代器，可通过<code>object[Symbol.iterator]()</code>访问默认迭代器。  </p>\n<p>es6中也提供了一个通过方法来快速使用迭代器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for(item of 集合迭代器) &#123;...&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>常见的迭代器和得到item的值：    </p>\n<ul>\n<li>object.keys(): key(对象)/下标(数组)</li>\n<li>object.values(): 每项value</li>\n<li>object.entries(): [下标/key, value]</li>\n</ul>\n<h2 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h2><h4 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h4><p>14年前，前端路由都是用hash的方式实现的，地址长这个样子<strong>url#hash</strong>， 修改<code>hash</code>部分不会重载这个页面，每次hash改变，可以用window的<code>hashchange</code>方法来监听，通过这个方法就可以实现前端路由了</p>\n<h4 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h4><p>在14年，HTML5标准发布，window上新增了两个api：<code>pushState</code>和<code>replaceState</code>，也hash一样，不刷新来实现前端路由，而且少了#更美观了，由于没#，所以刷新时候，默认会从服务器下载对应url资源，这个时候我们需要改下服务器配置，都加载前端index.html文件，来实现前端路由</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 第一个参数是state，用于描述一些特性，会被放入历史栈中，开发者使用</span>\n<span class=\"token comment\">// 第二个参数是title，表示新页面的标题，浏览器都会忽略这个参数</span>\n<span class=\"token comment\">// 第二个参数是url，表示新页面的相对地址</span>\n<span class=\"token comment\">// 跳转</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 和pushState的区别是不会把记录放入历史栈中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><ul>\n<li>都不会重载页面</li>\n<li>都会把历史记录放入栈中</li>\n</ul>\n<h4 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h4><ul>\n<li>hash只可以#后部分，必须是同源url，history没有限制</li>\n<li>history需要修改服务器配置，来解决刷新空白问题，hash本身就是属于前端的，不需要设置</li>\n</ul>\n<h2 id=\"babel工作原理\"><a href=\"#babel工作原理\" class=\"headerlink\" title=\"babel工作原理\"></a>babel工作原理</h2><blockquote>\n<p>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。简单来说就是一种描述源代码的结构，用于被计算机识别到，并成语言引擎执行</p>\n</blockquote>\n<p>工作原理大致可以理解成，<code>字符串输入</code>=&gt;<code>转换</code>=&gt;<code>输出</code>  </p>\n<ul>\n<li>根据babylon解析器，把js代码按照规范解析成AST语法树</li>\n<li>按照规则(stage-0,1,2,3),修改AST语法树，常见把高级语法，转换成低级语法</li>\n<li>最后通过babel-generator将修改后的AST语法树转换成js代码</li>\n</ul>\n<h2 id=\"js类型检测\"><a href=\"#js类型检测\" class=\"headerlink\" title=\"js类型检测\"></a>js类型检测</h2><ul>\n<li><strong>typeof</strong>: 除了基本数据类型，检测不到具体object类型(数组，对象，时间对象，正则，set，map)</li>\n<li><strong>instanceof</strong>: 例a instanceof Fun原理是检测a是不是Fun的实例，缺点就是被检测的值必须是引用，如下所示</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span>\n<span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span>\n<span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><strong>constructor</strong>: 实例.constructor === 构造器，缺点是constructor属性容易被修改</li>\n<li><strong>Object.prototype.toString.call</strong>: 目前最好用的一个方法，缺点是使用object构造函数的toString方法，此方法可能被修改</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"[object Array]\"</span>\n<span class=\"token comment\">// 如果修改原型</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"1,2,3\"</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Object的valueOf和toString方法\"><a href=\"#Object的valueOf和toString方法\" class=\"headerlink\" title=\"Object的valueOf和toString方法\"></a>Object的valueOf和toString方法</h2><ul>\n<li><strong>valueOf</strong>: 返回对象的原始值表示</li>\n<li><strong>toString</strong>: 返回对象的字符串表示</li>\n</ul>\n<p>  对象转字符串或者数字的过程：如果专程字符串，会优先调用toString方法，转数字，会优先调用valueOf方法</p>\n<p>  相关面试题：</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// 下面代码a在什么值情况下会输出1</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 解</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    n <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"vue-slot插槽\"><a href=\"#vue-slot插槽\" class=\"headerlink\" title=\"vue slot插槽\"></a>vue slot插槽</h2><ul>\n<li><p>匿名插插: 子组件包裹的内容会被显示到<code>slot</code>标签中中</p>\n</li>\n<li><p>具名插插：感觉名字多次显示，可复用</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div slot<span class=\"token operator\">=</span><span class=\"token string\">\"down\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>的内容\n会被显示到<span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"down\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span>里\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>数据插槽：</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token comment\">// 父亲中</span>\n <span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span>slot<span class=\"token operator\">:</span>data<span class=\"token operator\">=</span><span class=\"token string\">\"&#123;data&#125;\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token comment\">// 组件中就可以用data了</span>\n<span class=\"token operator\">&lt;</span>myslot v<span class=\"token operator\">-</span>slot<span class=\"token operator\">=</span><span class=\"token string\">\"data\"</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> slotProps<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>firstName <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>myslot<span class=\"token operator\">></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h2><p>vue mixin是针对组件间功能共享来做的。可以对组件的任意部分进行mixin，也就是说不同的组件，想使用同一个数组，或者方法，那么mixin就是来做这个事的，把公共部分提取出来作为mixin</p>\n<p>声明：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">const</span> toggle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        isshowing<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">toggleShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isshowing <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isshowing\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 使用，toggle的方法会自动合并到当前组件中</span>\nmixins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"vuex使用\"><a href=\"#vuex使用\" class=\"headerlink\" title=\"vuex使用\"></a>vuex使用</h2><p>核心概念：  </p>\n<ul>\n<li>state：数据</li>\n<li>getter：类似计算属性，用来获取state</li>\n<li>mutation： 同步方法，用于修改state</li>\n<li>action： 异步方法，最后调用mutation修改state  </li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 声明</span>\n<span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  getter<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">doneTodos</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> getters</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 可以包含异步操作</span>\n      <span class=\"token comment\">// context 是一个与 store 实例具有相同方法和属性的 context 对象</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 使用</span>\n<span class=\"token comment\">// 调用mutation</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 调用actions</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 利用mapGetters mapGetters mapMutations mapActions便捷使用</span>\ncomputed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count 等同于 state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount\n\t    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount\n\t    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\nmethods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  \t  add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add()` 映射为`this.$store.commit('increment')`</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\n  <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n     add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"事件委托与冒泡和捕获\"><a href=\"#事件委托与冒泡和捕获\" class=\"headerlink\" title=\"事件委托与冒泡和捕获\"></a>事件委托与冒泡和捕获</h2><blockquote>\n<p>什么是事件委托：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。 </p>\n<p>什么是冒泡和捕获：其实都是事件传播路径。冒泡：从外到事件源进行事件传播；捕获：从内向事件源进行事件传播；</p>\n</blockquote>\n<p>DOM标准事件流的触发的先后顺序为：先捕获再冒泡。即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。<br><code>addEventListener</code>事件监听方法的第三个参数默认值是<code>false</code>，表示冒泡阶段调用，<code>true</code>为捕获阶段调用</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>append<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n      li<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'5'</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// li 新增的li也是可以被点击的</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>addeventListener和onclick不同点：</p>\n<ul>\n<li>addeventListener可以给一个事件注册多个listener</li>\n<li>addEventListener可以控制时间传播行为（捕获/冒泡，使用removeEventListener来解决</li>\n<li></li>\n</ul>\n<h2 id=\"ES6-proxy和reflect\"><a href=\"#ES6-proxy和reflect\" class=\"headerlink\" title=\"ES6 proxy和reflect\"></a>ES6 proxy和reflect</h2><h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h3><blockquote>\n<p>对目标读取、函数调用等操作进行拦截，然后操作处理。它不直接操作对象，而是像代理模式。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">24</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getting '</span><span class=\"token operator\">+</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不是target.key</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setting '</span><span class=\"token operator\">+</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// target为目标对象，handler为代理处理</span>\n<span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h3><blockquote>\n<p>优化了object内部操作，修改一些函数的返回值，如Object.defineProperty，Reflect与Proxy是一一对应的对象，是Proxy的方法也是Reflect的方法，Proxy修改的过的方法可以在Reflect获取默认值。</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> attributes <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。</span>\n<span class=\"token string\">'assign'</span> <span class=\"token keyword\">in</span> Object <span class=\"token comment\">// true</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">,</span> <span class=\"token string\">'assign'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"_content":"(window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[]).push([[\"chunk-vendors\"],{\"00ee\":function(t,e,n){var r=n(\"b622\"),o=r(\"toStringTag\"),i={};i[o]=\"z\",t.exports=\"[object z]\"===String(i)},\"0366\":function(t,e,n){var r=n(\"1c0b\");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},\"06cf\":function(t,e,n){var r=n(\"83ab\"),o=n(\"d1e7\"),i=n(\"5c6c\"),a=n(\"fc6a\"),s=n(\"c04e\"),c=n(\"5135\"),u=n(\"0cfb\"),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=a(t),e=s(e,!0),u)try{return f(t,e)}catch(n){}if(c(t,e))return i(!o.f.call(t,e),t[e])}},\"0cfb\":function(t,e,n){var r=n(\"83ab\"),o=n(\"d039\"),i=n(\"cc12\");t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i(\"div\"),\"a\",{get:function(){return 7}}).a}))},\"19aa\":function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError(\"Incorrect \"+(n?n+\" \":\"\")+\"invocation\");return t}},\"1be4\":function(t,e,n){var r=n(\"d066\");t.exports=r(\"document\",\"documentElement\")},\"1c0b\":function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(String(t)+\" is not a function\");return t}},\"1c7e\":function(t,e,n){var r=n(\"b622\"),o=r(\"iterator\"),i=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){i=!0}};s[o]=function(){return this},Array.from(s,(function(){throw 2}))}catch(c){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var r={};r[o]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(c){}return n}},\"1cdc\":function(t,e,n){var r=n(\"342f\");t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},\"1d80\":function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on \"+t);return t}},\"1dde\":function(t,e,n){var r=n(\"d039\"),o=n(\"b622\"),i=n(\"2d00\"),a=o(\"species\");t.exports=function(t){return i>=51||!r((function(){var e=[],n=e.constructor={};return n[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2266:function(t,e,n){var r=n(\"825a\"),o=n(\"e95a\"),i=n(\"50c4\"),a=n(\"0366\"),s=n(\"35a1\"),c=n(\"2a62\"),u=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var f,l,p,d,v,h,y,m=n&&n.that,g=!(!n||!n.AS_ENTRIES),b=!(!n||!n.IS_ITERATOR),_=!(!n||!n.INTERRUPTED),w=a(e,m,1+g+_),x=function(t){return f&&c(f),new u(!0,t)},O=function(t){return g?(r(t),_?w(t[0],t[1],x):w(t[0],t[1])):_?w(t,x):w(t)};if(b)f=t;else{if(l=s(t),\"function\"!=typeof l)throw TypeError(\"Target is not iterable\");if(o(l)){for(p=0,d=i(t.length);d>p;p++)if(v=O(t[p]),v&&v instanceof u)return v;return new u(!1)}f=l.call(t)}h=f.next;while(!(y=h.call(f)).done){try{v=O(y.value)}catch(A){throw c(f),A}if(\"object\"==typeof v&&v&&v instanceof u)return v}return new u(!1)}},\"23cb\":function(t,e,n){var r=n(\"a691\"),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},\"23e7\":function(t,e,n){var r=n(\"da84\"),o=n(\"06cf\").f,i=n(\"9112\"),a=n(\"6eeb\"),s=n(\"ce4e\"),c=n(\"e893\"),u=n(\"94ca\");t.exports=function(t,e){var n,f,l,p,d,v,h=t.target,y=t.global,m=t.stat;if(f=y?r:m?r[h]||s(h,{}):(r[h]||{}).prototype,f)for(l in e){if(d=e[l],t.noTargetGet?(v=o(f,l),p=v&&v.value):p=f[l],n=u(y?l:h+(m?\".\":\"#\")+l,t.forced),!n&&void 0!==p){if(typeof d===typeof p)continue;c(d,p)}(t.sham||p&&p.sham)&&i(d,\"sham\",!0),a(f,l,d,t)}}},\"241c\":function(t,e,n){var r=n(\"ca84\"),o=n(\"7839\"),i=o.concat(\"length\",\"prototype\");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},2626:function(t,e,n){\"use strict\";var r=n(\"d066\"),o=n(\"9bf2\"),i=n(\"b622\"),a=n(\"83ab\"),s=i(\"species\");t.exports=function(t){var e=r(t),n=o.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},2877:function(t,e,n){\"use strict\";function r(t,e,n,r,o,i,a,s){var c,u=\"function\"===typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId=\"data-v-\"+i),a?(c=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||\"undefined\"===typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var f=u.render;u.render=function(t,e){return c.call(e),f(t,e)}}else{var l=u.beforeCreate;u.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:u}}n.d(e,\"a\",(function(){return r}))},\"2a62\":function(t,e,n){var r=n(\"825a\");t.exports=function(t){var e=t[\"return\"];if(void 0!==e)return r(e.call(t)).value}},\"2b0e\":function(t,e,n){\"use strict\";(function(t){\n/*!\n * Vue.js v2.6.12\n * (c) 2014-2020 Evan You\n * Released under the MIT License.\n */\nvar n=Object.freeze({});function r(t){return void 0===t||null===t}function o(t){return void 0!==t&&null!==t}function i(t){return!0===t}function a(t){return!1===t}function s(t){return\"string\"===typeof t||\"number\"===typeof t||\"symbol\"===typeof t||\"boolean\"===typeof t}function c(t){return null!==t&&\"object\"===typeof t}var u=Object.prototype.toString;function f(t){return\"[object Object]\"===u.call(t)}function l(t){return\"[object RegExp]\"===u.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return o(t)&&\"function\"===typeof t.then&&\"function\"===typeof t.catch}function v(t){return null==t?\"\":Array.isArray(t)||f(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(\",\"),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}y(\"slot,component\",!0);var m=y(\"key,ref,slot,slot-scope,is\");function g(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(t,e){return b.call(t,e)}function w(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var x=/-(\\w)/g,O=w((function(t){return t.replace(x,(function(t,e){return e?e.toUpperCase():\"\"}))})),A=w((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),C=/\\B([A-Z])/g,$=w((function(t){return t.replace(C,\"-$1\").toLowerCase()}));function S(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function k(t,e){return t.bind(e)}var j=Function.prototype.bind?k:S;function E(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function T(t,e){for(var n in e)t[n]=e[n];return t}function I(t){for(var e={},n=0;n<t.length;n++)t[n]&&T(e,t[n]);return e}function P(t,e,n){}var D=function(t,e,n){return!1},N=function(t){return t};function M(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return M(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return M(t[n],e[n])}))}catch(u){return!1}}function F(t,e){for(var n=0;n<t.length;n++)if(M(t[n],e))return n;return-1}function L(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var R=\"data-server-rendered\",U=[\"component\",\"directive\",\"filter\"],z=[\"beforeCreate\",\"created\",\"beforeMount\",\"mounted\",\"beforeUpdate\",\"updated\",\"beforeDestroy\",\"destroyed\",\"activated\",\"deactivated\",\"errorCaptured\",\"serverPrefetch\"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:D,isReservedAttr:D,isUnknownElement:D,getTagNamespace:P,parsePlatformTagName:N,mustUseProp:D,async:!0,_lifecycleHooks:z},V=/a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;function H(t){var e=(t+\"\").charCodeAt(0);return 36===e||95===e}function W(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=new RegExp(\"[^\"+V.source+\".$_\\\\d]\");function G(t){if(!q.test(t)){var e=t.split(\".\");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}var K,X=\"__proto__\"in{},J=\"undefined\"!==typeof window,Y=\"undefined\"!==typeof WXEnvironment&&!!WXEnvironment.platform,Z=Y&&WXEnvironment.platform.toLowerCase(),Q=J&&window.navigator.userAgent.toLowerCase(),tt=Q&&/msie|trident/.test(Q),et=Q&&Q.indexOf(\"msie 9.0\")>0,nt=Q&&Q.indexOf(\"edge/\")>0,rt=(Q&&Q.indexOf(\"android\"),Q&&/iphone|ipad|ipod|ios/.test(Q)||\"ios\"===Z),ot=(Q&&/chrome\\/\\d+/.test(Q),Q&&/phantomjs/.test(Q),Q&&Q.match(/firefox\\/(\\d+)/)),it={}.watch,at=!1;if(J)try{var st={};Object.defineProperty(st,\"passive\",{get:function(){at=!0}}),window.addEventListener(\"test-passive\",null,st)}catch(Oa){}var ct=function(){return void 0===K&&(K=!J&&!Y&&\"undefined\"!==typeof t&&(t[\"process\"]&&\"server\"===t[\"process\"].env.VUE_ENV)),K},ut=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ft(t){return\"function\"===typeof t&&/native code/.test(t.toString())}var lt,pt=\"undefined\"!==typeof Symbol&&ft(Symbol)&&\"undefined\"!==typeof Reflect&&ft(Reflect.ownKeys);lt=\"undefined\"!==typeof Set&&ft(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var dt=P,vt=0,ht=function(){this.id=vt++,this.subs=[]};ht.prototype.addSub=function(t){this.subs.push(t)},ht.prototype.removeSub=function(t){g(this.subs,t)},ht.prototype.depend=function(){ht.target&&ht.target.addDep(this)},ht.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},ht.target=null;var yt=[];function mt(t){yt.push(t),ht.target=t}function gt(){yt.pop(),ht.target=yt[yt.length-1]}var bt=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},_t={child:{configurable:!0}};_t.child.get=function(){return this.componentInstance},Object.defineProperties(bt.prototype,_t);var wt=function(t){void 0===t&&(t=\"\");var e=new bt;return e.text=t,e.isComment=!0,e};function xt(t){return new bt(void 0,void 0,void 0,String(t))}function Ot(t){var e=new bt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var At=Array.prototype,Ct=Object.create(At),$t=[\"push\",\"pop\",\"shift\",\"unshift\",\"splice\",\"sort\",\"reverse\"];$t.forEach((function(t){var e=At[t];W(Ct,t,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case\"push\":case\"unshift\":o=n;break;case\"splice\":o=n.slice(2);break}return o&&a.observeArray(o),a.dep.notify(),i}))}));var St=Object.getOwnPropertyNames(Ct),kt=!0;function jt(t){kt=t}var Et=function(t){this.value=t,this.dep=new ht,this.vmCount=0,W(t,\"__ob__\",this),Array.isArray(t)?(X?Tt(t,Ct):It(t,Ct,St),this.observeArray(t)):this.walk(t)};function Tt(t,e){t.__proto__=e}function It(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];W(t,i,e[i])}}function Pt(t,e){var n;if(c(t)&&!(t instanceof bt))return _(t,\"__ob__\")&&t.__ob__ instanceof Et?n=t.__ob__:kt&&!ct()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Et(t)),e&&n&&n.vmCount++,n}function Dt(t,e,n,r,o){var i=new ht,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&Pt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return ht.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&Ft(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!==e&&r!==r||s&&!c||(c?c.call(t,e):n=e,u=!o&&Pt(e),i.notify())}})}}function Nt(t,e,n){if(Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(Dt(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function Mt(t,e){if(Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||_(t,e)&&(delete t[e],n&&n.dep.notify())}}function Ft(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Ft(e)}Et.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Dt(t,e[n])},Et.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Pt(t[e])};var Lt=B.optionMergeStrategies;function Rt(t,e){if(!e)return t;for(var n,r,o,i=pt?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)n=i[a],\"__ob__\"!==n&&(r=t[n],o=e[n],_(t,n)?r!==o&&f(r)&&f(o)&&Rt(r,o):Nt(t,n,o));return t}function Ut(t,e,n){return n?function(){var r=\"function\"===typeof e?e.call(n,n):e,o=\"function\"===typeof t?t.call(n,n):t;return r?Rt(r,o):o}:e?t?function(){return Rt(\"function\"===typeof e?e.call(this,this):e,\"function\"===typeof t?t.call(this,this):t)}:e:t}function zt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?Bt(n):n}function Bt(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function Vt(t,e,n,r){var o=Object.create(t||null);return e?T(o,e):o}Lt.data=function(t,e,n){return n?Ut(t,e,n):e&&\"function\"!==typeof e?t:Ut(t,e)},z.forEach((function(t){Lt[t]=zt})),U.forEach((function(t){Lt[t+\"s\"]=Vt})),Lt.watch=function(t,e,n,r){if(t===it&&(t=void 0),e===it&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in T(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Lt.props=Lt.methods=Lt.inject=Lt.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return T(o,t),e&&T(o,e),o},Lt.provide=Ut;var Ht=function(t,e){return void 0===e?t:e};function Wt(t,e){var n=t.props;if(n){var r,o,i,a={};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],\"string\"===typeof o&&(i=O(o),a[i]={type:null})}else if(f(n))for(var s in n)o=n[s],i=O(s),a[i]=f(o)?o:{type:o};else 0;t.props=a}}function qt(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var a=n[i];r[i]=f(a)?T({from:i},a):{from:a}}else 0}}function Gt(t){var e=t.directives;if(e)for(var n in e){var r=e[n];\"function\"===typeof r&&(e[n]={bind:r,update:r})}}function Kt(t,e,n){if(\"function\"===typeof e&&(e=e.options),Wt(e,n),qt(e,n),Gt(e),!e._base&&(e.extends&&(t=Kt(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=Kt(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)_(t,i)||s(i);function s(r){var o=Lt[r]||Ht;a[r]=o(t[r],e[r],n,r)}return a}function Xt(t,e,n,r){if(\"string\"===typeof n){var o=t[e];if(_(o,n))return o[n];var i=O(n);if(_(o,i))return o[i];var a=A(i);if(_(o,a))return o[a];var s=o[n]||o[i]||o[a];return s}}function Jt(t,e,n,r){var o=e[t],i=!_(n,t),a=n[t],s=te(Boolean,o.type);if(s>-1)if(i&&!_(o,\"default\"))a=!1;else if(\"\"===a||a===$(t)){var c=te(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=Yt(r,o,t);var u=kt;jt(!0),Pt(a),jt(u)}return a}function Yt(t,e,n){if(_(e,\"default\")){var r=e.default;return t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:\"function\"===typeof r&&\"Function\"!==Zt(e.type)?r.call(t):r}}function Zt(t){var e=t&&t.toString().match(/^\\s*function (\\w+)/);return e?e[1]:\"\"}function Qt(t,e){return Zt(t)===Zt(e)}function te(t,e){if(!Array.isArray(e))return Qt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Qt(e[n],t))return n;return-1}function ee(t,e,n){mt();try{if(e){var r=e;while(r=r.$parent){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var a=!1===o[i].call(r,t,e,n);if(a)return}catch(Oa){re(Oa,r,\"errorCaptured hook\")}}}re(t,e,n)}finally{gt()}}function ne(t,e,n,r,o){var i;try{i=n?t.apply(e,n):t.call(e),i&&!i._isVue&&d(i)&&!i._handled&&(i.catch((function(t){return ee(t,r,o+\" (Promise/async)\")})),i._handled=!0)}catch(Oa){ee(Oa,r,o)}return i}function re(t,e,n){if(B.errorHandler)try{return B.errorHandler.call(null,t,e,n)}catch(Oa){Oa!==t&&oe(Oa,null,\"config.errorHandler\")}oe(t,e,n)}function oe(t,e,n){if(!J&&!Y||\"undefined\"===typeof console)throw t;console.error(t)}var ie,ae=!1,se=[],ce=!1;function ue(){ce=!1;var t=se.slice(0);se.length=0;for(var e=0;e<t.length;e++)t[e]()}if(\"undefined\"!==typeof Promise&&ft(Promise)){var fe=Promise.resolve();ie=function(){fe.then(ue),rt&&setTimeout(P)},ae=!0}else if(tt||\"undefined\"===typeof MutationObserver||!ft(MutationObserver)&&\"[object MutationObserverConstructor]\"!==MutationObserver.toString())ie=\"undefined\"!==typeof setImmediate&&ft(setImmediate)?function(){setImmediate(ue)}:function(){setTimeout(ue,0)};else{var le=1,pe=new MutationObserver(ue),de=document.createTextNode(String(le));pe.observe(de,{characterData:!0}),ie=function(){le=(le+1)%2,de.data=String(le)},ae=!0}function ve(t,e){var n;if(se.push((function(){if(t)try{t.call(e)}catch(Oa){ee(Oa,e,\"nextTick\")}else n&&n(e)})),ce||(ce=!0,ie()),!t&&\"undefined\"!==typeof Promise)return new Promise((function(t){n=t}))}var he=new lt;function ye(t){me(t,he),he.clear()}function me(t,e){var n,r,o=Array.isArray(t);if(!(!o&&!c(t)||Object.isFrozen(t)||t instanceof bt)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(o){n=t.length;while(n--)me(t[n],e)}else{r=Object.keys(t),n=r.length;while(n--)me(t[r[n]],e)}}}var ge=w((function(t){var e=\"&\"===t.charAt(0);t=e?t.slice(1):t;var n=\"~\"===t.charAt(0);t=n?t.slice(1):t;var r=\"!\"===t.charAt(0);return t=r?t.slice(1):t,{name:t,once:n,capture:r,passive:e}}));function be(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return ne(r,null,arguments,e,\"v-on handler\");for(var o=r.slice(),i=0;i<o.length;i++)ne(o[i],null,t,e,\"v-on handler\")}return n.fns=t,n}function _e(t,e,n,o,a,s){var c,u,f,l;for(c in t)u=t[c],f=e[c],l=ge(c),r(u)||(r(f)?(r(u.fns)&&(u=t[c]=be(u,s)),i(l.once)&&(u=t[c]=a(l.name,u,l.capture)),n(l.name,u,l.capture,l.passive,l.params)):u!==f&&(f.fns=u,t[c]=f));for(c in e)r(t[c])&&(l=ge(c),o(l.name,e[c],l.capture))}function we(t,e,n){var a;t instanceof bt&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function c(){n.apply(this,arguments),g(a.fns,c)}r(s)?a=be([c]):o(s.fns)&&i(s.merged)?(a=s,a.fns.push(c)):a=be([s,c]),a.merged=!0,t[e]=a}function xe(t,e,n){var i=e.options.props;if(!r(i)){var a={},s=t.attrs,c=t.props;if(o(s)||o(c))for(var u in i){var f=$(u);Oe(a,c,u,f,!0)||Oe(a,s,u,f,!1)}return a}}function Oe(t,e,n,r,i){if(o(e)){if(_(e,n))return t[n]=e[n],i||delete e[n],!0;if(_(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Ae(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function Ce(t){return s(t)?[xt(t)]:Array.isArray(t)?Se(t):void 0}function $e(t){return o(t)&&o(t.text)&&a(t.isComment)}function Se(t,e){var n,a,c,u,f=[];for(n=0;n<t.length;n++)a=t[n],r(a)||\"boolean\"===typeof a||(c=f.length-1,u=f[c],Array.isArray(a)?a.length>0&&(a=Se(a,(e||\"\")+\"_\"+n),$e(a[0])&&$e(u)&&(f[c]=xt(u.text+a[0].text),a.shift()),f.push.apply(f,a)):s(a)?$e(u)?f[c]=xt(u.text+a):\"\"!==a&&f.push(xt(a)):$e(a)&&$e(u)?f[c]=xt(u.text+a.text):(i(t._isVList)&&o(a.tag)&&r(a.key)&&o(e)&&(a.key=\"__vlist\"+e+\"_\"+n+\"__\"),f.push(a)));return f}function ke(t){var e=t.$options.provide;e&&(t._provided=\"function\"===typeof e?e.call(t):e)}function je(t){var e=Ee(t.$options.inject,t);e&&(jt(!1),Object.keys(e).forEach((function(n){Dt(t,n,e[n])})),jt(!0))}function Ee(t,e){if(t){for(var n=Object.create(null),r=pt?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if(\"__ob__\"!==i){var a=t[i].from,s=e;while(s){if(s._provided&&_(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if(\"default\"in t[i]){var c=t[i].default;n[i]=\"function\"===typeof c?c.call(e):c}else 0}}return n}}function Te(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);\"template\"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(Ie)&&delete n[u];return n}function Ie(t){return t.isComment&&!t.asyncFactory||\" \"===t.text}function Pe(t,e,r){var o,i=Object.keys(e).length>0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},t)t[c]&&\"$\"!==c[0]&&(o[c]=De(e,c,t[c]))}else o={};for(var u in e)u in o||(o[u]=Ne(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),W(o,\"$stable\",a),W(o,\"$key\",s),W(o,\"$hasNormal\",i),o}function De(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&\"object\"===typeof t&&!Array.isArray(t)?[t]:Ce(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function Ne(t,e){return function(){return t[e]}}function Me(t,e){var n,r,i,a,s;if(Array.isArray(t)||\"string\"===typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if(\"number\"===typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(c(t))if(pt&&t[Symbol.iterator]){n=[];var u=t[Symbol.iterator](),f=u.next();while(!f.done)n.push(e(f.value,n.length)),f=u.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r);return o(n)||(n=[]),n._isVList=!0,n}function Fe(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=T(T({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement(\"template\",{slot:a},o):o}function Le(t){return Xt(this.$options,\"filters\",t,!0)||N}function Re(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function Ue(t,e,n,r,o){var i=B.keyCodes[e]||n;return o&&r&&!B.keyCodes[e]?Re(o,r):i?Re(i,t):r?$(r)!==e:void 0}function ze(t,e,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=I(n));var a=function(a){if(\"class\"===a||\"style\"===a||m(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||B.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=O(a),u=$(a);if(!(c in i)&&!(u in i)&&(i[a]=n[a],o)){var f=t.on||(t.on={});f[\"update:\"+a]=function(t){n[a]=t}}};for(var s in n)a(s)}else;return t}function Be(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),He(r,\"__static__\"+t,!1)),r}function Ve(t,e,n){return He(t,\"__once__\"+e+(n?\"_\"+n:\"\"),!0),t}function He(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&\"string\"!==typeof t[r]&&We(t[r],e+\"_\"+r,n);else We(t,e,n)}function We(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function qe(t,e){if(e)if(f(e)){var n=t.on=t.on?T({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function Ge(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?Ge(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Ke(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];\"string\"===typeof r&&r&&(t[e[n]]=e[n+1])}return t}function Xe(t,e){return\"string\"===typeof t?e+t:t}function Je(t){t._o=Ve,t._n=h,t._s=v,t._l=Me,t._t=Fe,t._q=M,t._i=F,t._m=Be,t._f=Le,t._k=Ue,t._b=ze,t._v=xt,t._e=wt,t._u=Ge,t._g=qe,t._d=Ke,t._p=Xe}function Ye(t,e,r,o,a){var s,c=this,u=a.options;_(o,\"_uid\")?(s=Object.create(o),s._original=o):(s=o,o=o._original);var f=i(u._compiled),l=!f;this.data=t,this.props=e,this.children=r,this.parent=o,this.listeners=t.on||n,this.injections=Ee(u.inject,o),this.slots=function(){return c.$slots||Pe(t.scopedSlots,c.$slots=Te(r,o)),c.$slots},Object.defineProperty(this,\"scopedSlots\",{enumerable:!0,get:function(){return Pe(t.scopedSlots,this.slots())}}),f&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=Pe(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var i=ln(s,t,e,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return ln(s,t,e,n,r,l)}}function Ze(t,e,r,i,a){var s=t.options,c={},u=s.props;if(o(u))for(var f in u)c[f]=Jt(f,u,e||n);else o(r.attrs)&&tn(c,r.attrs),o(r.props)&&tn(c,r.props);var l=new Ye(r,c,a,i,t),p=s.render.call(null,l._c,l);if(p instanceof bt)return Qe(p,r,l.parent,s,l);if(Array.isArray(p)){for(var d=Ce(p)||[],v=new Array(d.length),h=0;h<d.length;h++)v[h]=Qe(d[h],r,l.parent,s,l);return v}}function Qe(t,e,n,r,o){var i=Ot(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function tn(t,e){for(var n in e)t[O(n)]=e[n]}Je(Ye.prototype);var en={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;en.prepatch(n,n)}else{var r=t.componentInstance=on(t,En);r.$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions,r=e.componentInstance=t.componentInstance;Nn(r,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,Rn(n,\"mounted\")),t.data.keepAlive&&(e._isMounted?Zn(n):Fn(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?Ln(e,!0):e.$destroy())}},nn=Object.keys(en);function rn(t,e,n,a,s){if(!r(t)){var u=n.$options._base;if(c(t)&&(t=u.extend(t)),\"function\"===typeof t){var f;if(r(t.cid)&&(f=t,t=wn(f,u),void 0===t))return _n(f,e,n,a,s);e=e||{},wr(t),o(e.model)&&cn(t.options,e);var l=xe(e,t,s);if(i(t.options.functional))return Ze(t,l,e,n,a);var p=e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var d=e.slot;e={},d&&(e.slot=d)}an(e);var v=t.options.name||s,h=new bt(\"vue-component-\"+t.cid+(v?\"-\"+v:\"\"),e,void 0,void 0,void 0,n,{Ctor:t,propsData:l,listeners:p,tag:s,children:a},f);return h}}}function on(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}function an(t){for(var e=t.hook||(t.hook={}),n=0;n<nn.length;n++){var r=nn[n],o=e[r],i=en[r];o===i||o&&o._merged||(e[r]=o?sn(i,o):i)}}function sn(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function cn(t,e){var n=t.model&&t.model.prop||\"value\",r=t.model&&t.model.event||\"input\";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[r],s=e.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[r]=[s].concat(a)):i[r]=s}var un=1,fn=2;function ln(t,e,n,r,o,a){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(a)&&(o=fn),pn(t,e,n,r,o)}function pn(t,e,n,r,i){if(o(n)&&o(n.__ob__))return wt();if(o(n)&&o(n.is)&&(e=n.is),!e)return wt();var a,s,c;(Array.isArray(r)&&\"function\"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===fn?r=Ce(r):i===un&&(r=Ae(r)),\"string\"===typeof e)?(s=t.$vnode&&t.$vnode.ns||B.getTagNamespace(e),a=B.isReservedTag(e)?new bt(B.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!o(c=Xt(t.$options,\"components\",e))?new bt(e,n,r,void 0,void 0,t):rn(c,n,t,r,e)):a=rn(e,n,t,r);return Array.isArray(a)?a:o(a)?(o(s)&&dn(a,s),o(n)&&vn(n),a):wt()}function dn(t,e,n){if(t.ns=e,\"foreignObject\"===t.tag&&(e=void 0,n=!0),o(t.children))for(var a=0,s=t.children.length;a<s;a++){var c=t.children[a];o(c.tag)&&(r(c.ns)||i(n)&&\"svg\"!==c.tag)&&dn(c,e,n)}}function vn(t){c(t.style)&&ye(t.style),c(t.class)&&ye(t.class)}function hn(t){t._vnode=null,t._staticTrees=null;var e=t.$options,r=t.$vnode=e._parentVnode,o=r&&r.context;t.$slots=Te(e._renderChildren,o),t.$scopedSlots=n,t._c=function(e,n,r,o){return ln(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return ln(t,e,n,r,o,!0)};var i=r&&r.data;Dt(t,\"$attrs\",i&&i.attrs||n,null,!0),Dt(t,\"$listeners\",e._parentListeners||n,null,!0)}var yn,mn=null;function gn(t){Je(t.prototype),t.prototype.$nextTick=function(t){return ve(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=Pe(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{mn=e,t=r.call(e._renderProxy,e.$createElement)}catch(Oa){ee(Oa,e,\"render\"),t=e._vnode}finally{mn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof bt||(t=wt()),t.parent=o,t}}function bn(t,e){return(t.__esModule||pt&&\"Module\"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function _n(t,e,n,r,o){var i=wt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}function wn(t,e){if(i(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;var n=mn;if(n&&o(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),i(t.loading)&&o(t.loadingComp))return t.loadingComp;if(n&&!o(t.owners)){var a=t.owners=[n],s=!0,u=null,f=null;n.$on(\"hook:destroyed\",(function(){return g(a,n)}));var l=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==u&&(clearTimeout(u),u=null),null!==f&&(clearTimeout(f),f=null))},p=L((function(n){t.resolved=bn(n,e),s?a.length=0:l(!0)})),v=L((function(e){o(t.errorComp)&&(t.error=!0,l(!0))})),h=t(p,v);return c(h)&&(d(h)?r(t.resolved)&&h.then(p,v):d(h.component)&&(h.component.then(p,v),o(h.error)&&(t.errorComp=bn(h.error,e)),o(h.loading)&&(t.loadingComp=bn(h.loading,e),0===h.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,l(!1))}),h.delay||200)),o(h.timeout)&&(f=setTimeout((function(){f=null,r(t.resolved)&&v(null)}),h.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}function xn(t){return t.isComment&&t.asyncFactory}function On(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||xn(n)))return n}}function An(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&kn(t,e)}function Cn(t,e){yn.$on(t,e)}function $n(t,e){yn.$off(t,e)}function Sn(t,e){var n=yn;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function kn(t,e,n){yn=t,_e(e,n||{},Cn,$n,Sn,t),yn=void 0}function jn(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;var s=a.length;while(s--)if(i=a[s],i===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?E(n):n;for(var r=E(arguments,1),o='event handler for \"'+t+'\"',i=0,a=n.length;i<a;i++)ne(n[i],e,r,e,o)}return e}}var En=null;function Tn(t){var e=En;return En=t,function(){En=e}}function In(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function Pn(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Tn(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Rn(t,\"beforeDestroy\"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||g(e.$children,t),t._watcher&&t._watcher.teardown();var n=t._watchers.length;while(n--)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Rn(t,\"destroyed\"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}function Dn(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=wt),Rn(t,\"beforeMount\"),r=function(){t._update(t._render(),n)},new nr(t,r,P,{before:function(){t._isMounted&&!t._isDestroyed&&Rn(t,\"beforeUpdate\")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Rn(t,\"mounted\")),t}function Nn(t,e,r,o,i){var a=o.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||c);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){jt(!1);for(var f=t._props,l=t.$options._propKeys||[],p=0;p<l.length;p++){var d=l[p],v=t.$options.props;f[d]=Jt(d,v,e,t)}jt(!0),t.$options.propsData=e}r=r||n;var h=t.$options._parentListeners;t.$options._parentListeners=r,kn(t,r,h),u&&(t.$slots=Te(i,o.context),t.$forceUpdate())}function Mn(t){while(t&&(t=t.$parent))if(t._inactive)return!0;return!1}function Fn(t,e){if(e){if(t._directInactive=!1,Mn(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Fn(t.$children[n]);Rn(t,\"activated\")}}function Ln(t,e){if((!e||(t._directInactive=!0,!Mn(t)))&&!t._inactive){t._inactive=!0;for(var n=0;n<t.$children.length;n++)Ln(t.$children[n]);Rn(t,\"deactivated\")}}function Rn(t,e){mt();var n=t.$options[e],r=e+\" hook\";if(n)for(var o=0,i=n.length;o<i;o++)ne(n[o],t,null,t,r);t._hasHookEvent&&t.$emit(\"hook:\"+e),gt()}var Un=[],zn=[],Bn={},Vn=!1,Hn=!1,Wn=0;function qn(){Wn=Un.length=zn.length=0,Bn={},Vn=Hn=!1}var Gn=0,Kn=Date.now;if(J&&!tt){var Xn=window.performance;Xn&&\"function\"===typeof Xn.now&&Kn()>document.createEvent(\"Event\").timeStamp&&(Kn=function(){return Xn.now()})}function Jn(){var t,e;for(Gn=Kn(),Hn=!0,Un.sort((function(t,e){return t.id-e.id})),Wn=0;Wn<Un.length;Wn++)t=Un[Wn],t.before&&t.before(),e=t.id,Bn[e]=null,t.run();var n=zn.slice(),r=Un.slice();qn(),Qn(n),Yn(r),ut&&B.devtools&&ut.emit(\"flush\")}function Yn(t){var e=t.length;while(e--){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Rn(r,\"updated\")}}function Zn(t){t._inactive=!1,zn.push(t)}function Qn(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Fn(t[e],!0)}function tr(t){var e=t.id;if(null==Bn[e]){if(Bn[e]=!0,Hn){var n=Un.length-1;while(n>Wn&&Un[n].id>t.id)n--;Un.splice(n+1,0,t)}else Un.push(t);Vn||(Vn=!0,ve(Jn))}}var er=0,nr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++er,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new lt,this.newDepIds=new lt,this.expression=\"\",\"function\"===typeof e?this.getter=e:(this.getter=G(e),this.getter||(this.getter=P)),this.value=this.lazy?void 0:this.get()};nr.prototype.get=function(){var t;mt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(Oa){if(!this.user)throw Oa;ee(Oa,e,'getter for watcher \"'+this.expression+'\"')}finally{this.deep&&ye(t),gt(),this.cleanupDeps()}return t},nr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},nr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},nr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():tr(this)},nr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(Oa){ee(Oa,this.vm,'callback for watcher \"'+this.expression+'\"')}else this.cb.call(this.vm,t,e)}}},nr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},nr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},nr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var rr={enumerable:!0,configurable:!0,get:P,set:P};function or(t,e,n){rr.get=function(){return this[e][n]},rr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,rr)}function ir(t){t._watchers=[];var e=t.$options;e.props&&ar(t,e.props),e.methods&&vr(t,e.methods),e.data?sr(t):Pt(t._data={},!0),e.computed&&fr(t,e.computed),e.watch&&e.watch!==it&&hr(t,e.watch)}function ar(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[],i=!t.$parent;i||jt(!1);var a=function(i){o.push(i);var a=Jt(i,e,n,t);Dt(r,i,a),i in t||or(t,\"_props\",i)};for(var s in e)a(s);jt(!0)}function sr(t){var e=t.$options.data;e=t._data=\"function\"===typeof e?cr(e,t):e||{},f(e)||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);while(o--){var i=n[o];0,r&&_(r,i)||H(i)||or(t,\"_data\",i)}Pt(e,!0)}function cr(t,e){mt();try{return t.call(e,e)}catch(Oa){return ee(Oa,e,\"data()\"),{}}finally{gt()}}var ur={lazy:!0};function fr(t,e){var n=t._computedWatchers=Object.create(null),r=ct();for(var o in e){var i=e[o],a=\"function\"===typeof i?i:i.get;0,r||(n[o]=new nr(t,a||P,P,ur)),o in t||lr(t,o,i)}}function lr(t,e,n){var r=!ct();\"function\"===typeof n?(rr.get=r?pr(e):dr(n),rr.set=P):(rr.get=n.get?r&&!1!==n.cache?pr(e):dr(n.get):P,rr.set=n.set||P),Object.defineProperty(t,e,rr)}function pr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),ht.target&&e.depend(),e.value}}function dr(t){return function(){return t.call(this,this)}}function vr(t,e){t.$options.props;for(var n in e)t[n]=\"function\"!==typeof e[n]?P:j(e[n],t)}function hr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)yr(t,n,r[o]);else yr(t,n,r)}}function yr(t,e,n,r){return f(n)&&(r=n,n=n.handler),\"string\"===typeof n&&(n=t[n]),t.$watch(e,n,r)}function mr(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,\"$data\",e),Object.defineProperty(t.prototype,\"$props\",n),t.prototype.$set=Nt,t.prototype.$delete=Mt,t.prototype.$watch=function(t,e,n){var r=this;if(f(e))return yr(r,t,e,n);n=n||{},n.user=!0;var o=new nr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(i){ee(i,r,'callback for immediate watcher \"'+o.expression+'\"')}return function(){o.teardown()}}}var gr=0;function br(t){t.prototype._init=function(t){var e=this;e._uid=gr++,e._isVue=!0,t&&t._isComponent?_r(e,t):e.$options=Kt(wr(e.constructor),t||{},e),e._renderProxy=e,e._self=e,In(e),An(e),hn(e),Rn(e,\"beforeCreate\"),je(e),ir(e),ke(e),Rn(e,\"created\"),e.$options.el&&e.$mount(e.$options.el)}}function _r(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function wr(t){var e=t.options;if(t.super){var n=wr(t.super),r=t.superOptions;if(n!==r){t.superOptions=n;var o=xr(t);o&&T(t.extendOptions,o),e=t.options=Kt(n,t.extendOptions),e.name&&(e.components[e.name]=t)}}return e}function xr(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}function Or(t){this._init(t)}function Ar(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=E(arguments,1);return n.unshift(this),\"function\"===typeof t.install?t.install.apply(t,n):\"function\"===typeof t&&t.apply(null,n),e.push(t),this}}function Cr(t){t.mixin=function(t){return this.options=Kt(this.options,t),this}}function $r(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=Kt(n.options,t),a[\"super\"]=n,a.options.props&&Sr(a),a.options.computed&&kr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,U.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=T({},a.options),o[r]=a,a}}function Sr(t){var e=t.options.props;for(var n in e)or(t.prototype,\"_props\",n)}function kr(t){var e=t.options.computed;for(var n in e)lr(t.prototype,n,e[n])}function jr(t){U.forEach((function(e){t[e]=function(t,n){return n?(\"component\"===e&&f(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),\"directive\"===e&&\"function\"===typeof n&&(n={bind:n,update:n}),this.options[e+\"s\"][t]=n,n):this.options[e+\"s\"][t]}}))}function Er(t){return t&&(t.Ctor.options.name||t.tag)}function Tr(t,e){return Array.isArray(t)?t.indexOf(e)>-1:\"string\"===typeof t?t.split(\",\").indexOf(e)>-1:!!l(t)&&t.test(e)}function Ir(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=Er(a.componentOptions);s&&!e(s)&&Pr(n,i,r,o)}}}function Pr(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}br(Or),mr(Or),jn(Or),Pn(Or),gn(Or);var Dr=[String,RegExp,Array],Nr={name:\"keep-alive\",abstract:!0,props:{include:Dr,exclude:Dr,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Pr(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch(\"include\",(function(e){Ir(t,(function(t){return Tr(e,t)}))})),this.$watch(\"exclude\",(function(e){Ir(t,(function(t){return!Tr(e,t)}))}))},render:function(){var t=this.$slots.default,e=On(t),n=e&&e.componentOptions;if(n){var r=Er(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!Tr(i,r))||a&&r&&Tr(a,r))return e;var s=this,c=s.cache,u=s.keys,f=null==e.key?n.Ctor.cid+(n.tag?\"::\"+n.tag:\"\"):e.key;c[f]?(e.componentInstance=c[f].componentInstance,g(u,f),u.push(f)):(c[f]=e,u.push(f),this.max&&u.length>parseInt(this.max)&&Pr(c,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},Mr={KeepAlive:Nr};function Fr(t){var e={get:function(){return B}};Object.defineProperty(t,\"config\",e),t.util={warn:dt,extend:T,mergeOptions:Kt,defineReactive:Dt},t.set=Nt,t.delete=Mt,t.nextTick=ve,t.observable=function(t){return Pt(t),t},t.options=Object.create(null),U.forEach((function(e){t.options[e+\"s\"]=Object.create(null)})),t.options._base=t,T(t.options.components,Mr),Ar(t),Cr(t),$r(t),jr(t)}Fr(Or),Object.defineProperty(Or.prototype,\"$isServer\",{get:ct}),Object.defineProperty(Or.prototype,\"$ssrContext\",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Or,\"FunctionalRenderContext\",{value:Ye}),Or.version=\"2.6.12\";var Lr=y(\"style,class\"),Rr=y(\"input,textarea,option,select,progress\"),Ur=function(t,e,n){return\"value\"===n&&Rr(t)&&\"button\"!==e||\"selected\"===n&&\"option\"===t||\"checked\"===n&&\"input\"===t||\"muted\"===n&&\"video\"===t},zr=y(\"contenteditable,draggable,spellcheck\"),Br=y(\"events,caret,typing,plaintext-only\"),Vr=function(t,e){return Kr(e)||\"false\"===e?\"false\":\"contenteditable\"===t&&Br(e)?e:\"true\"},Hr=y(\"allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible\"),Wr=\"http://www.w3.org/1999/xlink\",qr=function(t){return\":\"===t.charAt(5)&&\"xlink\"===t.slice(0,5)},Gr=function(t){return qr(t)?t.slice(6,t.length):\"\"},Kr=function(t){return null==t||!1===t};function Xr(t){var e=t.data,n=t,r=t;while(o(r.componentInstance))r=r.componentInstance._vnode,r&&r.data&&(e=Jr(r.data,e));while(o(n=n.parent))n&&n.data&&(e=Jr(e,n.data));return Yr(e.staticClass,e.class)}function Jr(t,e){return{staticClass:Zr(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function Yr(t,e){return o(t)||o(e)?Zr(t,Qr(e)):\"\"}function Zr(t,e){return t?e?t+\" \"+e:t:e||\"\"}function Qr(t){return Array.isArray(t)?to(t):c(t)?eo(t):\"string\"===typeof t?t:\"\"}function to(t){for(var e,n=\"\",r=0,i=t.length;r<i;r++)o(e=Qr(t[r]))&&\"\"!==e&&(n&&(n+=\" \"),n+=e);return n}function eo(t){var e=\"\";for(var n in t)t[n]&&(e&&(e+=\" \"),e+=n);return e}var no={svg:\"http://www.w3.org/2000/svg\",math:\"http://www.w3.org/1998/Math/MathML\"},ro=y(\"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot\"),oo=y(\"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view\",!0),io=function(t){return ro(t)||oo(t)};function ao(t){return oo(t)?\"svg\":\"math\"===t?\"math\":void 0}var so=Object.create(null);function co(t){if(!J)return!0;if(io(t))return!1;if(t=t.toLowerCase(),null!=so[t])return so[t];var e=document.createElement(t);return t.indexOf(\"-\")>-1?so[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:so[t]=/HTMLUnknownElement/.test(e.toString())}var uo=y(\"text,number,password,search,email,tel,url\");function fo(t){if(\"string\"===typeof t){var e=document.querySelector(t);return e||document.createElement(\"div\")}return t}function lo(t,e){var n=document.createElement(t);return\"select\"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute(\"multiple\",\"multiple\"),n}function po(t,e){return document.createElementNS(no[t],e)}function vo(t){return document.createTextNode(t)}function ho(t){return document.createComment(t)}function yo(t,e,n){t.insertBefore(e,n)}function mo(t,e){t.removeChild(e)}function go(t,e){t.appendChild(e)}function bo(t){return t.parentNode}function _o(t){return t.nextSibling}function wo(t){return t.tagName}function xo(t,e){t.textContent=e}function Oo(t,e){t.setAttribute(e,\"\")}var Ao=Object.freeze({createElement:lo,createElementNS:po,createTextNode:vo,createComment:ho,insertBefore:yo,removeChild:mo,appendChild:go,parentNode:bo,nextSibling:_o,tagName:wo,setTextContent:xo,setStyleScope:Oo}),Co={create:function(t,e){$o(e)},update:function(t,e){t.data.ref!==e.data.ref&&($o(t,!0),$o(e))},destroy:function(t){$o(t,!0)}};function $o(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var So=new bt(\"\",{},[]),ko=[\"create\",\"activate\",\"update\",\"remove\",\"destroy\"];function jo(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&Eo(t,e)||i(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function Eo(t,e){if(\"input\"!==t.tag)return!0;var n,r=o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return r===i||uo(r)&&uo(i)}function To(t,e,n){var r,i,a={};for(r=e;r<=n;++r)i=t[r].key,o(i)&&(a[i]=r);return a}function Io(t){var e,n,a={},c=t.modules,u=t.nodeOps;for(e=0;e<ko.length;++e)for(a[ko[e]]=[],n=0;n<c.length;++n)o(c[n][ko[e]])&&a[ko[e]].push(c[n][ko[e]]);function f(t){return new bt(u.tagName(t).toLowerCase(),{},[],void 0,t)}function l(t,e){function n(){0===--n.listeners&&p(t)}return n.listeners=e,n}function p(t){var e=u.parentNode(t);o(e)&&u.removeChild(e,t)}function d(t,e,n,r,a,s,c){if(o(t.elm)&&o(s)&&(t=s[c]=Ot(t)),t.isRootInsert=!a,!v(t,e,n,r)){var f=t.data,l=t.children,p=t.tag;o(p)?(t.elm=t.ns?u.createElementNS(t.ns,p):u.createElement(p,t),x(t),b(t,l,e),o(f)&&w(t,e),g(n,t.elm,r)):i(t.isComment)?(t.elm=u.createComment(t.text),g(n,t.elm,r)):(t.elm=u.createTextNode(t.text),g(n,t.elm,r))}}function v(t,e,n,r){var a=t.data;if(o(a)){var s=o(t.componentInstance)&&a.keepAlive;if(o(a=a.hook)&&o(a=a.init)&&a(t,!1),o(t.componentInstance))return h(t,e),g(n,t.elm,r),i(s)&&m(t,e,n,r),!0}}function h(t,e){o(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,_(t)?(w(t,e),x(t)):($o(t),e.push(t))}function m(t,e,n,r){var i,s=t;while(s.componentInstance)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i](So,s);e.push(s);break}g(n,t.elm,r)}function g(t,e,n){o(t)&&(o(n)?u.parentNode(n)===t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function b(t,e,n){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)d(e[r],n,t.elm,null,!0,e,r)}else s(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function _(t){while(t.componentInstance)t=t.componentInstance._vnode;return o(t.tag)}function w(t,n){for(var r=0;r<a.create.length;++r)a.create[r](So,t);e=t.data.hook,o(e)&&(o(e.create)&&e.create(So,t),o(e.insert)&&n.push(t))}function x(t){var e;if(o(e=t.fnScopeId))u.setStyleScope(t.elm,e);else{var n=t;while(n)o(e=n.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent}o(e=En)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function O(t,e,n,r,o,i){for(;r<=o;++r)d(n[r],i,t,e,!1,n,r)}function A(t){var e,n,r=t.data;if(o(r))for(o(e=r.hook)&&o(e=e.destroy)&&e(t),e=0;e<a.destroy.length;++e)a.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)A(t.children[n])}function C(t,e,n){for(;e<=n;++e){var r=t[e];o(r)&&(o(r.tag)?($(r),A(r)):p(r.elm))}}function $(t,e){if(o(e)||o(t.data)){var n,r=a.remove.length+1;for(o(e)?e.listeners+=r:e=l(t.elm,r),o(n=t.componentInstance)&&o(n=n._vnode)&&o(n.data)&&$(n,e),n=0;n<a.remove.length;++n)a.remove[n](t,e);o(n=t.data.hook)&&o(n=n.remove)?n(t,e):e()}else p(t.elm)}function S(t,e,n,i,a){var s,c,f,l,p=0,v=0,h=e.length-1,y=e[0],m=e[h],g=n.length-1,b=n[0],_=n[g],w=!a;while(p<=h&&v<=g)r(y)?y=e[++p]:r(m)?m=e[--h]:jo(y,b)?(j(y,b,i,n,v),y=e[++p],b=n[++v]):jo(m,_)?(j(m,_,i,n,g),m=e[--h],_=n[--g]):jo(y,_)?(j(y,_,i,n,g),w&&u.insertBefore(t,y.elm,u.nextSibling(m.elm)),y=e[++p],_=n[--g]):jo(m,b)?(j(m,b,i,n,v),w&&u.insertBefore(t,m.elm,y.elm),m=e[--h],b=n[++v]):(r(s)&&(s=To(e,p,h)),c=o(b.key)?s[b.key]:k(b,e,p,h),r(c)?d(b,i,t,y.elm,!1,n,v):(f=e[c],jo(f,b)?(j(f,b,i,n,v),e[c]=void 0,w&&u.insertBefore(t,f.elm,y.elm)):d(b,i,t,y.elm,!1,n,v)),b=n[++v]);p>h?(l=r(n[g+1])?null:n[g+1].elm,O(t,l,n,v,g,i)):v>g&&C(e,p,h)}function k(t,e,n,r){for(var i=n;i<r;i++){var a=e[i];if(o(a)&&jo(t,a))return i}}function j(t,e,n,s,c,f){if(t!==e){o(e.elm)&&o(s)&&(e=s[c]=Ot(e));var l=e.elm=t.elm;if(i(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?I(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(t.isStatic)&&e.key===t.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=t.componentInstance;else{var p,d=e.data;o(d)&&o(p=d.hook)&&o(p=p.prepatch)&&p(t,e);var v=t.children,h=e.children;if(o(d)&&_(e)){for(p=0;p<a.update.length;++p)a.update[p](t,e);o(p=d.hook)&&o(p=p.update)&&p(t,e)}r(e.text)?o(v)&&o(h)?v!==h&&S(l,v,h,n,f):o(h)?(o(t.text)&&u.setTextContent(l,\"\"),O(l,null,h,0,h.length-1,n)):o(v)?C(v,0,v.length-1):o(t.text)&&u.setTextContent(l,\"\"):t.text!==e.text&&u.setTextContent(l,e.text),o(d)&&o(p=d.hook)&&o(p=p.postpatch)&&p(t,e)}}}function E(t,e,n){if(i(n)&&o(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=y(\"attrs,class,staticClass,staticStyle,key\");function I(t,e,n,r){var a,s=e.tag,c=e.data,u=e.children;if(r=r||c&&c.pre,e.elm=t,i(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(c)&&(o(a=c.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return h(e,n),!0;if(o(s)){if(o(u))if(t.hasChildNodes())if(o(a=c)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var f=!0,l=t.firstChild,p=0;p<u.length;p++){if(!l||!I(l,u[p],n,r)){f=!1;break}l=l.nextSibling}if(!f||l)return!1}else b(e,u,n);if(o(c)){var d=!1;for(var v in c)if(!T(v)){d=!0,w(e,n);break}!d&&c[\"class\"]&&ye(c[\"class\"])}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,s){if(!r(e)){var c=!1,l=[];if(r(t))c=!0,d(e,l);else{var p=o(t.nodeType);if(!p&&jo(t,e))j(t,e,l,null,null,s);else{if(p){if(1===t.nodeType&&t.hasAttribute(R)&&(t.removeAttribute(R),n=!0),i(n)&&I(t,e,l))return E(e,l,!0),t;t=f(t)}var v=t.elm,h=u.parentNode(v);if(d(e,l,v._leaveCb?null:h,u.nextSibling(v)),o(e.parent)){var y=e.parent,m=_(e);while(y){for(var g=0;g<a.destroy.length;++g)a.destroy[g](y);if(y.elm=e.elm,m){for(var b=0;b<a.create.length;++b)a.create[b](So,y);var w=y.data.hook.insert;if(w.merged)for(var x=1;x<w.fns.length;x++)w.fns[x]()}else $o(y);y=y.parent}}o(h)?C([t],0,0):o(t.tag)&&A(t)}}return E(e,l,c),e.elm}o(t)&&A(t)}}var Po={create:Do,update:Do,destroy:function(t){Do(t,So)}};function Do(t,e){(t.data.directives||e.data.directives)&&No(t,e)}function No(t,e){var n,r,o,i=t===So,a=e===So,s=Fo(t.data.directives,t.context),c=Fo(e.data.directives,e.context),u=[],f=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Ro(o,\"update\",e,t),o.def&&o.def.componentUpdated&&f.push(o)):(Ro(o,\"bind\",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var l=function(){for(var n=0;n<u.length;n++)Ro(u[n],\"inserted\",e,t)};i?we(e,\"insert\",l):l()}if(f.length&&we(e,\"postpatch\",(function(){for(var n=0;n<f.length;n++)Ro(f[n],\"componentUpdated\",e,t)})),!i)for(n in s)c[n]||Ro(s[n],\"unbind\",t,t,a)}var Mo=Object.create(null);function Fo(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)r=t[n],r.modifiers||(r.modifiers=Mo),o[Lo(r)]=r,r.def=Xt(e.$options,\"directives\",r.name,!0);return o}function Lo(t){return t.rawName||t.name+\".\"+Object.keys(t.modifiers||{}).join(\".\")}function Ro(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(Oa){ee(Oa,n.context,\"directive \"+t.name+\" \"+e+\" hook\")}}var Uo=[Co,Po];function zo(t,e){var n=e.componentOptions;if((!o(n)||!1!==n.Ctor.options.inheritAttrs)&&(!r(t.data.attrs)||!r(e.data.attrs))){var i,a,s,c=e.elm,u=t.data.attrs||{},f=e.data.attrs||{};for(i in o(f.__ob__)&&(f=e.data.attrs=T({},f)),f)a=f[i],s=u[i],s!==a&&Bo(c,i,a);for(i in(tt||nt)&&f.value!==u.value&&Bo(c,\"value\",f.value),u)r(f[i])&&(qr(i)?c.removeAttributeNS(Wr,Gr(i)):zr(i)||c.removeAttribute(i))}}function Bo(t,e,n){t.tagName.indexOf(\"-\")>-1?Vo(t,e,n):Hr(e)?Kr(n)?t.removeAttribute(e):(n=\"allowfullscreen\"===e&&\"EMBED\"===t.tagName?\"true\":e,t.setAttribute(e,n)):zr(e)?t.setAttribute(e,Vr(e,n)):qr(e)?Kr(n)?t.removeAttributeNS(Wr,Gr(e)):t.setAttributeNS(Wr,e,n):Vo(t,e,n)}function Vo(t,e,n){if(Kr(n))t.removeAttribute(e);else{if(tt&&!et&&\"TEXTAREA\"===t.tagName&&\"placeholder\"===e&&\"\"!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener(\"input\",r)};t.addEventListener(\"input\",r),t.__ieph=!0}t.setAttribute(e,n)}}var Ho={create:zo,update:zo};function Wo(t,e){var n=e.elm,i=e.data,a=t.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=Xr(e),c=n._transitionClasses;o(c)&&(s=Zr(s,Qr(c))),s!==n._prevClass&&(n.setAttribute(\"class\",s),n._prevClass=s)}}var qo,Go={create:Wo,update:Wo},Ko=\"__r\",Xo=\"__c\";function Jo(t){if(o(t[Ko])){var e=tt?\"change\":\"input\";t[e]=[].concat(t[Ko],t[e]||[]),delete t[Ko]}o(t[Xo])&&(t.change=[].concat(t[Xo],t.change||[]),delete t[Xo])}function Yo(t,e,n){var r=qo;return function o(){var i=e.apply(null,arguments);null!==i&&ti(t,o,n,r)}}var Zo=ae&&!(ot&&Number(ot[1])<=53);function Qo(t,e,n,r){if(Zo){var o=Gn,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}qo.addEventListener(t,e,at?{capture:n,passive:r}:n)}function ti(t,e,n,r){(r||qo).removeEventListener(t,e._wrapper||e,n)}function ei(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=e.data.on||{},o=t.data.on||{};qo=e.elm,Jo(n),_e(n,o,Qo,ti,Yo,e.context),qo=void 0}}var ni,ri={create:ei,update:ei};function oi(t,e){if(!r(t.data.domProps)||!r(e.data.domProps)){var n,i,a=e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n in o(c.__ob__)&&(c=e.data.domProps=T({},c)),s)n in c||(a[n]=\"\");for(n in c){if(i=c[n],\"textContent\"===n||\"innerHTML\"===n){if(e.children&&(e.children.length=0),i===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if(\"value\"===n&&\"PROGRESS\"!==a.tagName){a._value=i;var u=r(i)?\"\":String(i);ii(a,u)&&(a.value=u)}else if(\"innerHTML\"===n&&oo(a.tagName)&&r(a.innerHTML)){ni=ni||document.createElement(\"div\"),ni.innerHTML=\"<svg>\"+i+\"</svg>\";var f=ni.firstChild;while(a.firstChild)a.removeChild(a.firstChild);while(f.firstChild)a.appendChild(f.firstChild)}else if(i!==s[n])try{a[n]=i}catch(Oa){}}}}function ii(t,e){return!t.composing&&(\"OPTION\"===t.tagName||ai(t,e)||si(t,e))}function ai(t,e){var n=!0;try{n=document.activeElement!==t}catch(Oa){}return n&&t.value!==e}function si(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}var ci={create:oi,update:oi},ui=w((function(t){var e={},n=/;(?![^(]*\\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function fi(t){var e=li(t.style);return t.staticStyle?T(t.staticStyle,e):e}function li(t){return Array.isArray(t)?I(t):\"string\"===typeof t?ui(t):t}function pi(t,e){var n,r={};if(e){var o=t;while(o.componentInstance)o=o.componentInstance._vnode,o&&o.data&&(n=fi(o.data))&&T(r,n)}(n=fi(t.data))&&T(r,n);var i=t;while(i=i.parent)i.data&&(n=fi(i.data))&&T(r,n);return r}var di,vi=/^--/,hi=/\\s*!important$/,yi=function(t,e,n){if(vi.test(e))t.style.setProperty(e,n);else if(hi.test(n))t.style.setProperty($(e),n.replace(hi,\"\"),\"important\");else{var r=gi(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},mi=[\"Webkit\",\"Moz\",\"ms\"],gi=w((function(t){if(di=di||document.createElement(\"div\").style,t=O(t),\"filter\"!==t&&t in di)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<mi.length;n++){var r=mi[n]+e;if(r in di)return r}}));function bi(t,e){var n=e.data,i=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var a,s,c=e.elm,u=i.staticStyle,f=i.normalizedStyle||i.style||{},l=u||f,p=li(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?T({},p):p;var d=pi(e,!0);for(s in l)r(d[s])&&yi(c,s,\"\");for(s in d)a=d[s],a!==l[s]&&yi(c,s,null==a?\"\":a)}}var _i={create:bi,update:bi},wi=/\\s+/;function xi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(\" \")>-1?e.split(wi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \";n.indexOf(\" \"+e+\" \")<0&&t.setAttribute(\"class\",(n+e).trim())}}function Oi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(\" \")>-1?e.split(wi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute(\"class\");else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \",r=\" \"+e+\" \";while(n.indexOf(r)>=0)n=n.replace(r,\" \");n=n.trim(),n?t.setAttribute(\"class\",n):t.removeAttribute(\"class\")}}function Ai(t){if(t){if(\"object\"===typeof t){var e={};return!1!==t.css&&T(e,Ci(t.name||\"v\")),T(e,t),e}return\"string\"===typeof t?Ci(t):void 0}}var Ci=w((function(t){return{enterClass:t+\"-enter\",enterToClass:t+\"-enter-to\",enterActiveClass:t+\"-enter-active\",leaveClass:t+\"-leave\",leaveToClass:t+\"-leave-to\",leaveActiveClass:t+\"-leave-active\"}})),$i=J&&!et,Si=\"transition\",ki=\"animation\",ji=\"transition\",Ei=\"transitionend\",Ti=\"animation\",Ii=\"animationend\";$i&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ji=\"WebkitTransition\",Ei=\"webkitTransitionEnd\"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ti=\"WebkitAnimation\",Ii=\"webkitAnimationEnd\"));var Pi=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Di(t){Pi((function(){Pi(t)}))}function Ni(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),xi(t,e))}function Mi(t,e){t._transitionClasses&&g(t._transitionClasses,e),Oi(t,e)}function Fi(t,e,n){var r=Ri(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===Si?Ei:Ii,c=0,u=function(){t.removeEventListener(s,f),n()},f=function(e){e.target===t&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,f)}var Li=/\\b(transform|all)(,|$)/;function Ri(t,e){var n,r=window.getComputedStyle(t),o=(r[ji+\"Delay\"]||\"\").split(\", \"),i=(r[ji+\"Duration\"]||\"\").split(\", \"),a=Ui(o,i),s=(r[Ti+\"Delay\"]||\"\").split(\", \"),c=(r[Ti+\"Duration\"]||\"\").split(\", \"),u=Ui(s,c),f=0,l=0;e===Si?a>0&&(n=Si,f=a,l=i.length):e===ki?u>0&&(n=ki,f=u,l=c.length):(f=Math.max(a,u),n=f>0?a>u?Si:ki:null,l=n?n===Si?i.length:c.length:0);var p=n===Si&&Li.test(r[ji+\"Property\"]);return{type:n,timeout:f,propCount:l,hasTransform:p}}function Ui(t,e){while(t.length<e.length)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return zi(e)+zi(t[n])})))}function zi(t){return 1e3*Number(t.slice(0,-1).replace(\",\",\".\"))}function Bi(t,e){var n=t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Ai(t.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){var a=i.css,s=i.type,u=i.enterClass,f=i.enterToClass,l=i.enterActiveClass,p=i.appearClass,d=i.appearToClass,v=i.appearActiveClass,y=i.beforeEnter,m=i.enter,g=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,w=i.appear,x=i.afterAppear,O=i.appearCancelled,A=i.duration,C=En,$=En.$vnode;while($&&$.parent)C=$.context,$=$.parent;var S=!C._isMounted||!t.isRootInsert;if(!S||w||\"\"===w){var k=S&&p?p:u,j=S&&v?v:l,E=S&&d?d:f,T=S&&_||y,I=S&&\"function\"===typeof w?w:m,P=S&&x||g,D=S&&O||b,N=h(c(A)?A.enter:A);0;var M=!1!==a&&!et,F=Wi(I),R=n._enterCb=L((function(){M&&(Mi(n,E),Mi(n,j)),R.cancelled?(M&&Mi(n,k),D&&D(n)):P&&P(n),n._enterCb=null}));t.data.show||we(t,\"insert\",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(n,R)})),T&&T(n),M&&(Ni(n,k),Ni(n,j),Di((function(){Mi(n,k),R.cancelled||(Ni(n,E),F||(Hi(N)?setTimeout(R,N):Fi(n,s,R)))}))),t.data.show&&(e&&e(),I&&I(n,R)),M||F||R()}}}function Vi(t,e){var n=t.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Ai(t.data.transition);if(r(i)||1!==n.nodeType)return e();if(!o(n._leaveCb)){var a=i.css,s=i.type,u=i.leaveClass,f=i.leaveToClass,l=i.leaveActiveClass,p=i.beforeLeave,d=i.leave,v=i.afterLeave,y=i.leaveCancelled,m=i.delayLeave,g=i.duration,b=!1!==a&&!et,_=Wi(d),w=h(c(g)?g.leave:g);0;var x=n._leaveCb=L((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(Mi(n,f),Mi(n,l)),x.cancelled?(b&&Mi(n,u),y&&y(n)):(e(),v&&v(n)),n._leaveCb=null}));m?m(O):O()}function O(){x.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),b&&(Ni(n,u),Ni(n,l),Di((function(){Mi(n,u),x.cancelled||(Ni(n,f),_||(Hi(w)?setTimeout(x,w):Fi(n,s,x)))}))),d&&d(n,x),b||_||x())}}function Hi(t){return\"number\"===typeof t&&!isNaN(t)}function Wi(t){if(r(t))return!1;var e=t.fns;return o(e)?Wi(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function qi(t,e){!0!==e.data.show&&Bi(e)}var Gi=J?{create:qi,activate:qi,remove:function(t,e){!0!==t.data.show?Vi(t,e):e()}}:{},Ki=[Ho,Go,ri,ci,_i,Gi],Xi=Ki.concat(Uo),Ji=Io({nodeOps:Ao,modules:Xi});et&&document.addEventListener(\"selectionchange\",(function(){var t=document.activeElement;t&&t.vmodel&&oa(t,\"input\")}));var Yi={inserted:function(t,e,n,r){\"select\"===n.tag?(r.elm&&!r.elm._vOptions?we(n,\"postpatch\",(function(){Yi.componentUpdated(t,e,n)})):Zi(t,e,n.context),t._vOptions=[].map.call(t.options,ea)):(\"textarea\"===n.tag||uo(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener(\"compositionstart\",na),t.addEventListener(\"compositionend\",ra),t.addEventListener(\"change\",ra),et&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if(\"select\"===n.tag){Zi(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,ea);if(o.some((function(t,e){return!M(t,r[e])}))){var i=t.multiple?e.value.some((function(t){return ta(t,o)})):e.value!==e.oldValue&&ta(e.value,o);i&&oa(t,\"change\")}}}};function Zi(t,e,n){Qi(t,e,n),(tt||nt)&&setTimeout((function(){Qi(t,e,n)}),0)}function Qi(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=F(r,ea(a))>-1,a.selected!==i&&(a.selected=i);else if(M(ea(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function ta(t,e){return e.every((function(e){return!M(e,t)}))}function ea(t){return\"_value\"in t?t._value:t.value}function na(t){t.target.composing=!0}function ra(t){t.target.composing&&(t.target.composing=!1,oa(t.target,\"input\"))}function oa(t,e){var n=document.createEvent(\"HTMLEvents\");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function ia(t){return!t.componentInstance||t.data&&t.data.transition?t:ia(t.componentInstance._vnode)}var aa={bind:function(t,e,n){var r=e.value;n=ia(n);var o=n.data&&n.data.transition,i=t.__vOriginalDisplay=\"none\"===t.style.display?\"\":t.style.display;r&&o?(n.data.show=!0,Bi(n,(function(){t.style.display=i}))):t.style.display=r?i:\"none\"},update:function(t,e,n){var r=e.value,o=e.oldValue;if(!r!==!o){n=ia(n);var i=n.data&&n.data.transition;i?(n.data.show=!0,r?Bi(n,(function(){t.style.display=t.__vOriginalDisplay})):Vi(n,(function(){t.style.display=\"none\"}))):t.style.display=r?t.__vOriginalDisplay:\"none\"}},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}},sa={model:Yi,show:aa},ca={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ua(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ua(On(e.children)):t}function fa(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[O(i)]=o[i];return e}function la(t,e){if(/\\d-keep-alive$/.test(e.tag))return t(\"keep-alive\",{props:e.componentOptions.propsData})}function pa(t){while(t=t.parent)if(t.data.transition)return!0}function da(t,e){return e.key===t.key&&e.tag===t.tag}var va=function(t){return t.tag||xn(t)},ha=function(t){return\"show\"===t.name},ya={name:\"transition\",props:ca,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(va),n.length)){0;var r=this.mode;0;var o=n[0];if(pa(this.$vnode))return o;var i=ua(o);if(!i)return o;if(this._leaving)return la(t,o);var a=\"__transition-\"+this._uid+\"-\";i.key=null==i.key?i.isComment?a+\"comment\":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=fa(this),u=this._vnode,f=ua(u);if(i.data.directives&&i.data.directives.some(ha)&&(i.data.show=!0),f&&f.data&&!da(i,f)&&!xn(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var l=f.data.transition=T({},c);if(\"out-in\"===r)return this._leaving=!0,we(l,\"afterLeave\",(function(){e._leaving=!1,e.$forceUpdate()})),la(t,o);if(\"in-out\"===r){if(xn(i))return u;var p,d=function(){p()};we(c,\"afterEnter\",d),we(c,\"enterCancelled\",d),we(l,\"delayLeave\",(function(t){p=t}))}}return o}}},ma=T({tag:String,moveClass:String},ca);delete ma.mode;var ga={props:ma,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Tn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||\"span\",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=fa(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf(\"__vlist\"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var u=[],f=[],l=0;l<r.length;l++){var p=r[l];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):f.push(p)}this.kept=t(e,null,u),this.removed=f}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||\"v\")+\"-move\";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(ba),t.forEach(_a),t.forEach(wa),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;Ni(n,e),r.transform=r.WebkitTransform=r.transitionDuration=\"\",n.addEventListener(Ei,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Ei,t),n._moveCb=null,Mi(n,e))})}})))},methods:{hasMove:function(t,e){if(!$i)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){Oi(n,t)})),xi(n,e),n.style.display=\"none\",this.$el.appendChild(n);var r=Ri(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function ba(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function _a(t){t.data.newPos=t.elm.getBoundingClientRect()}function wa(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform=\"translate(\"+r+\"px,\"+o+\"px)\",i.transitionDuration=\"0s\"}}var xa={Transition:ya,TransitionGroup:ga};Or.config.mustUseProp=Ur,Or.config.isReservedTag=io,Or.config.isReservedAttr=Lr,Or.config.getTagNamespace=ao,Or.config.isUnknownElement=co,T(Or.options.directives,sa),T(Or.options.components,xa),Or.prototype.__patch__=J?Ji:P,Or.prototype.$mount=function(t,e){return t=t&&J?fo(t):void 0,Dn(this,t,e)},J&&setTimeout((function(){B.devtools&&ut&&ut.emit(\"init\",Or)}),0),e[\"a\"]=Or}).call(this,n(\"c8ba\"))},\"2cf4\":function(t,e,n){var r,o,i,a=n(\"da84\"),s=n(\"d039\"),c=n(\"0366\"),u=n(\"1be4\"),f=n(\"cc12\"),l=n(\"1cdc\"),p=n(\"605d\"),d=a.location,v=a.setImmediate,h=a.clearImmediate,y=a.process,m=a.MessageChannel,g=a.Dispatch,b=0,_={},w=\"onreadystatechange\",x=function(t){if(_.hasOwnProperty(t)){var e=_[t];delete _[t],e()}},O=function(t){return function(){x(t)}},A=function(t){x(t.data)},C=function(t){a.postMessage(t+\"\",d.protocol+\"//\"+d.host)};v&&h||(v=function(t){var e=[],n=1;while(arguments.length>n)e.push(arguments[n++]);return _[++b]=function(){(\"function\"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},h=function(t){delete _[t]},p?r=function(t){y.nextTick(O(t))}:g&&g.now?r=function(t){g.now(O(t))}:m&&!l?(o=new m,i=o.port2,o.port1.onmessage=A,r=c(i.postMessage,i,1)):a.addEventListener&&\"function\"==typeof postMessage&&!a.importScripts&&d&&\"file:\"!==d.protocol&&!s(C)?(r=C,a.addEventListener(\"message\",A,!1)):r=w in f(\"script\")?function(t){u.appendChild(f(\"script\"))[w]=function(){u.removeChild(this),x(t)}}:function(t){setTimeout(O(t),0)}),t.exports={set:v,clear:h}},\"2d00\":function(t,e,n){var r,o,i=n(\"da84\"),a=n(\"342f\"),s=i.process,c=s&&s.versions,u=c&&c.v8;u?(r=u.split(\".\"),o=r[0]+r[1]):a&&(r=a.match(/Edge\\/(\\d+)/),(!r||r[1]>=74)&&(r=a.match(/Chrome\\/(\\d+)/),r&&(o=r[1]))),t.exports=o&&+o},\"342f\":function(t,e,n){var r=n(\"d066\");t.exports=r(\"navigator\",\"userAgent\")||\"\"},\"35a1\":function(t,e,n){var r=n(\"f5df\"),o=n(\"3f8c\"),i=n(\"b622\"),a=i(\"iterator\");t.exports=function(t){if(void 0!=t)return t[a]||t[\"@@iterator\"]||o[r(t)]}},\"37e8\":function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\"),i=n(\"825a\"),a=n(\"df75\");t.exports=r?Object.defineProperties:function(t,e){i(t);var n,r=a(e),s=r.length,c=0;while(s>c)o.f(t,n=r[c++],e[n]);return t}},\"3bbe\":function(t,e,n){var r=n(\"861d\");t.exports=function(t){if(!r(t)&&null!==t)throw TypeError(\"Can't set \"+String(t)+\" as a prototype\");return t}},\"3f8c\":function(t,e){t.exports={}},\"428f\":function(t,e,n){var r=n(\"da84\");t.exports=r},\"44ad\":function(t,e,n){var r=n(\"d039\"),o=n(\"c6b6\"),i=\"\".split;t.exports=r((function(){return!Object(\"z\").propertyIsEnumerable(0)}))?function(t){return\"String\"==o(t)?i.call(t,\"\"):Object(t)}:Object},\"44d2\":function(t,e,n){var r=n(\"b622\"),o=n(\"7c73\"),i=n(\"9bf2\"),a=r(\"unscopables\"),s=Array.prototype;void 0==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),t.exports=function(t){s[a][t]=!0}},\"44de\":function(t,e,n){var r=n(\"da84\");t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},4840:function(t,e,n){var r=n(\"825a\"),o=n(\"1c0b\"),i=n(\"b622\"),a=i(\"species\");t.exports=function(t,e){var n,i=r(t).constructor;return void 0===i||void 0==(n=r(i)[a])?e:o(n)}},4930:function(t,e,n){var r=n(\"605d\"),o=n(\"2d00\"),i=n(\"d039\");t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},\"4d64\":function(t,e,n){var r=n(\"fc6a\"),o=n(\"50c4\"),i=n(\"23cb\"),a=function(t){return function(e,n,a){var s,c=r(e),u=o(c.length),f=i(a,u);if(t&&n!=n){while(u>f)if(s=c[f++],s!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},\"50c4\":function(t,e,n){var r=n(\"a691\"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},5135:function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},5692:function(t,e,n){var r=n(\"c430\"),o=n(\"c6cd\");(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.9.1\",mode:r?\"pure\":\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"})},\"56ef\":function(t,e,n){var r=n(\"d066\"),o=n(\"241c\"),i=n(\"7418\"),a=n(\"825a\");t.exports=r(\"Reflect\",\"ownKeys\")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},\"5c6c\":function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},\"605d\":function(t,e,n){var r=n(\"c6b6\"),o=n(\"da84\");t.exports=\"process\"==r(o.process)},\"60da\":function(t,e,n){\"use strict\";var r=n(\"83ab\"),o=n(\"d039\"),i=n(\"df75\"),a=n(\"7418\"),s=n(\"d1e7\"),c=n(\"7b0b\"),u=n(\"44ad\"),f=Object.assign,l=Object.defineProperty;t.exports=!f||o((function(){if(r&&1!==f({b:1},f(l({},\"a\",{enumerable:!0,get:function(){l(this,\"b\",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o=\"abcdefghijklmnopqrst\";return t[n]=7,o.split(\"\").forEach((function(t){e[t]=t})),7!=f({},t)[n]||i(f({},e)).join(\"\")!=o}))?function(t,e){var n=c(t),o=arguments.length,f=1,l=a.f,p=s.f;while(o>f){var d,v=u(arguments[f++]),h=l?i(v).concat(l(v)):i(v),y=h.length,m=0;while(y>m)d=h[m++],r&&!p.call(v,d)||(n[d]=v[d])}return n}:f},\"65f0\":function(t,e,n){var r=n(\"861d\"),o=n(\"e8b5\"),i=n(\"b622\"),a=i(\"species\");t.exports=function(t,e){var n;return o(t)&&(n=t.constructor,\"function\"!=typeof n||n!==Array&&!o(n.prototype)?r(n)&&(n=n[a],null===n&&(n=void 0)):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},\"69f3\":function(t,e,n){var r,o,i,a=n(\"7f9a\"),s=n(\"da84\"),c=n(\"861d\"),u=n(\"9112\"),f=n(\"5135\"),l=n(\"c6cd\"),p=n(\"f772\"),d=n(\"d012\"),v=s.WeakMap,h=function(t){return i(t)?o(t):r(t,{})},y=function(t){return function(e){var n;if(!c(e)||(n=o(e)).type!==t)throw TypeError(\"Incompatible receiver, \"+t+\" required\");return n}};if(a){var m=l.state||(l.state=new v),g=m.get,b=m.has,_=m.set;r=function(t,e){return e.facade=t,_.call(m,t,e),e},o=function(t){return g.call(m,t)||{}},i=function(t){return b.call(m,t)}}else{var w=p(\"state\");d[w]=!0,r=function(t,e){return e.facade=t,u(t,w,e),e},o=function(t){return f(t,w)?t[w]:{}},i=function(t){return f(t,w)}}t.exports={set:r,get:o,has:i,enforce:h,getterFor:y}},\"6eeb\":function(t,e,n){var r=n(\"da84\"),o=n(\"9112\"),i=n(\"5135\"),a=n(\"ce4e\"),s=n(\"8925\"),c=n(\"69f3\"),u=c.get,f=c.enforce,l=String(String).split(\"String\");(t.exports=function(t,e,n,s){var c,u=!!s&&!!s.unsafe,p=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;\"function\"==typeof n&&(\"string\"!=typeof e||i(n,\"name\")||o(n,\"name\",e),c=f(n),c.source||(c.source=l.join(\"string\"==typeof e?e:\"\"))),t!==r?(u?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=n:o(t,e,n)):p?t[e]=n:a(e,n)})(Function.prototype,\"toString\",(function(){return\"function\"==typeof this&&u(this).source||s(this)}))},7418:function(t,e){e.f=Object.getOwnPropertySymbols},7839:function(t,e){t.exports=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"]},\"7b0b\":function(t,e,n){var r=n(\"1d80\");t.exports=function(t){return Object(r(t))}},\"7c73\":function(t,e,n){var r,o=n(\"825a\"),i=n(\"37e8\"),a=n(\"7839\"),s=n(\"d012\"),c=n(\"1be4\"),u=n(\"cc12\"),f=n(\"f772\"),l=\">\",p=\"<\",d=\"prototype\",v=\"script\",h=f(\"IE_PROTO\"),y=function(){},m=function(t){return p+v+l+t+p+\"/\"+v+l},g=function(t){t.write(m(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},b=function(){var t,e=u(\"iframe\"),n=\"java\"+v+\":\";return e.style.display=\"none\",c.appendChild(e),e.src=String(n),t=e.contentWindow.document,t.open(),t.write(m(\"document.F=Object\")),t.close(),t.F},_=function(){try{r=document.domain&&new ActiveXObject(\"htmlfile\")}catch(e){}_=r?g(r):b();var t=a.length;while(t--)delete _[d][a[t]];return _()};s[h]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(y[d]=o(t),n=new y,y[d]=null,n[h]=t):n=_(),void 0===e?n:i(n,e)}},\"7dd0\":function(t,e,n){\"use strict\";var r=n(\"23e7\"),o=n(\"9ed3\"),i=n(\"e163\"),a=n(\"d2bb\"),s=n(\"d44e\"),c=n(\"9112\"),u=n(\"6eeb\"),f=n(\"b622\"),l=n(\"c430\"),p=n(\"3f8c\"),d=n(\"ae93\"),v=d.IteratorPrototype,h=d.BUGGY_SAFARI_ITERATORS,y=f(\"iterator\"),m=\"keys\",g=\"values\",b=\"entries\",_=function(){return this};t.exports=function(t,e,n,f,d,w,x){o(n,e,f);var O,A,C,$=function(t){if(t===d&&T)return T;if(!h&&t in j)return j[t];switch(t){case m:return function(){return new n(this,t)};case g:return function(){return new n(this,t)};case b:return function(){return new n(this,t)}}return function(){return new n(this)}},S=e+\" Iterator\",k=!1,j=t.prototype,E=j[y]||j[\"@@iterator\"]||d&&j[d],T=!h&&E||$(d),I=\"Array\"==e&&j.entries||E;if(I&&(O=i(I.call(new t)),v!==Object.prototype&&O.next&&(l||i(O)===v||(a?a(O,v):\"function\"!=typeof O[y]&&c(O,y,_)),s(O,S,!0,!0),l&&(p[S]=_))),d==g&&E&&E.name!==g&&(k=!0,T=function(){return E.call(this)}),l&&!x||j[y]===T||c(j,y,T),p[e]=T,d)if(A={values:$(g),keys:w?T:$(m),entries:$(b)},x)for(C in A)(h||k||!(C in j))&&u(j,C,A[C]);else r({target:e,proto:!0,forced:h||k},A);return A}},\"7f9a\":function(t,e,n){var r=n(\"da84\"),o=n(\"8925\"),i=r.WeakMap;t.exports=\"function\"===typeof i&&/native code/.test(o(i))},\"825a\":function(t,e,n){var r=n(\"861d\");t.exports=function(t){if(!r(t))throw TypeError(String(t)+\" is not an object\");return t}},\"83ab\":function(t,e,n){var r=n(\"d039\");t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},\"861d\":function(t,e){t.exports=function(t){return\"object\"===typeof t?null!==t:\"function\"===typeof t}},8925:function(t,e,n){var r=n(\"c6cd\"),o=Function.toString;\"function\"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},\"90e3\":function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\"+String(void 0===t?\"\":t)+\")_\"+(++n+r).toString(36)}},9112:function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\"),i=n(\"5c6c\");t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},\"94ca\":function(t,e,n){var r=n(\"d039\"),o=/#|\\.prototype\\./,i=function(t,e){var n=s[a(t)];return n==u||n!=c&&(\"function\"==typeof e?r(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,\".\").toLowerCase()},s=i.data={},c=i.NATIVE=\"N\",u=i.POLYFILL=\"P\";t.exports=i},\"9bf2\":function(t,e,n){var r=n(\"83ab\"),o=n(\"0cfb\"),i=n(\"825a\"),a=n(\"c04e\"),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(i(t),e=a(e,!0),i(n),o)try{return s(t,e,n)}catch(r){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported\");return\"value\"in n&&(t[e]=n.value),t}},\"9ed3\":function(t,e,n){\"use strict\";var r=n(\"ae93\").IteratorPrototype,o=n(\"7c73\"),i=n(\"5c6c\"),a=n(\"d44e\"),s=n(\"3f8c\"),c=function(){return this};t.exports=function(t,e,n){var u=e+\" Iterator\";return t.prototype=o(r,{next:i(1,n)}),a(t,u,!1,!0),s[u]=c,t}},a4b4:function(t,e,n){var r=n(\"342f\");t.exports=/web0s(?!.*chrome)/i.test(r)},a691:function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},a79d:function(t,e,n){\"use strict\";var r=n(\"23e7\"),o=n(\"c430\"),i=n(\"fea9\"),a=n(\"d039\"),s=n(\"d066\"),c=n(\"4840\"),u=n(\"cdf9\"),f=n(\"6eeb\"),l=!!i&&a((function(){i.prototype[\"finally\"].call({then:function(){}},(function(){}))}));r({target:\"Promise\",proto:!0,real:!0,forced:l},{finally:function(t){var e=c(this,s(\"Promise\")),n=\"function\"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),o||\"function\"!=typeof i||i.prototype[\"finally\"]||f(i.prototype,\"finally\",s(\"Promise\").prototype[\"finally\"])},ae93:function(t,e,n){\"use strict\";var r,o,i,a=n(\"d039\"),s=n(\"e163\"),c=n(\"9112\"),u=n(\"5135\"),f=n(\"b622\"),l=n(\"c430\"),p=f(\"iterator\"),d=!1,v=function(){return this};[].keys&&(i=[].keys(),\"next\"in i?(o=s(s(i)),o!==Object.prototype&&(r=o)):d=!0);var h=void 0==r||a((function(){var t={};return r[p].call(t)!==t}));h&&(r={}),l&&!h||u(r,p)||c(r,p,v),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},b0c0:function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\").f,i=Function.prototype,a=i.toString,s=/^\\s*function ([^ (]*)/,c=\"name\";r&&!(c in i)&&o(i,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return\"\"}}})},b575:function(t,e,n){var r,o,i,a,s,c,u,f,l=n(\"da84\"),p=n(\"06cf\").f,d=n(\"2cf4\").set,v=n(\"1cdc\"),h=n(\"a4b4\"),y=n(\"605d\"),m=l.MutationObserver||l.WebKitMutationObserver,g=l.document,b=l.process,_=l.Promise,w=p(l,\"queueMicrotask\"),x=w&&w.value;x||(r=function(){var t,e;y&&(t=b.domain)&&t.exit();while(o){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,t&&t.enter()},v||y||h||!m||!g?_&&_.resolve?(u=_.resolve(void 0),f=u.then,a=function(){f.call(u,r)}):a=y?function(){b.nextTick(r)}:function(){d.call(l,r)}:(s=!0,c=g.createTextNode(\"\"),new m(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},b622:function(t,e,n){var r=n(\"da84\"),o=n(\"5692\"),i=n(\"5135\"),a=n(\"90e3\"),s=n(\"4930\"),c=n(\"fdbf\"),u=o(\"wks\"),f=r.Symbol,l=c?f:f&&f.withoutSetter||a;t.exports=function(t){return i(u,t)&&(s||\"string\"==typeof u[t])||(s&&i(f,t)?u[t]=f[t]:u[t]=l(\"Symbol.\"+t)),u[t]}},b727:function(t,e,n){var r=n(\"0366\"),o=n(\"44ad\"),i=n(\"7b0b\"),a=n(\"50c4\"),s=n(\"65f0\"),c=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,f=4==t,l=6==t,p=7==t,d=5==t||l;return function(v,h,y,m){for(var g,b,_=i(v),w=o(_),x=r(h,y,3),O=a(w.length),A=0,C=m||s,$=e?C(v,O):n||p?C(v,0):void 0;O>A;A++)if((d||A in w)&&(g=w[A],b=x(g,A,_),t))if(e)$[A]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return A;case 2:c.call($,g)}else switch(t){case 4:return!1;case 7:c.call($,g)}return l?-1:u||f?f:$}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterOut:u(7)}},c04e:function(t,e,n){var r=n(\"861d\");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if(\"function\"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},c430:function(t,e){t.exports=!1},c6b6:function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},c6cd:function(t,e,n){var r=n(\"da84\"),o=n(\"ce4e\"),i=\"__core-js_shared__\",a=r[i]||o(i,{});t.exports=a},c8ba:function(t,e){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(r){\"object\"===typeof window&&(n=window)}t.exports=n},ca84:function(t,e,n){var r=n(\"5135\"),o=n(\"fc6a\"),i=n(\"4d64\").indexOf,a=n(\"d012\");t.exports=function(t,e){var n,s=o(t),c=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);while(e.length>c)r(s,n=e[c++])&&(~i(u,n)||u.push(n));return u}},cc12:function(t,e,n){var r=n(\"da84\"),o=n(\"861d\"),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},cca6:function(t,e,n){var r=n(\"23e7\"),o=n(\"60da\");r({target:\"Object\",stat:!0,forced:Object.assign!==o},{assign:o})},cdf9:function(t,e,n){var r=n(\"825a\"),o=n(\"861d\"),i=n(\"f069\");t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t),a=n.resolve;return a(e),n.promise}},ce4e:function(t,e,n){var r=n(\"da84\"),o=n(\"9112\");t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},d012:function(t,e){t.exports={}},d039:function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},d066:function(t,e,n){var r=n(\"428f\"),o=n(\"da84\"),i=function(t){return\"function\"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){\"use strict\";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},d2bb:function(t,e,n){var r=n(\"825a\"),o=n(\"3bbe\");t.exports=Object.setPrototypeOf||(\"__proto__\"in{}?function(){var t,e=!1,n={};try{t=Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set,t.call(n,[]),e=n instanceof Array}catch(i){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},d44e:function(t,e,n){var r=n(\"9bf2\").f,o=n(\"5135\"),i=n(\"b622\"),a=i(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,a)&&r(t,a,{configurable:!0,value:e})}},d81d:function(t,e,n){\"use strict\";var r=n(\"23e7\"),o=n(\"b727\").map,i=n(\"1dde\"),a=i(\"map\");r({target:\"Array\",proto:!0,forced:!a},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},da84:function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n(\"object\"==typeof globalThis&&globalThis)||n(\"object\"==typeof window&&window)||n(\"object\"==typeof self&&self)||n(\"object\"==typeof e&&e)||function(){return this}()||Function(\"return this\")()}).call(this,n(\"c8ba\"))},df75:function(t,e,n){var r=n(\"ca84\"),o=n(\"7839\");t.exports=Object.keys||function(t){return r(t,o)}},e163:function(t,e,n){var r=n(\"5135\"),o=n(\"7b0b\"),i=n(\"f772\"),a=n(\"e177\"),s=i(\"IE_PROTO\"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},e177:function(t,e,n){var r=n(\"d039\");t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},e260:function(t,e,n){\"use strict\";var r=n(\"fc6a\"),o=n(\"44d2\"),i=n(\"3f8c\"),a=n(\"69f3\"),s=n(\"7dd0\"),c=\"Array Iterator\",u=a.set,f=a.getterFor(c);t.exports=s(Array,\"Array\",(function(t,e){u(this,{type:c,target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):\"keys\"==n?{value:r,done:!1}:\"values\"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),\"values\"),i.Arguments=i.Array,o(\"keys\"),o(\"values\"),o(\"entries\")},e2cc:function(t,e,n){var r=n(\"6eeb\");t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},e667:function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(e){return{error:!0,value:e}}}},e6cf:function(t,e,n){\"use strict\";var r,o,i,a,s=n(\"23e7\"),c=n(\"c430\"),u=n(\"da84\"),f=n(\"d066\"),l=n(\"fea9\"),p=n(\"6eeb\"),d=n(\"e2cc\"),v=n(\"d44e\"),h=n(\"2626\"),y=n(\"861d\"),m=n(\"1c0b\"),g=n(\"19aa\"),b=n(\"8925\"),_=n(\"2266\"),w=n(\"1c7e\"),x=n(\"4840\"),O=n(\"2cf4\").set,A=n(\"b575\"),C=n(\"cdf9\"),$=n(\"44de\"),S=n(\"f069\"),k=n(\"e667\"),j=n(\"69f3\"),E=n(\"94ca\"),T=n(\"b622\"),I=n(\"605d\"),P=n(\"2d00\"),D=T(\"species\"),N=\"Promise\",M=j.get,F=j.set,L=j.getterFor(N),R=l,U=u.TypeError,z=u.document,B=u.process,V=f(\"fetch\"),H=S.f,W=H,q=!!(z&&z.createEvent&&u.dispatchEvent),G=\"function\"==typeof PromiseRejectionEvent,K=\"unhandledrejection\",X=\"rejectionhandled\",J=0,Y=1,Z=2,Q=1,tt=2,et=E(N,(function(){var t=b(R)!==String(R);if(!t){if(66===P)return!0;if(!I&&!G)return!0}if(c&&!R.prototype[\"finally\"])return!0;if(P>=51&&/native code/.test(R))return!1;var e=R.resolve(1),n=function(t){t((function(){}),(function(){}))},r=e.constructor={};return r[D]=n,!(e.then((function(){}))instanceof n)})),nt=et||!w((function(t){R.all(t)[\"catch\"]((function(){}))})),rt=function(t){var e;return!(!y(t)||\"function\"!=typeof(e=t.then))&&e},ot=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;A((function(){var r=t.value,o=t.state==Y,i=0;while(n.length>i){var a,s,c,u=n[i++],f=o?u.ok:u.fail,l=u.resolve,p=u.reject,d=u.domain;try{f?(o||(t.rejection===tt&&ct(t),t.rejection=Q),!0===f?a=r:(d&&d.enter(),a=f(r),d&&(d.exit(),c=!0)),a===u.promise?p(U(\"Promise-chain cycle\")):(s=rt(a))?s.call(a,l,p):l(a)):p(r)}catch(v){d&&!c&&d.exit(),p(v)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&at(t)}))}},it=function(t,e,n){var r,o;q?(r=z.createEvent(\"Event\"),r.promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},!G&&(o=u[\"on\"+t])?o(r):t===K&&$(\"Unhandled promise rejection\",n)},at=function(t){O.call(u,(function(){var e,n=t.facade,r=t.value,o=st(t);if(o&&(e=k((function(){I?B.emit(\"unhandledRejection\",r,n):it(K,n,r)})),t.rejection=I||st(t)?tt:Q,e.error))throw e.value}))},st=function(t){return t.rejection!==Q&&!t.parent},ct=function(t){O.call(u,(function(){var e=t.facade;I?B.emit(\"rejectionHandled\",e):it(X,e,t.value)}))},ut=function(t,e,n){return function(r){t(e,r,n)}},ft=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=Z,ot(t,!0))},lt=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw U(\"Promise can't be resolved itself\");var r=rt(e);r?A((function(){var n={done:!1};try{r.call(e,ut(lt,n,t),ut(ft,n,t))}catch(o){ft(n,o,t)}})):(t.value=e,t.state=Y,ot(t,!1))}catch(o){ft({done:!1},o,t)}}};et&&(R=function(t){g(this,R,N),m(t),r.call(this);var e=M(this);try{t(ut(lt,e),ut(ft,e))}catch(n){ft(e,n)}},r=function(t){F(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:J,value:void 0})},r.prototype=d(R.prototype,{then:function(t,e){var n=L(this),r=H(x(this,R));return r.ok=\"function\"!=typeof t||t,r.fail=\"function\"==typeof e&&e,r.domain=I?B.domain:void 0,n.parent=!0,n.reactions.push(r),n.state!=J&&ot(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=M(t);this.promise=t,this.resolve=ut(lt,e),this.reject=ut(ft,e)},S.f=H=function(t){return t===R||t===i?new o(t):W(t)},c||\"function\"!=typeof l||(a=l.prototype.then,p(l.prototype,\"then\",(function(t,e){var n=this;return new R((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),\"function\"==typeof V&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return C(R,V.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:et},{Promise:R}),v(R,N,!1,!0),h(N),i=f(N),s({target:N,stat:!0,forced:et},{reject:function(t){var e=H(this);return e.reject.call(void 0,t),e.promise}}),s({target:N,stat:!0,forced:c||et},{resolve:function(t){return C(c&&this===i?R:this,t)}}),s({target:N,stat:!0,forced:nt},{all:function(t){var e=this,n=H(e),r=n.resolve,o=n.reject,i=k((function(){var n=m(e.resolve),i=[],a=0,s=1;_(t,(function(t){var c=a++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[c]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=H(e),r=n.reject,o=k((function(){var o=m(e.resolve);_(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},e893:function(t,e,n){var r=n(\"5135\"),o=n(\"56ef\"),i=n(\"06cf\"),a=n(\"9bf2\");t.exports=function(t,e){for(var n=o(e),s=a.f,c=i.f,u=0;u<n.length;u++){var f=n[u];r(t,f)||s(t,f,c(e,f))}}},e8b5:function(t,e,n){var r=n(\"c6b6\");t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},e95a:function(t,e,n){var r=n(\"b622\"),o=n(\"3f8c\"),i=r(\"iterator\"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},f069:function(t,e,n){\"use strict\";var r=n(\"1c0b\"),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError(\"Bad Promise constructor\");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},f5df:function(t,e,n){var r=n(\"00ee\"),o=n(\"c6b6\"),i=n(\"b622\"),a=i(\"toStringTag\"),s=\"Arguments\"==o(function(){return arguments}()),c=function(t,e){try{return t[e]}catch(n){}};t.exports=r?o:function(t){var e,n,r;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=c(e=Object(t),a))?n:s?o(e):\"Object\"==(r=o(e))&&\"function\"==typeof e.callee?\"Arguments\":r}},f772:function(t,e,n){var r=n(\"5692\"),o=n(\"90e3\"),i=r(\"keys\");t.exports=function(t){return i[t]||(i[t]=o(t))}},fc6a:function(t,e,n){var r=n(\"44ad\"),o=n(\"1d80\");t.exports=function(t){return r(o(t))}},fdbf:function(t,e,n){var r=n(\"4930\");t.exports=r&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator},fea9:function(t,e,n){var r=n(\"da84\");t.exports=r.Promise}}]);\n//# sourceMappingURL=chunk-vendors.854fd5c2.js.map","source":"_drafts/last/ohmybox/js/chunk-vendors.854fd5c2.js","raw":"(window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[]).push([[\"chunk-vendors\"],{\"00ee\":function(t,e,n){var r=n(\"b622\"),o=r(\"toStringTag\"),i={};i[o]=\"z\",t.exports=\"[object z]\"===String(i)},\"0366\":function(t,e,n){var r=n(\"1c0b\");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},\"06cf\":function(t,e,n){var r=n(\"83ab\"),o=n(\"d1e7\"),i=n(\"5c6c\"),a=n(\"fc6a\"),s=n(\"c04e\"),c=n(\"5135\"),u=n(\"0cfb\"),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=a(t),e=s(e,!0),u)try{return f(t,e)}catch(n){}if(c(t,e))return i(!o.f.call(t,e),t[e])}},\"0cfb\":function(t,e,n){var r=n(\"83ab\"),o=n(\"d039\"),i=n(\"cc12\");t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i(\"div\"),\"a\",{get:function(){return 7}}).a}))},\"19aa\":function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError(\"Incorrect \"+(n?n+\" \":\"\")+\"invocation\");return t}},\"1be4\":function(t,e,n){var r=n(\"d066\");t.exports=r(\"document\",\"documentElement\")},\"1c0b\":function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(String(t)+\" is not a function\");return t}},\"1c7e\":function(t,e,n){var r=n(\"b622\"),o=r(\"iterator\"),i=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){i=!0}};s[o]=function(){return this},Array.from(s,(function(){throw 2}))}catch(c){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var r={};r[o]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(c){}return n}},\"1cdc\":function(t,e,n){var r=n(\"342f\");t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},\"1d80\":function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on \"+t);return t}},\"1dde\":function(t,e,n){var r=n(\"d039\"),o=n(\"b622\"),i=n(\"2d00\"),a=o(\"species\");t.exports=function(t){return i>=51||!r((function(){var e=[],n=e.constructor={};return n[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2266:function(t,e,n){var r=n(\"825a\"),o=n(\"e95a\"),i=n(\"50c4\"),a=n(\"0366\"),s=n(\"35a1\"),c=n(\"2a62\"),u=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var f,l,p,d,v,h,y,m=n&&n.that,g=!(!n||!n.AS_ENTRIES),b=!(!n||!n.IS_ITERATOR),_=!(!n||!n.INTERRUPTED),w=a(e,m,1+g+_),x=function(t){return f&&c(f),new u(!0,t)},O=function(t){return g?(r(t),_?w(t[0],t[1],x):w(t[0],t[1])):_?w(t,x):w(t)};if(b)f=t;else{if(l=s(t),\"function\"!=typeof l)throw TypeError(\"Target is not iterable\");if(o(l)){for(p=0,d=i(t.length);d>p;p++)if(v=O(t[p]),v&&v instanceof u)return v;return new u(!1)}f=l.call(t)}h=f.next;while(!(y=h.call(f)).done){try{v=O(y.value)}catch(A){throw c(f),A}if(\"object\"==typeof v&&v&&v instanceof u)return v}return new u(!1)}},\"23cb\":function(t,e,n){var r=n(\"a691\"),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},\"23e7\":function(t,e,n){var r=n(\"da84\"),o=n(\"06cf\").f,i=n(\"9112\"),a=n(\"6eeb\"),s=n(\"ce4e\"),c=n(\"e893\"),u=n(\"94ca\");t.exports=function(t,e){var n,f,l,p,d,v,h=t.target,y=t.global,m=t.stat;if(f=y?r:m?r[h]||s(h,{}):(r[h]||{}).prototype,f)for(l in e){if(d=e[l],t.noTargetGet?(v=o(f,l),p=v&&v.value):p=f[l],n=u(y?l:h+(m?\".\":\"#\")+l,t.forced),!n&&void 0!==p){if(typeof d===typeof p)continue;c(d,p)}(t.sham||p&&p.sham)&&i(d,\"sham\",!0),a(f,l,d,t)}}},\"241c\":function(t,e,n){var r=n(\"ca84\"),o=n(\"7839\"),i=o.concat(\"length\",\"prototype\");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},2626:function(t,e,n){\"use strict\";var r=n(\"d066\"),o=n(\"9bf2\"),i=n(\"b622\"),a=n(\"83ab\"),s=i(\"species\");t.exports=function(t){var e=r(t),n=o.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},2877:function(t,e,n){\"use strict\";function r(t,e,n,r,o,i,a,s){var c,u=\"function\"===typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId=\"data-v-\"+i),a?(c=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||\"undefined\"===typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var f=u.render;u.render=function(t,e){return c.call(e),f(t,e)}}else{var l=u.beforeCreate;u.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:u}}n.d(e,\"a\",(function(){return r}))},\"2a62\":function(t,e,n){var r=n(\"825a\");t.exports=function(t){var e=t[\"return\"];if(void 0!==e)return r(e.call(t)).value}},\"2b0e\":function(t,e,n){\"use strict\";(function(t){\n/*!\n * Vue.js v2.6.12\n * (c) 2014-2020 Evan You\n * Released under the MIT License.\n */\nvar n=Object.freeze({});function r(t){return void 0===t||null===t}function o(t){return void 0!==t&&null!==t}function i(t){return!0===t}function a(t){return!1===t}function s(t){return\"string\"===typeof t||\"number\"===typeof t||\"symbol\"===typeof t||\"boolean\"===typeof t}function c(t){return null!==t&&\"object\"===typeof t}var u=Object.prototype.toString;function f(t){return\"[object Object]\"===u.call(t)}function l(t){return\"[object RegExp]\"===u.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return o(t)&&\"function\"===typeof t.then&&\"function\"===typeof t.catch}function v(t){return null==t?\"\":Array.isArray(t)||f(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(\",\"),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}y(\"slot,component\",!0);var m=y(\"key,ref,slot,slot-scope,is\");function g(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(t,e){return b.call(t,e)}function w(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var x=/-(\\w)/g,O=w((function(t){return t.replace(x,(function(t,e){return e?e.toUpperCase():\"\"}))})),A=w((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),C=/\\B([A-Z])/g,$=w((function(t){return t.replace(C,\"-$1\").toLowerCase()}));function S(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function k(t,e){return t.bind(e)}var j=Function.prototype.bind?k:S;function E(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function T(t,e){for(var n in e)t[n]=e[n];return t}function I(t){for(var e={},n=0;n<t.length;n++)t[n]&&T(e,t[n]);return e}function P(t,e,n){}var D=function(t,e,n){return!1},N=function(t){return t};function M(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return M(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return M(t[n],e[n])}))}catch(u){return!1}}function F(t,e){for(var n=0;n<t.length;n++)if(M(t[n],e))return n;return-1}function L(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var R=\"data-server-rendered\",U=[\"component\",\"directive\",\"filter\"],z=[\"beforeCreate\",\"created\",\"beforeMount\",\"mounted\",\"beforeUpdate\",\"updated\",\"beforeDestroy\",\"destroyed\",\"activated\",\"deactivated\",\"errorCaptured\",\"serverPrefetch\"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:D,isReservedAttr:D,isUnknownElement:D,getTagNamespace:P,parsePlatformTagName:N,mustUseProp:D,async:!0,_lifecycleHooks:z},V=/a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;function H(t){var e=(t+\"\").charCodeAt(0);return 36===e||95===e}function W(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=new RegExp(\"[^\"+V.source+\".$_\\\\d]\");function G(t){if(!q.test(t)){var e=t.split(\".\");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}var K,X=\"__proto__\"in{},J=\"undefined\"!==typeof window,Y=\"undefined\"!==typeof WXEnvironment&&!!WXEnvironment.platform,Z=Y&&WXEnvironment.platform.toLowerCase(),Q=J&&window.navigator.userAgent.toLowerCase(),tt=Q&&/msie|trident/.test(Q),et=Q&&Q.indexOf(\"msie 9.0\")>0,nt=Q&&Q.indexOf(\"edge/\")>0,rt=(Q&&Q.indexOf(\"android\"),Q&&/iphone|ipad|ipod|ios/.test(Q)||\"ios\"===Z),ot=(Q&&/chrome\\/\\d+/.test(Q),Q&&/phantomjs/.test(Q),Q&&Q.match(/firefox\\/(\\d+)/)),it={}.watch,at=!1;if(J)try{var st={};Object.defineProperty(st,\"passive\",{get:function(){at=!0}}),window.addEventListener(\"test-passive\",null,st)}catch(Oa){}var ct=function(){return void 0===K&&(K=!J&&!Y&&\"undefined\"!==typeof t&&(t[\"process\"]&&\"server\"===t[\"process\"].env.VUE_ENV)),K},ut=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ft(t){return\"function\"===typeof t&&/native code/.test(t.toString())}var lt,pt=\"undefined\"!==typeof Symbol&&ft(Symbol)&&\"undefined\"!==typeof Reflect&&ft(Reflect.ownKeys);lt=\"undefined\"!==typeof Set&&ft(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var dt=P,vt=0,ht=function(){this.id=vt++,this.subs=[]};ht.prototype.addSub=function(t){this.subs.push(t)},ht.prototype.removeSub=function(t){g(this.subs,t)},ht.prototype.depend=function(){ht.target&&ht.target.addDep(this)},ht.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},ht.target=null;var yt=[];function mt(t){yt.push(t),ht.target=t}function gt(){yt.pop(),ht.target=yt[yt.length-1]}var bt=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},_t={child:{configurable:!0}};_t.child.get=function(){return this.componentInstance},Object.defineProperties(bt.prototype,_t);var wt=function(t){void 0===t&&(t=\"\");var e=new bt;return e.text=t,e.isComment=!0,e};function xt(t){return new bt(void 0,void 0,void 0,String(t))}function Ot(t){var e=new bt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var At=Array.prototype,Ct=Object.create(At),$t=[\"push\",\"pop\",\"shift\",\"unshift\",\"splice\",\"sort\",\"reverse\"];$t.forEach((function(t){var e=At[t];W(Ct,t,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case\"push\":case\"unshift\":o=n;break;case\"splice\":o=n.slice(2);break}return o&&a.observeArray(o),a.dep.notify(),i}))}));var St=Object.getOwnPropertyNames(Ct),kt=!0;function jt(t){kt=t}var Et=function(t){this.value=t,this.dep=new ht,this.vmCount=0,W(t,\"__ob__\",this),Array.isArray(t)?(X?Tt(t,Ct):It(t,Ct,St),this.observeArray(t)):this.walk(t)};function Tt(t,e){t.__proto__=e}function It(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];W(t,i,e[i])}}function Pt(t,e){var n;if(c(t)&&!(t instanceof bt))return _(t,\"__ob__\")&&t.__ob__ instanceof Et?n=t.__ob__:kt&&!ct()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Et(t)),e&&n&&n.vmCount++,n}function Dt(t,e,n,r,o){var i=new ht,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&Pt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return ht.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&Ft(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!==e&&r!==r||s&&!c||(c?c.call(t,e):n=e,u=!o&&Pt(e),i.notify())}})}}function Nt(t,e,n){if(Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(Dt(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function Mt(t,e){if(Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||_(t,e)&&(delete t[e],n&&n.dep.notify())}}function Ft(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Ft(e)}Et.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Dt(t,e[n])},Et.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Pt(t[e])};var Lt=B.optionMergeStrategies;function Rt(t,e){if(!e)return t;for(var n,r,o,i=pt?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)n=i[a],\"__ob__\"!==n&&(r=t[n],o=e[n],_(t,n)?r!==o&&f(r)&&f(o)&&Rt(r,o):Nt(t,n,o));return t}function Ut(t,e,n){return n?function(){var r=\"function\"===typeof e?e.call(n,n):e,o=\"function\"===typeof t?t.call(n,n):t;return r?Rt(r,o):o}:e?t?function(){return Rt(\"function\"===typeof e?e.call(this,this):e,\"function\"===typeof t?t.call(this,this):t)}:e:t}function zt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?Bt(n):n}function Bt(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function Vt(t,e,n,r){var o=Object.create(t||null);return e?T(o,e):o}Lt.data=function(t,e,n){return n?Ut(t,e,n):e&&\"function\"!==typeof e?t:Ut(t,e)},z.forEach((function(t){Lt[t]=zt})),U.forEach((function(t){Lt[t+\"s\"]=Vt})),Lt.watch=function(t,e,n,r){if(t===it&&(t=void 0),e===it&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in T(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Lt.props=Lt.methods=Lt.inject=Lt.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return T(o,t),e&&T(o,e),o},Lt.provide=Ut;var Ht=function(t,e){return void 0===e?t:e};function Wt(t,e){var n=t.props;if(n){var r,o,i,a={};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],\"string\"===typeof o&&(i=O(o),a[i]={type:null})}else if(f(n))for(var s in n)o=n[s],i=O(s),a[i]=f(o)?o:{type:o};else 0;t.props=a}}function qt(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var a=n[i];r[i]=f(a)?T({from:i},a):{from:a}}else 0}}function Gt(t){var e=t.directives;if(e)for(var n in e){var r=e[n];\"function\"===typeof r&&(e[n]={bind:r,update:r})}}function Kt(t,e,n){if(\"function\"===typeof e&&(e=e.options),Wt(e,n),qt(e,n),Gt(e),!e._base&&(e.extends&&(t=Kt(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=Kt(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)_(t,i)||s(i);function s(r){var o=Lt[r]||Ht;a[r]=o(t[r],e[r],n,r)}return a}function Xt(t,e,n,r){if(\"string\"===typeof n){var o=t[e];if(_(o,n))return o[n];var i=O(n);if(_(o,i))return o[i];var a=A(i);if(_(o,a))return o[a];var s=o[n]||o[i]||o[a];return s}}function Jt(t,e,n,r){var o=e[t],i=!_(n,t),a=n[t],s=te(Boolean,o.type);if(s>-1)if(i&&!_(o,\"default\"))a=!1;else if(\"\"===a||a===$(t)){var c=te(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=Yt(r,o,t);var u=kt;jt(!0),Pt(a),jt(u)}return a}function Yt(t,e,n){if(_(e,\"default\")){var r=e.default;return t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:\"function\"===typeof r&&\"Function\"!==Zt(e.type)?r.call(t):r}}function Zt(t){var e=t&&t.toString().match(/^\\s*function (\\w+)/);return e?e[1]:\"\"}function Qt(t,e){return Zt(t)===Zt(e)}function te(t,e){if(!Array.isArray(e))return Qt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Qt(e[n],t))return n;return-1}function ee(t,e,n){mt();try{if(e){var r=e;while(r=r.$parent){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var a=!1===o[i].call(r,t,e,n);if(a)return}catch(Oa){re(Oa,r,\"errorCaptured hook\")}}}re(t,e,n)}finally{gt()}}function ne(t,e,n,r,o){var i;try{i=n?t.apply(e,n):t.call(e),i&&!i._isVue&&d(i)&&!i._handled&&(i.catch((function(t){return ee(t,r,o+\" (Promise/async)\")})),i._handled=!0)}catch(Oa){ee(Oa,r,o)}return i}function re(t,e,n){if(B.errorHandler)try{return B.errorHandler.call(null,t,e,n)}catch(Oa){Oa!==t&&oe(Oa,null,\"config.errorHandler\")}oe(t,e,n)}function oe(t,e,n){if(!J&&!Y||\"undefined\"===typeof console)throw t;console.error(t)}var ie,ae=!1,se=[],ce=!1;function ue(){ce=!1;var t=se.slice(0);se.length=0;for(var e=0;e<t.length;e++)t[e]()}if(\"undefined\"!==typeof Promise&&ft(Promise)){var fe=Promise.resolve();ie=function(){fe.then(ue),rt&&setTimeout(P)},ae=!0}else if(tt||\"undefined\"===typeof MutationObserver||!ft(MutationObserver)&&\"[object MutationObserverConstructor]\"!==MutationObserver.toString())ie=\"undefined\"!==typeof setImmediate&&ft(setImmediate)?function(){setImmediate(ue)}:function(){setTimeout(ue,0)};else{var le=1,pe=new MutationObserver(ue),de=document.createTextNode(String(le));pe.observe(de,{characterData:!0}),ie=function(){le=(le+1)%2,de.data=String(le)},ae=!0}function ve(t,e){var n;if(se.push((function(){if(t)try{t.call(e)}catch(Oa){ee(Oa,e,\"nextTick\")}else n&&n(e)})),ce||(ce=!0,ie()),!t&&\"undefined\"!==typeof Promise)return new Promise((function(t){n=t}))}var he=new lt;function ye(t){me(t,he),he.clear()}function me(t,e){var n,r,o=Array.isArray(t);if(!(!o&&!c(t)||Object.isFrozen(t)||t instanceof bt)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(o){n=t.length;while(n--)me(t[n],e)}else{r=Object.keys(t),n=r.length;while(n--)me(t[r[n]],e)}}}var ge=w((function(t){var e=\"&\"===t.charAt(0);t=e?t.slice(1):t;var n=\"~\"===t.charAt(0);t=n?t.slice(1):t;var r=\"!\"===t.charAt(0);return t=r?t.slice(1):t,{name:t,once:n,capture:r,passive:e}}));function be(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return ne(r,null,arguments,e,\"v-on handler\");for(var o=r.slice(),i=0;i<o.length;i++)ne(o[i],null,t,e,\"v-on handler\")}return n.fns=t,n}function _e(t,e,n,o,a,s){var c,u,f,l;for(c in t)u=t[c],f=e[c],l=ge(c),r(u)||(r(f)?(r(u.fns)&&(u=t[c]=be(u,s)),i(l.once)&&(u=t[c]=a(l.name,u,l.capture)),n(l.name,u,l.capture,l.passive,l.params)):u!==f&&(f.fns=u,t[c]=f));for(c in e)r(t[c])&&(l=ge(c),o(l.name,e[c],l.capture))}function we(t,e,n){var a;t instanceof bt&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function c(){n.apply(this,arguments),g(a.fns,c)}r(s)?a=be([c]):o(s.fns)&&i(s.merged)?(a=s,a.fns.push(c)):a=be([s,c]),a.merged=!0,t[e]=a}function xe(t,e,n){var i=e.options.props;if(!r(i)){var a={},s=t.attrs,c=t.props;if(o(s)||o(c))for(var u in i){var f=$(u);Oe(a,c,u,f,!0)||Oe(a,s,u,f,!1)}return a}}function Oe(t,e,n,r,i){if(o(e)){if(_(e,n))return t[n]=e[n],i||delete e[n],!0;if(_(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Ae(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function Ce(t){return s(t)?[xt(t)]:Array.isArray(t)?Se(t):void 0}function $e(t){return o(t)&&o(t.text)&&a(t.isComment)}function Se(t,e){var n,a,c,u,f=[];for(n=0;n<t.length;n++)a=t[n],r(a)||\"boolean\"===typeof a||(c=f.length-1,u=f[c],Array.isArray(a)?a.length>0&&(a=Se(a,(e||\"\")+\"_\"+n),$e(a[0])&&$e(u)&&(f[c]=xt(u.text+a[0].text),a.shift()),f.push.apply(f,a)):s(a)?$e(u)?f[c]=xt(u.text+a):\"\"!==a&&f.push(xt(a)):$e(a)&&$e(u)?f[c]=xt(u.text+a.text):(i(t._isVList)&&o(a.tag)&&r(a.key)&&o(e)&&(a.key=\"__vlist\"+e+\"_\"+n+\"__\"),f.push(a)));return f}function ke(t){var e=t.$options.provide;e&&(t._provided=\"function\"===typeof e?e.call(t):e)}function je(t){var e=Ee(t.$options.inject,t);e&&(jt(!1),Object.keys(e).forEach((function(n){Dt(t,n,e[n])})),jt(!0))}function Ee(t,e){if(t){for(var n=Object.create(null),r=pt?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if(\"__ob__\"!==i){var a=t[i].from,s=e;while(s){if(s._provided&&_(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if(\"default\"in t[i]){var c=t[i].default;n[i]=\"function\"===typeof c?c.call(e):c}else 0}}return n}}function Te(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);\"template\"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(Ie)&&delete n[u];return n}function Ie(t){return t.isComment&&!t.asyncFactory||\" \"===t.text}function Pe(t,e,r){var o,i=Object.keys(e).length>0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},t)t[c]&&\"$\"!==c[0]&&(o[c]=De(e,c,t[c]))}else o={};for(var u in e)u in o||(o[u]=Ne(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),W(o,\"$stable\",a),W(o,\"$key\",s),W(o,\"$hasNormal\",i),o}function De(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&\"object\"===typeof t&&!Array.isArray(t)?[t]:Ce(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function Ne(t,e){return function(){return t[e]}}function Me(t,e){var n,r,i,a,s;if(Array.isArray(t)||\"string\"===typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if(\"number\"===typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(c(t))if(pt&&t[Symbol.iterator]){n=[];var u=t[Symbol.iterator](),f=u.next();while(!f.done)n.push(e(f.value,n.length)),f=u.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r);return o(n)||(n=[]),n._isVList=!0,n}function Fe(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=T(T({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement(\"template\",{slot:a},o):o}function Le(t){return Xt(this.$options,\"filters\",t,!0)||N}function Re(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function Ue(t,e,n,r,o){var i=B.keyCodes[e]||n;return o&&r&&!B.keyCodes[e]?Re(o,r):i?Re(i,t):r?$(r)!==e:void 0}function ze(t,e,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=I(n));var a=function(a){if(\"class\"===a||\"style\"===a||m(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||B.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=O(a),u=$(a);if(!(c in i)&&!(u in i)&&(i[a]=n[a],o)){var f=t.on||(t.on={});f[\"update:\"+a]=function(t){n[a]=t}}};for(var s in n)a(s)}else;return t}function Be(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),He(r,\"__static__\"+t,!1)),r}function Ve(t,e,n){return He(t,\"__once__\"+e+(n?\"_\"+n:\"\"),!0),t}function He(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&\"string\"!==typeof t[r]&&We(t[r],e+\"_\"+r,n);else We(t,e,n)}function We(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function qe(t,e){if(e)if(f(e)){var n=t.on=t.on?T({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function Ge(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?Ge(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Ke(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];\"string\"===typeof r&&r&&(t[e[n]]=e[n+1])}return t}function Xe(t,e){return\"string\"===typeof t?e+t:t}function Je(t){t._o=Ve,t._n=h,t._s=v,t._l=Me,t._t=Fe,t._q=M,t._i=F,t._m=Be,t._f=Le,t._k=Ue,t._b=ze,t._v=xt,t._e=wt,t._u=Ge,t._g=qe,t._d=Ke,t._p=Xe}function Ye(t,e,r,o,a){var s,c=this,u=a.options;_(o,\"_uid\")?(s=Object.create(o),s._original=o):(s=o,o=o._original);var f=i(u._compiled),l=!f;this.data=t,this.props=e,this.children=r,this.parent=o,this.listeners=t.on||n,this.injections=Ee(u.inject,o),this.slots=function(){return c.$slots||Pe(t.scopedSlots,c.$slots=Te(r,o)),c.$slots},Object.defineProperty(this,\"scopedSlots\",{enumerable:!0,get:function(){return Pe(t.scopedSlots,this.slots())}}),f&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=Pe(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var i=ln(s,t,e,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return ln(s,t,e,n,r,l)}}function Ze(t,e,r,i,a){var s=t.options,c={},u=s.props;if(o(u))for(var f in u)c[f]=Jt(f,u,e||n);else o(r.attrs)&&tn(c,r.attrs),o(r.props)&&tn(c,r.props);var l=new Ye(r,c,a,i,t),p=s.render.call(null,l._c,l);if(p instanceof bt)return Qe(p,r,l.parent,s,l);if(Array.isArray(p)){for(var d=Ce(p)||[],v=new Array(d.length),h=0;h<d.length;h++)v[h]=Qe(d[h],r,l.parent,s,l);return v}}function Qe(t,e,n,r,o){var i=Ot(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function tn(t,e){for(var n in e)t[O(n)]=e[n]}Je(Ye.prototype);var en={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;en.prepatch(n,n)}else{var r=t.componentInstance=on(t,En);r.$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions,r=e.componentInstance=t.componentInstance;Nn(r,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,Rn(n,\"mounted\")),t.data.keepAlive&&(e._isMounted?Zn(n):Fn(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?Ln(e,!0):e.$destroy())}},nn=Object.keys(en);function rn(t,e,n,a,s){if(!r(t)){var u=n.$options._base;if(c(t)&&(t=u.extend(t)),\"function\"===typeof t){var f;if(r(t.cid)&&(f=t,t=wn(f,u),void 0===t))return _n(f,e,n,a,s);e=e||{},wr(t),o(e.model)&&cn(t.options,e);var l=xe(e,t,s);if(i(t.options.functional))return Ze(t,l,e,n,a);var p=e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var d=e.slot;e={},d&&(e.slot=d)}an(e);var v=t.options.name||s,h=new bt(\"vue-component-\"+t.cid+(v?\"-\"+v:\"\"),e,void 0,void 0,void 0,n,{Ctor:t,propsData:l,listeners:p,tag:s,children:a},f);return h}}}function on(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}function an(t){for(var e=t.hook||(t.hook={}),n=0;n<nn.length;n++){var r=nn[n],o=e[r],i=en[r];o===i||o&&o._merged||(e[r]=o?sn(i,o):i)}}function sn(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function cn(t,e){var n=t.model&&t.model.prop||\"value\",r=t.model&&t.model.event||\"input\";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[r],s=e.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[r]=[s].concat(a)):i[r]=s}var un=1,fn=2;function ln(t,e,n,r,o,a){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(a)&&(o=fn),pn(t,e,n,r,o)}function pn(t,e,n,r,i){if(o(n)&&o(n.__ob__))return wt();if(o(n)&&o(n.is)&&(e=n.is),!e)return wt();var a,s,c;(Array.isArray(r)&&\"function\"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===fn?r=Ce(r):i===un&&(r=Ae(r)),\"string\"===typeof e)?(s=t.$vnode&&t.$vnode.ns||B.getTagNamespace(e),a=B.isReservedTag(e)?new bt(B.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!o(c=Xt(t.$options,\"components\",e))?new bt(e,n,r,void 0,void 0,t):rn(c,n,t,r,e)):a=rn(e,n,t,r);return Array.isArray(a)?a:o(a)?(o(s)&&dn(a,s),o(n)&&vn(n),a):wt()}function dn(t,e,n){if(t.ns=e,\"foreignObject\"===t.tag&&(e=void 0,n=!0),o(t.children))for(var a=0,s=t.children.length;a<s;a++){var c=t.children[a];o(c.tag)&&(r(c.ns)||i(n)&&\"svg\"!==c.tag)&&dn(c,e,n)}}function vn(t){c(t.style)&&ye(t.style),c(t.class)&&ye(t.class)}function hn(t){t._vnode=null,t._staticTrees=null;var e=t.$options,r=t.$vnode=e._parentVnode,o=r&&r.context;t.$slots=Te(e._renderChildren,o),t.$scopedSlots=n,t._c=function(e,n,r,o){return ln(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return ln(t,e,n,r,o,!0)};var i=r&&r.data;Dt(t,\"$attrs\",i&&i.attrs||n,null,!0),Dt(t,\"$listeners\",e._parentListeners||n,null,!0)}var yn,mn=null;function gn(t){Je(t.prototype),t.prototype.$nextTick=function(t){return ve(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=Pe(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{mn=e,t=r.call(e._renderProxy,e.$createElement)}catch(Oa){ee(Oa,e,\"render\"),t=e._vnode}finally{mn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof bt||(t=wt()),t.parent=o,t}}function bn(t,e){return(t.__esModule||pt&&\"Module\"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function _n(t,e,n,r,o){var i=wt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}function wn(t,e){if(i(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;var n=mn;if(n&&o(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),i(t.loading)&&o(t.loadingComp))return t.loadingComp;if(n&&!o(t.owners)){var a=t.owners=[n],s=!0,u=null,f=null;n.$on(\"hook:destroyed\",(function(){return g(a,n)}));var l=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==u&&(clearTimeout(u),u=null),null!==f&&(clearTimeout(f),f=null))},p=L((function(n){t.resolved=bn(n,e),s?a.length=0:l(!0)})),v=L((function(e){o(t.errorComp)&&(t.error=!0,l(!0))})),h=t(p,v);return c(h)&&(d(h)?r(t.resolved)&&h.then(p,v):d(h.component)&&(h.component.then(p,v),o(h.error)&&(t.errorComp=bn(h.error,e)),o(h.loading)&&(t.loadingComp=bn(h.loading,e),0===h.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,l(!1))}),h.delay||200)),o(h.timeout)&&(f=setTimeout((function(){f=null,r(t.resolved)&&v(null)}),h.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}function xn(t){return t.isComment&&t.asyncFactory}function On(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||xn(n)))return n}}function An(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&kn(t,e)}function Cn(t,e){yn.$on(t,e)}function $n(t,e){yn.$off(t,e)}function Sn(t,e){var n=yn;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function kn(t,e,n){yn=t,_e(e,n||{},Cn,$n,Sn,t),yn=void 0}function jn(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;var s=a.length;while(s--)if(i=a[s],i===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?E(n):n;for(var r=E(arguments,1),o='event handler for \"'+t+'\"',i=0,a=n.length;i<a;i++)ne(n[i],e,r,e,o)}return e}}var En=null;function Tn(t){var e=En;return En=t,function(){En=e}}function In(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function Pn(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Tn(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Rn(t,\"beforeDestroy\"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||g(e.$children,t),t._watcher&&t._watcher.teardown();var n=t._watchers.length;while(n--)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Rn(t,\"destroyed\"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}function Dn(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=wt),Rn(t,\"beforeMount\"),r=function(){t._update(t._render(),n)},new nr(t,r,P,{before:function(){t._isMounted&&!t._isDestroyed&&Rn(t,\"beforeUpdate\")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Rn(t,\"mounted\")),t}function Nn(t,e,r,o,i){var a=o.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||c);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){jt(!1);for(var f=t._props,l=t.$options._propKeys||[],p=0;p<l.length;p++){var d=l[p],v=t.$options.props;f[d]=Jt(d,v,e,t)}jt(!0),t.$options.propsData=e}r=r||n;var h=t.$options._parentListeners;t.$options._parentListeners=r,kn(t,r,h),u&&(t.$slots=Te(i,o.context),t.$forceUpdate())}function Mn(t){while(t&&(t=t.$parent))if(t._inactive)return!0;return!1}function Fn(t,e){if(e){if(t._directInactive=!1,Mn(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Fn(t.$children[n]);Rn(t,\"activated\")}}function Ln(t,e){if((!e||(t._directInactive=!0,!Mn(t)))&&!t._inactive){t._inactive=!0;for(var n=0;n<t.$children.length;n++)Ln(t.$children[n]);Rn(t,\"deactivated\")}}function Rn(t,e){mt();var n=t.$options[e],r=e+\" hook\";if(n)for(var o=0,i=n.length;o<i;o++)ne(n[o],t,null,t,r);t._hasHookEvent&&t.$emit(\"hook:\"+e),gt()}var Un=[],zn=[],Bn={},Vn=!1,Hn=!1,Wn=0;function qn(){Wn=Un.length=zn.length=0,Bn={},Vn=Hn=!1}var Gn=0,Kn=Date.now;if(J&&!tt){var Xn=window.performance;Xn&&\"function\"===typeof Xn.now&&Kn()>document.createEvent(\"Event\").timeStamp&&(Kn=function(){return Xn.now()})}function Jn(){var t,e;for(Gn=Kn(),Hn=!0,Un.sort((function(t,e){return t.id-e.id})),Wn=0;Wn<Un.length;Wn++)t=Un[Wn],t.before&&t.before(),e=t.id,Bn[e]=null,t.run();var n=zn.slice(),r=Un.slice();qn(),Qn(n),Yn(r),ut&&B.devtools&&ut.emit(\"flush\")}function Yn(t){var e=t.length;while(e--){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Rn(r,\"updated\")}}function Zn(t){t._inactive=!1,zn.push(t)}function Qn(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Fn(t[e],!0)}function tr(t){var e=t.id;if(null==Bn[e]){if(Bn[e]=!0,Hn){var n=Un.length-1;while(n>Wn&&Un[n].id>t.id)n--;Un.splice(n+1,0,t)}else Un.push(t);Vn||(Vn=!0,ve(Jn))}}var er=0,nr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++er,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new lt,this.newDepIds=new lt,this.expression=\"\",\"function\"===typeof e?this.getter=e:(this.getter=G(e),this.getter||(this.getter=P)),this.value=this.lazy?void 0:this.get()};nr.prototype.get=function(){var t;mt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(Oa){if(!this.user)throw Oa;ee(Oa,e,'getter for watcher \"'+this.expression+'\"')}finally{this.deep&&ye(t),gt(),this.cleanupDeps()}return t},nr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},nr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},nr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():tr(this)},nr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(Oa){ee(Oa,this.vm,'callback for watcher \"'+this.expression+'\"')}else this.cb.call(this.vm,t,e)}}},nr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},nr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},nr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var rr={enumerable:!0,configurable:!0,get:P,set:P};function or(t,e,n){rr.get=function(){return this[e][n]},rr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,rr)}function ir(t){t._watchers=[];var e=t.$options;e.props&&ar(t,e.props),e.methods&&vr(t,e.methods),e.data?sr(t):Pt(t._data={},!0),e.computed&&fr(t,e.computed),e.watch&&e.watch!==it&&hr(t,e.watch)}function ar(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[],i=!t.$parent;i||jt(!1);var a=function(i){o.push(i);var a=Jt(i,e,n,t);Dt(r,i,a),i in t||or(t,\"_props\",i)};for(var s in e)a(s);jt(!0)}function sr(t){var e=t.$options.data;e=t._data=\"function\"===typeof e?cr(e,t):e||{},f(e)||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);while(o--){var i=n[o];0,r&&_(r,i)||H(i)||or(t,\"_data\",i)}Pt(e,!0)}function cr(t,e){mt();try{return t.call(e,e)}catch(Oa){return ee(Oa,e,\"data()\"),{}}finally{gt()}}var ur={lazy:!0};function fr(t,e){var n=t._computedWatchers=Object.create(null),r=ct();for(var o in e){var i=e[o],a=\"function\"===typeof i?i:i.get;0,r||(n[o]=new nr(t,a||P,P,ur)),o in t||lr(t,o,i)}}function lr(t,e,n){var r=!ct();\"function\"===typeof n?(rr.get=r?pr(e):dr(n),rr.set=P):(rr.get=n.get?r&&!1!==n.cache?pr(e):dr(n.get):P,rr.set=n.set||P),Object.defineProperty(t,e,rr)}function pr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),ht.target&&e.depend(),e.value}}function dr(t){return function(){return t.call(this,this)}}function vr(t,e){t.$options.props;for(var n in e)t[n]=\"function\"!==typeof e[n]?P:j(e[n],t)}function hr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)yr(t,n,r[o]);else yr(t,n,r)}}function yr(t,e,n,r){return f(n)&&(r=n,n=n.handler),\"string\"===typeof n&&(n=t[n]),t.$watch(e,n,r)}function mr(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,\"$data\",e),Object.defineProperty(t.prototype,\"$props\",n),t.prototype.$set=Nt,t.prototype.$delete=Mt,t.prototype.$watch=function(t,e,n){var r=this;if(f(e))return yr(r,t,e,n);n=n||{},n.user=!0;var o=new nr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(i){ee(i,r,'callback for immediate watcher \"'+o.expression+'\"')}return function(){o.teardown()}}}var gr=0;function br(t){t.prototype._init=function(t){var e=this;e._uid=gr++,e._isVue=!0,t&&t._isComponent?_r(e,t):e.$options=Kt(wr(e.constructor),t||{},e),e._renderProxy=e,e._self=e,In(e),An(e),hn(e),Rn(e,\"beforeCreate\"),je(e),ir(e),ke(e),Rn(e,\"created\"),e.$options.el&&e.$mount(e.$options.el)}}function _r(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function wr(t){var e=t.options;if(t.super){var n=wr(t.super),r=t.superOptions;if(n!==r){t.superOptions=n;var o=xr(t);o&&T(t.extendOptions,o),e=t.options=Kt(n,t.extendOptions),e.name&&(e.components[e.name]=t)}}return e}function xr(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}function Or(t){this._init(t)}function Ar(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=E(arguments,1);return n.unshift(this),\"function\"===typeof t.install?t.install.apply(t,n):\"function\"===typeof t&&t.apply(null,n),e.push(t),this}}function Cr(t){t.mixin=function(t){return this.options=Kt(this.options,t),this}}function $r(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=Kt(n.options,t),a[\"super\"]=n,a.options.props&&Sr(a),a.options.computed&&kr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,U.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=T({},a.options),o[r]=a,a}}function Sr(t){var e=t.options.props;for(var n in e)or(t.prototype,\"_props\",n)}function kr(t){var e=t.options.computed;for(var n in e)lr(t.prototype,n,e[n])}function jr(t){U.forEach((function(e){t[e]=function(t,n){return n?(\"component\"===e&&f(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),\"directive\"===e&&\"function\"===typeof n&&(n={bind:n,update:n}),this.options[e+\"s\"][t]=n,n):this.options[e+\"s\"][t]}}))}function Er(t){return t&&(t.Ctor.options.name||t.tag)}function Tr(t,e){return Array.isArray(t)?t.indexOf(e)>-1:\"string\"===typeof t?t.split(\",\").indexOf(e)>-1:!!l(t)&&t.test(e)}function Ir(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=Er(a.componentOptions);s&&!e(s)&&Pr(n,i,r,o)}}}function Pr(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}br(Or),mr(Or),jn(Or),Pn(Or),gn(Or);var Dr=[String,RegExp,Array],Nr={name:\"keep-alive\",abstract:!0,props:{include:Dr,exclude:Dr,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Pr(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch(\"include\",(function(e){Ir(t,(function(t){return Tr(e,t)}))})),this.$watch(\"exclude\",(function(e){Ir(t,(function(t){return!Tr(e,t)}))}))},render:function(){var t=this.$slots.default,e=On(t),n=e&&e.componentOptions;if(n){var r=Er(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!Tr(i,r))||a&&r&&Tr(a,r))return e;var s=this,c=s.cache,u=s.keys,f=null==e.key?n.Ctor.cid+(n.tag?\"::\"+n.tag:\"\"):e.key;c[f]?(e.componentInstance=c[f].componentInstance,g(u,f),u.push(f)):(c[f]=e,u.push(f),this.max&&u.length>parseInt(this.max)&&Pr(c,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},Mr={KeepAlive:Nr};function Fr(t){var e={get:function(){return B}};Object.defineProperty(t,\"config\",e),t.util={warn:dt,extend:T,mergeOptions:Kt,defineReactive:Dt},t.set=Nt,t.delete=Mt,t.nextTick=ve,t.observable=function(t){return Pt(t),t},t.options=Object.create(null),U.forEach((function(e){t.options[e+\"s\"]=Object.create(null)})),t.options._base=t,T(t.options.components,Mr),Ar(t),Cr(t),$r(t),jr(t)}Fr(Or),Object.defineProperty(Or.prototype,\"$isServer\",{get:ct}),Object.defineProperty(Or.prototype,\"$ssrContext\",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Or,\"FunctionalRenderContext\",{value:Ye}),Or.version=\"2.6.12\";var Lr=y(\"style,class\"),Rr=y(\"input,textarea,option,select,progress\"),Ur=function(t,e,n){return\"value\"===n&&Rr(t)&&\"button\"!==e||\"selected\"===n&&\"option\"===t||\"checked\"===n&&\"input\"===t||\"muted\"===n&&\"video\"===t},zr=y(\"contenteditable,draggable,spellcheck\"),Br=y(\"events,caret,typing,plaintext-only\"),Vr=function(t,e){return Kr(e)||\"false\"===e?\"false\":\"contenteditable\"===t&&Br(e)?e:\"true\"},Hr=y(\"allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible\"),Wr=\"http://www.w3.org/1999/xlink\",qr=function(t){return\":\"===t.charAt(5)&&\"xlink\"===t.slice(0,5)},Gr=function(t){return qr(t)?t.slice(6,t.length):\"\"},Kr=function(t){return null==t||!1===t};function Xr(t){var e=t.data,n=t,r=t;while(o(r.componentInstance))r=r.componentInstance._vnode,r&&r.data&&(e=Jr(r.data,e));while(o(n=n.parent))n&&n.data&&(e=Jr(e,n.data));return Yr(e.staticClass,e.class)}function Jr(t,e){return{staticClass:Zr(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function Yr(t,e){return o(t)||o(e)?Zr(t,Qr(e)):\"\"}function Zr(t,e){return t?e?t+\" \"+e:t:e||\"\"}function Qr(t){return Array.isArray(t)?to(t):c(t)?eo(t):\"string\"===typeof t?t:\"\"}function to(t){for(var e,n=\"\",r=0,i=t.length;r<i;r++)o(e=Qr(t[r]))&&\"\"!==e&&(n&&(n+=\" \"),n+=e);return n}function eo(t){var e=\"\";for(var n in t)t[n]&&(e&&(e+=\" \"),e+=n);return e}var no={svg:\"http://www.w3.org/2000/svg\",math:\"http://www.w3.org/1998/Math/MathML\"},ro=y(\"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot\"),oo=y(\"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view\",!0),io=function(t){return ro(t)||oo(t)};function ao(t){return oo(t)?\"svg\":\"math\"===t?\"math\":void 0}var so=Object.create(null);function co(t){if(!J)return!0;if(io(t))return!1;if(t=t.toLowerCase(),null!=so[t])return so[t];var e=document.createElement(t);return t.indexOf(\"-\")>-1?so[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:so[t]=/HTMLUnknownElement/.test(e.toString())}var uo=y(\"text,number,password,search,email,tel,url\");function fo(t){if(\"string\"===typeof t){var e=document.querySelector(t);return e||document.createElement(\"div\")}return t}function lo(t,e){var n=document.createElement(t);return\"select\"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute(\"multiple\",\"multiple\"),n}function po(t,e){return document.createElementNS(no[t],e)}function vo(t){return document.createTextNode(t)}function ho(t){return document.createComment(t)}function yo(t,e,n){t.insertBefore(e,n)}function mo(t,e){t.removeChild(e)}function go(t,e){t.appendChild(e)}function bo(t){return t.parentNode}function _o(t){return t.nextSibling}function wo(t){return t.tagName}function xo(t,e){t.textContent=e}function Oo(t,e){t.setAttribute(e,\"\")}var Ao=Object.freeze({createElement:lo,createElementNS:po,createTextNode:vo,createComment:ho,insertBefore:yo,removeChild:mo,appendChild:go,parentNode:bo,nextSibling:_o,tagName:wo,setTextContent:xo,setStyleScope:Oo}),Co={create:function(t,e){$o(e)},update:function(t,e){t.data.ref!==e.data.ref&&($o(t,!0),$o(e))},destroy:function(t){$o(t,!0)}};function $o(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var So=new bt(\"\",{},[]),ko=[\"create\",\"activate\",\"update\",\"remove\",\"destroy\"];function jo(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&Eo(t,e)||i(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function Eo(t,e){if(\"input\"!==t.tag)return!0;var n,r=o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return r===i||uo(r)&&uo(i)}function To(t,e,n){var r,i,a={};for(r=e;r<=n;++r)i=t[r].key,o(i)&&(a[i]=r);return a}function Io(t){var e,n,a={},c=t.modules,u=t.nodeOps;for(e=0;e<ko.length;++e)for(a[ko[e]]=[],n=0;n<c.length;++n)o(c[n][ko[e]])&&a[ko[e]].push(c[n][ko[e]]);function f(t){return new bt(u.tagName(t).toLowerCase(),{},[],void 0,t)}function l(t,e){function n(){0===--n.listeners&&p(t)}return n.listeners=e,n}function p(t){var e=u.parentNode(t);o(e)&&u.removeChild(e,t)}function d(t,e,n,r,a,s,c){if(o(t.elm)&&o(s)&&(t=s[c]=Ot(t)),t.isRootInsert=!a,!v(t,e,n,r)){var f=t.data,l=t.children,p=t.tag;o(p)?(t.elm=t.ns?u.createElementNS(t.ns,p):u.createElement(p,t),x(t),b(t,l,e),o(f)&&w(t,e),g(n,t.elm,r)):i(t.isComment)?(t.elm=u.createComment(t.text),g(n,t.elm,r)):(t.elm=u.createTextNode(t.text),g(n,t.elm,r))}}function v(t,e,n,r){var a=t.data;if(o(a)){var s=o(t.componentInstance)&&a.keepAlive;if(o(a=a.hook)&&o(a=a.init)&&a(t,!1),o(t.componentInstance))return h(t,e),g(n,t.elm,r),i(s)&&m(t,e,n,r),!0}}function h(t,e){o(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,_(t)?(w(t,e),x(t)):($o(t),e.push(t))}function m(t,e,n,r){var i,s=t;while(s.componentInstance)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i](So,s);e.push(s);break}g(n,t.elm,r)}function g(t,e,n){o(t)&&(o(n)?u.parentNode(n)===t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function b(t,e,n){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)d(e[r],n,t.elm,null,!0,e,r)}else s(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function _(t){while(t.componentInstance)t=t.componentInstance._vnode;return o(t.tag)}function w(t,n){for(var r=0;r<a.create.length;++r)a.create[r](So,t);e=t.data.hook,o(e)&&(o(e.create)&&e.create(So,t),o(e.insert)&&n.push(t))}function x(t){var e;if(o(e=t.fnScopeId))u.setStyleScope(t.elm,e);else{var n=t;while(n)o(e=n.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent}o(e=En)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function O(t,e,n,r,o,i){for(;r<=o;++r)d(n[r],i,t,e,!1,n,r)}function A(t){var e,n,r=t.data;if(o(r))for(o(e=r.hook)&&o(e=e.destroy)&&e(t),e=0;e<a.destroy.length;++e)a.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)A(t.children[n])}function C(t,e,n){for(;e<=n;++e){var r=t[e];o(r)&&(o(r.tag)?($(r),A(r)):p(r.elm))}}function $(t,e){if(o(e)||o(t.data)){var n,r=a.remove.length+1;for(o(e)?e.listeners+=r:e=l(t.elm,r),o(n=t.componentInstance)&&o(n=n._vnode)&&o(n.data)&&$(n,e),n=0;n<a.remove.length;++n)a.remove[n](t,e);o(n=t.data.hook)&&o(n=n.remove)?n(t,e):e()}else p(t.elm)}function S(t,e,n,i,a){var s,c,f,l,p=0,v=0,h=e.length-1,y=e[0],m=e[h],g=n.length-1,b=n[0],_=n[g],w=!a;while(p<=h&&v<=g)r(y)?y=e[++p]:r(m)?m=e[--h]:jo(y,b)?(j(y,b,i,n,v),y=e[++p],b=n[++v]):jo(m,_)?(j(m,_,i,n,g),m=e[--h],_=n[--g]):jo(y,_)?(j(y,_,i,n,g),w&&u.insertBefore(t,y.elm,u.nextSibling(m.elm)),y=e[++p],_=n[--g]):jo(m,b)?(j(m,b,i,n,v),w&&u.insertBefore(t,m.elm,y.elm),m=e[--h],b=n[++v]):(r(s)&&(s=To(e,p,h)),c=o(b.key)?s[b.key]:k(b,e,p,h),r(c)?d(b,i,t,y.elm,!1,n,v):(f=e[c],jo(f,b)?(j(f,b,i,n,v),e[c]=void 0,w&&u.insertBefore(t,f.elm,y.elm)):d(b,i,t,y.elm,!1,n,v)),b=n[++v]);p>h?(l=r(n[g+1])?null:n[g+1].elm,O(t,l,n,v,g,i)):v>g&&C(e,p,h)}function k(t,e,n,r){for(var i=n;i<r;i++){var a=e[i];if(o(a)&&jo(t,a))return i}}function j(t,e,n,s,c,f){if(t!==e){o(e.elm)&&o(s)&&(e=s[c]=Ot(e));var l=e.elm=t.elm;if(i(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?I(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(t.isStatic)&&e.key===t.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=t.componentInstance;else{var p,d=e.data;o(d)&&o(p=d.hook)&&o(p=p.prepatch)&&p(t,e);var v=t.children,h=e.children;if(o(d)&&_(e)){for(p=0;p<a.update.length;++p)a.update[p](t,e);o(p=d.hook)&&o(p=p.update)&&p(t,e)}r(e.text)?o(v)&&o(h)?v!==h&&S(l,v,h,n,f):o(h)?(o(t.text)&&u.setTextContent(l,\"\"),O(l,null,h,0,h.length-1,n)):o(v)?C(v,0,v.length-1):o(t.text)&&u.setTextContent(l,\"\"):t.text!==e.text&&u.setTextContent(l,e.text),o(d)&&o(p=d.hook)&&o(p=p.postpatch)&&p(t,e)}}}function E(t,e,n){if(i(n)&&o(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=y(\"attrs,class,staticClass,staticStyle,key\");function I(t,e,n,r){var a,s=e.tag,c=e.data,u=e.children;if(r=r||c&&c.pre,e.elm=t,i(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(c)&&(o(a=c.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return h(e,n),!0;if(o(s)){if(o(u))if(t.hasChildNodes())if(o(a=c)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var f=!0,l=t.firstChild,p=0;p<u.length;p++){if(!l||!I(l,u[p],n,r)){f=!1;break}l=l.nextSibling}if(!f||l)return!1}else b(e,u,n);if(o(c)){var d=!1;for(var v in c)if(!T(v)){d=!0,w(e,n);break}!d&&c[\"class\"]&&ye(c[\"class\"])}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,s){if(!r(e)){var c=!1,l=[];if(r(t))c=!0,d(e,l);else{var p=o(t.nodeType);if(!p&&jo(t,e))j(t,e,l,null,null,s);else{if(p){if(1===t.nodeType&&t.hasAttribute(R)&&(t.removeAttribute(R),n=!0),i(n)&&I(t,e,l))return E(e,l,!0),t;t=f(t)}var v=t.elm,h=u.parentNode(v);if(d(e,l,v._leaveCb?null:h,u.nextSibling(v)),o(e.parent)){var y=e.parent,m=_(e);while(y){for(var g=0;g<a.destroy.length;++g)a.destroy[g](y);if(y.elm=e.elm,m){for(var b=0;b<a.create.length;++b)a.create[b](So,y);var w=y.data.hook.insert;if(w.merged)for(var x=1;x<w.fns.length;x++)w.fns[x]()}else $o(y);y=y.parent}}o(h)?C([t],0,0):o(t.tag)&&A(t)}}return E(e,l,c),e.elm}o(t)&&A(t)}}var Po={create:Do,update:Do,destroy:function(t){Do(t,So)}};function Do(t,e){(t.data.directives||e.data.directives)&&No(t,e)}function No(t,e){var n,r,o,i=t===So,a=e===So,s=Fo(t.data.directives,t.context),c=Fo(e.data.directives,e.context),u=[],f=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Ro(o,\"update\",e,t),o.def&&o.def.componentUpdated&&f.push(o)):(Ro(o,\"bind\",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var l=function(){for(var n=0;n<u.length;n++)Ro(u[n],\"inserted\",e,t)};i?we(e,\"insert\",l):l()}if(f.length&&we(e,\"postpatch\",(function(){for(var n=0;n<f.length;n++)Ro(f[n],\"componentUpdated\",e,t)})),!i)for(n in s)c[n]||Ro(s[n],\"unbind\",t,t,a)}var Mo=Object.create(null);function Fo(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)r=t[n],r.modifiers||(r.modifiers=Mo),o[Lo(r)]=r,r.def=Xt(e.$options,\"directives\",r.name,!0);return o}function Lo(t){return t.rawName||t.name+\".\"+Object.keys(t.modifiers||{}).join(\".\")}function Ro(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(Oa){ee(Oa,n.context,\"directive \"+t.name+\" \"+e+\" hook\")}}var Uo=[Co,Po];function zo(t,e){var n=e.componentOptions;if((!o(n)||!1!==n.Ctor.options.inheritAttrs)&&(!r(t.data.attrs)||!r(e.data.attrs))){var i,a,s,c=e.elm,u=t.data.attrs||{},f=e.data.attrs||{};for(i in o(f.__ob__)&&(f=e.data.attrs=T({},f)),f)a=f[i],s=u[i],s!==a&&Bo(c,i,a);for(i in(tt||nt)&&f.value!==u.value&&Bo(c,\"value\",f.value),u)r(f[i])&&(qr(i)?c.removeAttributeNS(Wr,Gr(i)):zr(i)||c.removeAttribute(i))}}function Bo(t,e,n){t.tagName.indexOf(\"-\")>-1?Vo(t,e,n):Hr(e)?Kr(n)?t.removeAttribute(e):(n=\"allowfullscreen\"===e&&\"EMBED\"===t.tagName?\"true\":e,t.setAttribute(e,n)):zr(e)?t.setAttribute(e,Vr(e,n)):qr(e)?Kr(n)?t.removeAttributeNS(Wr,Gr(e)):t.setAttributeNS(Wr,e,n):Vo(t,e,n)}function Vo(t,e,n){if(Kr(n))t.removeAttribute(e);else{if(tt&&!et&&\"TEXTAREA\"===t.tagName&&\"placeholder\"===e&&\"\"!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener(\"input\",r)};t.addEventListener(\"input\",r),t.__ieph=!0}t.setAttribute(e,n)}}var Ho={create:zo,update:zo};function Wo(t,e){var n=e.elm,i=e.data,a=t.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=Xr(e),c=n._transitionClasses;o(c)&&(s=Zr(s,Qr(c))),s!==n._prevClass&&(n.setAttribute(\"class\",s),n._prevClass=s)}}var qo,Go={create:Wo,update:Wo},Ko=\"__r\",Xo=\"__c\";function Jo(t){if(o(t[Ko])){var e=tt?\"change\":\"input\";t[e]=[].concat(t[Ko],t[e]||[]),delete t[Ko]}o(t[Xo])&&(t.change=[].concat(t[Xo],t.change||[]),delete t[Xo])}function Yo(t,e,n){var r=qo;return function o(){var i=e.apply(null,arguments);null!==i&&ti(t,o,n,r)}}var Zo=ae&&!(ot&&Number(ot[1])<=53);function Qo(t,e,n,r){if(Zo){var o=Gn,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}qo.addEventListener(t,e,at?{capture:n,passive:r}:n)}function ti(t,e,n,r){(r||qo).removeEventListener(t,e._wrapper||e,n)}function ei(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=e.data.on||{},o=t.data.on||{};qo=e.elm,Jo(n),_e(n,o,Qo,ti,Yo,e.context),qo=void 0}}var ni,ri={create:ei,update:ei};function oi(t,e){if(!r(t.data.domProps)||!r(e.data.domProps)){var n,i,a=e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n in o(c.__ob__)&&(c=e.data.domProps=T({},c)),s)n in c||(a[n]=\"\");for(n in c){if(i=c[n],\"textContent\"===n||\"innerHTML\"===n){if(e.children&&(e.children.length=0),i===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if(\"value\"===n&&\"PROGRESS\"!==a.tagName){a._value=i;var u=r(i)?\"\":String(i);ii(a,u)&&(a.value=u)}else if(\"innerHTML\"===n&&oo(a.tagName)&&r(a.innerHTML)){ni=ni||document.createElement(\"div\"),ni.innerHTML=\"<svg>\"+i+\"</svg>\";var f=ni.firstChild;while(a.firstChild)a.removeChild(a.firstChild);while(f.firstChild)a.appendChild(f.firstChild)}else if(i!==s[n])try{a[n]=i}catch(Oa){}}}}function ii(t,e){return!t.composing&&(\"OPTION\"===t.tagName||ai(t,e)||si(t,e))}function ai(t,e){var n=!0;try{n=document.activeElement!==t}catch(Oa){}return n&&t.value!==e}function si(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}var ci={create:oi,update:oi},ui=w((function(t){var e={},n=/;(?![^(]*\\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function fi(t){var e=li(t.style);return t.staticStyle?T(t.staticStyle,e):e}function li(t){return Array.isArray(t)?I(t):\"string\"===typeof t?ui(t):t}function pi(t,e){var n,r={};if(e){var o=t;while(o.componentInstance)o=o.componentInstance._vnode,o&&o.data&&(n=fi(o.data))&&T(r,n)}(n=fi(t.data))&&T(r,n);var i=t;while(i=i.parent)i.data&&(n=fi(i.data))&&T(r,n);return r}var di,vi=/^--/,hi=/\\s*!important$/,yi=function(t,e,n){if(vi.test(e))t.style.setProperty(e,n);else if(hi.test(n))t.style.setProperty($(e),n.replace(hi,\"\"),\"important\");else{var r=gi(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},mi=[\"Webkit\",\"Moz\",\"ms\"],gi=w((function(t){if(di=di||document.createElement(\"div\").style,t=O(t),\"filter\"!==t&&t in di)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<mi.length;n++){var r=mi[n]+e;if(r in di)return r}}));function bi(t,e){var n=e.data,i=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var a,s,c=e.elm,u=i.staticStyle,f=i.normalizedStyle||i.style||{},l=u||f,p=li(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?T({},p):p;var d=pi(e,!0);for(s in l)r(d[s])&&yi(c,s,\"\");for(s in d)a=d[s],a!==l[s]&&yi(c,s,null==a?\"\":a)}}var _i={create:bi,update:bi},wi=/\\s+/;function xi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(\" \")>-1?e.split(wi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \";n.indexOf(\" \"+e+\" \")<0&&t.setAttribute(\"class\",(n+e).trim())}}function Oi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(\" \")>-1?e.split(wi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute(\"class\");else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \",r=\" \"+e+\" \";while(n.indexOf(r)>=0)n=n.replace(r,\" \");n=n.trim(),n?t.setAttribute(\"class\",n):t.removeAttribute(\"class\")}}function Ai(t){if(t){if(\"object\"===typeof t){var e={};return!1!==t.css&&T(e,Ci(t.name||\"v\")),T(e,t),e}return\"string\"===typeof t?Ci(t):void 0}}var Ci=w((function(t){return{enterClass:t+\"-enter\",enterToClass:t+\"-enter-to\",enterActiveClass:t+\"-enter-active\",leaveClass:t+\"-leave\",leaveToClass:t+\"-leave-to\",leaveActiveClass:t+\"-leave-active\"}})),$i=J&&!et,Si=\"transition\",ki=\"animation\",ji=\"transition\",Ei=\"transitionend\",Ti=\"animation\",Ii=\"animationend\";$i&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ji=\"WebkitTransition\",Ei=\"webkitTransitionEnd\"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ti=\"WebkitAnimation\",Ii=\"webkitAnimationEnd\"));var Pi=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Di(t){Pi((function(){Pi(t)}))}function Ni(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),xi(t,e))}function Mi(t,e){t._transitionClasses&&g(t._transitionClasses,e),Oi(t,e)}function Fi(t,e,n){var r=Ri(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===Si?Ei:Ii,c=0,u=function(){t.removeEventListener(s,f),n()},f=function(e){e.target===t&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,f)}var Li=/\\b(transform|all)(,|$)/;function Ri(t,e){var n,r=window.getComputedStyle(t),o=(r[ji+\"Delay\"]||\"\").split(\", \"),i=(r[ji+\"Duration\"]||\"\").split(\", \"),a=Ui(o,i),s=(r[Ti+\"Delay\"]||\"\").split(\", \"),c=(r[Ti+\"Duration\"]||\"\").split(\", \"),u=Ui(s,c),f=0,l=0;e===Si?a>0&&(n=Si,f=a,l=i.length):e===ki?u>0&&(n=ki,f=u,l=c.length):(f=Math.max(a,u),n=f>0?a>u?Si:ki:null,l=n?n===Si?i.length:c.length:0);var p=n===Si&&Li.test(r[ji+\"Property\"]);return{type:n,timeout:f,propCount:l,hasTransform:p}}function Ui(t,e){while(t.length<e.length)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return zi(e)+zi(t[n])})))}function zi(t){return 1e3*Number(t.slice(0,-1).replace(\",\",\".\"))}function Bi(t,e){var n=t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Ai(t.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){var a=i.css,s=i.type,u=i.enterClass,f=i.enterToClass,l=i.enterActiveClass,p=i.appearClass,d=i.appearToClass,v=i.appearActiveClass,y=i.beforeEnter,m=i.enter,g=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,w=i.appear,x=i.afterAppear,O=i.appearCancelled,A=i.duration,C=En,$=En.$vnode;while($&&$.parent)C=$.context,$=$.parent;var S=!C._isMounted||!t.isRootInsert;if(!S||w||\"\"===w){var k=S&&p?p:u,j=S&&v?v:l,E=S&&d?d:f,T=S&&_||y,I=S&&\"function\"===typeof w?w:m,P=S&&x||g,D=S&&O||b,N=h(c(A)?A.enter:A);0;var M=!1!==a&&!et,F=Wi(I),R=n._enterCb=L((function(){M&&(Mi(n,E),Mi(n,j)),R.cancelled?(M&&Mi(n,k),D&&D(n)):P&&P(n),n._enterCb=null}));t.data.show||we(t,\"insert\",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(n,R)})),T&&T(n),M&&(Ni(n,k),Ni(n,j),Di((function(){Mi(n,k),R.cancelled||(Ni(n,E),F||(Hi(N)?setTimeout(R,N):Fi(n,s,R)))}))),t.data.show&&(e&&e(),I&&I(n,R)),M||F||R()}}}function Vi(t,e){var n=t.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Ai(t.data.transition);if(r(i)||1!==n.nodeType)return e();if(!o(n._leaveCb)){var a=i.css,s=i.type,u=i.leaveClass,f=i.leaveToClass,l=i.leaveActiveClass,p=i.beforeLeave,d=i.leave,v=i.afterLeave,y=i.leaveCancelled,m=i.delayLeave,g=i.duration,b=!1!==a&&!et,_=Wi(d),w=h(c(g)?g.leave:g);0;var x=n._leaveCb=L((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(Mi(n,f),Mi(n,l)),x.cancelled?(b&&Mi(n,u),y&&y(n)):(e(),v&&v(n)),n._leaveCb=null}));m?m(O):O()}function O(){x.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),b&&(Ni(n,u),Ni(n,l),Di((function(){Mi(n,u),x.cancelled||(Ni(n,f),_||(Hi(w)?setTimeout(x,w):Fi(n,s,x)))}))),d&&d(n,x),b||_||x())}}function Hi(t){return\"number\"===typeof t&&!isNaN(t)}function Wi(t){if(r(t))return!1;var e=t.fns;return o(e)?Wi(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function qi(t,e){!0!==e.data.show&&Bi(e)}var Gi=J?{create:qi,activate:qi,remove:function(t,e){!0!==t.data.show?Vi(t,e):e()}}:{},Ki=[Ho,Go,ri,ci,_i,Gi],Xi=Ki.concat(Uo),Ji=Io({nodeOps:Ao,modules:Xi});et&&document.addEventListener(\"selectionchange\",(function(){var t=document.activeElement;t&&t.vmodel&&oa(t,\"input\")}));var Yi={inserted:function(t,e,n,r){\"select\"===n.tag?(r.elm&&!r.elm._vOptions?we(n,\"postpatch\",(function(){Yi.componentUpdated(t,e,n)})):Zi(t,e,n.context),t._vOptions=[].map.call(t.options,ea)):(\"textarea\"===n.tag||uo(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener(\"compositionstart\",na),t.addEventListener(\"compositionend\",ra),t.addEventListener(\"change\",ra),et&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if(\"select\"===n.tag){Zi(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,ea);if(o.some((function(t,e){return!M(t,r[e])}))){var i=t.multiple?e.value.some((function(t){return ta(t,o)})):e.value!==e.oldValue&&ta(e.value,o);i&&oa(t,\"change\")}}}};function Zi(t,e,n){Qi(t,e,n),(tt||nt)&&setTimeout((function(){Qi(t,e,n)}),0)}function Qi(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=F(r,ea(a))>-1,a.selected!==i&&(a.selected=i);else if(M(ea(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function ta(t,e){return e.every((function(e){return!M(e,t)}))}function ea(t){return\"_value\"in t?t._value:t.value}function na(t){t.target.composing=!0}function ra(t){t.target.composing&&(t.target.composing=!1,oa(t.target,\"input\"))}function oa(t,e){var n=document.createEvent(\"HTMLEvents\");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function ia(t){return!t.componentInstance||t.data&&t.data.transition?t:ia(t.componentInstance._vnode)}var aa={bind:function(t,e,n){var r=e.value;n=ia(n);var o=n.data&&n.data.transition,i=t.__vOriginalDisplay=\"none\"===t.style.display?\"\":t.style.display;r&&o?(n.data.show=!0,Bi(n,(function(){t.style.display=i}))):t.style.display=r?i:\"none\"},update:function(t,e,n){var r=e.value,o=e.oldValue;if(!r!==!o){n=ia(n);var i=n.data&&n.data.transition;i?(n.data.show=!0,r?Bi(n,(function(){t.style.display=t.__vOriginalDisplay})):Vi(n,(function(){t.style.display=\"none\"}))):t.style.display=r?t.__vOriginalDisplay:\"none\"}},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}},sa={model:Yi,show:aa},ca={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ua(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ua(On(e.children)):t}function fa(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[O(i)]=o[i];return e}function la(t,e){if(/\\d-keep-alive$/.test(e.tag))return t(\"keep-alive\",{props:e.componentOptions.propsData})}function pa(t){while(t=t.parent)if(t.data.transition)return!0}function da(t,e){return e.key===t.key&&e.tag===t.tag}var va=function(t){return t.tag||xn(t)},ha=function(t){return\"show\"===t.name},ya={name:\"transition\",props:ca,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(va),n.length)){0;var r=this.mode;0;var o=n[0];if(pa(this.$vnode))return o;var i=ua(o);if(!i)return o;if(this._leaving)return la(t,o);var a=\"__transition-\"+this._uid+\"-\";i.key=null==i.key?i.isComment?a+\"comment\":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=fa(this),u=this._vnode,f=ua(u);if(i.data.directives&&i.data.directives.some(ha)&&(i.data.show=!0),f&&f.data&&!da(i,f)&&!xn(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var l=f.data.transition=T({},c);if(\"out-in\"===r)return this._leaving=!0,we(l,\"afterLeave\",(function(){e._leaving=!1,e.$forceUpdate()})),la(t,o);if(\"in-out\"===r){if(xn(i))return u;var p,d=function(){p()};we(c,\"afterEnter\",d),we(c,\"enterCancelled\",d),we(l,\"delayLeave\",(function(t){p=t}))}}return o}}},ma=T({tag:String,moveClass:String},ca);delete ma.mode;var ga={props:ma,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Tn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||\"span\",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=fa(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf(\"__vlist\"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var u=[],f=[],l=0;l<r.length;l++){var p=r[l];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):f.push(p)}this.kept=t(e,null,u),this.removed=f}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||\"v\")+\"-move\";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(ba),t.forEach(_a),t.forEach(wa),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;Ni(n,e),r.transform=r.WebkitTransform=r.transitionDuration=\"\",n.addEventListener(Ei,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Ei,t),n._moveCb=null,Mi(n,e))})}})))},methods:{hasMove:function(t,e){if(!$i)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){Oi(n,t)})),xi(n,e),n.style.display=\"none\",this.$el.appendChild(n);var r=Ri(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function ba(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function _a(t){t.data.newPos=t.elm.getBoundingClientRect()}function wa(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform=\"translate(\"+r+\"px,\"+o+\"px)\",i.transitionDuration=\"0s\"}}var xa={Transition:ya,TransitionGroup:ga};Or.config.mustUseProp=Ur,Or.config.isReservedTag=io,Or.config.isReservedAttr=Lr,Or.config.getTagNamespace=ao,Or.config.isUnknownElement=co,T(Or.options.directives,sa),T(Or.options.components,xa),Or.prototype.__patch__=J?Ji:P,Or.prototype.$mount=function(t,e){return t=t&&J?fo(t):void 0,Dn(this,t,e)},J&&setTimeout((function(){B.devtools&&ut&&ut.emit(\"init\",Or)}),0),e[\"a\"]=Or}).call(this,n(\"c8ba\"))},\"2cf4\":function(t,e,n){var r,o,i,a=n(\"da84\"),s=n(\"d039\"),c=n(\"0366\"),u=n(\"1be4\"),f=n(\"cc12\"),l=n(\"1cdc\"),p=n(\"605d\"),d=a.location,v=a.setImmediate,h=a.clearImmediate,y=a.process,m=a.MessageChannel,g=a.Dispatch,b=0,_={},w=\"onreadystatechange\",x=function(t){if(_.hasOwnProperty(t)){var e=_[t];delete _[t],e()}},O=function(t){return function(){x(t)}},A=function(t){x(t.data)},C=function(t){a.postMessage(t+\"\",d.protocol+\"//\"+d.host)};v&&h||(v=function(t){var e=[],n=1;while(arguments.length>n)e.push(arguments[n++]);return _[++b]=function(){(\"function\"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},h=function(t){delete _[t]},p?r=function(t){y.nextTick(O(t))}:g&&g.now?r=function(t){g.now(O(t))}:m&&!l?(o=new m,i=o.port2,o.port1.onmessage=A,r=c(i.postMessage,i,1)):a.addEventListener&&\"function\"==typeof postMessage&&!a.importScripts&&d&&\"file:\"!==d.protocol&&!s(C)?(r=C,a.addEventListener(\"message\",A,!1)):r=w in f(\"script\")?function(t){u.appendChild(f(\"script\"))[w]=function(){u.removeChild(this),x(t)}}:function(t){setTimeout(O(t),0)}),t.exports={set:v,clear:h}},\"2d00\":function(t,e,n){var r,o,i=n(\"da84\"),a=n(\"342f\"),s=i.process,c=s&&s.versions,u=c&&c.v8;u?(r=u.split(\".\"),o=r[0]+r[1]):a&&(r=a.match(/Edge\\/(\\d+)/),(!r||r[1]>=74)&&(r=a.match(/Chrome\\/(\\d+)/),r&&(o=r[1]))),t.exports=o&&+o},\"342f\":function(t,e,n){var r=n(\"d066\");t.exports=r(\"navigator\",\"userAgent\")||\"\"},\"35a1\":function(t,e,n){var r=n(\"f5df\"),o=n(\"3f8c\"),i=n(\"b622\"),a=i(\"iterator\");t.exports=function(t){if(void 0!=t)return t[a]||t[\"@@iterator\"]||o[r(t)]}},\"37e8\":function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\"),i=n(\"825a\"),a=n(\"df75\");t.exports=r?Object.defineProperties:function(t,e){i(t);var n,r=a(e),s=r.length,c=0;while(s>c)o.f(t,n=r[c++],e[n]);return t}},\"3bbe\":function(t,e,n){var r=n(\"861d\");t.exports=function(t){if(!r(t)&&null!==t)throw TypeError(\"Can't set \"+String(t)+\" as a prototype\");return t}},\"3f8c\":function(t,e){t.exports={}},\"428f\":function(t,e,n){var r=n(\"da84\");t.exports=r},\"44ad\":function(t,e,n){var r=n(\"d039\"),o=n(\"c6b6\"),i=\"\".split;t.exports=r((function(){return!Object(\"z\").propertyIsEnumerable(0)}))?function(t){return\"String\"==o(t)?i.call(t,\"\"):Object(t)}:Object},\"44d2\":function(t,e,n){var r=n(\"b622\"),o=n(\"7c73\"),i=n(\"9bf2\"),a=r(\"unscopables\"),s=Array.prototype;void 0==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),t.exports=function(t){s[a][t]=!0}},\"44de\":function(t,e,n){var r=n(\"da84\");t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},4840:function(t,e,n){var r=n(\"825a\"),o=n(\"1c0b\"),i=n(\"b622\"),a=i(\"species\");t.exports=function(t,e){var n,i=r(t).constructor;return void 0===i||void 0==(n=r(i)[a])?e:o(n)}},4930:function(t,e,n){var r=n(\"605d\"),o=n(\"2d00\"),i=n(\"d039\");t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},\"4d64\":function(t,e,n){var r=n(\"fc6a\"),o=n(\"50c4\"),i=n(\"23cb\"),a=function(t){return function(e,n,a){var s,c=r(e),u=o(c.length),f=i(a,u);if(t&&n!=n){while(u>f)if(s=c[f++],s!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},\"50c4\":function(t,e,n){var r=n(\"a691\"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},5135:function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},5692:function(t,e,n){var r=n(\"c430\"),o=n(\"c6cd\");(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.9.1\",mode:r?\"pure\":\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"})},\"56ef\":function(t,e,n){var r=n(\"d066\"),o=n(\"241c\"),i=n(\"7418\"),a=n(\"825a\");t.exports=r(\"Reflect\",\"ownKeys\")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},\"5c6c\":function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},\"605d\":function(t,e,n){var r=n(\"c6b6\"),o=n(\"da84\");t.exports=\"process\"==r(o.process)},\"60da\":function(t,e,n){\"use strict\";var r=n(\"83ab\"),o=n(\"d039\"),i=n(\"df75\"),a=n(\"7418\"),s=n(\"d1e7\"),c=n(\"7b0b\"),u=n(\"44ad\"),f=Object.assign,l=Object.defineProperty;t.exports=!f||o((function(){if(r&&1!==f({b:1},f(l({},\"a\",{enumerable:!0,get:function(){l(this,\"b\",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o=\"abcdefghijklmnopqrst\";return t[n]=7,o.split(\"\").forEach((function(t){e[t]=t})),7!=f({},t)[n]||i(f({},e)).join(\"\")!=o}))?function(t,e){var n=c(t),o=arguments.length,f=1,l=a.f,p=s.f;while(o>f){var d,v=u(arguments[f++]),h=l?i(v).concat(l(v)):i(v),y=h.length,m=0;while(y>m)d=h[m++],r&&!p.call(v,d)||(n[d]=v[d])}return n}:f},\"65f0\":function(t,e,n){var r=n(\"861d\"),o=n(\"e8b5\"),i=n(\"b622\"),a=i(\"species\");t.exports=function(t,e){var n;return o(t)&&(n=t.constructor,\"function\"!=typeof n||n!==Array&&!o(n.prototype)?r(n)&&(n=n[a],null===n&&(n=void 0)):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},\"69f3\":function(t,e,n){var r,o,i,a=n(\"7f9a\"),s=n(\"da84\"),c=n(\"861d\"),u=n(\"9112\"),f=n(\"5135\"),l=n(\"c6cd\"),p=n(\"f772\"),d=n(\"d012\"),v=s.WeakMap,h=function(t){return i(t)?o(t):r(t,{})},y=function(t){return function(e){var n;if(!c(e)||(n=o(e)).type!==t)throw TypeError(\"Incompatible receiver, \"+t+\" required\");return n}};if(a){var m=l.state||(l.state=new v),g=m.get,b=m.has,_=m.set;r=function(t,e){return e.facade=t,_.call(m,t,e),e},o=function(t){return g.call(m,t)||{}},i=function(t){return b.call(m,t)}}else{var w=p(\"state\");d[w]=!0,r=function(t,e){return e.facade=t,u(t,w,e),e},o=function(t){return f(t,w)?t[w]:{}},i=function(t){return f(t,w)}}t.exports={set:r,get:o,has:i,enforce:h,getterFor:y}},\"6eeb\":function(t,e,n){var r=n(\"da84\"),o=n(\"9112\"),i=n(\"5135\"),a=n(\"ce4e\"),s=n(\"8925\"),c=n(\"69f3\"),u=c.get,f=c.enforce,l=String(String).split(\"String\");(t.exports=function(t,e,n,s){var c,u=!!s&&!!s.unsafe,p=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;\"function\"==typeof n&&(\"string\"!=typeof e||i(n,\"name\")||o(n,\"name\",e),c=f(n),c.source||(c.source=l.join(\"string\"==typeof e?e:\"\"))),t!==r?(u?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=n:o(t,e,n)):p?t[e]=n:a(e,n)})(Function.prototype,\"toString\",(function(){return\"function\"==typeof this&&u(this).source||s(this)}))},7418:function(t,e){e.f=Object.getOwnPropertySymbols},7839:function(t,e){t.exports=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"]},\"7b0b\":function(t,e,n){var r=n(\"1d80\");t.exports=function(t){return Object(r(t))}},\"7c73\":function(t,e,n){var r,o=n(\"825a\"),i=n(\"37e8\"),a=n(\"7839\"),s=n(\"d012\"),c=n(\"1be4\"),u=n(\"cc12\"),f=n(\"f772\"),l=\">\",p=\"<\",d=\"prototype\",v=\"script\",h=f(\"IE_PROTO\"),y=function(){},m=function(t){return p+v+l+t+p+\"/\"+v+l},g=function(t){t.write(m(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},b=function(){var t,e=u(\"iframe\"),n=\"java\"+v+\":\";return e.style.display=\"none\",c.appendChild(e),e.src=String(n),t=e.contentWindow.document,t.open(),t.write(m(\"document.F=Object\")),t.close(),t.F},_=function(){try{r=document.domain&&new ActiveXObject(\"htmlfile\")}catch(e){}_=r?g(r):b();var t=a.length;while(t--)delete _[d][a[t]];return _()};s[h]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(y[d]=o(t),n=new y,y[d]=null,n[h]=t):n=_(),void 0===e?n:i(n,e)}},\"7dd0\":function(t,e,n){\"use strict\";var r=n(\"23e7\"),o=n(\"9ed3\"),i=n(\"e163\"),a=n(\"d2bb\"),s=n(\"d44e\"),c=n(\"9112\"),u=n(\"6eeb\"),f=n(\"b622\"),l=n(\"c430\"),p=n(\"3f8c\"),d=n(\"ae93\"),v=d.IteratorPrototype,h=d.BUGGY_SAFARI_ITERATORS,y=f(\"iterator\"),m=\"keys\",g=\"values\",b=\"entries\",_=function(){return this};t.exports=function(t,e,n,f,d,w,x){o(n,e,f);var O,A,C,$=function(t){if(t===d&&T)return T;if(!h&&t in j)return j[t];switch(t){case m:return function(){return new n(this,t)};case g:return function(){return new n(this,t)};case b:return function(){return new n(this,t)}}return function(){return new n(this)}},S=e+\" Iterator\",k=!1,j=t.prototype,E=j[y]||j[\"@@iterator\"]||d&&j[d],T=!h&&E||$(d),I=\"Array\"==e&&j.entries||E;if(I&&(O=i(I.call(new t)),v!==Object.prototype&&O.next&&(l||i(O)===v||(a?a(O,v):\"function\"!=typeof O[y]&&c(O,y,_)),s(O,S,!0,!0),l&&(p[S]=_))),d==g&&E&&E.name!==g&&(k=!0,T=function(){return E.call(this)}),l&&!x||j[y]===T||c(j,y,T),p[e]=T,d)if(A={values:$(g),keys:w?T:$(m),entries:$(b)},x)for(C in A)(h||k||!(C in j))&&u(j,C,A[C]);else r({target:e,proto:!0,forced:h||k},A);return A}},\"7f9a\":function(t,e,n){var r=n(\"da84\"),o=n(\"8925\"),i=r.WeakMap;t.exports=\"function\"===typeof i&&/native code/.test(o(i))},\"825a\":function(t,e,n){var r=n(\"861d\");t.exports=function(t){if(!r(t))throw TypeError(String(t)+\" is not an object\");return t}},\"83ab\":function(t,e,n){var r=n(\"d039\");t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},\"861d\":function(t,e){t.exports=function(t){return\"object\"===typeof t?null!==t:\"function\"===typeof t}},8925:function(t,e,n){var r=n(\"c6cd\"),o=Function.toString;\"function\"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},\"90e3\":function(t,e){var n=0,r=Math.random();t.exports=function(t){return\"Symbol(\"+String(void 0===t?\"\":t)+\")_\"+(++n+r).toString(36)}},9112:function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\"),i=n(\"5c6c\");t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},\"94ca\":function(t,e,n){var r=n(\"d039\"),o=/#|\\.prototype\\./,i=function(t,e){var n=s[a(t)];return n==u||n!=c&&(\"function\"==typeof e?r(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,\".\").toLowerCase()},s=i.data={},c=i.NATIVE=\"N\",u=i.POLYFILL=\"P\";t.exports=i},\"9bf2\":function(t,e,n){var r=n(\"83ab\"),o=n(\"0cfb\"),i=n(\"825a\"),a=n(\"c04e\"),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(i(t),e=a(e,!0),i(n),o)try{return s(t,e,n)}catch(r){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported\");return\"value\"in n&&(t[e]=n.value),t}},\"9ed3\":function(t,e,n){\"use strict\";var r=n(\"ae93\").IteratorPrototype,o=n(\"7c73\"),i=n(\"5c6c\"),a=n(\"d44e\"),s=n(\"3f8c\"),c=function(){return this};t.exports=function(t,e,n){var u=e+\" Iterator\";return t.prototype=o(r,{next:i(1,n)}),a(t,u,!1,!0),s[u]=c,t}},a4b4:function(t,e,n){var r=n(\"342f\");t.exports=/web0s(?!.*chrome)/i.test(r)},a691:function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},a79d:function(t,e,n){\"use strict\";var r=n(\"23e7\"),o=n(\"c430\"),i=n(\"fea9\"),a=n(\"d039\"),s=n(\"d066\"),c=n(\"4840\"),u=n(\"cdf9\"),f=n(\"6eeb\"),l=!!i&&a((function(){i.prototype[\"finally\"].call({then:function(){}},(function(){}))}));r({target:\"Promise\",proto:!0,real:!0,forced:l},{finally:function(t){var e=c(this,s(\"Promise\")),n=\"function\"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),o||\"function\"!=typeof i||i.prototype[\"finally\"]||f(i.prototype,\"finally\",s(\"Promise\").prototype[\"finally\"])},ae93:function(t,e,n){\"use strict\";var r,o,i,a=n(\"d039\"),s=n(\"e163\"),c=n(\"9112\"),u=n(\"5135\"),f=n(\"b622\"),l=n(\"c430\"),p=f(\"iterator\"),d=!1,v=function(){return this};[].keys&&(i=[].keys(),\"next\"in i?(o=s(s(i)),o!==Object.prototype&&(r=o)):d=!0);var h=void 0==r||a((function(){var t={};return r[p].call(t)!==t}));h&&(r={}),l&&!h||u(r,p)||c(r,p,v),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},b0c0:function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\").f,i=Function.prototype,a=i.toString,s=/^\\s*function ([^ (]*)/,c=\"name\";r&&!(c in i)&&o(i,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return\"\"}}})},b575:function(t,e,n){var r,o,i,a,s,c,u,f,l=n(\"da84\"),p=n(\"06cf\").f,d=n(\"2cf4\").set,v=n(\"1cdc\"),h=n(\"a4b4\"),y=n(\"605d\"),m=l.MutationObserver||l.WebKitMutationObserver,g=l.document,b=l.process,_=l.Promise,w=p(l,\"queueMicrotask\"),x=w&&w.value;x||(r=function(){var t,e;y&&(t=b.domain)&&t.exit();while(o){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,t&&t.enter()},v||y||h||!m||!g?_&&_.resolve?(u=_.resolve(void 0),f=u.then,a=function(){f.call(u,r)}):a=y?function(){b.nextTick(r)}:function(){d.call(l,r)}:(s=!0,c=g.createTextNode(\"\"),new m(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},b622:function(t,e,n){var r=n(\"da84\"),o=n(\"5692\"),i=n(\"5135\"),a=n(\"90e3\"),s=n(\"4930\"),c=n(\"fdbf\"),u=o(\"wks\"),f=r.Symbol,l=c?f:f&&f.withoutSetter||a;t.exports=function(t){return i(u,t)&&(s||\"string\"==typeof u[t])||(s&&i(f,t)?u[t]=f[t]:u[t]=l(\"Symbol.\"+t)),u[t]}},b727:function(t,e,n){var r=n(\"0366\"),o=n(\"44ad\"),i=n(\"7b0b\"),a=n(\"50c4\"),s=n(\"65f0\"),c=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,f=4==t,l=6==t,p=7==t,d=5==t||l;return function(v,h,y,m){for(var g,b,_=i(v),w=o(_),x=r(h,y,3),O=a(w.length),A=0,C=m||s,$=e?C(v,O):n||p?C(v,0):void 0;O>A;A++)if((d||A in w)&&(g=w[A],b=x(g,A,_),t))if(e)$[A]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return A;case 2:c.call($,g)}else switch(t){case 4:return!1;case 7:c.call($,g)}return l?-1:u||f?f:$}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterOut:u(7)}},c04e:function(t,e,n){var r=n(\"861d\");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if(\"function\"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},c430:function(t,e){t.exports=!1},c6b6:function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},c6cd:function(t,e,n){var r=n(\"da84\"),o=n(\"ce4e\"),i=\"__core-js_shared__\",a=r[i]||o(i,{});t.exports=a},c8ba:function(t,e){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(r){\"object\"===typeof window&&(n=window)}t.exports=n},ca84:function(t,e,n){var r=n(\"5135\"),o=n(\"fc6a\"),i=n(\"4d64\").indexOf,a=n(\"d012\");t.exports=function(t,e){var n,s=o(t),c=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);while(e.length>c)r(s,n=e[c++])&&(~i(u,n)||u.push(n));return u}},cc12:function(t,e,n){var r=n(\"da84\"),o=n(\"861d\"),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},cca6:function(t,e,n){var r=n(\"23e7\"),o=n(\"60da\");r({target:\"Object\",stat:!0,forced:Object.assign!==o},{assign:o})},cdf9:function(t,e,n){var r=n(\"825a\"),o=n(\"861d\"),i=n(\"f069\");t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t),a=n.resolve;return a(e),n.promise}},ce4e:function(t,e,n){var r=n(\"da84\"),o=n(\"9112\");t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},d012:function(t,e){t.exports={}},d039:function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},d066:function(t,e,n){var r=n(\"428f\"),o=n(\"da84\"),i=function(t){return\"function\"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){\"use strict\";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},d2bb:function(t,e,n){var r=n(\"825a\"),o=n(\"3bbe\");t.exports=Object.setPrototypeOf||(\"__proto__\"in{}?function(){var t,e=!1,n={};try{t=Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set,t.call(n,[]),e=n instanceof Array}catch(i){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},d44e:function(t,e,n){var r=n(\"9bf2\").f,o=n(\"5135\"),i=n(\"b622\"),a=i(\"toStringTag\");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,a)&&r(t,a,{configurable:!0,value:e})}},d81d:function(t,e,n){\"use strict\";var r=n(\"23e7\"),o=n(\"b727\").map,i=n(\"1dde\"),a=i(\"map\");r({target:\"Array\",proto:!0,forced:!a},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},da84:function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n(\"object\"==typeof globalThis&&globalThis)||n(\"object\"==typeof window&&window)||n(\"object\"==typeof self&&self)||n(\"object\"==typeof e&&e)||function(){return this}()||Function(\"return this\")()}).call(this,n(\"c8ba\"))},df75:function(t,e,n){var r=n(\"ca84\"),o=n(\"7839\");t.exports=Object.keys||function(t){return r(t,o)}},e163:function(t,e,n){var r=n(\"5135\"),o=n(\"7b0b\"),i=n(\"f772\"),a=n(\"e177\"),s=i(\"IE_PROTO\"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},e177:function(t,e,n){var r=n(\"d039\");t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},e260:function(t,e,n){\"use strict\";var r=n(\"fc6a\"),o=n(\"44d2\"),i=n(\"3f8c\"),a=n(\"69f3\"),s=n(\"7dd0\"),c=\"Array Iterator\",u=a.set,f=a.getterFor(c);t.exports=s(Array,\"Array\",(function(t,e){u(this,{type:c,target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):\"keys\"==n?{value:r,done:!1}:\"values\"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),\"values\"),i.Arguments=i.Array,o(\"keys\"),o(\"values\"),o(\"entries\")},e2cc:function(t,e,n){var r=n(\"6eeb\");t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},e667:function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(e){return{error:!0,value:e}}}},e6cf:function(t,e,n){\"use strict\";var r,o,i,a,s=n(\"23e7\"),c=n(\"c430\"),u=n(\"da84\"),f=n(\"d066\"),l=n(\"fea9\"),p=n(\"6eeb\"),d=n(\"e2cc\"),v=n(\"d44e\"),h=n(\"2626\"),y=n(\"861d\"),m=n(\"1c0b\"),g=n(\"19aa\"),b=n(\"8925\"),_=n(\"2266\"),w=n(\"1c7e\"),x=n(\"4840\"),O=n(\"2cf4\").set,A=n(\"b575\"),C=n(\"cdf9\"),$=n(\"44de\"),S=n(\"f069\"),k=n(\"e667\"),j=n(\"69f3\"),E=n(\"94ca\"),T=n(\"b622\"),I=n(\"605d\"),P=n(\"2d00\"),D=T(\"species\"),N=\"Promise\",M=j.get,F=j.set,L=j.getterFor(N),R=l,U=u.TypeError,z=u.document,B=u.process,V=f(\"fetch\"),H=S.f,W=H,q=!!(z&&z.createEvent&&u.dispatchEvent),G=\"function\"==typeof PromiseRejectionEvent,K=\"unhandledrejection\",X=\"rejectionhandled\",J=0,Y=1,Z=2,Q=1,tt=2,et=E(N,(function(){var t=b(R)!==String(R);if(!t){if(66===P)return!0;if(!I&&!G)return!0}if(c&&!R.prototype[\"finally\"])return!0;if(P>=51&&/native code/.test(R))return!1;var e=R.resolve(1),n=function(t){t((function(){}),(function(){}))},r=e.constructor={};return r[D]=n,!(e.then((function(){}))instanceof n)})),nt=et||!w((function(t){R.all(t)[\"catch\"]((function(){}))})),rt=function(t){var e;return!(!y(t)||\"function\"!=typeof(e=t.then))&&e},ot=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;A((function(){var r=t.value,o=t.state==Y,i=0;while(n.length>i){var a,s,c,u=n[i++],f=o?u.ok:u.fail,l=u.resolve,p=u.reject,d=u.domain;try{f?(o||(t.rejection===tt&&ct(t),t.rejection=Q),!0===f?a=r:(d&&d.enter(),a=f(r),d&&(d.exit(),c=!0)),a===u.promise?p(U(\"Promise-chain cycle\")):(s=rt(a))?s.call(a,l,p):l(a)):p(r)}catch(v){d&&!c&&d.exit(),p(v)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&at(t)}))}},it=function(t,e,n){var r,o;q?(r=z.createEvent(\"Event\"),r.promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},!G&&(o=u[\"on\"+t])?o(r):t===K&&$(\"Unhandled promise rejection\",n)},at=function(t){O.call(u,(function(){var e,n=t.facade,r=t.value,o=st(t);if(o&&(e=k((function(){I?B.emit(\"unhandledRejection\",r,n):it(K,n,r)})),t.rejection=I||st(t)?tt:Q,e.error))throw e.value}))},st=function(t){return t.rejection!==Q&&!t.parent},ct=function(t){O.call(u,(function(){var e=t.facade;I?B.emit(\"rejectionHandled\",e):it(X,e,t.value)}))},ut=function(t,e,n){return function(r){t(e,r,n)}},ft=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=Z,ot(t,!0))},lt=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw U(\"Promise can't be resolved itself\");var r=rt(e);r?A((function(){var n={done:!1};try{r.call(e,ut(lt,n,t),ut(ft,n,t))}catch(o){ft(n,o,t)}})):(t.value=e,t.state=Y,ot(t,!1))}catch(o){ft({done:!1},o,t)}}};et&&(R=function(t){g(this,R,N),m(t),r.call(this);var e=M(this);try{t(ut(lt,e),ut(ft,e))}catch(n){ft(e,n)}},r=function(t){F(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:J,value:void 0})},r.prototype=d(R.prototype,{then:function(t,e){var n=L(this),r=H(x(this,R));return r.ok=\"function\"!=typeof t||t,r.fail=\"function\"==typeof e&&e,r.domain=I?B.domain:void 0,n.parent=!0,n.reactions.push(r),n.state!=J&&ot(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=M(t);this.promise=t,this.resolve=ut(lt,e),this.reject=ut(ft,e)},S.f=H=function(t){return t===R||t===i?new o(t):W(t)},c||\"function\"!=typeof l||(a=l.prototype.then,p(l.prototype,\"then\",(function(t,e){var n=this;return new R((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),\"function\"==typeof V&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return C(R,V.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:et},{Promise:R}),v(R,N,!1,!0),h(N),i=f(N),s({target:N,stat:!0,forced:et},{reject:function(t){var e=H(this);return e.reject.call(void 0,t),e.promise}}),s({target:N,stat:!0,forced:c||et},{resolve:function(t){return C(c&&this===i?R:this,t)}}),s({target:N,stat:!0,forced:nt},{all:function(t){var e=this,n=H(e),r=n.resolve,o=n.reject,i=k((function(){var n=m(e.resolve),i=[],a=0,s=1;_(t,(function(t){var c=a++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[c]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=H(e),r=n.reject,o=k((function(){var o=m(e.resolve);_(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},e893:function(t,e,n){var r=n(\"5135\"),o=n(\"56ef\"),i=n(\"06cf\"),a=n(\"9bf2\");t.exports=function(t,e){for(var n=o(e),s=a.f,c=i.f,u=0;u<n.length;u++){var f=n[u];r(t,f)||s(t,f,c(e,f))}}},e8b5:function(t,e,n){var r=n(\"c6b6\");t.exports=Array.isArray||function(t){return\"Array\"==r(t)}},e95a:function(t,e,n){var r=n(\"b622\"),o=n(\"3f8c\"),i=r(\"iterator\"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},f069:function(t,e,n){\"use strict\";var r=n(\"1c0b\"),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError(\"Bad Promise constructor\");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},f5df:function(t,e,n){var r=n(\"00ee\"),o=n(\"c6b6\"),i=n(\"b622\"),a=i(\"toStringTag\"),s=\"Arguments\"==o(function(){return arguments}()),c=function(t,e){try{return t[e]}catch(n){}};t.exports=r?o:function(t){var e,n,r;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=c(e=Object(t),a))?n:s?o(e):\"Object\"==(r=o(e))&&\"function\"==typeof e.callee?\"Arguments\":r}},f772:function(t,e,n){var r=n(\"5692\"),o=n(\"90e3\"),i=r(\"keys\");t.exports=function(t){return i[t]||(i[t]=o(t))}},fc6a:function(t,e,n){var r=n(\"44ad\"),o=n(\"1d80\");t.exports=function(t){return r(o(t))}},fdbf:function(t,e,n){var r=n(\"4930\");t.exports=r&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator},fea9:function(t,e,n){var r=n(\"da84\");t.exports=r.Promise}}]);\n//# sourceMappingURL=chunk-vendors.854fd5c2.js.map","slug":"last/ohmybox/js/chunk-vendors.854fd5c2","published":0,"date":"2021-10-22T09:38:36.433Z","updated":"2021-10-22T09:38:36.434Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv28mesr0028h7vmdsxk8dl1","content":"(window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[]).push([[\"chunk-vendors\"],{\"00ee\":function(t,e,n){var r=n(\"b622\"),o=r(\"toStringTag\"),i={};i[o]=\"z\",t.exports=\"[object z]\"===String(i)},\"0366\":function(t,e,n){var r=n(\"1c0b\");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},\"06cf\":function(t,e,n){var r=n(\"83ab\"),o=n(\"d1e7\"),i=n(\"5c6c\"),a=n(\"fc6a\"),s=n(\"c04e\"),c=n(\"5135\"),u=n(\"0cfb\"),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=a(t),e=s(e,!0),u)try{return f(t,e)}catch(n){}if(c(t,e))return i(!o.f.call(t,e),t[e])}},\"0cfb\":function(t,e,n){var r=n(\"83ab\"),o=n(\"d039\"),i=n(\"cc12\");t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i(\"div\"),\"a\",{get:function(){return 7}}).a}))},\"19aa\":function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError(\"Incorrect \"+(n?n+\" \":\"\")+\"invocation\");return t}},\"1be4\":function(t,e,n){var r=n(\"d066\");t.exports=r(\"document\",\"documentElement\")},\"1c0b\":function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(String(t)+\" is not a function\");return t}},\"1c7e\":function(t,e,n){var r=n(\"b622\"),o=r(\"iterator\"),i=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){i=!0}};s[o]=function(){return this},Array.from(s,(function(){throw 2}))}catch(c){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var r={};r[o]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(c){}return n}},\"1cdc\":function(t,e,n){var r=n(\"342f\");t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},\"1d80\":function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on \"+t);return t}},\"1dde\":function(t,e,n){var r=n(\"d039\"),o=n(\"b622\"),i=n(\"2d00\"),a=o(\"species\");t.exports=function(t){return i>=51||!r((function(){var e=[],n=e.constructor={};return n[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2266:function(t,e,n){var r=n(\"825a\"),o=n(\"e95a\"),i=n(\"50c4\"),a=n(\"0366\"),s=n(\"35a1\"),c=n(\"2a62\"),u=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var f,l,p,d,v,h,y,m=n&&n.that,g=!(!n||!n.AS_ENTRIES),b=!(!n||!n.IS_ITERATOR),_=!(!n||!n.INTERRUPTED),w=a(e,m,1+g+_),x=function(t){return f&&c(f),new u(!0,t)},O=function(t){return g?(r(t),_?w(t[0],t[1],x):w(t[0],t[1])):_?w(t,x):w(t)};if(b)f=t;else{if(l=s(t),\"function\"!=typeof l)throw TypeError(\"Target is not iterable\");if(o(l)){for(p=0,d=i(t.length);d>p;p++)if(v=O(t[p]),v&&v instanceof u)return v;return new u(!1)}f=l.call(t)}h=f.next;while(!(y=h.call(f)).done){try{v=O(y.value)}catch(A){throw c(f),A}if(\"object\"==typeof v&&v&&v instanceof u)return v}return new u(!1)}},\"23cb\":function(t,e,n){var r=n(\"a691\"),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},\"23e7\":function(t,e,n){var 0=\"==t||null===t}function\" r=\"n(\"da84\"),o=n(\"06cf\").f,i=n(\"9112\"),a=n(\"6eeb\"),s=n(\"ce4e\"),c=n(\"e893\"),u=n(\"94ca\");t.exports=function(t,e){var\" n,f,l,p,d,v,h=\"t.target,y=t.global,m=t.stat;if(f=y?r:m?r[h]||s(h,{}):(r[h]||{}).prototype,f)for(l\" in e){if(d=\"e[l],t.noTargetGet?(v=o(f,l),p=v&&v.value):p=f[l],n=u(y?l:h+(m?\".\":\"#\")+l,t.forced),!n&&void\" 0!=\"=p){if(typeof\" d=\"==typeof\" p)continue;c(d,p)}(t.sham||p&&p.sham)&&i(d,\"sham\",!0),a(f,l,d,t)}}},\"241c\":function(t,e,n){var r(t,i)}},2626:function(t,e,n){\"use strict\";var e=\"r(t),n=o.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return\" this}})}},2877:function(t,e,n){\"use strict\";function r(t,e,n,r,o,i,a,s){var c,u=\"function\" ==\"=typeof\" t?t.options:t;if(e&&(u.render=\"e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId=\"data-v-\"+i),a?(c=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||\"undefined\"===typeof\" __vue_ssr_context__||(t=\"__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var\" f=\"u.render;u.render=function(t,e){return\" c.call(e),f(t,e)}}else{var l=\"u.beforeCreate;u.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:u}}n.d(e,\"a\",(function(){return\" r}))},\"2a62\":function(t,e,n){var r(e.call(t)).value}},\"2b0e\":function(t,e,n){\"use strict\";(function(t){ *! * vue.js v2.6.12 (c) 2014-2020 evan you released under the mit license. var n=\"Object.freeze({});function\" r(t){return void o(t){return i(t){return!0=\"==t}function\" a(t){return!1=\"==t}function\" s(t){return\"string\"=\"==typeof\" t||\"number\"=\"==typeof\" t||\"symbol\"=\"==typeof\" t||\"boolean\"=\"==typeof\" t}function c(t){return null!=\"=t&&\"object\"===typeof\" t}var u=\"Object.prototype.toString;function\" f(t){return\"[object object]\"=\"==u.call(t)}function\" l(t){return\"[object regexp]\"=\"==u.call(t)}function\" p(t){var>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return o(t)&&\"function\"===typeof t.then&&\"function\"===typeof t.catch}function v(t){return null==t?\"\":Array.isArray(t)||f(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(\",\"),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.tolowercase()]}:function(t){return n[t]}}y(\"slot,component\",!0);var m=\"y(\"key,ref,slot,slot-scope,is\");function\" g(t,e){if(t.length){var n=\"t.indexOf(e);if(n\">-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(t,e){return b.call(t,e)}function w(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var x=/-(\\w)/g,O=w((function(t){return t.replace(x,(function(t,e){return e?e.toUpperCase():\"\"}))})),A=w((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),C=/\\B([A-Z])/g,$=w((function(t){return t.replace(C,\"-$1\").toLowerCase()}));function S(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function k(t,e){return t.bind(e)}var j=Function.prototype.bind?k:S;function E(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function T(t,e){for(var n in e)t[n]=e[n];return t}function I(t){for(var e={},n=0;n<t.length;n++)t[n]&&T(e,t[n]);return 36=\"==e||95===e}function\" e}function p(t,e,n){}var d=\"function(t,e,n){return!1},N=function(t){return\" t};function m(t,e){if(t=\"==e)return!0;var\" n=\"c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var\" o=\"Array.isArray(t),i=Array.isArray(e);if(o&&i)return\" t.length=\"==e.length&&t.every((function(t,n){return\" m(t,e[n])}));if(t instanceof date&&e date)return t.gettime()=\"==e.getTime();if(o||i)return!1;var\" a=\"Object.keys(t),s=Object.keys(e);return\" a.length=\"==s.length&&a.every((function(n){return\" m(t[n],e[n])}))}catch(u){return!1}}function f(t,e){for(var n;return-1}function l(t){var e=\"!1;return\" function(){e||(e=\"!0,t.apply(this,arguments))}}var\" r=\"data-server-rendered\" ,u=\"[\"component\",\"directive\",\"filter\"],z=[\"beforeCreate\",\"created\",\"beforeMount\",\"mounted\",\"beforeUpdate\",\"updated\",\"beforeDestroy\",\"destroyed\",\"activated\",\"deactivated\",\"errorCaptured\",\"serverPrefetch\"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:D,isReservedAttr:D,isUnknownElement:D,getTagNamespace:P,parsePlatformTagName:N,mustUseProp:D,async:!0,_lifecycleHooks:z},V=/a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;function\" h(t){var w(t,e,n,r){object.defineproperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=\"new\" regexp(\"[^\"+v.source+\".$_\\\\d]\");function g(t){if(!q.test(t)){var function(t){for(var t}}}var k,x=\"__proto__\" in{},j=\"undefined\" !=\"=typeof\" window,y=\"undefined\" wxenvironment&&!!wxenvironment.platform,z=\"Y&&WXEnvironment.platform.toLowerCase(),Q=J&&window.navigator.userAgent.toLowerCase(),tt=Q&&/msie|trident/.test(Q),et=Q&&Q.indexOf(\"msie\" 9.0\")>0,nt=Q&&Q.indexOf(\"edge/\")>0,rt=(Q&&Q.indexOf(\"android\"),Q&&/iphone|ipad|ipod|ios/.test(Q)||\"ios\"===Z),ot=(Q&&/chrome\\/\\d+/.test(Q),Q&&/phantomjs/.test(Q),Q&&Q.match(/firefox\\/(\\d+)/)),it={}.watch,at=!1;if(J)try{var st={};Object.defineProperty(st,\"passive\",{get:function(){at=!0}}),window.addEventListener(\"test-passive\",null,st)}catch(Oa){}var ct=function(){return void 0===K&&(K=!J&&!Y&&\"undefined\"!==typeof t&&(t[\"process\"]&&\"server\"===t[\"process\"].env.VUE_ENV)),K},ut=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ft(t){return\"function\"===typeof t&&/native code/.test(t.toString())}var lt,pt=\"undefined\"!==typeof Symbol&&ft(Symbol)&&\"undefined\"!==typeof Reflect&&ft(Reflect.ownKeys);lt=\"undefined\"!==typeof Set&&ft(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var dt=P,vt=0,ht=function(){this.id=vt++,this.subs=[]};ht.prototype.addSub=function(t){this.subs.push(t)},ht.prototype.removeSub=function(t){g(this.subs,t)},ht.prototype.depend=function(){ht.target&&ht.target.addDep(this)},ht.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},ht.target=null;var 0=\"==t&&(t=\"\");var\" yt=\"[];function\" mt(t){yt.push(t),ht.target=\"t}function\" gt(){yt.pop(),ht.target=\"yt[yt.length-1]}var\" bt=\"function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void\" 0,this.context=\"i,this.fnContext=void\" 0,this.fnoptions=\"void\" 0,this.fnscopeid=\"void\" 0,this.key=\"e&&e.key,this.componentOptions=a,this.componentInstance=void\" 0,this.parent=\"void\" 0,this.raw=\"!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void\" 0,this.isasyncplaceholder=\"!1},_t={child:{configurable:!0}};_t.child.get=function(){return\" this.componentinstance},object.defineproperties(bt.prototype,_t);var wt=\"function(t){void\" e=\"new\" bt;return e.text=\"t,e.isComment=!0,e};function\" xt(t){return new bt(void 0,void 0,string(t))}function ot(t){var bt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentoptions,t.asyncfactory);return e.ns=\"t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var\" at=\"Array.prototype,Ct=Object.create(At),$t=[\"push\",\"pop\",\"shift\",\"unshift\",\"splice\",\"sort\",\"reverse\"];$t.forEach((function(t){var\" n=\"[],r=arguments.length;while(r--)n[r]=arguments[r];var\" o,i=\"e.apply(this,n),a=this.__ob__;switch(t){case\"push\":case\"unshift\":o=n;break;case\"splice\":o=n.slice(2);break}return\" o&&a.observearray(o),a.dep.notify(),i}))}));var st=\"Object.getOwnPropertyNames(Ct),kt=!0;function\" jt(t){kt=\"t}var\" et=\"function(t){this.value=t,this.dep=new\" ht,this.vmcount=\"0,W(t,\"__ob__\",this),Array.isArray(t)?(X?Tt(t,Ct):It(t,Ct,St),this.observeArray(t)):this.walk(t)};function\" tt(t,e){t.__proto__=\"e}function\" it(t,e,n){for(var r=\"0,o=n.length;r<o;r++){var\" i=\"n[r];W(t,i,e[i])}}function\" pt(t,e){var n;if(c(t)&&!(t instanceof bt))return _(t,\"__ob__\")&&t.__ob__ et?n=\"t.__ob__:kt&&!ct()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new\" et(t)),e&&n&&n.vmcount++,n}function dt(t,e,n,r,o){var ht,a=\"Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var\" s=\"a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var\" u=\"!o&&Pt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var\" ht.target&&(i.depend(),u&&(u.dep.depend(),array.isarray(e)&&ft(e))),e},set:function(e){var nt(t,e,n){if(array.isarray(t)&&p(e))return t.length=\"Math.max(t.length,e),t.splice(e,1,n),n;if(e\" in t&&!(e object.prototype))return t[e]=\"n,n;var\" t._isvue||r&&r.vmcount?n:r?(dt(r.value,e,n),r.dep.notify(),n):(t[e]=\"n,n)}function\" mt(t,e){if(array.isarray(t)&&p(e))t.splice(e,1);else{var t[e],n&&n.dep.notify())}}function ft(t){for(var 0,n=\"0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Ft(e)}Et.prototype.walk=function(t){for(var\" lt=\"B.optionMergeStrategies;function\" rt(t,e){if(!e)return t;for(var n,r,o,i=\"pt?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)n=i[a],\"__ob__\"!==n&&(r=t[n],o=e[n],_(t,n)?r!==o&&f(r)&&f(o)&&Rt(r,o):Nt(t,n,o));return\" t}function ut(t,e,n){return n?function(){var ==\"=typeof\" e?e.call(n,n):e,o=\"function\" t?t.call(n,n):t;return r?rt(r,o):o}:e?t?function(){return rt(\"function\"=\"==typeof\" e?e.call(this,this):e,\"function\"=\"==typeof\" t?t.call(this,this):t)}:e:t}function zt(t,e){var n?bt(n):n}function bt(t){for(var e}function vt(t,e,n,r){var o=\"Object.create(t||null);return\" e?t(o,e):o}lt.data=\"function(t,e,n){return\" n?ut(t,e,n):e&&\"function\"!=\"=typeof\" e?t:ut(t,e)},z.foreach((function(t){lt[t]=\"zt})),U.forEach((function(t){Lt[t+\"s\"]=Vt})),Lt.watch=function(t,e,n,r){if(t===it&&(t=void\" 0),e=\"==it&&(e=void\" 0),!e)return object.create(t||null);if(!t)return e;var t(o,t),e){var a=\"o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return\" o},lt.props=\"Lt.methods=Lt.inject=Lt.computed=function(t,e,n,r){if(!t)return\" t(o,t),e&&t(o,e),o},lt.provide=\"Ut;var\" ht=\"function(t,e){return\" void wt(t,e){var r,o,i,a=\"{};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],\"string\"===typeof\" o&&(i=\"O(o),a[i]={type:null})}else\" if(f(n))for(var n)o=\"n[s],i=O(s),a[i]=f(o)?o:{type:o};else\" 0;t.props=\"a}}function\" qt(t,e){var n){var 0}}function gt(t){var e){var r&&(e[n]=\"{bind:r,update:r})}}function\" kt(t,e,n){if(\"function\"=\"==typeof\" e&&(e=\"e.options),Wt(e,n),qt(e,n),Gt(e),!e._base&&(e.extends&&(t=Kt(t,e.extends,n)),e.mixins))for(var\" i,a=\"{};for(i\" t)s(i);for(i e)_(t,i)||s(i);function s(r){var a}function xt(t,e,n,r){if(\"string\"=\"==typeof\" o[n];var o[i];var o[a];var s}}function jt(t,e,n,r){var>-1)if(i&&!_(o,\"default\"))a=!1;else if(\"\"===a||a===$(t)){var c=te(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0=\"==a){a=Yt(r,o,t);var\" u=\"kt;jt(!0),Pt(a),jt(u)}return\" a}function yt(t,e,n){if(_(e,\"default\")){var r=\"e.default;return\" t&&t.$options.propsdata&&void 0!=\"=t._props[n]?t._props[n]:\"function\"===typeof\" r&&\"function\"!=\"=Zt(e.type)?r.call(t):r}}function\" zt(t){var e=\"t&&t.toString().match(/^\\s*function\" (\\w+) );return e?e[1]:\"\"}function qt(t,e){return zt(t)=\"==Zt(e)}function\" te(t,e){if(!array.isarray(e))return qt(e,t)?0:-1;for(var n=\"0,r=e.length;n<r;n++)if(Qt(e[n],t))return\" n;return-1}function ee(t,e,n){mt();try{if(e){var o=\"r.$options.errorCaptured;if(o)for(var\" i=\"0;i<o.length;i++)try{var\" a=\"!1===o[i].call(r,t,e,n);if(a)return}catch(Oa){re(Oa,r,\"errorCaptured\" hook\")}}}re(t,e,n)}finally{gt()}}function ne(t,e,n,r,o){var i;try{i=\"n?t.apply(e,n):t.call(e),i&&!i._isVue&&d(i)&&!i._handled&&(i.catch((function(t){return\" ee(t,r,o+\" (promise async)\")})),i._handled=\"!0)}catch(Oa){ee(Oa,r,o)}return\" i}function re(t,e,n){if(b.errorhandler)try{return b.errorhandler.call(null,t,e,n)}catch(oa){oa!=\"=t&&oe(Oa,null,\"config.errorHandler\")}oe(t,e,n)}function\" oe(t,e,n){if(!j&&!y||\"undefined\"=\"==typeof\" console)throw t;console.error(t)}var ie,ae=\"!1,se=[],ce=!1;function\" ue(){ce=\"!1;var\" t=\"se.slice(0);se.length=0;for(var\" promise&&ft(promise)){var fe=\"Promise.resolve();ie=function(){fe.then(ue),rt&&setTimeout(P)},ae=!0}else\" if(tt||\"undefined\"=\"==typeof\" mutationobserver||!ft(mutationobserver)&&\"[object mutationobserverconstructor]\"!=\"=MutationObserver.toString())ie=\"undefined\"!==typeof\" setimmediate&&ft(setimmediate)?function(){setimmediate(ue)}:function(){settimeout(ue,0)};else{var le=\"1,pe=new\" mutationobserver(ue),de=\"document.createTextNode(String(le));pe.observe(de,{characterData:!0}),ie=function(){le=(le+1)%2,de.data=String(le)},ae=!0}function\" ve(t,e){var n;if(se.push((function(){if(t)try{t.call(e)}catch(oa){ee(oa,e,\"nexttick\")}else n&&n(e)})),ce||(ce=\"!0,ie()),!t&&\"undefined\"!==typeof\" promise)return new promise((function(t){n=\"t}))}var\" he=\"new\" lt;function ye(t){me(t,he),he.clear()}function me(t,e){var n,r,o=\"Array.isArray(t);if(!(!o&&!c(t)||Object.isFrozen(t)||t\" instanceof bt)){if(t.__ob__){var ge=\"w((function(t){var\" ==\"=t.charAt(0);t=e?t.slice(1):t;var\" be(t,e){function n(){var ne(r,null,arguments,e,\"v-on handler\");for(var handler\")}return n.fns=\"t,n}function\" _e(t,e,n,o,a,s){var c,u,f,l;for(c in t)u=\"t[c],f=e[c],l=ge(c),r(u)||(r(f)?(r(u.fns)&&(u=t[c]=be(u,s)),i(l.once)&&(u=t[c]=a(l.name,u,l.capture)),n(l.name,u,l.capture,l.passive,l.params)):u!==f&&(f.fns=u,t[c]=f));for(c\" e)r(t[c])&&(l=\"ge(c),o(l.name,e[c],l.capture))}function\" we(t,e,n){var a;t bt&&(t=\"t.data.hook||(t.data.hook={}));var\" s=\"t[e];function\" c(){n.apply(this,arguments),g(a.fns,c)}r(s)?a=\"be([c]):o(s.fns)&&i(s.merged)?(a=s,a.fns.push(c)):a=be([s,c]),a.merged=!0,t[e]=a}function\" xe(t,e,n){var i){var f=\"$(u);Oe(a,c,u,f,!0)||Oe(a,s,u,f,!1)}return\" a}}function oe(t,e,n,r,i){if(o(e)){if(_(e,n))return t[n]=\"e[n],i||delete\" e[n],!0;if(_(e,r))return e[r],!0}return!1}function ae(t){for(var array.prototype.concat.apply([],t);return t}function ce(t){return s(t)?[xt(t)]:array.isarray(t)?se(t):void 0}function $e(t){return o(t)&&o(t.text)&&a(t.iscomment)}function se(t,e){var n,a,c,u,f=\"[];for(n=0;n<t.length;n++)a=t[n],r(a)||\"boolean\"===typeof\" a||(c=\"f.length-1,u=f[c],Array.isArray(a)?a.length\">0&&(a=Se(a,(e||\"\")+\"_\"+n),$e(a[0])&&$e(u)&&(f[c]=xt(u.text+a[0].text),a.shift()),f.push.apply(f,a)):s(a)?$e(u)?f[c]=xt(u.text+a):\"\"!==a&&f.push(xt(a)):$e(a)&&$e(u)?f[c]=xt(u.text+a.text):(i(t._isVList)&&o(a.tag)&&r(a.key)&&o(e)&&(a.key=\"__vlist\"+e+\"_\"+n+\"__\"),f.push(a)));return f}function ke(t){var e=t.$options.provide;e&&(t._provided=\"function\"===typeof e?e.call(t):e)}function je(t){var e=Ee(t.$options.inject,t);e&&(jt(!1),Object.keys(e).forEach((function(n){Dt(t,n,e[n])})),jt(!0))}function Ee(t,e){if(t){for(var n=Object.create(null),r=pt?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=\"r[o];if(\"__ob__\"!==i){var\" a=\"t[i].from,s=e;while(s){if(s._provided&&_(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if(\"default\"in\" t[i]){var c=\"t[i].default;n[i]=\"function\"===typeof\" c?c.call(e):c}else 0}}return n}}function te(t,e){if(!t||!t.length)return{};for(var n=\"{},r=0,o=t.length;r<o;r++){var\" a.attrs.slot,i.context!=\"=e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var\" s=\"a.slot,c=n[s]||(n[s]=[]);\"template\"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var\" u in n)n[u].every(ie)&&delete n[u];return n}function ie(t){return t.iscomment&&!t.asyncfactory||\" \"=\"==t.text}function\" pe(t,e,r){var o,i=\"Object.keys(e).length\">0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},t)t[c]&&\"$\"!==c[0]&&(o[c]=De(e,c,t[c]))}else o={};for(var u in e)u in o||(o[u]=Ne(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),W(o,\"$stable\",a),W(o,\"$key\",s),W(o,\"$hasNormal\",i),o}function De(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&\"object\"===typeof t&&!Array.isArray(t)?[t]:Ce(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function Ne(t,e){return function(){return t[e]}}function Me(t,e){var n,r,i,a,s;if(Array.isArray(t)||\"string\"===typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else 0=\"==t))return\" if(\"number\"=\"==typeof\" t)for(n=\"new\" array(t),r=\"0;r<t;r++)n[r]=e(r+1,r);else\" if(c(t))if(pt&&t[symbol.iterator]){n=\"[];var\" u=\"t[Symbol.iterator](),f=u.next();while(!f.done)n.push(e(f.value,n.length)),f=u.next()}else\" for(a=\"Object.keys(t),n=new\" array(a.length),r=\"0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r);return\" o(n)||(n=\"[]),n._isVList=!0,n}function\" fe(t,e,n,r){var o,i=\"this.$scopedSlots[t];i?(n=n||{},r&&(n=T(T({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var\" a=\"n&&n.slot;return\" a?this.$createelement(\"template\",{slot:a},o):o}function le(t){return xt(this.$options,\"filters\",t,!0)||n}function re(t,e){return array.isarray(t)?-1=\"==t.indexOf(e):t!==e}function\" ue(t,e,n,r,o){var i=\"B.keyCodes[e]||n;return\" o&&r&&!b.keycodes[e]?re(o,r):i?re(i,t):r?$(r)!=\"=e:void\" 0}function ze(t,e,n,r,o){if(n)if(c(n)){var i;array.isarray(n)&&(n=\"I(n));var\" s=\"t.attrs&&t.attrs.type;i=r||B.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var\" c=\"O(a),u=$(a);if(!(c\" in i)&&!(u i)&&(i[a]=\"n[a],o)){var\" f=\"t.on||(t.on={});f[\"update:\"+a]=function(t){n[a]=t}}};for(var\" n)a(s)}else;return t}function be(t,e){var n=\"this._staticTrees||(this._staticTrees=[]),r=n[t];return\" r&&!e||(r=\"n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),He(r,\"__static__\"+t,!1)),r}function\" ve(t,e,n){return he(t,\"__once__\"+e+(n?\"_\"+n:\"\"),!0),t}function he(t,e,n){if(array.isarray(t))for(var r=\"0;r<t.length;r++)t[r]&&\"string\"!==typeof\" t[r]&&we(t[r],e+\"_\"+r,n);else we(t,e,n)}function we(t,e,n){t.isstatic=\"!0,t.key=e,t.isOnce=n}function\" qe(t,e){if(e)if(f(e)){var e){var o=\"n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return\" ge(t,e,n,r){e=\"e||{$stable:!n};for(var\" r&&(e.$key=\"r),e}function\" ke(t,e){for(var r&&r&&(t[e[n]]=\"e[n+1])}return\" xe(t,e){return\"string\"=\"==typeof\" t?e+t:t}function je(t){t._o=\"Ve,t._n=h,t._s=v,t._l=Me,t._t=Fe,t._q=M,t._i=F,t._m=Be,t._f=Le,t._k=Ue,t._b=ze,t._v=xt,t._e=wt,t._u=Ge,t._g=qe,t._d=Ke,t._p=Xe}function\" ye(t,e,r,o,a){var s,c=\"this,u=a.options;_(o,\"_uid\")?(s=Object.create(o),s._original=o):(s=o,o=o._original);var\" c.$slots||pe(t.scopedslots,c.$slots=\"Te(r,o)),c.$slots},Object.defineProperty(this,\"scopedSlots\",{enumerable:!0,get:function(){return\" pe(t.scopedslots,this.slots())}}),f&&(this.$options=\"u,this.$slots=this.slots(),this.$scopedSlots=Pe(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var\" i&&!array.isarray(i)&&(i.fnscopeid=\"u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return\" ln(s,t,e,n,r,l)}}function ze(t,e,r,i,a){var u)c[f]=\"Jt(f,u,e||n);else\" o(r.attrs)&&tn(c,r.attrs),o(r.props)&&tn(c,r.props);var l=\"new\" ye(r,c,a,i,t),p=\"s.render.call(null,l._c,l);if(p\" instanceof bt)return qe(p,r,l.parent,s,l);if(array.isarray(p)){for(var d=\"Ce(p)||[],v=new\" array(d.length),h=\"0;h<d.length;h++)v[h]=Qe(d[h],r,l.parent,s,l);return\" v}}function qe(t,e,n,r,o){var i.fncontext=\"n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function\" tn(t,e){for(var e)t[o(n)]=\"e[n]}Je(Ye.prototype);var\" en=\"{init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var\" 0,e)}},prepatch:function(t,e){var e=\"t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,Rn(n,\"mounted\")),t.data.keepAlive&&(e._isMounted?Zn(n):Fn(n,!0))},destroy:function(t){var\" rn(t,e,n,a,s){if(!r(t)){var t){var f;if(r(t.cid)&&(f=\"t,t=wn(f,u),void\" _n(f,e,n,a,s);e=\"e||{},wr(t),o(e.model)&&cn(t.options,e);var\" ze(t,l,e,n,a);var p=\"e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var\" v=\"t.options.name||s,h=new\" bt(\"vue-component-\"+t.cid+(v?\"-\"+v:\"\"),e,void 0,void 0,n,{ctor:t,propsdata:l,listeners:p,tag:s,children:a},f);return h}}}function on(t,e){var o(r)&&(n.render=\"r.render,n.staticRenderFns=r.staticRenderFns),new\" t.componentoptions.ctor(n)}function an(t){for(var sn(t,e){var n._merged=\"!0,n}function\" cn(t,e){var un=\"1,fn=2;function\" ln(t,e,n,r,o,a){return(array.isarray(n)||s(n))&&(o=\"r,r=n,n=void\" 0),i(a)&&(o=\"fn),pn(t,e,n,r,o)}function\" pn(t,e,n,r,i){if(o(n)&&o(n.__ob__))return wt();if(o(n)&&o(n.is)&&(e=\"n.is),!e)return\" wt();var a,s,c;(array.isarray(r)&&\"function\"=\"==typeof\" r[0]&&(n=\"n||{},n.scopedSlots={default:r[0]},r.length=0),i===fn?r=Ce(r):i===un&&(r=Ae(r)),\"string\"===typeof\" e)?(s=\"t.$vnode&&t.$vnode.ns||B.getTagNamespace(e),a=B.isReservedTag(e)?new\" bt(b.parseplatformtagname(e),n,r,void 0,t):n&&n.pre||!o(c=\"Xt(t.$options,\"components\",e))?new\" bt(e,n,r,void 0,t):rn(c,n,t,r,e)):a=\"rn(e,n,t,r);return\" array.isarray(a)?a:o(a)?(o(s)&&dn(a,s),o(n)&&vn(n),a):wt()}function dn(t,e,n){if(t.ns=\"e,\"foreignObject\"===t.tag&&(e=void\" 0,n=\"!0),o(t.children))for(var\" vn(t){c(t.style)&&ye(t.style),c(t.class)&&ye(t.class)}function hn(t){t._vnode=\"null,t._staticTrees=null;var\" ln(t,e,n,r,o,!1)},t.$createelement=\"function(e,n,r,o){return\" ln(t,e,n,r,o,!0)};var yn,mn=\"null;function\" gn(t){je(t.prototype),t.prototype.$nexttick=\"function(t){return\" ve(t,this)},t.prototype._render=\"function(){var\" t,e=\"this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=Pe(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{mn=e,t=r.call(e._renderProxy,e.$createElement)}catch(Oa){ee(Oa,e,\"render\"),t=e._vnode}finally{mn=null}return\" array.isarray(t)&&1=\"==t.length&&(t=t[0]),t\" bt||(t=\"wt()),t.parent=o,t}}function\" bn(t,e){return(t.__esmodule||pt&&\"module\"=\"==t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function\" _n(t,e,n,r,o){var i.asyncfactory=\"t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}function\" wn(t,e){if(i(t.error)&&o(t.errorcomp))return t.errorcomp;if(o(t.resolved))return t.resolved;var t.loadingcomp;if(n&&!o(t.owners)){var g(a,n)}));var c(h)&&(d(h)?r(t.resolved)&&h.then(p,v):d(h.component)&&(h.component.then(p,v),o(h.error)&&(t.errorcomp=\"bn(h.error,e)),o(h.loading)&&(t.loadingComp=bn(h.loading,e),0===h.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,l(!1))}),h.delay||200)),o(h.timeout)&&(f=setTimeout((function(){f=null,r(t.resolved)&&v(null)}),h.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}function\" xn(t){return t.iscomment&&t.asyncfactory}function on(t){if(array.isarray(t))for(var n}}function an(t){t._events=\"Object.create(null),t._hasHookEvent=!1;var\" cn(t,e){yn.$on(t,e)}function $n(t,e){yn.$off(t,e)}function function r(){var kn(t,e,n){yn=\"t,_e(e,n||{},Cn,$n,Sn,t),yn=void\" jn(t){var r},t.prototype.$once=\"function(t,e){var\" r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=\"e,n.$on(t,r),n},t.prototype.$off=function(t,e){var\" n._events=\"Object.create(null),n;if(Array.isArray(t)){for(var\" n}var i,a=\"n._events[t];if(!a)return\" n;if(!e)return n._events[t]=\"null,n;var\" n},t.prototype.$emit=\"function(t){var\">1?E(n):n;for(var r=E(arguments,1),o='event handler for \"'+t+'\"',i=0,a=n.length;i<a;i++)ne(n[i],e,r,e,o)}return e}}var en=\"null;function\" tn(t){var e=\"En;return\" in(t){var pn(t){t.prototype._update=\"function(t,e){var\" n=\"this,r=n.$el,o=n._vnode,i=Tn(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var\" t=\"this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var\" dn(t,e,n){var r;return t.$el=\"e,t.$options.render||(t.$options.render=wt),Rn(t,\"beforeMount\"),r=function(){t._update(t._render(),n)},new\" nr(t,r,p,{before:function(){t._ismounted&&!t._isdestroyed&&rn(t,\"beforeupdate\")}},!0),n=\"!1,null==t.$vnode&&(t._isMounted=!0,Rn(t,\"mounted\")),t}function\" nn(t,e,r,o,i){var a=\"o.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||c);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){jt(!1);for(var\" f=\"t._props,l=t.$options._propKeys||[],p=0;p<l.length;p++){var\" d=\"l[p],v=t.$options.props;f[d]=Jt(d,v,e,t)}jt(!0),t.$options.propsData=e}r=r||n;var\" h=\"t.$options._parentListeners;t.$options._parentListeners=r,kn(t,r,h),u&&(t.$slots=Te(i,o.context),t.$forceUpdate())}function\" mn(t){while(t&&(t=\"t.$parent))if(t._inactive)return!0;return!1}function\" fn(t,e){if(e){if(t._directinactive=\"!1,Mn(t))return}else\" if(t._directinactive)return;if(t._inactive||null=\"==t._inactive){t._inactive=!1;for(var\" ln(t,e){if((!e||(t._directinactive=\"!0,!Mn(t)))&&!t._inactive){t._inactive=!0;for(var\" rn(t,e){mt();var hook\";if(n)for(var o=\"0,i=n.length;o<i;o++)ne(n[o],t,null,t,r);t._hasHookEvent&&t.$emit(\"hook:\"+e),gt()}var\" un=\"[],zn=[],Bn={},Vn=!1,Hn=!1,Wn=0;function\" qn(){wn=\"Un.length=zn.length=0,Bn={},Vn=Hn=!1}var\" gn=\"0,Kn=Date.now;if(J&&!tt){var\" xn=\"window.performance;Xn&&\"function\"===typeof\" xn.now&&kn()>document.createEvent(\"Event\").timeStamp&&(Kn=function(){return Xn.now()})}function Jn(){var t,e;for(Gn=Kn(),Hn=!0,Un.sort((function(t,e){return t.id-e.id})),Wn=0;Wn<Un.length;Wn++)t=Un[Wn],t.before&&t.before(),e=t.id,Bn[e]=null,t.run();var n=\"zn.slice(),r=Un.slice();qn(),Qn(n),Yn(r),ut&&B.devtools&&ut.emit(\"flush\")}function\" yn(t){var e=\"t.length;while(e--){var\" zn(t){t._inactive=\"!1,zn.push(t)}function\" qn(t){for(var tr(t){var>Wn&&Un[n].id>t.id)n--;Un.splice(n+1,0,t)}else Un.push(t);Vn||(Vn=!0,ve(Jn))}}var er=0,nr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++er,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new lt,this.newDepIds=new lt,this.expression=\"\",\"function\"===typeof e?this.getter=e:(this.getter=G(e),this.getter||(this.getter=P)),this.value=this.lazy?void 0:this.get()};nr.prototype.get=function(){var t;mt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(Oa){if(!this.user)throw Oa;ee(Oa,e,'getter for watcher \"'+this.expression+'\"')}finally{this.deep&&ye(t),gt(),this.cleanupDeps()}return t},nr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},nr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},nr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():tr(this)},nr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(Oa){ee(Oa,this.vm,'callback for watcher \"'+this.expression+'\"')}else this.cb.call(this.vm,t,e)}}},nr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},nr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},nr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var rr={enumerable:!0,configurable:!0,get:P,set:P};function or(t,e,n){rr.get=function(){return this[e][n]},rr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,rr)}function ir(t){t._watchers=[];var e=t.$options;e.props&&ar(t,e.props),e.methods&&vr(t,e.methods),e.data?sr(t):Pt(t._data={},!0),e.computed&&fr(t,e.computed),e.watch&&e.watch!==it&&hr(t,e.watch)}function ar(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[],i=!t.$parent;i||jt(!1);var a=function(i){o.push(i);var a=Jt(i,e,n,t);Dt(r,i,a),i in t||or(t,\"_props\",i)};for(var s in e)a(s);jt(!0)}function sr(t){var e=t.$options.data;e=t._data=\"function\"===typeof e?cr(e,t):e||{},f(e)||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);while(o--){var i=n[o];0,r&&_(r,i)||H(i)||or(t,\"_data\",i)}Pt(e,!0)}function cr(t,e){mt();try{return t.call(e,e)}catch(Oa){return ee(Oa,e,\"data()\"),{}}finally{gt()}}var ur={lazy:!0};function fr(t,e){var n=t._computedWatchers=Object.create(null),r=ct();for(var o in e){var i=e[o],a=\"function\"===typeof i?i:i.get;0,r||(n[o]=new nr(t,a||P,P,ur)),o in t||lr(t,o,i)}}function lr(t,e,n){var r=!ct();\"function\"===typeof n?(rr.get=r?pr(e):dr(n),rr.set=P):(rr.get=n.get?r&&!1!==n.cache?pr(e):dr(n.get):P,rr.set=n.set||P),Object.defineProperty(t,e,rr)}function pr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),ht.target&&e.depend(),e.value}}function dr(t){return function(){return t.call(this,this)}}function vr(t,e){t.$options.props;for(var n in e)t[n]=\"function\"!==typeof e[n]?P:j(e[n],t)}function hr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)yr(t,n,r[o]);else yr(t,n,r)}}function yr(t,e,n,r){return f(n)&&(r=\"n,n=n.handler),\"string\"===typeof\" n&&(n=\"t[n]),t.$watch(e,n,r)}function\" mr(t){var e=\"{get:function(){return\" this._data}},n=\"{get:function(){return\" this._props}};object.defineproperty(t.prototype,\"$data\",e),object.defineproperty(t.prototype,\"$props\",n),t.prototype.$set=\"Nt,t.prototype.$delete=Mt,t.prototype.$watch=function(t,e,n){var\" r=\"this;if(f(e))return\" yr(r,t,e,n);n=\"n||{},n.user=!0;var\" o=\"new\" nr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(i){ee(i,r,'callback for immediate watcher \"'+o.expression+'\"')}return function(){o.teardown()}}}var gr=\"0;function\" br(t){t.prototype._init=\"function(t){var\" _r(t,e){var n=\"t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var\" wr(t){var e}function xr(t){var e,n=\"t.options,r=t.sealedOptions;for(var\" in n)n[o]!=\"=r[o]&&(e||(e={}),e[o]=n[o]);return\" or(t){this._init(t)}function ar(t){t.use=\"function(t){var\">-1)return this;var n=E(arguments,1);return n.unshift(this),\"function\"===typeof t.install?t.install.apply(t,n):\"function\"===typeof t&&t.apply(null,n),e.push(t),this}}function Cr(t){t.mixin=function(t){return this.options=Kt(this.options,t),this}}function $r(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=Kt(n.options,t),a[\"super\"]=n,a.options.props&&Sr(a),a.options.computed&&kr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,U.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=T({},a.options),o[r]=a,a}}function Sr(t){var e=t.options.props;for(var n in e)or(t.prototype,\"_props\",n)}function kr(t){var e=t.options.computed;for(var n in e)lr(t.prototype,n,e[n])}function jr(t){U.forEach((function(e){t[e]=function(t,n){return n?(\"component\"===e&&f(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),\"directive\"===e&&\"function\"===typeof n&&(n={bind:n,update:n}),this.options[e+\"s\"][t]=n,n):this.options[e+\"s\"][t]}}))}function Er(t){return t&&(t.Ctor.options.name||t.tag)}function Tr(t,e){return Array.isArray(t)?t.indexOf(e)>-1:\"string\"===typeof t?t.split(\",\").indexOf(e)>-1:!!l(t)&&t.test(e)}function Ir(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=Er(a.componentOptions);s&&!e(s)&&Pr(n,i,r,o)}}}function Pr(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}br(Or),mr(Or),jn(Or),Pn(Or),gn(Or);var Dr=[String,RegExp,Array],Nr={name:\"keep-alive\",abstract:!0,props:{include:Dr,exclude:Dr,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Pr(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch(\"include\",(function(e){Ir(t,(function(t){return Tr(e,t)}))})),this.$watch(\"exclude\",(function(e){Ir(t,(function(t){return!Tr(e,t)}))}))},render:function(){var t=this.$slots.default,e=On(t),n=e&&e.componentOptions;if(n){var r=Er(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!Tr(i,r))||a&&r&&Tr(a,r))return e;var s=this,c=s.cache,u=s.keys,f=null==e.key?n.Ctor.cid+(n.tag?\"::\"+n.tag:\"\"):e.key;c[f]?(e.componentInstance=c[f].componentInstance,g(u,f),u.push(f)):(c[f]=e,u.push(f),this.max&&u.length>parseInt(this.max)&&Pr(c,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},Mr={KeepAlive:Nr};function Fr(t){var e={get:function(){return B}};Object.defineProperty(t,\"config\",e),t.util={warn:dt,extend:T,mergeOptions:Kt,defineReactive:Dt},t.set=Nt,t.delete=Mt,t.nextTick=ve,t.observable=function(t){return Pt(t),t},t.options=Object.create(null),U.forEach((function(e){t.options[e+\"s\"]=Object.create(null)})),t.options._base=t,T(t.options.components,Mr),Ar(t),Cr(t),$r(t),jr(t)}Fr(Or),Object.defineProperty(Or.prototype,\"$isServer\",{get:ct}),Object.defineProperty(Or.prototype,\"$ssrContext\",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Or,\"FunctionalRenderContext\",{value:Ye}),Or.version=\"2.6.12\";var Lr=y(\"style,class\"),Rr=y(\"input,textarea,option,select,progress\"),Ur=function(t,e,n){return\"value\"===n&&Rr(t)&&\"button\"!==e||\"selected\"===n&&\"option\"===t||\"checked\"===n&&\"input\"===t||\"muted\"===n&&\"video\"===t},zr=y(\"contenteditable,draggable,spellcheck\"),Br=y(\"events,caret,typing,plaintext-only\"),Vr=function(t,e){return Kr(e)||\"false\"===e?\"false\":\"contenteditable\"===t&&Br(e)?e:\"true\"},Hr=y(\"allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible\"),Wr=\"http://www.w3.org/1999/xlink\",qr=function(t){return\":\"===t.charAt(5)&&\"xlink\"===t.slice(0,5)},Gr=function(t){return qr(t)?t.slice(6,t.length):\"\"},Kr=function(t){return null==t||!1===t};function Xr(t){var e=t.data,n=t,r=t;while(o(r.componentInstance))r=r.componentInstance._vnode,r&&r.data&&(e=Jr(r.data,e));while(o(n=n.parent))n&&n.data&&(e=Jr(e,n.data));return Yr(e.staticClass,e.class)}function Jr(t,e){return{staticClass:Zr(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function Yr(t,e){return o(t)||o(e)?Zr(t,Qr(e)):\"\"}function Zr(t,e){return t?e?t+\" \"+e:t:e||\"\"}function Qr(t){return Array.isArray(t)?to(t):c(t)?eo(t):\"string\"===typeof t?t:\"\"}function to(t){for(var e,n=\"\",r=0,i=t.length;r<i;r++)o(e=Qr(t[r]))&&\"\"!==e&&(n&&(n+=\" \"),n+=\"e);return\" n}function eo(t){var e ;for(var n in t)t[n]&&(e&&(e+=\" \" ),e+=\"n);return\" e}var no=\"{svg:\"http://www.w3.org/2000/svg\",math:\"http://www.w3.org/1998/Math/MathML\"},ro=y(\"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot\"),oo=y(\"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view\",!0),io=function(t){return\" ro(t)||oo(t)};function ao(t){return oo(t)?\"svg\":\"math\"=\"==t?\"math\":void\" 0}var so=\"Object.create(null);function\" co(t){if(!j)return!0;if(io(t))return!1;if(t=\"t.toLowerCase(),null!=so[t])return\" so[t];var t.indexof(\"-\")>-1?so[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:so[t]=/HTMLUnknownElement/.test(e.toString())}var uo=y(\"text,number,password,search,email,tel,url\");function fo(t){if(\"string\"===typeof t){var e=document.querySelector(t);return e||document.createElement(\"div\")}return t}function lo(t,e){var n=document.createElement(t);return\"select\"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute(\"multiple\",\"multiple\"),n}function po(t,e){return document.createElementNS(no[t],e)}function vo(t){return document.createTextNode(t)}function ho(t){return document.createComment(t)}function yo(t,e,n){t.insertBefore(e,n)}function mo(t,e){t.removeChild(e)}function go(t,e){t.appendChild(e)}function bo(t){return t.parentNode}function _o(t){return t.nextSibling}function wo(t){return t.tagName}function xo(t,e){t.textContent=e}function Oo(t,e){t.setAttribute(e,\"\")}var Ao=Object.freeze({createElement:lo,createElementNS:po,createTextNode:vo,createComment:ho,insertBefore:yo,removeChild:mo,appendChild:go,parentNode:bo,nextSibling:_o,tagName:wo,setTextContent:xo,setStyleScope:Oo}),Co={create:function(t,e){$o(e)},update:function(t,e){t.data.ref!==e.data.ref&&($o(t,!0),$o(e))},destroy:function(t){$o(t,!0)}};function $o(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var so=\"new\" bt(\"\",{},[]),ko=\"[\"create\",\"activate\",\"update\",\"remove\",\"destroy\"];function\" jo(t,e){return t.key=\"==e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&Eo(t,e)||i(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function\" eo(t,e){if(\"input\"!=\"=t.tag)return!0;var\" n,r=\"o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return\" r=\"==i||uo(r)&&uo(i)}function\" to(t,e,n){var r,i,a=\"{};for(r=e;r<=n;++r)i=t[r].key,o(i)&&(a[i]=r);return\" a}function io(t){var e,n,a=\"{},c=t.modules,u=t.nodeOps;for(e=0;e<ko.length;++e)for(a[ko[e]]=[],n=0;n<c.length;++n)o(c[n][ko[e]])&&a[ko[e]].push(c[n][ko[e]]);function\" f(t){return new bt(u.tagname(t).tolowercase(),{},[],void 0,t)}function l(t,e){function n(){0=\"==--n.listeners&&p(t)}return\" n.listeners=\"e,n}function\" p(t){var e=\"u.parentNode(t);o(e)&&u.removeChild(e,t)}function\" d(t,e,n,r,a,s,c){if(o(t.elm)&&o(s)&&(t=\"s[c]=Ot(t)),t.isRootInsert=!a,!v(t,e,n,r)){var\" f=\"t.data,l=t.children,p=t.tag;o(p)?(t.elm=t.ns?u.createElementNS(t.ns,p):u.createElement(p,t),x(t),b(t,l,e),o(f)&&w(t,e),g(n,t.elm,r)):i(t.isComment)?(t.elm=u.createComment(t.text),g(n,t.elm,r)):(t.elm=u.createTextNode(t.text),g(n,t.elm,r))}}function\" v(t,e,n,r){var a=\"t.data;if(o(a)){var\" s=\"o(t.componentInstance)&&a.keepAlive;if(o(a=a.hook)&&o(a=a.init)&&a(t,!1),o(t.componentInstance))return\" h(t,e),g(n,t.elm,r),i(s)&&m(t,e,n,r),!0}}function h(t,e){o(t.data.pendinginsert)&&(e.push.apply(e,t.data.pendinginsert),t.data.pendinginsert=\"null),t.elm=t.componentInstance.$el,_(t)?(w(t,e),x(t)):($o(t),e.push(t))}function\" m(t,e,n,r){var i,s=\"t;while(s.componentInstance)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i](So,s);e.push(s);break}g(n,t.elm,r)}function\" g(t,e,n){o(t)&&(o(n)?u.parentnode(n)=\"==t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function\" b(t,e,n){if(array.isarray(e)){0;for(var s(t.text)&&u.appendchild(t.elm,u.createtextnode(string(t.text)))}function _(t){while(t.componentinstance)t=\"t.componentInstance._vnode;return\" o(t.tag)}function w(t,n){for(var x(t){var e;if(o(e=\"t.fnScopeId))u.setStyleScope(t.elm,e);else{var\" n=\"t;while(n)o(e=n.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent}o(e=En)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function\" o(t,e,n,r,o,i){for(;r<=\"o;++r)d(n[r],i,t,e,!1,n,r)}function\" a(t){var e,n,r=\"t.data;if(o(r))for(o(e=r.hook)&&o(e=e.destroy)&&e(t),e=0;e<a.destroy.length;++e)a.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)A(t.children[n])}function\" c(t,e,n){for(;e<=\"n;++e){var\" $(t,e){if(o(e)||o(t.data)){var p(t.elm)}function s(t,e,n,i,a){var s,c,f,l,p=\"0,v=0,h=e.length-1,y=e[0],m=e[h],g=n.length-1,b=n[0],_=n[g],w=!a;while(p<=h&&v<=g)r(y)?y=e[++p]:r(m)?m=e[--h]:jo(y,b)?(j(y,b,i,n,v),y=e[++p],b=n[++v]):jo(m,_)?(j(m,_,i,n,g),m=e[--h],_=n[--g]):jo(y,_)?(j(y,_,i,n,g),w&&u.insertBefore(t,y.elm,u.nextSibling(m.elm)),y=e[++p],_=n[--g]):jo(m,b)?(j(m,b,i,n,v),w&&u.insertBefore(t,m.elm,y.elm),m=e[--h],b=n[++v]):(r(s)&&(s=To(e,p,h)),c=o(b.key)?s[b.key]:k(b,e,p,h),r(c)?d(b,i,t,y.elm,!1,n,v):(f=e[c],jo(f,b)?(j(f,b,i,n,v),e[c]=void\" 0,w&&u.insertbefore(t,f.elm,y.elm)):d(b,i,t,y.elm,!1,n,v)),b=\"n[++v]);p\">h?(l=r(n[g+1])?null:n[g+1].elm,O(t,l,n,v,g,i)):v>g&&C(e,p,h)}function k(t,e,n,r){for(var i=n;i<r;i++){var a=\"e[i];if(o(a)&&jo(t,a))return\" i}}function j(t,e,n,s,c,f){if(t!=\"=e){o(e.elm)&&o(s)&&(e=s[c]=Ot(e));var\" l=\"e.elm=t.elm;if(i(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?I(t.elm,e,n):e.isAsyncPlaceholder=!0;else\" if(i(e.isstatic)&&i(t.isstatic)&&e.key=\"==t.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=t.componentInstance;else{var\" p,d=\"e.data;o(d)&&o(p=d.hook)&&o(p=p.prepatch)&&p(t,e);var\" v=\"t.children,h=e.children;if(o(d)&&_(e)){for(p=0;p<a.update.length;++p)a.update[p](t,e);o(p=d.hook)&&o(p=p.update)&&p(t,e)}r(e.text)?o(v)&&o(h)?v!==h&&S(l,v,h,n,f):o(h)?(o(t.text)&&u.setTextContent(l,\"\"),O(l,null,h,0,h.length-1,n)):o(v)?C(v,0,v.length-1):o(t.text)&&u.setTextContent(l,\"\"):t.text!==e.text&&u.setTextContent(l,e.text),o(d)&&o(p=d.hook)&&o(p=p.postpatch)&&p(t,e)}}}function\" e(t,e,n){if(i(n)&&o(t.parent))t.parent.data.pendinginsert=\"e;else\" for(var r=\"0;r<e.length;++r)e[r].data.hook.insert(e[r])}var\" t=\"y(\"attrs,class,staticClass,staticStyle,key\");function\" i(t,e,n,r){var a,s=\"e.tag,c=e.data,u=e.children;if(r=r||c&&c.pre,e.elm=t,i(e.isComment)&&o(e.asyncFactory))return\" e.isasyncplaceholder=\"!0,!0;if(o(c)&&(o(a=c.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return\" h(e,n),!0;if(o(s)){if(o(u))if(t.haschildnodes())if(o(a=\"c)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var\" f=\"!0,l=t.firstChild,p=0;p<u.length;p++){if(!l||!I(l,u[p],n,r)){f=!1;break}l=l.nextSibling}if(!f||l)return!1}else\" b(e,u,n);if(o(c)){var d=\"!1;for(var\" in c)if(!t(v)){d=\"!0,w(e,n);break}!d&&c[\"class\"]&&ye(c[\"class\"])}}else\" t.data!=\"=e.text&&(t.data=e.text);return!0}return\" function(t,e,n,s){if(!r(e)){var c=\"!1,l=[];if(r(t))c=!0,d(e,l);else{var\" p=\"o(t.nodeType);if(!p&&jo(t,e))j(t,e,l,null,null,s);else{if(p){if(1===t.nodeType&&t.hasAttribute(R)&&(t.removeAttribute(R),n=!0),i(n)&&I(t,e,l))return\" e(e,l,!0),t;t=\"f(t)}var\" y=\"e.parent,m=_(e);while(y){for(var\" g=\"0;g<a.destroy.length;++g)a.destroy[g](y);if(y.elm=e.elm,m){for(var\" b=\"0;b<a.create.length;++b)a.create[b](So,y);var\" w=\"y.data.hook.insert;if(w.merged)for(var\" x=\"1;x<w.fns.length;x++)w.fns[x]()}else\" $o(y);y=\"y.parent}}o(h)?C([t],0,0):o(t.tag)&&A(t)}}return\" e(e,l,c),e.elm}o(t)&&a(t)}}var po=\"{create:Do,update:Do,destroy:function(t){Do(t,So)}};function\" do(t,e){(t.data.directives||e.data.directives)&&no(t,e)}function no(t,e){var n,r,o,i=\"t===So,a=e===So,s=Fo(t.data.directives,t.context),c=Fo(e.data.directives,e.context),u=[],f=[];for(n\" c)r=\"s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Ro(o,\"update\",e,t),o.def&&o.def.componentUpdated&&f.push(o)):(Ro(o,\"bind\",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var\" n=\"0;n<u.length;n++)Ro(u[n],\"inserted\",e,t)};i?we(e,\"insert\",l):l()}if(f.length&&we(e,\"postpatch\",(function(){for(var\" s)c[n]||ro(s[n],\"unbind\",t,t,a)}var mo=\"Object.create(null);function\" fo(t,e){var n,r,o=\"Object.create(null);if(!t)return\" o;for(n=\"0;n<t.length;n++)r=t[n],r.modifiers||(r.modifiers=Mo),o[Lo(r)]=r,r.def=Xt(e.$options,\"directives\",r.name,!0);return\" o}function lo(t){return t.rawname||t.name+\".\"+object.keys(t.modifiers||{}).join(\".\")}function ro(t,e,n,r,o){var i=\"t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(Oa){ee(Oa,n.context,\"directive\" \"+t.name+\" \"+e+\" hook\")}}var uo=\"[Co,Po];function\" zo(t,e){var i,a,s,c=\"e.elm,u=t.data.attrs||{},f=e.data.attrs||{};for(i\" o(f.__ob__)&&(f=\"e.data.attrs=T({},f)),f)a=f[i],s=u[i],s!==a&&Bo(c,i,a);for(i\" in(tt||nt)&&f.value!=\"=u.value&&Bo(c,\"value\",f.value),u)r(f[i])&&(qr(i)?c.removeAttributeNS(Wr,Gr(i)):zr(i)||c.removeAttribute(i))}}function\" bo(t,e,n){t.tagname.indexof(\"-\")>-1?Vo(t,e,n):Hr(e)?Kr(n)?t.removeAttribute(e):(n=\"allowfullscreen\"===e&&\"EMBED\"===t.tagName?\"true\":e,t.setAttribute(e,n)):zr(e)?t.setAttribute(e,Vr(e,n)):qr(e)?Kr(n)?t.removeAttributeNS(Wr,Gr(e)):t.setAttributeNS(Wr,e,n):Vo(t,e,n)}function Vo(t,e,n){if(Kr(n))t.removeAttribute(e);else{if(tt&&!et&&\"TEXTAREA\"===t.tagName&&\"placeholder\"===e&&\"\"!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener(\"input\",r)};t.addEventListener(\"input\",r),t.__ieph=!0}t.setAttribute(e,n)}}var Ho={create:zo,update:zo};function Wo(t,e){var n=e.elm,i=e.data,a=t.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=Xr(e),c=n._transitionClasses;o(c)&&(s=Zr(s,Qr(c))),s!==n._prevClass&&(n.setAttribute(\"class\",s),n._prevClass=s)}}var qo,Go={create:Wo,update:Wo},Ko=\"__r\",Xo=\"__c\";function Jo(t){if(o(t[Ko])){var e=tt?\"change\":\"input\";t[e]=[].concat(t[Ko],t[e]||[]),delete t[Ko]}o(t[Xo])&&(t.change=[].concat(t[Xo],t.change||[]),delete t[Xo])}function Yo(t,e,n){var r=qo;return function o(){var i=e.apply(null,arguments);null!==i&&ti(t,o,n,r)}}var Zo=ae&&!(ot&&Number(ot[1])<=53);function qo(t,e,n,r){if(zo){var o=\"Gn,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp\">=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}qo.addeventlistener(t,e,at?{capture:n,passive:r}:n)}function ti(t,e,n,r){(r||qo).removeeventlistener(t,e._wrapper||e,n)}function ei(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=\"e.data.on||{},o=t.data.on||{};qo=e.elm,Jo(n),_e(n,o,Qo,ti,Yo,e.context),qo=void\" 0}}var ni,ri=\"{create:ei,update:ei};function\" oi(t,e){if(!r(t.data.domprops)||!r(e.data.domprops)){var n,i,a=\"e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n\" in o(c.__ob__)&&(c=\"e.data.domProps=T({},c)),s)n\" c||(a[n] );for(n c){if(i=\"c[n],\"textContent\"===n||\"innerHTML\"===n){if(e.children&&(e.children.length=0),i===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if(\"value\"===n&&\"PROGRESS\"!==a.tagName){a._value=i;var\" u=\"r(i)?\"\":String(i);ii(a,u)&&(a.value=u)}else\" if(\"innerhtml\"=\"==n&&oo(a.tagName)&&r(a.innerHTML)){ni=ni||document.createElement(\"div\"),ni.innerHTML=\"<svg\">\"+i+\"\";var f=ni.firstChild;while(a.firstChild)a.removeChild(a.firstChild);while(f.firstChild)a.appendChild(f.firstChild)}else if(i!==s[n])try{a[n]=i}catch(Oa){}}}}function ii(t,e){return!t.composing&&(\"OPTION\"===t.tagName||ai(t,e)||si(t,e))}function ai(t,e){var n=!0;try{n=document.activeElement!==t}catch(Oa){}return n&&t.value!==e}function si(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}var ci={create:oi,update:oi},ui=w((function(t){var e={},n=/;(?![^(]*\\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function fi(t){var e=li(t.style);return t.staticStyle?T(t.staticStyle,e):e}function li(t){return Array.isArray(t)?I(t):\"string\"===typeof t?ui(t):t}function pi(t,e){var n,r={};if(e){var o=t;while(o.componentInstance)o=o.componentInstance._vnode,o&&o.data&&(n=fi(o.data))&&T(r,n)}(n=fi(t.data))&&T(r,n);var i=t;while(i=i.parent)i.data&&(n=fi(i.data))&&T(r,n);return r}var di,vi=/^--/,hi=/\\s*!important$/,yi=function(t,e,n){if(vi.test(e))t.style.setProperty(e,n);else if(hi.test(n))t.style.setProperty($(e),n.replace(hi,\"\"),\"important\");else{var r=gi(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=\"n}},mi=[\"Webkit\",\"Moz\",\"ms\"],gi=w((function(t){if(di=di||document.createElement(\"div\").style,t=O(t),\"filter\"!==t&&t\" in di)return t;for(var e=\"t.charAt(0).toUpperCase()+t.slice(1),n=0;n<mi.length;n++){var\" r=\"mi[n]+e;if(r\" r}}));function bi(t,e){var n=\"e.data,i=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var\" a,s,c=\"e.elm,u=i.staticStyle,f=i.normalizedStyle||i.style||{},l=u||f,p=li(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?T({},p):p;var\" d=\"pi(e,!0);for(s\" l)r(d[s])&&yi(c,s,\"\");for(s d)a=\"d[s],a!==l[s]&&yi(c,s,null==a?\"\":a)}}var\" _i=\"{create:bi,update:bi},wi=/\\s+/;function\" xi(t,e){if(e&&(e=\"e.trim()))if(t.classList)e.indexOf(\"\" \")>-1?e.split(wi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \";n.indexOf(\" \"+e+\" \")<0&&t.setAttribute(\"class\",(n+e).trim())}}function oi(t,e){if(e&&(e=\"e.trim()))if(t.classList)e.indexOf(\"\" \")>-1?e.split(wi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute(\"class\");else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \",r=\" \"+e+\" \";while(n.indexOf(r)>=0)n=n.replace(r,\" \");n=n.trim(),n?t.setAttribute(\"class\",n):t.removeAttribute(\"class\")}}function Ai(t){if(t){if(\"object\"===typeof t){var e={};return!1!==t.css&&T(e,Ci(t.name||\"v\")),T(e,t),e}return\"string\"===typeof t?Ci(t):void 0}}var Ci=w((function(t){return{enterClass:t+\"-enter\",enterToClass:t+\"-enter-to\",enterActiveClass:t+\"-enter-active\",leaveClass:t+\"-leave\",leaveToClass:t+\"-leave-to\",leaveActiveClass:t+\"-leave-active\"}})),$i=J&&!et,Si=\"transition\",ki=\"animation\",ji=\"transition\",Ei=\"transitionend\",Ti=\"animation\",Ii=\"animationend\";$i&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ji=\"WebkitTransition\",Ei=\"webkitTransitionEnd\"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ti=\"WebkitAnimation\",Ii=\"webkitAnimationEnd\"));var Pi=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Di(t){Pi((function(){Pi(t)}))}function Ni(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),xi(t,e))}function mi(t,e){t._transitionclasses&&g(t._transitionclasses,e),oi(t,e)}function fi(t,e,n){var r=\"Ri(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return\" n();var s=\"o===Si?Ei:Ii,c=0,u=function(){t.removeEventListener(s,f),n()},f=function(e){e.target===t&&++c\">=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,f)}var li=\"/\\b(transform|all)(,|$)/;function\" ri(t,e){var n,r=\"window.getComputedStyle(t),o=(r[ji+\"Delay\"]||\"\").split(\",\" \"),i=\"(r[ji+\"Duration\"]||\"\").split(\",\" \"),a=\"Ui(o,i),s=(r[Ti+\"Delay\"]||\"\").split(\",\" \"),c=\"(r[Ti+\"Duration\"]||\"\").split(\",\" \"),u=\"Ui(s,c),f=0,l=0;e===Si?a\">0&&(n=Si,f=a,l=i.length):e===ki?u>0&&(n=ki,f=u,l=c.length):(f=Math.max(a,u),n=f>0?a>u?Si:ki:null,l=n?n===Si?i.length:c.length:0);var p=n===Si&&Li.test(r[ji+\"Property\"]);return{type:n,timeout:f,propCount:l,hasTransform:p}}function Ui(t,e){while(t.length<e.length)t=t.concat(t);return math.max.apply(null,e.map((function(e,n){return zi(e)+zi(t[n])})))}function zi(t){return 1e3*number(t.slice(0,-1).replace(\",\",\".\"))}function bi(t,e){var n=\"t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var\" i=\"Ai(t.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){var\" a=\"i.css,s=i.type,u=i.enterClass,f=i.enterToClass,l=i.enterActiveClass,p=i.appearClass,d=i.appearToClass,v=i.appearActiveClass,y=i.beforeEnter,m=i.enter,g=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,w=i.appear,x=i.afterAppear,O=i.appearCancelled,A=i.duration,C=En,$=En.$vnode;while($&&$.parent)C=$.context,$=$.parent;var\" s=\"!C._isMounted||!t.isRootInsert;if(!S||w||\"\"===w){var\" k=\"S&&p?p:u,j=S&&v?v:l,E=S&&d?d:f,T=S&&_||y,I=S&&\"function\"===typeof\" w?w:m,p=\"S&&x||g,D=S&&O||b,N=h(c(A)?A.enter:A);0;var\" m=\"!1!==a&&!et,F=Wi(I),R=n._enterCb=L((function(){M&&(Mi(n,E),Mi(n,j)),R.cancelled?(M&&Mi(n,k),D&&D(n)):P&&P(n),n._enterCb=null}));t.data.show||we(t,\"insert\",(function(){var\" e=\"n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(n,R)})),T&&T(n),M&&(Ni(n,k),Ni(n,j),Di((function(){Mi(n,k),R.cancelled||(Ni(n,E),F||(Hi(N)?setTimeout(R,N):Fi(n,s,R)))}))),t.data.show&&(e&&e(),I&&I(n,R)),M||F||R()}}}function\" vi(t,e){var e();if(!o(n._leavecb)){var x=\"n._leaveCb=L((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(Mi(n,f),Mi(n,l)),x.cancelled?(b&&Mi(n,u),y&&y(n)):(e(),v&&v(n)),n._leaveCb=null}));m?m(O):O()}function\" o(){x.cancelled||(!t.data.show&&n.parentnode&&((n.parentnode._pending||(n.parentnode._pending=\"{}))[t.key]=t),p&&p(n),b&&(Ni(n,u),Ni(n,l),Di((function(){Mi(n,u),x.cancelled||(Ni(n,f),_||(Hi(w)?setTimeout(x,w):Fi(n,s,x)))}))),d&&d(n,x),b||_||x())}}function\" hi(t){return\"number\"=\"==typeof\" t&&!isnan(t)}function wi(t){if(r(t))return!1;var o(e)?wi(array.isarray(e)?e[0]:e):(t._length||t.length)>1}function qi(t,e){!0!==e.data.show&&Bi(e)}var Gi=J?{create:qi,activate:qi,remove:function(t,e){!0!==t.data.show?Vi(t,e):e()}}:{},Ki=[Ho,Go,ri,ci,_i,Gi],Xi=Ki.concat(Uo),Ji=Io({nodeOps:Ao,modules:Xi});et&&document.addEventListener(\"selectionchange\",(function(){var t=document.activeElement;t&&t.vmodel&&oa(t,\"input\")}));var Yi={inserted:function(t,e,n,r){\"select\"===n.tag?(r.elm&&!r.elm._vOptions?we(n,\"postpatch\",(function(){Yi.componentUpdated(t,e,n)})):Zi(t,e,n.context),t._vOptions=[].map.call(t.options,ea)):(\"textarea\"===n.tag||uo(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener(\"compositionstart\",na),t.addEventListener(\"compositionend\",ra),t.addEventListener(\"change\",ra),et&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if(\"select\"===n.tag){Zi(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,ea);if(o.some((function(t,e){return!M(t,r[e])}))){var i=t.multiple?e.value.some((function(t){return ta(t,o)})):e.value!==e.oldValue&&ta(e.value,o);i&&oa(t,\"change\")}}}};function Zi(t,e,n){Qi(t,e,n),(tt||nt)&&setTimeout((function(){Qi(t,e,n)}),0)}function Qi(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=F(r,ea(a))>-1,a.selected!==i&&(a.selected=i);else if(M(ea(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function ta(t,e){return e.every((function(e){return!M(e,t)}))}function ea(t){return\"_value\"in t?t._value:t.value}function na(t){t.target.composing=!0}function ra(t){t.target.composing&&(t.target.composing=!1,oa(t.target,\"input\"))}function oa(t,e){var n=document.createEvent(\"HTMLEvents\");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function ia(t){return!t.componentInstance||t.data&&t.data.transition?t:ia(t.componentInstance._vnode)}var aa={bind:function(t,e,n){var r=e.value;n=ia(n);var o=n.data&&n.data.transition,i=t.__vOriginalDisplay=\"none\"===t.style.display?\"\":t.style.display;r&&o?(n.data.show=!0,Bi(n,(function(){t.style.display=i}))):t.style.display=r?i:\"none\"},update:function(t,e,n){var r=e.value,o=e.oldValue;if(!r!==!o){n=ia(n);var i=n.data&&n.data.transition;i?(n.data.show=!0,r?Bi(n,(function(){t.style.display=t.__vOriginalDisplay})):Vi(n,(function(){t.style.display=\"none\"}))):t.style.display=r?t.__vOriginalDisplay:\"none\"}},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}},sa={model:Yi,show:aa},ca={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ua(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ua(On(e.children)):t}function fa(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[O(i)]=o[i];return e}function la(t,e){if(/\\d-keep-alive$/.test(e.tag))return t(\"keep-alive\",{props:e.componentOptions.propsData})}function pa(t){while(t=t.parent)if(t.data.transition)return!0}function da(t,e){return e.key===t.key&&e.tag===t.tag}var va=function(t){return t.tag||xn(t)},ha=function(t){return\"show\"===t.name},ya={name:\"transition\",props:ca,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(va),n.length)){0;var r=this.mode;0;var o=n[0];if(pa(this.$vnode))return o;var i=ua(o);if(!i)return o;if(this._leaving)return la(t,o);var a=\"__transition-\"+this._uid+\"-\";i.key=null==i.key?i.isComment?a+\"comment\":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=fa(this),u=this._vnode,f=ua(u);if(i.data.directives&&i.data.directives.some(ha)&&(i.data.show=!0),f&&f.data&&!da(i,f)&&!xn(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var l=f.data.transition=T({},c);if(\"out-in\"===r)return this._leaving=!0,we(l,\"afterLeave\",(function(){e._leaving=!1,e.$forceUpdate()})),la(t,o);if(\"in-out\"===r){if(xn(i))return u;var p,d=function(){p()};we(c,\"afterEnter\",d),we(c,\"enterCancelled\",d),we(l,\"delayLeave\",(function(t){p=t}))}}return o}}},ma=T({tag:String,moveClass:String},ca);delete ma.mode;var ga={props:ma,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Tn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||\"span\",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=fa(this),s=0;s<o.length;s++){var c=\"o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf(\"__vlist\"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var\" u=\"[],f=[],l=0;l<r.length;l++){var\" p=\"r[l];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):f.push(p)}this.kept=t(e,null,u),this.removed=f}return\" t(e,null,i)},updated:function(){var t=\"this.prevChildren,e=this.moveClass||(this.name||\"v\")+\"-move\";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(ba),t.forEach(_a),t.forEach(wa),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var\" n=\"t.elm,r=n.style;Ni(n,e),r.transform=r.WebkitTransform=r.transitionDuration=\"\",n.addEventListener(Ei,n._moveCb=function\" t(r){r&&r.target!=\"=n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Ei,t),n._moveCb=null,Mi(n,e))})}})))},methods:{hasMove:function(t,e){if(!$i)return!1;if(this._hasMove)return\" this._hasmove;var r=\"Ri(n);return\" this.$el.removechild(n),this._hasmove=\"r.hasTransform}}};function\" ba(t){t.elm._movecb&&t.elm._movecb(),t.elm._entercb&&t.elm._entercb()}function _a(t){t.data.newpos=\"t.elm.getBoundingClientRect()}function\" wa(t){var e=\"t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var\" i=\"t.elm.style;i.transform=i.WebkitTransform=\"translate(\"+r+\"px,\"+o+\"px)\",i.transitionDuration=\"0s\"}}var\" xa=\"{Transition:ya,TransitionGroup:ga};Or.config.mustUseProp=Ur,Or.config.isReservedTag=io,Or.config.isReservedAttr=Lr,Or.config.getTagNamespace=ao,Or.config.isUnknownElement=co,T(Or.options.directives,sa),T(Or.options.components,xa),Or.prototype.__patch__=J?Ji:P,Or.prototype.$mount=function(t,e){return\" 0,dn(this,t,e)},j&&settimeout((function(){b.devtools&&ut&&ut.emit(\"init\",or)}),0),e[\"a\"]=\"Or}).call(this,n(\"c8ba\"))},\"2cf4\":function(t,e,n){var\" r,o,i,a=\"n(\"da84\"),s=n(\"d039\"),c=n(\"0366\"),u=n(\"1be4\"),f=n(\"cc12\"),l=n(\"1cdc\"),p=n(\"605d\"),d=a.location,v=a.setImmediate,h=a.clearImmediate,y=a.process,m=a.MessageChannel,g=a.Dispatch,b=0,_={},w=\"onreadystatechange\",x=function(t){if(_.hasOwnProperty(t)){var\" _[t],e()}},o=\"function(t){return\" function(){x(t)}},a=\"function(t){x(t.data)},C=function(t){a.postMessage(t+\"\",d.protocol+\"//\"+d.host)};v&&h||(v=function(t){var\">n)e.push(arguments[n++]);return _[++b]=function(){(\"function\"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},h=function(t){delete _[t]},p?r=function(t){y.nextTick(O(t))}:g&&g.now?r=function(t){g.now(O(t))}:m&&!l?(o=new m,i=o.port2,o.port1.onmessage=A,r=c(i.postMessage,i,1)):a.addEventListener&&\"function\"==typeof postMessage&&!a.importScripts&&d&&\"file:\"!==d.protocol&&!s(C)?(r=C,a.addEventListener(\"message\",A,!1)):r=w in f(\"script\")?function(t){u.appendChild(f(\"script\"))[w]=function(){u.removeChild(this),x(t)}}:function(t){setTimeout(O(t),0)}),t.exports={set:v,clear:h}},\"2d00\":function(t,e,n){var r,o,i=n(\"da84\"),a=n(\"342f\"),s=i.process,c=s&&s.versions,u=c&&c.v8;u?(r=u.split(\".\"),o=r[0]+r[1]):a&&(r=a.match(/Edge\\/(\\d+)/),(!r||r[1]>=74)&&(r=a.match(/Chrome\\/(\\d+)/),r&&(o=r[1]))),t.exports=o&&+o},\"342f\":function(t,e,n){var r=n(\"d066\");t.exports=r(\"navigator\",\"userAgent\")||\"\"},\"35a1\":function(t,e,n){var r=n(\"f5df\"),o=n(\"3f8c\"),i=n(\"b622\"),a=i(\"iterator\");t.exports=function(t){if(void 0!=t)return t[a]||t[\"@@iterator\"]||o[r(t)]}},\"37e8\":function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\"),i=n(\"825a\"),a=n(\"df75\");t.exports=r?Object.defineProperties:function(t,e){i(t);var n,r=a(e),s=r.length,c=0;while(s>c)o.f(t,n=r[c++],e[n]);return t}},\"3bbe\":function(t,e,n){var r=n(\"861d\");t.exports=function(t){if(!r(t)&&null!==t)throw TypeError(\"Can't set \"+String(t)+\" as a prototype\");return t}},\"3f8c\":function(t,e){t.exports={}},\"428f\":function(t,e,n){var r=n(\"da84\");t.exports=r},\"44ad\":function(t,e,n){var r=n(\"d039\"),o=n(\"c6b6\"),i=\"\".split;t.exports=r((function(){return!Object(\"z\").propertyIsEnumerable(0)}))?function(t){return\"String\"==o(t)?i.call(t,\"\"):Object(t)}:Object},\"44d2\":function(t,e,n){var r=n(\"b622\"),o=n(\"7c73\"),i=n(\"9bf2\"),a=r(\"unscopables\"),s=Array.prototype;void 0==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),t.exports=function(t){s[a][t]=!0}},\"44de\":function(t,e,n){var r=n(\"da84\");t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},4840:function(t,e,n){var r=n(\"825a\"),o=n(\"1c0b\"),i=n(\"b622\"),a=i(\"species\");t.exports=function(t,e){var n,i=r(t).constructor;return void 0===i||void 0==(n=r(i)[a])?e:o(n)}},4930:function(t,e,n){var r=n(\"605d\"),o=n(\"2d00\"),i=n(\"d039\");t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},\"4d64\":function(t,e,n){var r=\"n(\"fc6a\"),o=n(\"50c4\"),i=n(\"23cb\"),a=function(t){return\" function(e,n,a){var s,c=\"r(e),u=o(c.length),f=i(a,u);if(t&&n!=n){while(u\">f)if(s=c[f++],s!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},\"50c4\":function(t,e,n){var r=n(\"a691\"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},5135:function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},5692:function(t,e,n){var r=n(\"c430\"),o=n(\"c6cd\");(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.9.1\",mode:r?\"pure\":\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"})},\"56ef\":function(t,e,n){var r=n(\"d066\"),o=n(\"241c\"),i=n(\"7418\"),a=n(\"825a\");t.exports=r(\"Reflect\",\"ownKeys\")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},\"5c6c\":function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},\"605d\":function(t,e,n){var r=n(\"c6b6\"),o=n(\"da84\");t.exports=\"process\"==r(o.process)},\"60da\":function(t,e,n){\"use strict\";var r=n(\"83ab\"),o=n(\"d039\"),i=n(\"df75\"),a=n(\"7418\"),s=n(\"d1e7\"),c=n(\"7b0b\"),u=n(\"44ad\"),f=Object.assign,l=Object.defineProperty;t.exports=!f||o((function(){if(r&&1!==f({b:1},f(l({},\"a\",{enumerable:!0,get:function(){l(this,\"b\",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o=\"abcdefghijklmnopqrst\";return t[n]=7,o.split(\"\").forEach((function(t){e[t]=t})),7!=f({},t)[n]||i(f({},e)).join(\"\")!=o}))?function(t,e){var n=c(t),o=arguments.length,f=1,l=a.f,p=s.f;while(o>f){var d,v=u(arguments[f++]),h=l?i(v).concat(l(v)):i(v),y=h.length,m=0;while(y>m)d=h[m++],r&&!p.call(v,d)||(n[d]=v[d])}return n}:f},\"65f0\":function(t,e,n){var r=n(\"861d\"),o=n(\"e8b5\"),i=n(\"b622\"),a=i(\"species\");t.exports=function(t,e){var n;return o(t)&&(n=t.constructor,\"function\"!=typeof n||n!==Array&&!o(n.prototype)?r(n)&&(n=n[a],null===n&&(n=void 0)):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},\"69f3\":function(t,e,n){var r,o,i,a=n(\"7f9a\"),s=n(\"da84\"),c=n(\"861d\"),u=n(\"9112\"),f=n(\"5135\"),l=n(\"c6cd\"),p=n(\"f772\"),d=n(\"d012\"),v=s.WeakMap,h=function(t){return i(t)?o(t):r(t,{})},y=function(t){return function(e){var n;if(!c(e)||(n=o(e)).type!==t)throw TypeError(\"Incompatible receiver, \"+t+\" required\");return n}};if(a){var m=l.state||(l.state=new v),g=m.get,b=m.has,_=m.set;r=function(t,e){return e.facade=t,_.call(m,t,e),e},o=function(t){return g.call(m,t)||{}},i=function(t){return b.call(m,t)}}else{var w=p(\"state\");d[w]=!0,r=function(t,e){return e.facade=t,u(t,w,e),e},o=function(t){return f(t,w)?t[w]:{}},i=function(t){return f(t,w)}}t.exports={set:r,get:o,has:i,enforce:h,getterFor:y}},\"6eeb\":function(t,e,n){var r=n(\"da84\"),o=n(\"9112\"),i=n(\"5135\"),a=n(\"ce4e\"),s=n(\"8925\"),c=n(\"69f3\"),u=c.get,f=c.enforce,l=String(String).split(\"String\");(t.exports=function(t,e,n,s){var c,u=!!s&&!!s.unsafe,p=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;\"function\"==typeof n&&(\"string\"!=typeof e||i(n,\"name\")||o(n,\"name\",e),c=f(n),c.source||(c.source=l.join(\"string\"==typeof e?e:\"\"))),t!==r?(u?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=n:o(t,e,n)):p?t[e]=n:a(e,n)})(Function.prototype,\"toString\",(function(){return\"function\"==typeof this&&u(this).source||s(this)}))},7418:function(t,e){e.f=Object.getOwnPropertySymbols},7839:function(t,e){t.exports=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"]},\"7b0b\":function(t,e,n){var r=n(\"1d80\");t.exports=function(t){return Object(r(t))}},\"7c73\":function(t,e,n){var r,o=n(\"825a\"),i=n(\"37e8\"),a=n(\"7839\"),s=n(\"d012\"),c=n(\"1be4\"),u=n(\"cc12\"),f=n(\"f772\"),l=\">\",p=\"<\",d=\"prototype\",v=\"script\",h=f(\"IE_PROTO\"),y=function(){},m=function(t){return 0=\"==e?n:i(n,e)}},\"7dd0\":function(t,e,n){\"use\" p+v+l+t+p+\" \"+v+l},g=\"function(t){t.write(m(\"\")),t.close();var\" e=\"t.parentWindow.Object;return\" t=\"null,e},b=function(){var\" t,e=\"u(\"iframe\"),n=\"java\"+v+\":\";return\" e.style.display=\"none\" ,c.appendchild(e),e.src=\"String(n),t=e.contentWindow.document,t.open(),t.write(m(\"document.F=Object\")),t.close(),t.F},_=function(){try{r=document.domain&&new\" activexobject(\"htmlfile\")}catch(e){}_=\"r?g(r):b();var\" _[d][a[t]];return _()};s[h]=\"!0,t.exports=Object.create||function(t,e){var\" n;return null!=\"=t?(y[d]=o(t),n=new\" y,y[d]=\"null,n[h]=t):n=_(),void\" strict\";var r=\"n(\"23e7\"),o=n(\"9ed3\"),i=n(\"e163\"),a=n(\"d2bb\"),s=n(\"d44e\"),c=n(\"9112\"),u=n(\"6eeb\"),f=n(\"b622\"),l=n(\"c430\"),p=n(\"3f8c\"),d=n(\"ae93\"),v=d.IteratorPrototype,h=d.BUGGY_SAFARI_ITERATORS,y=f(\"iterator\"),m=\"keys\",g=\"values\",b=\"entries\",_=function(){return\" this};t.exports=\"function(t,e,n,f,d,w,x){o(n,e,f);var\" o,a,c,$=\"function(t){if(t===d&&T)return\" t;if(!h&&t in j)return j[t];switch(t){case m:return function(){return new n(this,t)};case g:return b:return n(this,t)}}return n(this)}},s=\"e+\"\" iterator\",k=\"!1,j=t.prototype,E=j[y]||j[\"@@iterator\"]||d&&j[d],T=!h&&E||$(d),I=\"Array\"==e&&j.entries||E;if(I&&(O=i(I.call(new\" t)),v!=\"=Object.prototype&&O.next&&(l||i(O)===v||(a?a(O,v):\"function\"!=typeof\" o[y]&&c(o,y,_)),s(o,s,!0,!0),l&&(p[s]=\"_))),d==g&&E&&E.name!==g&&(k=!0,T=function(){return\" e.call(this)}),l&&!x||j[y]=\"==T||c(j,y,T),p[e]=T,d)if(A={values:$(g),keys:w?T:$(m),entries:$(b)},x)for(C\" a)(h||k||!(c j))&&u(j,c,a[c]);else r({target:e,proto:!0,forced:h||k},a);return a}},\"7f9a\":function(t,e,n){var i&& native code .test(o(i))},\"825a\":function(t,e,n){var typeerror(string(t)+\" is not an object\");return t}},\"83ab\":function(t,e,n){var 7!=\"Object.defineProperty({},1,{get:function(){return\" 7}})[1]}))},\"861d\":function(t,e){t.exports=\"function(t){return\"object\"===typeof\" t?null!=\"=t:\"function\"===typeof\" t}},8925:function(t,e,n){var r.inspectsource&&(r.inspectsource=\"function(t){return\" o.call(t)}),t.exports=\"r.inspectSource},\"90e3\":function(t,e){var\" n=\"0,r=Math.random();t.exports=function(t){return\"Symbol(\"+String(void\" o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=\"n,t}},\"94ca\":function(t,e,n){var\" e?r(e):!!e)},a=\"i.normalize=function(t){return\" string(t).replace(o,\".\").tolowercase()},s=\"i.data={},c=i.NATIVE=\"N\",u=i.POLYFILL=\"P\";t.exports=i},\"9bf2\":function(t,e,n){var\" s(t,e,n)}catch(r){}if(\"get\"in n||\"set\"in n)throw typeerror(\"accessors supported\");return\"value\"in n&&(t[e]=\"n.value),t}},\"9ed3\":function(t,e,n){\"use\" u=\"e+\"\" iterator\";return t.prototype=\"o(r,{next:i(1,n)}),a(t,u,!1,!0),s[u]=c,t}},a4b4:function(t,e,n){var\" isnan(t=\"+t)?0:(t\">0?r:n)(t)}},a79d:function(t,e,n){\"use strict\";var r=n(\"23e7\"),o=n(\"c430\"),i=n(\"fea9\"),a=n(\"d039\"),s=n(\"d066\"),c=n(\"4840\"),u=n(\"cdf9\"),f=n(\"6eeb\"),l=!!i&&a((function(){i.prototype[\"finally\"].call({then:function(){}},(function(){}))}));r({target:\"Promise\",proto:!0,real:!0,forced:l},{finally:function(t){var e=c(this,s(\"Promise\")),n=\"function\"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),o||\"function\"!=typeof i||i.prototype[\"finally\"]||f(i.prototype,\"finally\",s(\"Promise\").prototype[\"finally\"])},ae93:function(t,e,n){\"use strict\";var r,o,i,a=n(\"d039\"),s=n(\"e163\"),c=n(\"9112\"),u=n(\"5135\"),f=n(\"b622\"),l=n(\"c430\"),p=f(\"iterator\"),d=!1,v=function(){return this};[].keys&&(i=[].keys(),\"next\"in i?(o=s(s(i)),o!==Object.prototype&&(r=o)):d=!0);var h=void 0==r||a((function(){var t={};return r[p].call(t)!==t}));h&&(r={}),l&&!h||u(r,p)||c(r,p,v),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},b0c0:function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\").f,i=Function.prototype,a=i.toString,s=/^\\s*function ([^ (]*)/,c=\"name\";r&&!(c in i)&&o(i,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return\"\"}}})},b575:function(t,e,n){var r,o,i,a,s,c,u,f,l=n(\"da84\"),p=n(\"06cf\").f,d=n(\"2cf4\").set,v=n(\"1cdc\"),h=n(\"a4b4\"),y=n(\"605d\"),m=l.MutationObserver||l.WebKitMutationObserver,g=l.document,b=l.process,_=l.Promise,w=p(l,\"queueMicrotask\"),x=w&&w.value;x||(r=function(){var t,e;y&&(t=b.domain)&&t.exit();while(o){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,t&&t.enter()},v||y||h||!m||!g?_&&_.resolve?(u=_.resolve(void 0),f=u.then,a=function(){f.call(u,r)}):a=y?function(){b.nextTick(r)}:function(){d.call(l,r)}:(s=!0,c=g.createTextNode(\"\"),new m(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},b622:function(t,e,n){var r=n(\"da84\"),o=n(\"5692\"),i=n(\"5135\"),a=n(\"90e3\"),s=n(\"4930\"),c=n(\"fdbf\"),u=o(\"wks\"),f=r.Symbol,l=c?f:f&&f.withoutSetter||a;t.exports=function(t){return i(u,t)&&(s||\"string\"==typeof u[t])||(s&&i(f,t)?u[t]=f[t]:u[t]=l(\"Symbol.\"+t)),u[t]}},b727:function(t,e,n){var r=n(\"0366\"),o=n(\"44ad\"),i=n(\"7b0b\"),a=n(\"50c4\"),s=n(\"65f0\"),c=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,f=4==t,l=6==t,p=7==t,d=5==t||l;return function(v,h,y,m){for(var g,b,_=i(v),w=o(_),x=r(h,y,3),O=a(w.length),A=0,C=m||s,$=e?C(v,O):n||p?C(v,0):void 0;O>A;A++)if((d||A in w)&&(g=w[A],b=x(g,A,_),t))if(e)$[A]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return A;case 2:c.call($,g)}else switch(t){case 4:return!1;case 7:c.call($,g)}return l?-1:u||f?f:$}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterOut:u(7)}},c04e:function(t,e,n){var r=n(\"861d\");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if(\"function\"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},c430:function(t,e){t.exports=!1},c6b6:function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},c6cd:function(t,e,n){var r=n(\"da84\"),o=n(\"ce4e\"),i=\"__core-js_shared__\",a=r[i]||o(i,{});t.exports=a},c8ba:function(t,e){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(r){\"object\"===typeof window&&(n=window)}t.exports=n},ca84:function(t,e,n){var r=n(\"5135\"),o=n(\"fc6a\"),i=n(\"4d64\").indexOf,a=n(\"d012\");t.exports=function(t,e){var n,s=o(t),c=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);while(e.length>c)r(s,n=e[c++])&&(~i(u,n)||u.push(n));return u}},cc12:function(t,e,n){var r=n(\"da84\"),o=n(\"861d\"),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},cca6:function(t,e,n){var r=n(\"23e7\"),o=n(\"60da\");r({target:\"Object\",stat:!0,forced:Object.assign!==o},{assign:o})},cdf9:function(t,e,n){var r=n(\"825a\"),o=n(\"861d\"),i=n(\"f069\");t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t),a=n.resolve;return a(e),n.promise}},ce4e:function(t,e,n){var r=n(\"da84\"),o=n(\"9112\");t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},d012:function(t,e){t.exports={}},d039:function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},d066:function(t,e,n){var r=n(\"428f\"),o=n(\"da84\"),i=function(t){return\"function\"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){\"use strict\";var r=\"{}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var\" e=\"o(this,t);return!!e&&e.enumerable}:r},d2bb:function(t,e,n){var\" t,e=\"!1,n={};try{t=Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set,t.call(n,[]),e=n\" instanceof array}catch(i){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=\"i,n}}():void\" 0)},d44e:function(t,e,n){var o(this,t,arguments.length>1?arguments[1]:void 0)}})},da84:function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n(\"object\"==typeof globalThis&&globalThis)||n(\"object\"==typeof window&&window)||n(\"object\"==typeof self&&self)||n(\"object\"==typeof e&&e)||function(){return this}()||Function(\"return this\")()}).call(this,n(\"c8ba\"))},df75:function(t,e,n){var r=n(\"ca84\"),o=n(\"7839\");t.exports=Object.keys||function(t){return r(t,o)}},e163:function(t,e,n){var r=n(\"5135\"),o=n(\"7b0b\"),i=n(\"f772\"),a=n(\"e177\"),s=i(\"IE_PROTO\"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},e177:function(t,e,n){var r=n(\"d039\");t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},e260:function(t,e,n){\"use strict\";var r=n(\"fc6a\"),o=n(\"44d2\"),i=n(\"3f8c\"),a=n(\"69f3\"),s=n(\"7dd0\"),c=\"Array Iterator\",u=a.set,f=a.getterFor(c);t.exports=s(Array,\"Array\",(function(t,e){u(this,{type:c,target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):\"keys\"==n?{value:r,done:!1}:\"values\"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),\"values\"),i.Arguments=i.Array,o(\"keys\"),o(\"values\"),o(\"entries\")},e2cc:function(t,e,n){var r=n(\"6eeb\");t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},e667:function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(e){return{error:!0,value:e}}}},e6cf:function(t,e,n){\"use strict\";var r,o,i,a,s=n(\"23e7\"),c=n(\"c430\"),u=n(\"da84\"),f=n(\"d066\"),l=n(\"fea9\"),p=n(\"6eeb\"),d=n(\"e2cc\"),v=n(\"d44e\"),h=n(\"2626\"),y=n(\"861d\"),m=n(\"1c0b\"),g=n(\"19aa\"),b=n(\"8925\"),_=n(\"2266\"),w=n(\"1c7e\"),x=n(\"4840\"),O=n(\"2cf4\").set,A=n(\"b575\"),C=n(\"cdf9\"),$=n(\"44de\"),S=n(\"f069\"),k=n(\"e667\"),j=n(\"69f3\"),E=n(\"94ca\"),T=n(\"b622\"),I=n(\"605d\"),P=n(\"2d00\"),D=T(\"species\"),N=\"Promise\",M=j.get,F=j.set,L=j.getterFor(N),R=l,U=u.TypeError,z=u.document,B=u.process,V=f(\"fetch\"),H=S.f,W=H,q=!!(z&&z.createEvent&&u.dispatchEvent),G=\"function\"==typeof PromiseRejectionEvent,K=\"unhandledrejection\",X=\"rejectionhandled\",J=0,Y=1,Z=2,Q=1,tt=2,et=E(N,(function(){var t=b(R)!==String(R);if(!t){if(66===P)return!0;if(!I&&!G)return!0}if(c&&!R.prototype[\"finally\"])return!0;if(P>=51&&/native code/.test(R))return!1;var e=R.resolve(1),n=function(t){t((function(){}),(function(){}))},r=e.constructor={};return r[D]=n,!(e.then((function(){}))instanceof n)})),nt=et||!w((function(t){R.all(t)[\"catch\"]((function(){}))})),rt=function(t){var e;return!(!y(t)||\"function\"!=typeof(e=t.then))&&e},ot=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;A((function(){var r=t.value,o=t.state==Y,i=0;while(n.length>i){var a,s,c,u=n[i++],f=o?u.ok:u.fail,l=u.resolve,p=u.reject,d=u.domain;try{f?(o||(t.rejection===tt&&ct(t),t.rejection=Q),!0===f?a=r:(d&&d.enter(),a=f(r),d&&(d.exit(),c=!0)),a===u.promise?p(U(\"Promise-chain cycle\")):(s=rt(a))?s.call(a,l,p):l(a)):p(r)}catch(v){d&&!c&&d.exit(),p(v)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&at(t)}))}},it=function(t,e,n){var r,o;q?(r=z.createEvent(\"Event\"),r.promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},!G&&(o=u[\"on\"+t])?o(r):t===K&&$(\"Unhandled promise rejection\",n)},at=function(t){O.call(u,(function(){var e,n=t.facade,r=t.value,o=st(t);if(o&&(e=k((function(){I?B.emit(\"unhandledRejection\",r,n):it(K,n,r)})),t.rejection=I||st(t)?tt:Q,e.error))throw e.value}))},st=function(t){return t.rejection!==Q&&!t.parent},ct=function(t){O.call(u,(function(){var e=t.facade;I?B.emit(\"rejectionHandled\",e):it(X,e,t.value)}))},ut=function(t,e,n){return function(r){t(e,r,n)}},ft=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=Z,ot(t,!0))},lt=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw U(\"Promise can't be resolved itself\");var r=rt(e);r?A((function(){var n={done:!1};try{r.call(e,ut(lt,n,t),ut(ft,n,t))}catch(o){ft(n,o,t)}})):(t.value=e,t.state=Y,ot(t,!1))}catch(o){ft({done:!1},o,t)}}};et&&(R=function(t){g(this,R,N),m(t),r.call(this);var e=M(this);try{t(ut(lt,e),ut(ft,e))}catch(n){ft(e,n)}},r=function(t){F(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:J,value:void 0})},r.prototype=d(R.prototype,{then:function(t,e){var n=L(this),r=H(x(this,R));return r.ok=\"function\"!=typeof t||t,r.fail=\"function\"==typeof e&&e,r.domain=I?B.domain:void 0,n.parent=!0,n.reactions.push(r),n.state!=J&&ot(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=M(t);this.promise=t,this.resolve=ut(lt,e),this.reject=ut(ft,e)},S.f=H=function(t){return t===R||t===i?new o(t):W(t)},c||\"function\"!=typeof l||(a=l.prototype.then,p(l.prototype,\"then\",(function(t,e){var n=this;return new R((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),\"function\"==typeof V&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return C(R,V.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:et},{Promise:R}),v(R,N,!1,!0),h(N),i=f(N),s({target:N,stat:!0,forced:et},{reject:function(t){var e=H(this);return e.reject.call(void 0,t),e.promise}}),s({target:N,stat:!0,forced:c||et},{resolve:function(t){return C(c&&this===i?R:this,t)}}),s({target:N,stat:!0,forced:nt},{all:function(t){var e=this,n=H(e),r=n.resolve,o=n.reject,i=k((function(){var n=m(e.resolve),i=[],a=0,s=1;_(t,(function(t){var c=a++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[c]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=H(e),r=n.reject,o=k((function(){var o=m(e.resolve);_(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},e893:function(t,e,n){var r=n(\"5135\"),o=n(\"56ef\"),i=n(\"06cf\"),a=n(\"9bf2\");t.exports=function(t,e){for(var n=o(e),s=a.f,c=i.f,u=0;u</2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){\"use></\",d=\"prototype\",v=\"script\",h=f(\"IE_PROTO\"),y=function(){},m=function(t){return></41)}))},\"4d64\":function(t,e,n){var></o.length;s++){var></c;s++)if(a=t.options[s],o)i=F(r,ea(a))></e.length)t=t.concat(t);return></a&&u()}),i+1),t.addEventListener(s,f)}var></0&&(n.push(e),xi(t,e))}function></0&&t.setAttribute(\"class\",(n+e).trim())}}function></i;o++)t.style[r]=n[o];else></=0||t.target.ownerDocument!==document)return></=53);function></r;i++){var></0&&a[n].push(i):a[n]=[i]:a[n]=i}}var></i;r++)o(e=Qr(t[r]))&&\"\"!==e&&(n&&(n+=\"></r.length;o++)yr(t,n,r[o]);else></Un.length;Wn++)t=Un[Wn],t.before&&t.before(),e=t.id,Bn[e]=null,t.run();var></a;i++)ne(n[i],e,r,e,o)}return></i;r++)n[r]=e(t[r],r);else></r.length;o++){var></0||s<c)&&(a=!0)}if(void></n;e++)t[e].update()},ht.target=null;var></t.length;n++)t[n]&&T(e,t[n]);return></r.length;o++)n[r[o]]=!0;return></0?o(n+e,0):i(n,e)}},\"23e7\":function(t,e,n){var>","site":{"data":{}},"excerpt":"","more":"(window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[]).push([[\"chunk-vendors\"],{\"00ee\":function(t,e,n){var r=n(\"b622\"),o=r(\"toStringTag\"),i={};i[o]=\"z\",t.exports=\"[object z]\"===String(i)},\"0366\":function(t,e,n){var r=n(\"1c0b\");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},\"06cf\":function(t,e,n){var r=n(\"83ab\"),o=n(\"d1e7\"),i=n(\"5c6c\"),a=n(\"fc6a\"),s=n(\"c04e\"),c=n(\"5135\"),u=n(\"0cfb\"),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=a(t),e=s(e,!0),u)try{return f(t,e)}catch(n){}if(c(t,e))return i(!o.f.call(t,e),t[e])}},\"0cfb\":function(t,e,n){var r=n(\"83ab\"),o=n(\"d039\"),i=n(\"cc12\");t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i(\"div\"),\"a\",{get:function(){return 7}}).a}))},\"19aa\":function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError(\"Incorrect \"+(n?n+\" \":\"\")+\"invocation\");return t}},\"1be4\":function(t,e,n){var r=n(\"d066\");t.exports=r(\"document\",\"documentElement\")},\"1c0b\":function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(String(t)+\" is not a function\");return t}},\"1c7e\":function(t,e,n){var r=n(\"b622\"),o=r(\"iterator\"),i=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){i=!0}};s[o]=function(){return this},Array.from(s,(function(){throw 2}))}catch(c){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var r={};r[o]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(c){}return n}},\"1cdc\":function(t,e,n){var r=n(\"342f\");t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},\"1d80\":function(t,e){t.exports=function(t){if(void 0==t)throw TypeError(\"Can't call method on \"+t);return t}},\"1dde\":function(t,e,n){var r=n(\"d039\"),o=n(\"b622\"),i=n(\"2d00\"),a=o(\"species\");t.exports=function(t){return i>=51||!r((function(){var e=[],n=e.constructor={};return n[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2266:function(t,e,n){var r=n(\"825a\"),o=n(\"e95a\"),i=n(\"50c4\"),a=n(\"0366\"),s=n(\"35a1\"),c=n(\"2a62\"),u=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,n){var f,l,p,d,v,h,y,m=n&&n.that,g=!(!n||!n.AS_ENTRIES),b=!(!n||!n.IS_ITERATOR),_=!(!n||!n.INTERRUPTED),w=a(e,m,1+g+_),x=function(t){return f&&c(f),new u(!0,t)},O=function(t){return g?(r(t),_?w(t[0],t[1],x):w(t[0],t[1])):_?w(t,x):w(t)};if(b)f=t;else{if(l=s(t),\"function\"!=typeof l)throw TypeError(\"Target is not iterable\");if(o(l)){for(p=0,d=i(t.length);d>p;p++)if(v=O(t[p]),v&&v instanceof u)return v;return new u(!1)}f=l.call(t)}h=f.next;while(!(y=h.call(f)).done){try{v=O(y.value)}catch(A){throw c(f),A}if(\"object\"==typeof v&&v&&v instanceof u)return v}return new u(!1)}},\"23cb\":function(t,e,n){var r=n(\"a691\"),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},\"23e7\":function(t,e,n){var 0=\"==t||null===t}function\" r=\"n(\"da84\"),o=n(\"06cf\").f,i=n(\"9112\"),a=n(\"6eeb\"),s=n(\"ce4e\"),c=n(\"e893\"),u=n(\"94ca\");t.exports=function(t,e){var\" n,f,l,p,d,v,h=\"t.target,y=t.global,m=t.stat;if(f=y?r:m?r[h]||s(h,{}):(r[h]||{}).prototype,f)for(l\" in e){if(d=\"e[l],t.noTargetGet?(v=o(f,l),p=v&&v.value):p=f[l],n=u(y?l:h+(m?\".\":\"#\")+l,t.forced),!n&&void\" 0!=\"=p){if(typeof\" d=\"==typeof\" p)continue;c(d,p)}(t.sham||p&&p.sham)&&i(d,\"sham\",!0),a(f,l,d,t)}}},\"241c\":function(t,e,n){var r(t,i)}},2626:function(t,e,n){\"use strict\";var e=\"r(t),n=o.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return\" this}})}},2877:function(t,e,n){\"use strict\";function r(t,e,n,r,o,i,a,s){var c,u=\"function\" ==\"=typeof\" t?t.options:t;if(e&&(u.render=\"e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId=\"data-v-\"+i),a?(c=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||\"undefined\"===typeof\" __vue_ssr_context__||(t=\"__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var\" f=\"u.render;u.render=function(t,e){return\" c.call(e),f(t,e)}}else{var l=\"u.beforeCreate;u.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:u}}n.d(e,\"a\",(function(){return\" r}))},\"2a62\":function(t,e,n){var r(e.call(t)).value}},\"2b0e\":function(t,e,n){\"use strict\";(function(t){ *! * vue.js v2.6.12 (c) 2014-2020 evan you released under the mit license. var n=\"Object.freeze({});function\" r(t){return void o(t){return i(t){return!0=\"==t}function\" a(t){return!1=\"==t}function\" s(t){return\"string\"=\"==typeof\" t||\"number\"=\"==typeof\" t||\"symbol\"=\"==typeof\" t||\"boolean\"=\"==typeof\" t}function c(t){return null!=\"=t&&\"object\"===typeof\" t}var u=\"Object.prototype.toString;function\" f(t){return\"[object object]\"=\"==u.call(t)}function\" l(t){return\"[object regexp]\"=\"==u.call(t)}function\" p(t){var>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return o(t)&&\"function\"===typeof t.then&&\"function\"===typeof t.catch}function v(t){return null==t?\"\":Array.isArray(t)||f(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(\",\"),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.tolowercase()]}:function(t){return n[t]}}y(\"slot,component\",!0);var m=\"y(\"key,ref,slot,slot-scope,is\");function\" g(t,e){if(t.length){var n=\"t.indexOf(e);if(n\">-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(t,e){return b.call(t,e)}function w(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var x=/-(\\w)/g,O=w((function(t){return t.replace(x,(function(t,e){return e?e.toUpperCase():\"\"}))})),A=w((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),C=/\\B([A-Z])/g,$=w((function(t){return t.replace(C,\"-$1\").toLowerCase()}));function S(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function k(t,e){return t.bind(e)}var j=Function.prototype.bind?k:S;function E(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function T(t,e){for(var n in e)t[n]=e[n];return t}function I(t){for(var e={},n=0;n<t.length;n++)t[n]&&T(e,t[n]);return 36=\"==e||95===e}function\" e}function p(t,e,n){}var d=\"function(t,e,n){return!1},N=function(t){return\" t};function m(t,e){if(t=\"==e)return!0;var\" n=\"c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var\" o=\"Array.isArray(t),i=Array.isArray(e);if(o&&i)return\" t.length=\"==e.length&&t.every((function(t,n){return\" m(t,e[n])}));if(t instanceof date&&e date)return t.gettime()=\"==e.getTime();if(o||i)return!1;var\" a=\"Object.keys(t),s=Object.keys(e);return\" a.length=\"==s.length&&a.every((function(n){return\" m(t[n],e[n])}))}catch(u){return!1}}function f(t,e){for(var n;return-1}function l(t){var e=\"!1;return\" function(){e||(e=\"!0,t.apply(this,arguments))}}var\" r=\"data-server-rendered\" ,u=\"[\"component\",\"directive\",\"filter\"],z=[\"beforeCreate\",\"created\",\"beforeMount\",\"mounted\",\"beforeUpdate\",\"updated\",\"beforeDestroy\",\"destroyed\",\"activated\",\"deactivated\",\"errorCaptured\",\"serverPrefetch\"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:D,isReservedAttr:D,isUnknownElement:D,getTagNamespace:P,parsePlatformTagName:N,mustUseProp:D,async:!0,_lifecycleHooks:z},V=/a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;function\" h(t){var w(t,e,n,r){object.defineproperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=\"new\" regexp(\"[^\"+v.source+\".$_\\\\d]\");function g(t){if(!q.test(t)){var function(t){for(var t}}}var k,x=\"__proto__\" in{},j=\"undefined\" !=\"=typeof\" window,y=\"undefined\" wxenvironment&&!!wxenvironment.platform,z=\"Y&&WXEnvironment.platform.toLowerCase(),Q=J&&window.navigator.userAgent.toLowerCase(),tt=Q&&/msie|trident/.test(Q),et=Q&&Q.indexOf(\"msie\" 9.0\")>0,nt=Q&&Q.indexOf(\"edge/\")>0,rt=(Q&&Q.indexOf(\"android\"),Q&&/iphone|ipad|ipod|ios/.test(Q)||\"ios\"===Z),ot=(Q&&/chrome\\/\\d+/.test(Q),Q&&/phantomjs/.test(Q),Q&&Q.match(/firefox\\/(\\d+)/)),it={}.watch,at=!1;if(J)try{var st={};Object.defineProperty(st,\"passive\",{get:function(){at=!0}}),window.addEventListener(\"test-passive\",null,st)}catch(Oa){}var ct=function(){return void 0===K&&(K=!J&&!Y&&\"undefined\"!==typeof t&&(t[\"process\"]&&\"server\"===t[\"process\"].env.VUE_ENV)),K},ut=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ft(t){return\"function\"===typeof t&&/native code/.test(t.toString())}var lt,pt=\"undefined\"!==typeof Symbol&&ft(Symbol)&&\"undefined\"!==typeof Reflect&&ft(Reflect.ownKeys);lt=\"undefined\"!==typeof Set&&ft(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var dt=P,vt=0,ht=function(){this.id=vt++,this.subs=[]};ht.prototype.addSub=function(t){this.subs.push(t)},ht.prototype.removeSub=function(t){g(this.subs,t)},ht.prototype.depend=function(){ht.target&&ht.target.addDep(this)},ht.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},ht.target=null;var 0=\"==t&&(t=\"\");var\" yt=\"[];function\" mt(t){yt.push(t),ht.target=\"t}function\" gt(){yt.pop(),ht.target=\"yt[yt.length-1]}var\" bt=\"function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void\" 0,this.context=\"i,this.fnContext=void\" 0,this.fnoptions=\"void\" 0,this.fnscopeid=\"void\" 0,this.key=\"e&&e.key,this.componentOptions=a,this.componentInstance=void\" 0,this.parent=\"void\" 0,this.raw=\"!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void\" 0,this.isasyncplaceholder=\"!1},_t={child:{configurable:!0}};_t.child.get=function(){return\" this.componentinstance},object.defineproperties(bt.prototype,_t);var wt=\"function(t){void\" e=\"new\" bt;return e.text=\"t,e.isComment=!0,e};function\" xt(t){return new bt(void 0,void 0,string(t))}function ot(t){var bt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentoptions,t.asyncfactory);return e.ns=\"t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var\" at=\"Array.prototype,Ct=Object.create(At),$t=[\"push\",\"pop\",\"shift\",\"unshift\",\"splice\",\"sort\",\"reverse\"];$t.forEach((function(t){var\" n=\"[],r=arguments.length;while(r--)n[r]=arguments[r];var\" o,i=\"e.apply(this,n),a=this.__ob__;switch(t){case\"push\":case\"unshift\":o=n;break;case\"splice\":o=n.slice(2);break}return\" o&&a.observearray(o),a.dep.notify(),i}))}));var st=\"Object.getOwnPropertyNames(Ct),kt=!0;function\" jt(t){kt=\"t}var\" et=\"function(t){this.value=t,this.dep=new\" ht,this.vmcount=\"0,W(t,\"__ob__\",this),Array.isArray(t)?(X?Tt(t,Ct):It(t,Ct,St),this.observeArray(t)):this.walk(t)};function\" tt(t,e){t.__proto__=\"e}function\" it(t,e,n){for(var r=\"0,o=n.length;r<o;r++){var\" i=\"n[r];W(t,i,e[i])}}function\" pt(t,e){var n;if(c(t)&&!(t instanceof bt))return _(t,\"__ob__\")&&t.__ob__ et?n=\"t.__ob__:kt&&!ct()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new\" et(t)),e&&n&&n.vmcount++,n}function dt(t,e,n,r,o){var ht,a=\"Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var\" s=\"a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var\" u=\"!o&&Pt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var\" ht.target&&(i.depend(),u&&(u.dep.depend(),array.isarray(e)&&ft(e))),e},set:function(e){var nt(t,e,n){if(array.isarray(t)&&p(e))return t.length=\"Math.max(t.length,e),t.splice(e,1,n),n;if(e\" in t&&!(e object.prototype))return t[e]=\"n,n;var\" t._isvue||r&&r.vmcount?n:r?(dt(r.value,e,n),r.dep.notify(),n):(t[e]=\"n,n)}function\" mt(t,e){if(array.isarray(t)&&p(e))t.splice(e,1);else{var t[e],n&&n.dep.notify())}}function ft(t){for(var 0,n=\"0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Ft(e)}Et.prototype.walk=function(t){for(var\" lt=\"B.optionMergeStrategies;function\" rt(t,e){if(!e)return t;for(var n,r,o,i=\"pt?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)n=i[a],\"__ob__\"!==n&&(r=t[n],o=e[n],_(t,n)?r!==o&&f(r)&&f(o)&&Rt(r,o):Nt(t,n,o));return\" t}function ut(t,e,n){return n?function(){var ==\"=typeof\" e?e.call(n,n):e,o=\"function\" t?t.call(n,n):t;return r?rt(r,o):o}:e?t?function(){return rt(\"function\"=\"==typeof\" e?e.call(this,this):e,\"function\"=\"==typeof\" t?t.call(this,this):t)}:e:t}function zt(t,e){var n?bt(n):n}function bt(t){for(var e}function vt(t,e,n,r){var o=\"Object.create(t||null);return\" e?t(o,e):o}lt.data=\"function(t,e,n){return\" n?ut(t,e,n):e&&\"function\"!=\"=typeof\" e?t:ut(t,e)},z.foreach((function(t){lt[t]=\"zt})),U.forEach((function(t){Lt[t+\"s\"]=Vt})),Lt.watch=function(t,e,n,r){if(t===it&&(t=void\" 0),e=\"==it&&(e=void\" 0),!e)return object.create(t||null);if(!t)return e;var t(o,t),e){var a=\"o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return\" o},lt.props=\"Lt.methods=Lt.inject=Lt.computed=function(t,e,n,r){if(!t)return\" t(o,t),e&&t(o,e),o},lt.provide=\"Ut;var\" ht=\"function(t,e){return\" void wt(t,e){var r,o,i,a=\"{};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],\"string\"===typeof\" o&&(i=\"O(o),a[i]={type:null})}else\" if(f(n))for(var n)o=\"n[s],i=O(s),a[i]=f(o)?o:{type:o};else\" 0;t.props=\"a}}function\" qt(t,e){var n){var 0}}function gt(t){var e){var r&&(e[n]=\"{bind:r,update:r})}}function\" kt(t,e,n){if(\"function\"=\"==typeof\" e&&(e=\"e.options),Wt(e,n),qt(e,n),Gt(e),!e._base&&(e.extends&&(t=Kt(t,e.extends,n)),e.mixins))for(var\" i,a=\"{};for(i\" t)s(i);for(i e)_(t,i)||s(i);function s(r){var a}function xt(t,e,n,r){if(\"string\"=\"==typeof\" o[n];var o[i];var o[a];var s}}function jt(t,e,n,r){var>-1)if(i&&!_(o,\"default\"))a=!1;else if(\"\"===a||a===$(t)){var c=te(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0=\"==a){a=Yt(r,o,t);var\" u=\"kt;jt(!0),Pt(a),jt(u)}return\" a}function yt(t,e,n){if(_(e,\"default\")){var r=\"e.default;return\" t&&t.$options.propsdata&&void 0!=\"=t._props[n]?t._props[n]:\"function\"===typeof\" r&&\"function\"!=\"=Zt(e.type)?r.call(t):r}}function\" zt(t){var e=\"t&&t.toString().match(/^\\s*function\" (\\w+) );return e?e[1]:\"\"}function qt(t,e){return zt(t)=\"==Zt(e)}function\" te(t,e){if(!array.isarray(e))return qt(e,t)?0:-1;for(var n=\"0,r=e.length;n<r;n++)if(Qt(e[n],t))return\" n;return-1}function ee(t,e,n){mt();try{if(e){var o=\"r.$options.errorCaptured;if(o)for(var\" i=\"0;i<o.length;i++)try{var\" a=\"!1===o[i].call(r,t,e,n);if(a)return}catch(Oa){re(Oa,r,\"errorCaptured\" hook\")}}}re(t,e,n)}finally{gt()}}function ne(t,e,n,r,o){var i;try{i=\"n?t.apply(e,n):t.call(e),i&&!i._isVue&&d(i)&&!i._handled&&(i.catch((function(t){return\" ee(t,r,o+\" (promise async)\")})),i._handled=\"!0)}catch(Oa){ee(Oa,r,o)}return\" i}function re(t,e,n){if(b.errorhandler)try{return b.errorhandler.call(null,t,e,n)}catch(oa){oa!=\"=t&&oe(Oa,null,\"config.errorHandler\")}oe(t,e,n)}function\" oe(t,e,n){if(!j&&!y||\"undefined\"=\"==typeof\" console)throw t;console.error(t)}var ie,ae=\"!1,se=[],ce=!1;function\" ue(){ce=\"!1;var\" t=\"se.slice(0);se.length=0;for(var\" promise&&ft(promise)){var fe=\"Promise.resolve();ie=function(){fe.then(ue),rt&&setTimeout(P)},ae=!0}else\" if(tt||\"undefined\"=\"==typeof\" mutationobserver||!ft(mutationobserver)&&\"[object mutationobserverconstructor]\"!=\"=MutationObserver.toString())ie=\"undefined\"!==typeof\" setimmediate&&ft(setimmediate)?function(){setimmediate(ue)}:function(){settimeout(ue,0)};else{var le=\"1,pe=new\" mutationobserver(ue),de=\"document.createTextNode(String(le));pe.observe(de,{characterData:!0}),ie=function(){le=(le+1)%2,de.data=String(le)},ae=!0}function\" ve(t,e){var n;if(se.push((function(){if(t)try{t.call(e)}catch(oa){ee(oa,e,\"nexttick\")}else n&&n(e)})),ce||(ce=\"!0,ie()),!t&&\"undefined\"!==typeof\" promise)return new promise((function(t){n=\"t}))}var\" he=\"new\" lt;function ye(t){me(t,he),he.clear()}function me(t,e){var n,r,o=\"Array.isArray(t);if(!(!o&&!c(t)||Object.isFrozen(t)||t\" instanceof bt)){if(t.__ob__){var ge=\"w((function(t){var\" ==\"=t.charAt(0);t=e?t.slice(1):t;var\" be(t,e){function n(){var ne(r,null,arguments,e,\"v-on handler\");for(var handler\")}return n.fns=\"t,n}function\" _e(t,e,n,o,a,s){var c,u,f,l;for(c in t)u=\"t[c],f=e[c],l=ge(c),r(u)||(r(f)?(r(u.fns)&&(u=t[c]=be(u,s)),i(l.once)&&(u=t[c]=a(l.name,u,l.capture)),n(l.name,u,l.capture,l.passive,l.params)):u!==f&&(f.fns=u,t[c]=f));for(c\" e)r(t[c])&&(l=\"ge(c),o(l.name,e[c],l.capture))}function\" we(t,e,n){var a;t bt&&(t=\"t.data.hook||(t.data.hook={}));var\" s=\"t[e];function\" c(){n.apply(this,arguments),g(a.fns,c)}r(s)?a=\"be([c]):o(s.fns)&&i(s.merged)?(a=s,a.fns.push(c)):a=be([s,c]),a.merged=!0,t[e]=a}function\" xe(t,e,n){var i){var f=\"$(u);Oe(a,c,u,f,!0)||Oe(a,s,u,f,!1)}return\" a}}function oe(t,e,n,r,i){if(o(e)){if(_(e,n))return t[n]=\"e[n],i||delete\" e[n],!0;if(_(e,r))return e[r],!0}return!1}function ae(t){for(var array.prototype.concat.apply([],t);return t}function ce(t){return s(t)?[xt(t)]:array.isarray(t)?se(t):void 0}function $e(t){return o(t)&&o(t.text)&&a(t.iscomment)}function se(t,e){var n,a,c,u,f=\"[];for(n=0;n<t.length;n++)a=t[n],r(a)||\"boolean\"===typeof\" a||(c=\"f.length-1,u=f[c],Array.isArray(a)?a.length\">0&&(a=Se(a,(e||\"\")+\"_\"+n),$e(a[0])&&$e(u)&&(f[c]=xt(u.text+a[0].text),a.shift()),f.push.apply(f,a)):s(a)?$e(u)?f[c]=xt(u.text+a):\"\"!==a&&f.push(xt(a)):$e(a)&&$e(u)?f[c]=xt(u.text+a.text):(i(t._isVList)&&o(a.tag)&&r(a.key)&&o(e)&&(a.key=\"__vlist\"+e+\"_\"+n+\"__\"),f.push(a)));return f}function ke(t){var e=t.$options.provide;e&&(t._provided=\"function\"===typeof e?e.call(t):e)}function je(t){var e=Ee(t.$options.inject,t);e&&(jt(!1),Object.keys(e).forEach((function(n){Dt(t,n,e[n])})),jt(!0))}function Ee(t,e){if(t){for(var n=Object.create(null),r=pt?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=\"r[o];if(\"__ob__\"!==i){var\" a=\"t[i].from,s=e;while(s){if(s._provided&&_(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if(\"default\"in\" t[i]){var c=\"t[i].default;n[i]=\"function\"===typeof\" c?c.call(e):c}else 0}}return n}}function te(t,e){if(!t||!t.length)return{};for(var n=\"{},r=0,o=t.length;r<o;r++){var\" a.attrs.slot,i.context!=\"=e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var\" s=\"a.slot,c=n[s]||(n[s]=[]);\"template\"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var\" u in n)n[u].every(ie)&&delete n[u];return n}function ie(t){return t.iscomment&&!t.asyncfactory||\" \"=\"==t.text}function\" pe(t,e,r){var o,i=\"Object.keys(e).length\">0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},t)t[c]&&\"$\"!==c[0]&&(o[c]=De(e,c,t[c]))}else o={};for(var u in e)u in o||(o[u]=Ne(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),W(o,\"$stable\",a),W(o,\"$key\",s),W(o,\"$hasNormal\",i),o}function De(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&\"object\"===typeof t&&!Array.isArray(t)?[t]:Ce(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function Ne(t,e){return function(){return t[e]}}function Me(t,e){var n,r,i,a,s;if(Array.isArray(t)||\"string\"===typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else 0=\"==t))return\" if(\"number\"=\"==typeof\" t)for(n=\"new\" array(t),r=\"0;r<t;r++)n[r]=e(r+1,r);else\" if(c(t))if(pt&&t[symbol.iterator]){n=\"[];var\" u=\"t[Symbol.iterator](),f=u.next();while(!f.done)n.push(e(f.value,n.length)),f=u.next()}else\" for(a=\"Object.keys(t),n=new\" array(a.length),r=\"0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r);return\" o(n)||(n=\"[]),n._isVList=!0,n}function\" fe(t,e,n,r){var o,i=\"this.$scopedSlots[t];i?(n=n||{},r&&(n=T(T({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var\" a=\"n&&n.slot;return\" a?this.$createelement(\"template\",{slot:a},o):o}function le(t){return xt(this.$options,\"filters\",t,!0)||n}function re(t,e){return array.isarray(t)?-1=\"==t.indexOf(e):t!==e}function\" ue(t,e,n,r,o){var i=\"B.keyCodes[e]||n;return\" o&&r&&!b.keycodes[e]?re(o,r):i?re(i,t):r?$(r)!=\"=e:void\" 0}function ze(t,e,n,r,o){if(n)if(c(n)){var i;array.isarray(n)&&(n=\"I(n));var\" s=\"t.attrs&&t.attrs.type;i=r||B.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var\" c=\"O(a),u=$(a);if(!(c\" in i)&&!(u i)&&(i[a]=\"n[a],o)){var\" f=\"t.on||(t.on={});f[\"update:\"+a]=function(t){n[a]=t}}};for(var\" n)a(s)}else;return t}function be(t,e){var n=\"this._staticTrees||(this._staticTrees=[]),r=n[t];return\" r&&!e||(r=\"n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),He(r,\"__static__\"+t,!1)),r}function\" ve(t,e,n){return he(t,\"__once__\"+e+(n?\"_\"+n:\"\"),!0),t}function he(t,e,n){if(array.isarray(t))for(var r=\"0;r<t.length;r++)t[r]&&\"string\"!==typeof\" t[r]&&we(t[r],e+\"_\"+r,n);else we(t,e,n)}function we(t,e,n){t.isstatic=\"!0,t.key=e,t.isOnce=n}function\" qe(t,e){if(e)if(f(e)){var e){var o=\"n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return\" ge(t,e,n,r){e=\"e||{$stable:!n};for(var\" r&&(e.$key=\"r),e}function\" ke(t,e){for(var r&&r&&(t[e[n]]=\"e[n+1])}return\" xe(t,e){return\"string\"=\"==typeof\" t?e+t:t}function je(t){t._o=\"Ve,t._n=h,t._s=v,t._l=Me,t._t=Fe,t._q=M,t._i=F,t._m=Be,t._f=Le,t._k=Ue,t._b=ze,t._v=xt,t._e=wt,t._u=Ge,t._g=qe,t._d=Ke,t._p=Xe}function\" ye(t,e,r,o,a){var s,c=\"this,u=a.options;_(o,\"_uid\")?(s=Object.create(o),s._original=o):(s=o,o=o._original);var\" c.$slots||pe(t.scopedslots,c.$slots=\"Te(r,o)),c.$slots},Object.defineProperty(this,\"scopedSlots\",{enumerable:!0,get:function(){return\" pe(t.scopedslots,this.slots())}}),f&&(this.$options=\"u,this.$slots=this.slots(),this.$scopedSlots=Pe(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var\" i&&!array.isarray(i)&&(i.fnscopeid=\"u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return\" ln(s,t,e,n,r,l)}}function ze(t,e,r,i,a){var u)c[f]=\"Jt(f,u,e||n);else\" o(r.attrs)&&tn(c,r.attrs),o(r.props)&&tn(c,r.props);var l=\"new\" ye(r,c,a,i,t),p=\"s.render.call(null,l._c,l);if(p\" instanceof bt)return qe(p,r,l.parent,s,l);if(array.isarray(p)){for(var d=\"Ce(p)||[],v=new\" array(d.length),h=\"0;h<d.length;h++)v[h]=Qe(d[h],r,l.parent,s,l);return\" v}}function qe(t,e,n,r,o){var i.fncontext=\"n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function\" tn(t,e){for(var e)t[o(n)]=\"e[n]}Je(Ye.prototype);var\" en=\"{init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var\" 0,e)}},prepatch:function(t,e){var e=\"t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,Rn(n,\"mounted\")),t.data.keepAlive&&(e._isMounted?Zn(n):Fn(n,!0))},destroy:function(t){var\" rn(t,e,n,a,s){if(!r(t)){var t){var f;if(r(t.cid)&&(f=\"t,t=wn(f,u),void\" _n(f,e,n,a,s);e=\"e||{},wr(t),o(e.model)&&cn(t.options,e);var\" ze(t,l,e,n,a);var p=\"e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var\" v=\"t.options.name||s,h=new\" bt(\"vue-component-\"+t.cid+(v?\"-\"+v:\"\"),e,void 0,void 0,n,{ctor:t,propsdata:l,listeners:p,tag:s,children:a},f);return h}}}function on(t,e){var o(r)&&(n.render=\"r.render,n.staticRenderFns=r.staticRenderFns),new\" t.componentoptions.ctor(n)}function an(t){for(var sn(t,e){var n._merged=\"!0,n}function\" cn(t,e){var un=\"1,fn=2;function\" ln(t,e,n,r,o,a){return(array.isarray(n)||s(n))&&(o=\"r,r=n,n=void\" 0),i(a)&&(o=\"fn),pn(t,e,n,r,o)}function\" pn(t,e,n,r,i){if(o(n)&&o(n.__ob__))return wt();if(o(n)&&o(n.is)&&(e=\"n.is),!e)return\" wt();var a,s,c;(array.isarray(r)&&\"function\"=\"==typeof\" r[0]&&(n=\"n||{},n.scopedSlots={default:r[0]},r.length=0),i===fn?r=Ce(r):i===un&&(r=Ae(r)),\"string\"===typeof\" e)?(s=\"t.$vnode&&t.$vnode.ns||B.getTagNamespace(e),a=B.isReservedTag(e)?new\" bt(b.parseplatformtagname(e),n,r,void 0,t):n&&n.pre||!o(c=\"Xt(t.$options,\"components\",e))?new\" bt(e,n,r,void 0,t):rn(c,n,t,r,e)):a=\"rn(e,n,t,r);return\" array.isarray(a)?a:o(a)?(o(s)&&dn(a,s),o(n)&&vn(n),a):wt()}function dn(t,e,n){if(t.ns=\"e,\"foreignObject\"===t.tag&&(e=void\" 0,n=\"!0),o(t.children))for(var\" vn(t){c(t.style)&&ye(t.style),c(t.class)&&ye(t.class)}function hn(t){t._vnode=\"null,t._staticTrees=null;var\" ln(t,e,n,r,o,!1)},t.$createelement=\"function(e,n,r,o){return\" ln(t,e,n,r,o,!0)};var yn,mn=\"null;function\" gn(t){je(t.prototype),t.prototype.$nexttick=\"function(t){return\" ve(t,this)},t.prototype._render=\"function(){var\" t,e=\"this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=Pe(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{mn=e,t=r.call(e._renderProxy,e.$createElement)}catch(Oa){ee(Oa,e,\"render\"),t=e._vnode}finally{mn=null}return\" array.isarray(t)&&1=\"==t.length&&(t=t[0]),t\" bt||(t=\"wt()),t.parent=o,t}}function\" bn(t,e){return(t.__esmodule||pt&&\"module\"=\"==t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function\" _n(t,e,n,r,o){var i.asyncfactory=\"t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}function\" wn(t,e){if(i(t.error)&&o(t.errorcomp))return t.errorcomp;if(o(t.resolved))return t.resolved;var t.loadingcomp;if(n&&!o(t.owners)){var g(a,n)}));var c(h)&&(d(h)?r(t.resolved)&&h.then(p,v):d(h.component)&&(h.component.then(p,v),o(h.error)&&(t.errorcomp=\"bn(h.error,e)),o(h.loading)&&(t.loadingComp=bn(h.loading,e),0===h.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,l(!1))}),h.delay||200)),o(h.timeout)&&(f=setTimeout((function(){f=null,r(t.resolved)&&v(null)}),h.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}function\" xn(t){return t.iscomment&&t.asyncfactory}function on(t){if(array.isarray(t))for(var n}}function an(t){t._events=\"Object.create(null),t._hasHookEvent=!1;var\" cn(t,e){yn.$on(t,e)}function $n(t,e){yn.$off(t,e)}function function r(){var kn(t,e,n){yn=\"t,_e(e,n||{},Cn,$n,Sn,t),yn=void\" jn(t){var r},t.prototype.$once=\"function(t,e){var\" r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=\"e,n.$on(t,r),n},t.prototype.$off=function(t,e){var\" n._events=\"Object.create(null),n;if(Array.isArray(t)){for(var\" n}var i,a=\"n._events[t];if(!a)return\" n;if(!e)return n._events[t]=\"null,n;var\" n},t.prototype.$emit=\"function(t){var\">1?E(n):n;for(var r=E(arguments,1),o='event handler for \"'+t+'\"',i=0,a=n.length;i<a;i++)ne(n[i],e,r,e,o)}return e}}var en=\"null;function\" tn(t){var e=\"En;return\" in(t){var pn(t){t.prototype._update=\"function(t,e){var\" n=\"this,r=n.$el,o=n._vnode,i=Tn(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var\" t=\"this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var\" dn(t,e,n){var r;return t.$el=\"e,t.$options.render||(t.$options.render=wt),Rn(t,\"beforeMount\"),r=function(){t._update(t._render(),n)},new\" nr(t,r,p,{before:function(){t._ismounted&&!t._isdestroyed&&rn(t,\"beforeupdate\")}},!0),n=\"!1,null==t.$vnode&&(t._isMounted=!0,Rn(t,\"mounted\")),t}function\" nn(t,e,r,o,i){var a=\"o.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||c);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){jt(!1);for(var\" f=\"t._props,l=t.$options._propKeys||[],p=0;p<l.length;p++){var\" d=\"l[p],v=t.$options.props;f[d]=Jt(d,v,e,t)}jt(!0),t.$options.propsData=e}r=r||n;var\" h=\"t.$options._parentListeners;t.$options._parentListeners=r,kn(t,r,h),u&&(t.$slots=Te(i,o.context),t.$forceUpdate())}function\" mn(t){while(t&&(t=\"t.$parent))if(t._inactive)return!0;return!1}function\" fn(t,e){if(e){if(t._directinactive=\"!1,Mn(t))return}else\" if(t._directinactive)return;if(t._inactive||null=\"==t._inactive){t._inactive=!1;for(var\" ln(t,e){if((!e||(t._directinactive=\"!0,!Mn(t)))&&!t._inactive){t._inactive=!0;for(var\" rn(t,e){mt();var hook\";if(n)for(var o=\"0,i=n.length;o<i;o++)ne(n[o],t,null,t,r);t._hasHookEvent&&t.$emit(\"hook:\"+e),gt()}var\" un=\"[],zn=[],Bn={},Vn=!1,Hn=!1,Wn=0;function\" qn(){wn=\"Un.length=zn.length=0,Bn={},Vn=Hn=!1}var\" gn=\"0,Kn=Date.now;if(J&&!tt){var\" xn=\"window.performance;Xn&&\"function\"===typeof\" xn.now&&kn()>document.createEvent(\"Event\").timeStamp&&(Kn=function(){return Xn.now()})}function Jn(){var t,e;for(Gn=Kn(),Hn=!0,Un.sort((function(t,e){return t.id-e.id})),Wn=0;Wn<Un.length;Wn++)t=Un[Wn],t.before&&t.before(),e=t.id,Bn[e]=null,t.run();var n=\"zn.slice(),r=Un.slice();qn(),Qn(n),Yn(r),ut&&B.devtools&&ut.emit(\"flush\")}function\" yn(t){var e=\"t.length;while(e--){var\" zn(t){t._inactive=\"!1,zn.push(t)}function\" qn(t){for(var tr(t){var>Wn&&Un[n].id>t.id)n--;Un.splice(n+1,0,t)}else Un.push(t);Vn||(Vn=!0,ve(Jn))}}var er=0,nr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++er,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new lt,this.newDepIds=new lt,this.expression=\"\",\"function\"===typeof e?this.getter=e:(this.getter=G(e),this.getter||(this.getter=P)),this.value=this.lazy?void 0:this.get()};nr.prototype.get=function(){var t;mt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(Oa){if(!this.user)throw Oa;ee(Oa,e,'getter for watcher \"'+this.expression+'\"')}finally{this.deep&&ye(t),gt(),this.cleanupDeps()}return t},nr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},nr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},nr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():tr(this)},nr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(Oa){ee(Oa,this.vm,'callback for watcher \"'+this.expression+'\"')}else this.cb.call(this.vm,t,e)}}},nr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},nr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},nr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var rr={enumerable:!0,configurable:!0,get:P,set:P};function or(t,e,n){rr.get=function(){return this[e][n]},rr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,rr)}function ir(t){t._watchers=[];var e=t.$options;e.props&&ar(t,e.props),e.methods&&vr(t,e.methods),e.data?sr(t):Pt(t._data={},!0),e.computed&&fr(t,e.computed),e.watch&&e.watch!==it&&hr(t,e.watch)}function ar(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[],i=!t.$parent;i||jt(!1);var a=function(i){o.push(i);var a=Jt(i,e,n,t);Dt(r,i,a),i in t||or(t,\"_props\",i)};for(var s in e)a(s);jt(!0)}function sr(t){var e=t.$options.data;e=t._data=\"function\"===typeof e?cr(e,t):e||{},f(e)||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);while(o--){var i=n[o];0,r&&_(r,i)||H(i)||or(t,\"_data\",i)}Pt(e,!0)}function cr(t,e){mt();try{return t.call(e,e)}catch(Oa){return ee(Oa,e,\"data()\"),{}}finally{gt()}}var ur={lazy:!0};function fr(t,e){var n=t._computedWatchers=Object.create(null),r=ct();for(var o in e){var i=e[o],a=\"function\"===typeof i?i:i.get;0,r||(n[o]=new nr(t,a||P,P,ur)),o in t||lr(t,o,i)}}function lr(t,e,n){var r=!ct();\"function\"===typeof n?(rr.get=r?pr(e):dr(n),rr.set=P):(rr.get=n.get?r&&!1!==n.cache?pr(e):dr(n.get):P,rr.set=n.set||P),Object.defineProperty(t,e,rr)}function pr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),ht.target&&e.depend(),e.value}}function dr(t){return function(){return t.call(this,this)}}function vr(t,e){t.$options.props;for(var n in e)t[n]=\"function\"!==typeof e[n]?P:j(e[n],t)}function hr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)yr(t,n,r[o]);else yr(t,n,r)}}function yr(t,e,n,r){return f(n)&&(r=\"n,n=n.handler),\"string\"===typeof\" n&&(n=\"t[n]),t.$watch(e,n,r)}function\" mr(t){var e=\"{get:function(){return\" this._data}},n=\"{get:function(){return\" this._props}};object.defineproperty(t.prototype,\"$data\",e),object.defineproperty(t.prototype,\"$props\",n),t.prototype.$set=\"Nt,t.prototype.$delete=Mt,t.prototype.$watch=function(t,e,n){var\" r=\"this;if(f(e))return\" yr(r,t,e,n);n=\"n||{},n.user=!0;var\" o=\"new\" nr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(i){ee(i,r,'callback for immediate watcher \"'+o.expression+'\"')}return function(){o.teardown()}}}var gr=\"0;function\" br(t){t.prototype._init=\"function(t){var\" _r(t,e){var n=\"t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var\" wr(t){var e}function xr(t){var e,n=\"t.options,r=t.sealedOptions;for(var\" in n)n[o]!=\"=r[o]&&(e||(e={}),e[o]=n[o]);return\" or(t){this._init(t)}function ar(t){t.use=\"function(t){var\">-1)return this;var n=E(arguments,1);return n.unshift(this),\"function\"===typeof t.install?t.install.apply(t,n):\"function\"===typeof t&&t.apply(null,n),e.push(t),this}}function Cr(t){t.mixin=function(t){return this.options=Kt(this.options,t),this}}function $r(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=Kt(n.options,t),a[\"super\"]=n,a.options.props&&Sr(a),a.options.computed&&kr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,U.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=T({},a.options),o[r]=a,a}}function Sr(t){var e=t.options.props;for(var n in e)or(t.prototype,\"_props\",n)}function kr(t){var e=t.options.computed;for(var n in e)lr(t.prototype,n,e[n])}function jr(t){U.forEach((function(e){t[e]=function(t,n){return n?(\"component\"===e&&f(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),\"directive\"===e&&\"function\"===typeof n&&(n={bind:n,update:n}),this.options[e+\"s\"][t]=n,n):this.options[e+\"s\"][t]}}))}function Er(t){return t&&(t.Ctor.options.name||t.tag)}function Tr(t,e){return Array.isArray(t)?t.indexOf(e)>-1:\"string\"===typeof t?t.split(\",\").indexOf(e)>-1:!!l(t)&&t.test(e)}function Ir(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=Er(a.componentOptions);s&&!e(s)&&Pr(n,i,r,o)}}}function Pr(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,g(n,e)}br(Or),mr(Or),jn(Or),Pn(Or),gn(Or);var Dr=[String,RegExp,Array],Nr={name:\"keep-alive\",abstract:!0,props:{include:Dr,exclude:Dr,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Pr(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch(\"include\",(function(e){Ir(t,(function(t){return Tr(e,t)}))})),this.$watch(\"exclude\",(function(e){Ir(t,(function(t){return!Tr(e,t)}))}))},render:function(){var t=this.$slots.default,e=On(t),n=e&&e.componentOptions;if(n){var r=Er(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!Tr(i,r))||a&&r&&Tr(a,r))return e;var s=this,c=s.cache,u=s.keys,f=null==e.key?n.Ctor.cid+(n.tag?\"::\"+n.tag:\"\"):e.key;c[f]?(e.componentInstance=c[f].componentInstance,g(u,f),u.push(f)):(c[f]=e,u.push(f),this.max&&u.length>parseInt(this.max)&&Pr(c,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},Mr={KeepAlive:Nr};function Fr(t){var e={get:function(){return B}};Object.defineProperty(t,\"config\",e),t.util={warn:dt,extend:T,mergeOptions:Kt,defineReactive:Dt},t.set=Nt,t.delete=Mt,t.nextTick=ve,t.observable=function(t){return Pt(t),t},t.options=Object.create(null),U.forEach((function(e){t.options[e+\"s\"]=Object.create(null)})),t.options._base=t,T(t.options.components,Mr),Ar(t),Cr(t),$r(t),jr(t)}Fr(Or),Object.defineProperty(Or.prototype,\"$isServer\",{get:ct}),Object.defineProperty(Or.prototype,\"$ssrContext\",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Or,\"FunctionalRenderContext\",{value:Ye}),Or.version=\"2.6.12\";var Lr=y(\"style,class\"),Rr=y(\"input,textarea,option,select,progress\"),Ur=function(t,e,n){return\"value\"===n&&Rr(t)&&\"button\"!==e||\"selected\"===n&&\"option\"===t||\"checked\"===n&&\"input\"===t||\"muted\"===n&&\"video\"===t},zr=y(\"contenteditable,draggable,spellcheck\"),Br=y(\"events,caret,typing,plaintext-only\"),Vr=function(t,e){return Kr(e)||\"false\"===e?\"false\":\"contenteditable\"===t&&Br(e)?e:\"true\"},Hr=y(\"allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible\"),Wr=\"http://www.w3.org/1999/xlink\",qr=function(t){return\":\"===t.charAt(5)&&\"xlink\"===t.slice(0,5)},Gr=function(t){return qr(t)?t.slice(6,t.length):\"\"},Kr=function(t){return null==t||!1===t};function Xr(t){var e=t.data,n=t,r=t;while(o(r.componentInstance))r=r.componentInstance._vnode,r&&r.data&&(e=Jr(r.data,e));while(o(n=n.parent))n&&n.data&&(e=Jr(e,n.data));return Yr(e.staticClass,e.class)}function Jr(t,e){return{staticClass:Zr(t.staticClass,e.staticClass),class:o(t.class)?[t.class,e.class]:e.class}}function Yr(t,e){return o(t)||o(e)?Zr(t,Qr(e)):\"\"}function Zr(t,e){return t?e?t+\" \"+e:t:e||\"\"}function Qr(t){return Array.isArray(t)?to(t):c(t)?eo(t):\"string\"===typeof t?t:\"\"}function to(t){for(var e,n=\"\",r=0,i=t.length;r<i;r++)o(e=Qr(t[r]))&&\"\"!==e&&(n&&(n+=\" \"),n+=\"e);return\" n}function eo(t){var e ;for(var n in t)t[n]&&(e&&(e+=\" \" ),e+=\"n);return\" e}var no=\"{svg:\"http://www.w3.org/2000/svg\",math:\"http://www.w3.org/1998/Math/MathML\"},ro=y(\"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot\"),oo=y(\"svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view\",!0),io=function(t){return\" ro(t)||oo(t)};function ao(t){return oo(t)?\"svg\":\"math\"=\"==t?\"math\":void\" 0}var so=\"Object.create(null);function\" co(t){if(!j)return!0;if(io(t))return!1;if(t=\"t.toLowerCase(),null!=so[t])return\" so[t];var t.indexof(\"-\")>-1?so[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:so[t]=/HTMLUnknownElement/.test(e.toString())}var uo=y(\"text,number,password,search,email,tel,url\");function fo(t){if(\"string\"===typeof t){var e=document.querySelector(t);return e||document.createElement(\"div\")}return t}function lo(t,e){var n=document.createElement(t);return\"select\"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute(\"multiple\",\"multiple\"),n}function po(t,e){return document.createElementNS(no[t],e)}function vo(t){return document.createTextNode(t)}function ho(t){return document.createComment(t)}function yo(t,e,n){t.insertBefore(e,n)}function mo(t,e){t.removeChild(e)}function go(t,e){t.appendChild(e)}function bo(t){return t.parentNode}function _o(t){return t.nextSibling}function wo(t){return t.tagName}function xo(t,e){t.textContent=e}function Oo(t,e){t.setAttribute(e,\"\")}var Ao=Object.freeze({createElement:lo,createElementNS:po,createTextNode:vo,createComment:ho,insertBefore:yo,removeChild:mo,appendChild:go,parentNode:bo,nextSibling:_o,tagName:wo,setTextContent:xo,setStyleScope:Oo}),Co={create:function(t,e){$o(e)},update:function(t,e){t.data.ref!==e.data.ref&&($o(t,!0),$o(e))},destroy:function(t){$o(t,!0)}};function $o(t,e){var n=t.data.ref;if(o(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?g(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var so=\"new\" bt(\"\",{},[]),ko=\"[\"create\",\"activate\",\"update\",\"remove\",\"destroy\"];function\" jo(t,e){return t.key=\"==e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&o(t.data)===o(e.data)&&Eo(t,e)||i(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function\" eo(t,e){if(\"input\"!=\"=t.tag)return!0;var\" n,r=\"o(n=t.data)&&o(n=n.attrs)&&n.type,i=o(n=e.data)&&o(n=n.attrs)&&n.type;return\" r=\"==i||uo(r)&&uo(i)}function\" to(t,e,n){var r,i,a=\"{};for(r=e;r<=n;++r)i=t[r].key,o(i)&&(a[i]=r);return\" a}function io(t){var e,n,a=\"{},c=t.modules,u=t.nodeOps;for(e=0;e<ko.length;++e)for(a[ko[e]]=[],n=0;n<c.length;++n)o(c[n][ko[e]])&&a[ko[e]].push(c[n][ko[e]]);function\" f(t){return new bt(u.tagname(t).tolowercase(),{},[],void 0,t)}function l(t,e){function n(){0=\"==--n.listeners&&p(t)}return\" n.listeners=\"e,n}function\" p(t){var e=\"u.parentNode(t);o(e)&&u.removeChild(e,t)}function\" d(t,e,n,r,a,s,c){if(o(t.elm)&&o(s)&&(t=\"s[c]=Ot(t)),t.isRootInsert=!a,!v(t,e,n,r)){var\" f=\"t.data,l=t.children,p=t.tag;o(p)?(t.elm=t.ns?u.createElementNS(t.ns,p):u.createElement(p,t),x(t),b(t,l,e),o(f)&&w(t,e),g(n,t.elm,r)):i(t.isComment)?(t.elm=u.createComment(t.text),g(n,t.elm,r)):(t.elm=u.createTextNode(t.text),g(n,t.elm,r))}}function\" v(t,e,n,r){var a=\"t.data;if(o(a)){var\" s=\"o(t.componentInstance)&&a.keepAlive;if(o(a=a.hook)&&o(a=a.init)&&a(t,!1),o(t.componentInstance))return\" h(t,e),g(n,t.elm,r),i(s)&&m(t,e,n,r),!0}}function h(t,e){o(t.data.pendinginsert)&&(e.push.apply(e,t.data.pendinginsert),t.data.pendinginsert=\"null),t.elm=t.componentInstance.$el,_(t)?(w(t,e),x(t)):($o(t),e.push(t))}function\" m(t,e,n,r){var i,s=\"t;while(s.componentInstance)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i](So,s);e.push(s);break}g(n,t.elm,r)}function\" g(t,e,n){o(t)&&(o(n)?u.parentnode(n)=\"==t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function\" b(t,e,n){if(array.isarray(e)){0;for(var s(t.text)&&u.appendchild(t.elm,u.createtextnode(string(t.text)))}function _(t){while(t.componentinstance)t=\"t.componentInstance._vnode;return\" o(t.tag)}function w(t,n){for(var x(t){var e;if(o(e=\"t.fnScopeId))u.setStyleScope(t.elm,e);else{var\" n=\"t;while(n)o(e=n.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent}o(e=En)&&e!==t.context&&e!==t.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function\" o(t,e,n,r,o,i){for(;r<=\"o;++r)d(n[r],i,t,e,!1,n,r)}function\" a(t){var e,n,r=\"t.data;if(o(r))for(o(e=r.hook)&&o(e=e.destroy)&&e(t),e=0;e<a.destroy.length;++e)a.destroy[e](t);if(o(e=t.children))for(n=0;n<t.children.length;++n)A(t.children[n])}function\" c(t,e,n){for(;e<=\"n;++e){var\" $(t,e){if(o(e)||o(t.data)){var p(t.elm)}function s(t,e,n,i,a){var s,c,f,l,p=\"0,v=0,h=e.length-1,y=e[0],m=e[h],g=n.length-1,b=n[0],_=n[g],w=!a;while(p<=h&&v<=g)r(y)?y=e[++p]:r(m)?m=e[--h]:jo(y,b)?(j(y,b,i,n,v),y=e[++p],b=n[++v]):jo(m,_)?(j(m,_,i,n,g),m=e[--h],_=n[--g]):jo(y,_)?(j(y,_,i,n,g),w&&u.insertBefore(t,y.elm,u.nextSibling(m.elm)),y=e[++p],_=n[--g]):jo(m,b)?(j(m,b,i,n,v),w&&u.insertBefore(t,m.elm,y.elm),m=e[--h],b=n[++v]):(r(s)&&(s=To(e,p,h)),c=o(b.key)?s[b.key]:k(b,e,p,h),r(c)?d(b,i,t,y.elm,!1,n,v):(f=e[c],jo(f,b)?(j(f,b,i,n,v),e[c]=void\" 0,w&&u.insertbefore(t,f.elm,y.elm)):d(b,i,t,y.elm,!1,n,v)),b=\"n[++v]);p\">h?(l=r(n[g+1])?null:n[g+1].elm,O(t,l,n,v,g,i)):v>g&&C(e,p,h)}function k(t,e,n,r){for(var i=n;i<r;i++){var a=\"e[i];if(o(a)&&jo(t,a))return\" i}}function j(t,e,n,s,c,f){if(t!=\"=e){o(e.elm)&&o(s)&&(e=s[c]=Ot(e));var\" l=\"e.elm=t.elm;if(i(t.isAsyncPlaceholder))o(e.asyncFactory.resolved)?I(t.elm,e,n):e.isAsyncPlaceholder=!0;else\" if(i(e.isstatic)&&i(t.isstatic)&&e.key=\"==t.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=t.componentInstance;else{var\" p,d=\"e.data;o(d)&&o(p=d.hook)&&o(p=p.prepatch)&&p(t,e);var\" v=\"t.children,h=e.children;if(o(d)&&_(e)){for(p=0;p<a.update.length;++p)a.update[p](t,e);o(p=d.hook)&&o(p=p.update)&&p(t,e)}r(e.text)?o(v)&&o(h)?v!==h&&S(l,v,h,n,f):o(h)?(o(t.text)&&u.setTextContent(l,\"\"),O(l,null,h,0,h.length-1,n)):o(v)?C(v,0,v.length-1):o(t.text)&&u.setTextContent(l,\"\"):t.text!==e.text&&u.setTextContent(l,e.text),o(d)&&o(p=d.hook)&&o(p=p.postpatch)&&p(t,e)}}}function\" e(t,e,n){if(i(n)&&o(t.parent))t.parent.data.pendinginsert=\"e;else\" for(var r=\"0;r<e.length;++r)e[r].data.hook.insert(e[r])}var\" t=\"y(\"attrs,class,staticClass,staticStyle,key\");function\" i(t,e,n,r){var a,s=\"e.tag,c=e.data,u=e.children;if(r=r||c&&c.pre,e.elm=t,i(e.isComment)&&o(e.asyncFactory))return\" e.isasyncplaceholder=\"!0,!0;if(o(c)&&(o(a=c.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return\" h(e,n),!0;if(o(s)){if(o(u))if(t.haschildnodes())if(o(a=\"c)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var\" f=\"!0,l=t.firstChild,p=0;p<u.length;p++){if(!l||!I(l,u[p],n,r)){f=!1;break}l=l.nextSibling}if(!f||l)return!1}else\" b(e,u,n);if(o(c)){var d=\"!1;for(var\" in c)if(!t(v)){d=\"!0,w(e,n);break}!d&&c[\"class\"]&&ye(c[\"class\"])}}else\" t.data!=\"=e.text&&(t.data=e.text);return!0}return\" function(t,e,n,s){if(!r(e)){var c=\"!1,l=[];if(r(t))c=!0,d(e,l);else{var\" p=\"o(t.nodeType);if(!p&&jo(t,e))j(t,e,l,null,null,s);else{if(p){if(1===t.nodeType&&t.hasAttribute(R)&&(t.removeAttribute(R),n=!0),i(n)&&I(t,e,l))return\" e(e,l,!0),t;t=\"f(t)}var\" y=\"e.parent,m=_(e);while(y){for(var\" g=\"0;g<a.destroy.length;++g)a.destroy[g](y);if(y.elm=e.elm,m){for(var\" b=\"0;b<a.create.length;++b)a.create[b](So,y);var\" w=\"y.data.hook.insert;if(w.merged)for(var\" x=\"1;x<w.fns.length;x++)w.fns[x]()}else\" $o(y);y=\"y.parent}}o(h)?C([t],0,0):o(t.tag)&&A(t)}}return\" e(e,l,c),e.elm}o(t)&&a(t)}}var po=\"{create:Do,update:Do,destroy:function(t){Do(t,So)}};function\" do(t,e){(t.data.directives||e.data.directives)&&no(t,e)}function no(t,e){var n,r,o,i=\"t===So,a=e===So,s=Fo(t.data.directives,t.context),c=Fo(e.data.directives,e.context),u=[],f=[];for(n\" c)r=\"s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Ro(o,\"update\",e,t),o.def&&o.def.componentUpdated&&f.push(o)):(Ro(o,\"bind\",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var\" n=\"0;n<u.length;n++)Ro(u[n],\"inserted\",e,t)};i?we(e,\"insert\",l):l()}if(f.length&&we(e,\"postpatch\",(function(){for(var\" s)c[n]||ro(s[n],\"unbind\",t,t,a)}var mo=\"Object.create(null);function\" fo(t,e){var n,r,o=\"Object.create(null);if(!t)return\" o;for(n=\"0;n<t.length;n++)r=t[n],r.modifiers||(r.modifiers=Mo),o[Lo(r)]=r,r.def=Xt(e.$options,\"directives\",r.name,!0);return\" o}function lo(t){return t.rawname||t.name+\".\"+object.keys(t.modifiers||{}).join(\".\")}function ro(t,e,n,r,o){var i=\"t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(Oa){ee(Oa,n.context,\"directive\" \"+t.name+\" \"+e+\" hook\")}}var uo=\"[Co,Po];function\" zo(t,e){var i,a,s,c=\"e.elm,u=t.data.attrs||{},f=e.data.attrs||{};for(i\" o(f.__ob__)&&(f=\"e.data.attrs=T({},f)),f)a=f[i],s=u[i],s!==a&&Bo(c,i,a);for(i\" in(tt||nt)&&f.value!=\"=u.value&&Bo(c,\"value\",f.value),u)r(f[i])&&(qr(i)?c.removeAttributeNS(Wr,Gr(i)):zr(i)||c.removeAttribute(i))}}function\" bo(t,e,n){t.tagname.indexof(\"-\")>-1?Vo(t,e,n):Hr(e)?Kr(n)?t.removeAttribute(e):(n=\"allowfullscreen\"===e&&\"EMBED\"===t.tagName?\"true\":e,t.setAttribute(e,n)):zr(e)?t.setAttribute(e,Vr(e,n)):qr(e)?Kr(n)?t.removeAttributeNS(Wr,Gr(e)):t.setAttributeNS(Wr,e,n):Vo(t,e,n)}function Vo(t,e,n){if(Kr(n))t.removeAttribute(e);else{if(tt&&!et&&\"TEXTAREA\"===t.tagName&&\"placeholder\"===e&&\"\"!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener(\"input\",r)};t.addEventListener(\"input\",r),t.__ieph=!0}t.setAttribute(e,n)}}var Ho={create:zo,update:zo};function Wo(t,e){var n=e.elm,i=e.data,a=t.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=Xr(e),c=n._transitionClasses;o(c)&&(s=Zr(s,Qr(c))),s!==n._prevClass&&(n.setAttribute(\"class\",s),n._prevClass=s)}}var qo,Go={create:Wo,update:Wo},Ko=\"__r\",Xo=\"__c\";function Jo(t){if(o(t[Ko])){var e=tt?\"change\":\"input\";t[e]=[].concat(t[Ko],t[e]||[]),delete t[Ko]}o(t[Xo])&&(t.change=[].concat(t[Xo],t.change||[]),delete t[Xo])}function Yo(t,e,n){var r=qo;return function o(){var i=e.apply(null,arguments);null!==i&&ti(t,o,n,r)}}var Zo=ae&&!(ot&&Number(ot[1])<=53);function qo(t,e,n,r){if(zo){var o=\"Gn,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp\">=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}qo.addeventlistener(t,e,at?{capture:n,passive:r}:n)}function ti(t,e,n,r){(r||qo).removeeventlistener(t,e._wrapper||e,n)}function ei(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=\"e.data.on||{},o=t.data.on||{};qo=e.elm,Jo(n),_e(n,o,Qo,ti,Yo,e.context),qo=void\" 0}}var ni,ri=\"{create:ei,update:ei};function\" oi(t,e){if(!r(t.data.domprops)||!r(e.data.domprops)){var n,i,a=\"e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n\" in o(c.__ob__)&&(c=\"e.data.domProps=T({},c)),s)n\" c||(a[n] );for(n c){if(i=\"c[n],\"textContent\"===n||\"innerHTML\"===n){if(e.children&&(e.children.length=0),i===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if(\"value\"===n&&\"PROGRESS\"!==a.tagName){a._value=i;var\" u=\"r(i)?\"\":String(i);ii(a,u)&&(a.value=u)}else\" if(\"innerhtml\"=\"==n&&oo(a.tagName)&&r(a.innerHTML)){ni=ni||document.createElement(\"div\"),ni.innerHTML=\"<svg\">\"+i+\"\";var f=ni.firstChild;while(a.firstChild)a.removeChild(a.firstChild);while(f.firstChild)a.appendChild(f.firstChild)}else if(i!==s[n])try{a[n]=i}catch(Oa){}}}}function ii(t,e){return!t.composing&&(\"OPTION\"===t.tagName||ai(t,e)||si(t,e))}function ai(t,e){var n=!0;try{n=document.activeElement!==t}catch(Oa){}return n&&t.value!==e}function si(t,e){var n=t.value,r=t._vModifiers;if(o(r)){if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}var ci={create:oi,update:oi},ui=w((function(t){var e={},n=/;(?![^(]*\\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function fi(t){var e=li(t.style);return t.staticStyle?T(t.staticStyle,e):e}function li(t){return Array.isArray(t)?I(t):\"string\"===typeof t?ui(t):t}function pi(t,e){var n,r={};if(e){var o=t;while(o.componentInstance)o=o.componentInstance._vnode,o&&o.data&&(n=fi(o.data))&&T(r,n)}(n=fi(t.data))&&T(r,n);var i=t;while(i=i.parent)i.data&&(n=fi(i.data))&&T(r,n);return r}var di,vi=/^--/,hi=/\\s*!important$/,yi=function(t,e,n){if(vi.test(e))t.style.setProperty(e,n);else if(hi.test(n))t.style.setProperty($(e),n.replace(hi,\"\"),\"important\");else{var r=gi(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=\"n}},mi=[\"Webkit\",\"Moz\",\"ms\"],gi=w((function(t){if(di=di||document.createElement(\"div\").style,t=O(t),\"filter\"!==t&&t\" in di)return t;for(var e=\"t.charAt(0).toUpperCase()+t.slice(1),n=0;n<mi.length;n++){var\" r=\"mi[n]+e;if(r\" r}}));function bi(t,e){var n=\"e.data,i=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var\" a,s,c=\"e.elm,u=i.staticStyle,f=i.normalizedStyle||i.style||{},l=u||f,p=li(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?T({},p):p;var\" d=\"pi(e,!0);for(s\" l)r(d[s])&&yi(c,s,\"\");for(s d)a=\"d[s],a!==l[s]&&yi(c,s,null==a?\"\":a)}}var\" _i=\"{create:bi,update:bi},wi=/\\s+/;function\" xi(t,e){if(e&&(e=\"e.trim()))if(t.classList)e.indexOf(\"\" \")>-1?e.split(wi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \";n.indexOf(\" \"+e+\" \")<0&&t.setAttribute(\"class\",(n+e).trim())}}function oi(t,e){if(e&&(e=\"e.trim()))if(t.classList)e.indexOf(\"\" \")>-1?e.split(wi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute(\"class\");else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \",r=\" \"+e+\" \";while(n.indexOf(r)>=0)n=n.replace(r,\" \");n=n.trim(),n?t.setAttribute(\"class\",n):t.removeAttribute(\"class\")}}function Ai(t){if(t){if(\"object\"===typeof t){var e={};return!1!==t.css&&T(e,Ci(t.name||\"v\")),T(e,t),e}return\"string\"===typeof t?Ci(t):void 0}}var Ci=w((function(t){return{enterClass:t+\"-enter\",enterToClass:t+\"-enter-to\",enterActiveClass:t+\"-enter-active\",leaveClass:t+\"-leave\",leaveToClass:t+\"-leave-to\",leaveActiveClass:t+\"-leave-active\"}})),$i=J&&!et,Si=\"transition\",ki=\"animation\",ji=\"transition\",Ei=\"transitionend\",Ti=\"animation\",Ii=\"animationend\";$i&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ji=\"WebkitTransition\",Ei=\"webkitTransitionEnd\"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ti=\"WebkitAnimation\",Ii=\"webkitAnimationEnd\"));var Pi=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Di(t){Pi((function(){Pi(t)}))}function Ni(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),xi(t,e))}function mi(t,e){t._transitionclasses&&g(t._transitionclasses,e),oi(t,e)}function fi(t,e,n){var r=\"Ri(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return\" n();var s=\"o===Si?Ei:Ii,c=0,u=function(){t.removeEventListener(s,f),n()},f=function(e){e.target===t&&++c\">=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,f)}var li=\"/\\b(transform|all)(,|$)/;function\" ri(t,e){var n,r=\"window.getComputedStyle(t),o=(r[ji+\"Delay\"]||\"\").split(\",\" \"),i=\"(r[ji+\"Duration\"]||\"\").split(\",\" \"),a=\"Ui(o,i),s=(r[Ti+\"Delay\"]||\"\").split(\",\" \"),c=\"(r[Ti+\"Duration\"]||\"\").split(\",\" \"),u=\"Ui(s,c),f=0,l=0;e===Si?a\">0&&(n=Si,f=a,l=i.length):e===ki?u>0&&(n=ki,f=u,l=c.length):(f=Math.max(a,u),n=f>0?a>u?Si:ki:null,l=n?n===Si?i.length:c.length:0);var p=n===Si&&Li.test(r[ji+\"Property\"]);return{type:n,timeout:f,propCount:l,hasTransform:p}}function Ui(t,e){while(t.length<e.length)t=t.concat(t);return math.max.apply(null,e.map((function(e,n){return zi(e)+zi(t[n])})))}function zi(t){return 1e3*number(t.slice(0,-1).replace(\",\",\".\"))}function bi(t,e){var n=\"t.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var\" i=\"Ai(t.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){var\" a=\"i.css,s=i.type,u=i.enterClass,f=i.enterToClass,l=i.enterActiveClass,p=i.appearClass,d=i.appearToClass,v=i.appearActiveClass,y=i.beforeEnter,m=i.enter,g=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,w=i.appear,x=i.afterAppear,O=i.appearCancelled,A=i.duration,C=En,$=En.$vnode;while($&&$.parent)C=$.context,$=$.parent;var\" s=\"!C._isMounted||!t.isRootInsert;if(!S||w||\"\"===w){var\" k=\"S&&p?p:u,j=S&&v?v:l,E=S&&d?d:f,T=S&&_||y,I=S&&\"function\"===typeof\" w?w:m,p=\"S&&x||g,D=S&&O||b,N=h(c(A)?A.enter:A);0;var\" m=\"!1!==a&&!et,F=Wi(I),R=n._enterCb=L((function(){M&&(Mi(n,E),Mi(n,j)),R.cancelled?(M&&Mi(n,k),D&&D(n)):P&&P(n),n._enterCb=null}));t.data.show||we(t,\"insert\",(function(){var\" e=\"n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(n,R)})),T&&T(n),M&&(Ni(n,k),Ni(n,j),Di((function(){Mi(n,k),R.cancelled||(Ni(n,E),F||(Hi(N)?setTimeout(R,N):Fi(n,s,R)))}))),t.data.show&&(e&&e(),I&&I(n,R)),M||F||R()}}}function\" vi(t,e){var e();if(!o(n._leavecb)){var x=\"n._leaveCb=L((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(Mi(n,f),Mi(n,l)),x.cancelled?(b&&Mi(n,u),y&&y(n)):(e(),v&&v(n)),n._leaveCb=null}));m?m(O):O()}function\" o(){x.cancelled||(!t.data.show&&n.parentnode&&((n.parentnode._pending||(n.parentnode._pending=\"{}))[t.key]=t),p&&p(n),b&&(Ni(n,u),Ni(n,l),Di((function(){Mi(n,u),x.cancelled||(Ni(n,f),_||(Hi(w)?setTimeout(x,w):Fi(n,s,x)))}))),d&&d(n,x),b||_||x())}}function\" hi(t){return\"number\"=\"==typeof\" t&&!isnan(t)}function wi(t){if(r(t))return!1;var o(e)?wi(array.isarray(e)?e[0]:e):(t._length||t.length)>1}function qi(t,e){!0!==e.data.show&&Bi(e)}var Gi=J?{create:qi,activate:qi,remove:function(t,e){!0!==t.data.show?Vi(t,e):e()}}:{},Ki=[Ho,Go,ri,ci,_i,Gi],Xi=Ki.concat(Uo),Ji=Io({nodeOps:Ao,modules:Xi});et&&document.addEventListener(\"selectionchange\",(function(){var t=document.activeElement;t&&t.vmodel&&oa(t,\"input\")}));var Yi={inserted:function(t,e,n,r){\"select\"===n.tag?(r.elm&&!r.elm._vOptions?we(n,\"postpatch\",(function(){Yi.componentUpdated(t,e,n)})):Zi(t,e,n.context),t._vOptions=[].map.call(t.options,ea)):(\"textarea\"===n.tag||uo(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener(\"compositionstart\",na),t.addEventListener(\"compositionend\",ra),t.addEventListener(\"change\",ra),et&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if(\"select\"===n.tag){Zi(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,ea);if(o.some((function(t,e){return!M(t,r[e])}))){var i=t.multiple?e.value.some((function(t){return ta(t,o)})):e.value!==e.oldValue&&ta(e.value,o);i&&oa(t,\"change\")}}}};function Zi(t,e,n){Qi(t,e,n),(tt||nt)&&setTimeout((function(){Qi(t,e,n)}),0)}function Qi(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=F(r,ea(a))>-1,a.selected!==i&&(a.selected=i);else if(M(ea(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function ta(t,e){return e.every((function(e){return!M(e,t)}))}function ea(t){return\"_value\"in t?t._value:t.value}function na(t){t.target.composing=!0}function ra(t){t.target.composing&&(t.target.composing=!1,oa(t.target,\"input\"))}function oa(t,e){var n=document.createEvent(\"HTMLEvents\");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function ia(t){return!t.componentInstance||t.data&&t.data.transition?t:ia(t.componentInstance._vnode)}var aa={bind:function(t,e,n){var r=e.value;n=ia(n);var o=n.data&&n.data.transition,i=t.__vOriginalDisplay=\"none\"===t.style.display?\"\":t.style.display;r&&o?(n.data.show=!0,Bi(n,(function(){t.style.display=i}))):t.style.display=r?i:\"none\"},update:function(t,e,n){var r=e.value,o=e.oldValue;if(!r!==!o){n=ia(n);var i=n.data&&n.data.transition;i?(n.data.show=!0,r?Bi(n,(function(){t.style.display=t.__vOriginalDisplay})):Vi(n,(function(){t.style.display=\"none\"}))):t.style.display=r?t.__vOriginalDisplay:\"none\"}},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}},sa={model:Yi,show:aa},ca={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ua(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ua(On(e.children)):t}function fa(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[O(i)]=o[i];return e}function la(t,e){if(/\\d-keep-alive$/.test(e.tag))return t(\"keep-alive\",{props:e.componentOptions.propsData})}function pa(t){while(t=t.parent)if(t.data.transition)return!0}function da(t,e){return e.key===t.key&&e.tag===t.tag}var va=function(t){return t.tag||xn(t)},ha=function(t){return\"show\"===t.name},ya={name:\"transition\",props:ca,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(va),n.length)){0;var r=this.mode;0;var o=n[0];if(pa(this.$vnode))return o;var i=ua(o);if(!i)return o;if(this._leaving)return la(t,o);var a=\"__transition-\"+this._uid+\"-\";i.key=null==i.key?i.isComment?a+\"comment\":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=fa(this),u=this._vnode,f=ua(u);if(i.data.directives&&i.data.directives.some(ha)&&(i.data.show=!0),f&&f.data&&!da(i,f)&&!xn(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var l=f.data.transition=T({},c);if(\"out-in\"===r)return this._leaving=!0,we(l,\"afterLeave\",(function(){e._leaving=!1,e.$forceUpdate()})),la(t,o);if(\"in-out\"===r){if(xn(i))return u;var p,d=function(){p()};we(c,\"afterEnter\",d),we(c,\"enterCancelled\",d),we(l,\"delayLeave\",(function(t){p=t}))}}return o}}},ma=T({tag:String,moveClass:String},ca);delete ma.mode;var ga={props:ma,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Tn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||\"span\",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=fa(this),s=0;s<o.length;s++){var c=\"o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf(\"__vlist\"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var\" u=\"[],f=[],l=0;l<r.length;l++){var\" p=\"r[l];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):f.push(p)}this.kept=t(e,null,u),this.removed=f}return\" t(e,null,i)},updated:function(){var t=\"this.prevChildren,e=this.moveClass||(this.name||\"v\")+\"-move\";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(ba),t.forEach(_a),t.forEach(wa),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var\" n=\"t.elm,r=n.style;Ni(n,e),r.transform=r.WebkitTransform=r.transitionDuration=\"\",n.addEventListener(Ei,n._moveCb=function\" t(r){r&&r.target!=\"=n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Ei,t),n._moveCb=null,Mi(n,e))})}})))},methods:{hasMove:function(t,e){if(!$i)return!1;if(this._hasMove)return\" this._hasmove;var r=\"Ri(n);return\" this.$el.removechild(n),this._hasmove=\"r.hasTransform}}};function\" ba(t){t.elm._movecb&&t.elm._movecb(),t.elm._entercb&&t.elm._entercb()}function _a(t){t.data.newpos=\"t.elm.getBoundingClientRect()}function\" wa(t){var e=\"t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var\" i=\"t.elm.style;i.transform=i.WebkitTransform=\"translate(\"+r+\"px,\"+o+\"px)\",i.transitionDuration=\"0s\"}}var\" xa=\"{Transition:ya,TransitionGroup:ga};Or.config.mustUseProp=Ur,Or.config.isReservedTag=io,Or.config.isReservedAttr=Lr,Or.config.getTagNamespace=ao,Or.config.isUnknownElement=co,T(Or.options.directives,sa),T(Or.options.components,xa),Or.prototype.__patch__=J?Ji:P,Or.prototype.$mount=function(t,e){return\" 0,dn(this,t,e)},j&&settimeout((function(){b.devtools&&ut&&ut.emit(\"init\",or)}),0),e[\"a\"]=\"Or}).call(this,n(\"c8ba\"))},\"2cf4\":function(t,e,n){var\" r,o,i,a=\"n(\"da84\"),s=n(\"d039\"),c=n(\"0366\"),u=n(\"1be4\"),f=n(\"cc12\"),l=n(\"1cdc\"),p=n(\"605d\"),d=a.location,v=a.setImmediate,h=a.clearImmediate,y=a.process,m=a.MessageChannel,g=a.Dispatch,b=0,_={},w=\"onreadystatechange\",x=function(t){if(_.hasOwnProperty(t)){var\" _[t],e()}},o=\"function(t){return\" function(){x(t)}},a=\"function(t){x(t.data)},C=function(t){a.postMessage(t+\"\",d.protocol+\"//\"+d.host)};v&&h||(v=function(t){var\">n)e.push(arguments[n++]);return _[++b]=function(){(\"function\"==typeof t?t:Function(t)).apply(void 0,e)},r(b),b},h=function(t){delete _[t]},p?r=function(t){y.nextTick(O(t))}:g&&g.now?r=function(t){g.now(O(t))}:m&&!l?(o=new m,i=o.port2,o.port1.onmessage=A,r=c(i.postMessage,i,1)):a.addEventListener&&\"function\"==typeof postMessage&&!a.importScripts&&d&&\"file:\"!==d.protocol&&!s(C)?(r=C,a.addEventListener(\"message\",A,!1)):r=w in f(\"script\")?function(t){u.appendChild(f(\"script\"))[w]=function(){u.removeChild(this),x(t)}}:function(t){setTimeout(O(t),0)}),t.exports={set:v,clear:h}},\"2d00\":function(t,e,n){var r,o,i=n(\"da84\"),a=n(\"342f\"),s=i.process,c=s&&s.versions,u=c&&c.v8;u?(r=u.split(\".\"),o=r[0]+r[1]):a&&(r=a.match(/Edge\\/(\\d+)/),(!r||r[1]>=74)&&(r=a.match(/Chrome\\/(\\d+)/),r&&(o=r[1]))),t.exports=o&&+o},\"342f\":function(t,e,n){var r=n(\"d066\");t.exports=r(\"navigator\",\"userAgent\")||\"\"},\"35a1\":function(t,e,n){var r=n(\"f5df\"),o=n(\"3f8c\"),i=n(\"b622\"),a=i(\"iterator\");t.exports=function(t){if(void 0!=t)return t[a]||t[\"@@iterator\"]||o[r(t)]}},\"37e8\":function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\"),i=n(\"825a\"),a=n(\"df75\");t.exports=r?Object.defineProperties:function(t,e){i(t);var n,r=a(e),s=r.length,c=0;while(s>c)o.f(t,n=r[c++],e[n]);return t}},\"3bbe\":function(t,e,n){var r=n(\"861d\");t.exports=function(t){if(!r(t)&&null!==t)throw TypeError(\"Can't set \"+String(t)+\" as a prototype\");return t}},\"3f8c\":function(t,e){t.exports={}},\"428f\":function(t,e,n){var r=n(\"da84\");t.exports=r},\"44ad\":function(t,e,n){var r=n(\"d039\"),o=n(\"c6b6\"),i=\"\".split;t.exports=r((function(){return!Object(\"z\").propertyIsEnumerable(0)}))?function(t){return\"String\"==o(t)?i.call(t,\"\"):Object(t)}:Object},\"44d2\":function(t,e,n){var r=n(\"b622\"),o=n(\"7c73\"),i=n(\"9bf2\"),a=r(\"unscopables\"),s=Array.prototype;void 0==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),t.exports=function(t){s[a][t]=!0}},\"44de\":function(t,e,n){var r=n(\"da84\");t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},4840:function(t,e,n){var r=n(\"825a\"),o=n(\"1c0b\"),i=n(\"b622\"),a=i(\"species\");t.exports=function(t,e){var n,i=r(t).constructor;return void 0===i||void 0==(n=r(i)[a])?e:o(n)}},4930:function(t,e,n){var r=n(\"605d\"),o=n(\"2d00\"),i=n(\"d039\");t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},\"4d64\":function(t,e,n){var r=\"n(\"fc6a\"),o=n(\"50c4\"),i=n(\"23cb\"),a=function(t){return\" function(e,n,a){var s,c=\"r(e),u=o(c.length),f=i(a,u);if(t&&n!=n){while(u\">f)if(s=c[f++],s!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},\"50c4\":function(t,e,n){var r=n(\"a691\"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},5135:function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},5692:function(t,e,n){var r=n(\"c430\"),o=n(\"c6cd\");(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.9.1\",mode:r?\"pure\":\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"})},\"56ef\":function(t,e,n){var r=n(\"d066\"),o=n(\"241c\"),i=n(\"7418\"),a=n(\"825a\");t.exports=r(\"Reflect\",\"ownKeys\")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},\"5c6c\":function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},\"605d\":function(t,e,n){var r=n(\"c6b6\"),o=n(\"da84\");t.exports=\"process\"==r(o.process)},\"60da\":function(t,e,n){\"use strict\";var r=n(\"83ab\"),o=n(\"d039\"),i=n(\"df75\"),a=n(\"7418\"),s=n(\"d1e7\"),c=n(\"7b0b\"),u=n(\"44ad\"),f=Object.assign,l=Object.defineProperty;t.exports=!f||o((function(){if(r&&1!==f({b:1},f(l({},\"a\",{enumerable:!0,get:function(){l(this,\"b\",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),o=\"abcdefghijklmnopqrst\";return t[n]=7,o.split(\"\").forEach((function(t){e[t]=t})),7!=f({},t)[n]||i(f({},e)).join(\"\")!=o}))?function(t,e){var n=c(t),o=arguments.length,f=1,l=a.f,p=s.f;while(o>f){var d,v=u(arguments[f++]),h=l?i(v).concat(l(v)):i(v),y=h.length,m=0;while(y>m)d=h[m++],r&&!p.call(v,d)||(n[d]=v[d])}return n}:f},\"65f0\":function(t,e,n){var r=n(\"861d\"),o=n(\"e8b5\"),i=n(\"b622\"),a=i(\"species\");t.exports=function(t,e){var n;return o(t)&&(n=t.constructor,\"function\"!=typeof n||n!==Array&&!o(n.prototype)?r(n)&&(n=n[a],null===n&&(n=void 0)):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},\"69f3\":function(t,e,n){var r,o,i,a=n(\"7f9a\"),s=n(\"da84\"),c=n(\"861d\"),u=n(\"9112\"),f=n(\"5135\"),l=n(\"c6cd\"),p=n(\"f772\"),d=n(\"d012\"),v=s.WeakMap,h=function(t){return i(t)?o(t):r(t,{})},y=function(t){return function(e){var n;if(!c(e)||(n=o(e)).type!==t)throw TypeError(\"Incompatible receiver, \"+t+\" required\");return n}};if(a){var m=l.state||(l.state=new v),g=m.get,b=m.has,_=m.set;r=function(t,e){return e.facade=t,_.call(m,t,e),e},o=function(t){return g.call(m,t)||{}},i=function(t){return b.call(m,t)}}else{var w=p(\"state\");d[w]=!0,r=function(t,e){return e.facade=t,u(t,w,e),e},o=function(t){return f(t,w)?t[w]:{}},i=function(t){return f(t,w)}}t.exports={set:r,get:o,has:i,enforce:h,getterFor:y}},\"6eeb\":function(t,e,n){var r=n(\"da84\"),o=n(\"9112\"),i=n(\"5135\"),a=n(\"ce4e\"),s=n(\"8925\"),c=n(\"69f3\"),u=c.get,f=c.enforce,l=String(String).split(\"String\");(t.exports=function(t,e,n,s){var c,u=!!s&&!!s.unsafe,p=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;\"function\"==typeof n&&(\"string\"!=typeof e||i(n,\"name\")||o(n,\"name\",e),c=f(n),c.source||(c.source=l.join(\"string\"==typeof e?e:\"\"))),t!==r?(u?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=n:o(t,e,n)):p?t[e]=n:a(e,n)})(Function.prototype,\"toString\",(function(){return\"function\"==typeof this&&u(this).source||s(this)}))},7418:function(t,e){e.f=Object.getOwnPropertySymbols},7839:function(t,e){t.exports=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"]},\"7b0b\":function(t,e,n){var r=n(\"1d80\");t.exports=function(t){return Object(r(t))}},\"7c73\":function(t,e,n){var r,o=n(\"825a\"),i=n(\"37e8\"),a=n(\"7839\"),s=n(\"d012\"),c=n(\"1be4\"),u=n(\"cc12\"),f=n(\"f772\"),l=\">\",p=\"<\",d=\"prototype\",v=\"script\",h=f(\"IE_PROTO\"),y=function(){},m=function(t){return 0=\"==e?n:i(n,e)}},\"7dd0\":function(t,e,n){\"use\" p+v+l+t+p+\" \"+v+l},g=\"function(t){t.write(m(\"\")),t.close();var\" e=\"t.parentWindow.Object;return\" t=\"null,e},b=function(){var\" t,e=\"u(\"iframe\"),n=\"java\"+v+\":\";return\" e.style.display=\"none\" ,c.appendchild(e),e.src=\"String(n),t=e.contentWindow.document,t.open(),t.write(m(\"document.F=Object\")),t.close(),t.F},_=function(){try{r=document.domain&&new\" activexobject(\"htmlfile\")}catch(e){}_=\"r?g(r):b();var\" _[d][a[t]];return _()};s[h]=\"!0,t.exports=Object.create||function(t,e){var\" n;return null!=\"=t?(y[d]=o(t),n=new\" y,y[d]=\"null,n[h]=t):n=_(),void\" strict\";var r=\"n(\"23e7\"),o=n(\"9ed3\"),i=n(\"e163\"),a=n(\"d2bb\"),s=n(\"d44e\"),c=n(\"9112\"),u=n(\"6eeb\"),f=n(\"b622\"),l=n(\"c430\"),p=n(\"3f8c\"),d=n(\"ae93\"),v=d.IteratorPrototype,h=d.BUGGY_SAFARI_ITERATORS,y=f(\"iterator\"),m=\"keys\",g=\"values\",b=\"entries\",_=function(){return\" this};t.exports=\"function(t,e,n,f,d,w,x){o(n,e,f);var\" o,a,c,$=\"function(t){if(t===d&&T)return\" t;if(!h&&t in j)return j[t];switch(t){case m:return function(){return new n(this,t)};case g:return b:return n(this,t)}}return n(this)}},s=\"e+\"\" iterator\",k=\"!1,j=t.prototype,E=j[y]||j[\"@@iterator\"]||d&&j[d],T=!h&&E||$(d),I=\"Array\"==e&&j.entries||E;if(I&&(O=i(I.call(new\" t)),v!=\"=Object.prototype&&O.next&&(l||i(O)===v||(a?a(O,v):\"function\"!=typeof\" o[y]&&c(o,y,_)),s(o,s,!0,!0),l&&(p[s]=\"_))),d==g&&E&&E.name!==g&&(k=!0,T=function(){return\" e.call(this)}),l&&!x||j[y]=\"==T||c(j,y,T),p[e]=T,d)if(A={values:$(g),keys:w?T:$(m),entries:$(b)},x)for(C\" a)(h||k||!(c j))&&u(j,c,a[c]);else r({target:e,proto:!0,forced:h||k},a);return a}},\"7f9a\":function(t,e,n){var i&& native code .test(o(i))},\"825a\":function(t,e,n){var typeerror(string(t)+\" is not an object\");return t}},\"83ab\":function(t,e,n){var 7!=\"Object.defineProperty({},1,{get:function(){return\" 7}})[1]}))},\"861d\":function(t,e){t.exports=\"function(t){return\"object\"===typeof\" t?null!=\"=t:\"function\"===typeof\" t}},8925:function(t,e,n){var r.inspectsource&&(r.inspectsource=\"function(t){return\" o.call(t)}),t.exports=\"r.inspectSource},\"90e3\":function(t,e){var\" n=\"0,r=Math.random();t.exports=function(t){return\"Symbol(\"+String(void\" o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=\"n,t}},\"94ca\":function(t,e,n){var\" e?r(e):!!e)},a=\"i.normalize=function(t){return\" string(t).replace(o,\".\").tolowercase()},s=\"i.data={},c=i.NATIVE=\"N\",u=i.POLYFILL=\"P\";t.exports=i},\"9bf2\":function(t,e,n){var\" s(t,e,n)}catch(r){}if(\"get\"in n||\"set\"in n)throw typeerror(\"accessors supported\");return\"value\"in n&&(t[e]=\"n.value),t}},\"9ed3\":function(t,e,n){\"use\" u=\"e+\"\" iterator\";return t.prototype=\"o(r,{next:i(1,n)}),a(t,u,!1,!0),s[u]=c,t}},a4b4:function(t,e,n){var\" isnan(t=\"+t)?0:(t\">0?r:n)(t)}},a79d:function(t,e,n){\"use strict\";var r=n(\"23e7\"),o=n(\"c430\"),i=n(\"fea9\"),a=n(\"d039\"),s=n(\"d066\"),c=n(\"4840\"),u=n(\"cdf9\"),f=n(\"6eeb\"),l=!!i&&a((function(){i.prototype[\"finally\"].call({then:function(){}},(function(){}))}));r({target:\"Promise\",proto:!0,real:!0,forced:l},{finally:function(t){var e=c(this,s(\"Promise\")),n=\"function\"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),o||\"function\"!=typeof i||i.prototype[\"finally\"]||f(i.prototype,\"finally\",s(\"Promise\").prototype[\"finally\"])},ae93:function(t,e,n){\"use strict\";var r,o,i,a=n(\"d039\"),s=n(\"e163\"),c=n(\"9112\"),u=n(\"5135\"),f=n(\"b622\"),l=n(\"c430\"),p=f(\"iterator\"),d=!1,v=function(){return this};[].keys&&(i=[].keys(),\"next\"in i?(o=s(s(i)),o!==Object.prototype&&(r=o)):d=!0);var h=void 0==r||a((function(){var t={};return r[p].call(t)!==t}));h&&(r={}),l&&!h||u(r,p)||c(r,p,v),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},b0c0:function(t,e,n){var r=n(\"83ab\"),o=n(\"9bf2\").f,i=Function.prototype,a=i.toString,s=/^\\s*function ([^ (]*)/,c=\"name\";r&&!(c in i)&&o(i,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return\"\"}}})},b575:function(t,e,n){var r,o,i,a,s,c,u,f,l=n(\"da84\"),p=n(\"06cf\").f,d=n(\"2cf4\").set,v=n(\"1cdc\"),h=n(\"a4b4\"),y=n(\"605d\"),m=l.MutationObserver||l.WebKitMutationObserver,g=l.document,b=l.process,_=l.Promise,w=p(l,\"queueMicrotask\"),x=w&&w.value;x||(r=function(){var t,e;y&&(t=b.domain)&&t.exit();while(o){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,t&&t.enter()},v||y||h||!m||!g?_&&_.resolve?(u=_.resolve(void 0),f=u.then,a=function(){f.call(u,r)}):a=y?function(){b.nextTick(r)}:function(){d.call(l,r)}:(s=!0,c=g.createTextNode(\"\"),new m(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),t.exports=x||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},b622:function(t,e,n){var r=n(\"da84\"),o=n(\"5692\"),i=n(\"5135\"),a=n(\"90e3\"),s=n(\"4930\"),c=n(\"fdbf\"),u=o(\"wks\"),f=r.Symbol,l=c?f:f&&f.withoutSetter||a;t.exports=function(t){return i(u,t)&&(s||\"string\"==typeof u[t])||(s&&i(f,t)?u[t]=f[t]:u[t]=l(\"Symbol.\"+t)),u[t]}},b727:function(t,e,n){var r=n(\"0366\"),o=n(\"44ad\"),i=n(\"7b0b\"),a=n(\"50c4\"),s=n(\"65f0\"),c=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,f=4==t,l=6==t,p=7==t,d=5==t||l;return function(v,h,y,m){for(var g,b,_=i(v),w=o(_),x=r(h,y,3),O=a(w.length),A=0,C=m||s,$=e?C(v,O):n||p?C(v,0):void 0;O>A;A++)if((d||A in w)&&(g=w[A],b=x(g,A,_),t))if(e)$[A]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return A;case 2:c.call($,g)}else switch(t){case 4:return!1;case 7:c.call($,g)}return l?-1:u||f?f:$}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterOut:u(7)}},c04e:function(t,e,n){var r=n(\"861d\");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if(\"function\"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&\"function\"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError(\"Can't convert object to primitive value\")}},c430:function(t,e){t.exports=!1},c6b6:function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},c6cd:function(t,e,n){var r=n(\"da84\"),o=n(\"ce4e\"),i=\"__core-js_shared__\",a=r[i]||o(i,{});t.exports=a},c8ba:function(t,e){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(r){\"object\"===typeof window&&(n=window)}t.exports=n},ca84:function(t,e,n){var r=n(\"5135\"),o=n(\"fc6a\"),i=n(\"4d64\").indexOf,a=n(\"d012\");t.exports=function(t,e){var n,s=o(t),c=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);while(e.length>c)r(s,n=e[c++])&&(~i(u,n)||u.push(n));return u}},cc12:function(t,e,n){var r=n(\"da84\"),o=n(\"861d\"),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},cca6:function(t,e,n){var r=n(\"23e7\"),o=n(\"60da\");r({target:\"Object\",stat:!0,forced:Object.assign!==o},{assign:o})},cdf9:function(t,e,n){var r=n(\"825a\"),o=n(\"861d\"),i=n(\"f069\");t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t),a=n.resolve;return a(e),n.promise}},ce4e:function(t,e,n){var r=n(\"da84\"),o=n(\"9112\");t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},d012:function(t,e){t.exports={}},d039:function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},d066:function(t,e,n){var r=n(\"428f\"),o=n(\"da84\"),i=function(t){return\"function\"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){\"use strict\";var r=\"{}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var\" e=\"o(this,t);return!!e&&e.enumerable}:r},d2bb:function(t,e,n){var\" t,e=\"!1,n={};try{t=Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set,t.call(n,[]),e=n\" instanceof array}catch(i){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=\"i,n}}():void\" 0)},d44e:function(t,e,n){var o(this,t,arguments.length>1?arguments[1]:void 0)}})},da84:function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n(\"object\"==typeof globalThis&&globalThis)||n(\"object\"==typeof window&&window)||n(\"object\"==typeof self&&self)||n(\"object\"==typeof e&&e)||function(){return this}()||Function(\"return this\")()}).call(this,n(\"c8ba\"))},df75:function(t,e,n){var r=n(\"ca84\"),o=n(\"7839\");t.exports=Object.keys||function(t){return r(t,o)}},e163:function(t,e,n){var r=n(\"5135\"),o=n(\"7b0b\"),i=n(\"f772\"),a=n(\"e177\"),s=i(\"IE_PROTO\"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},e177:function(t,e,n){var r=n(\"d039\");t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},e260:function(t,e,n){\"use strict\";var r=n(\"fc6a\"),o=n(\"44d2\"),i=n(\"3f8c\"),a=n(\"69f3\"),s=n(\"7dd0\"),c=\"Array Iterator\",u=a.set,f=a.getterFor(c);t.exports=s(Array,\"Array\",(function(t,e){u(this,{type:c,target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):\"keys\"==n?{value:r,done:!1}:\"values\"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),\"values\"),i.Arguments=i.Array,o(\"keys\"),o(\"values\"),o(\"entries\")},e2cc:function(t,e,n){var r=n(\"6eeb\");t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},e667:function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(e){return{error:!0,value:e}}}},e6cf:function(t,e,n){\"use strict\";var r,o,i,a,s=n(\"23e7\"),c=n(\"c430\"),u=n(\"da84\"),f=n(\"d066\"),l=n(\"fea9\"),p=n(\"6eeb\"),d=n(\"e2cc\"),v=n(\"d44e\"),h=n(\"2626\"),y=n(\"861d\"),m=n(\"1c0b\"),g=n(\"19aa\"),b=n(\"8925\"),_=n(\"2266\"),w=n(\"1c7e\"),x=n(\"4840\"),O=n(\"2cf4\").set,A=n(\"b575\"),C=n(\"cdf9\"),$=n(\"44de\"),S=n(\"f069\"),k=n(\"e667\"),j=n(\"69f3\"),E=n(\"94ca\"),T=n(\"b622\"),I=n(\"605d\"),P=n(\"2d00\"),D=T(\"species\"),N=\"Promise\",M=j.get,F=j.set,L=j.getterFor(N),R=l,U=u.TypeError,z=u.document,B=u.process,V=f(\"fetch\"),H=S.f,W=H,q=!!(z&&z.createEvent&&u.dispatchEvent),G=\"function\"==typeof PromiseRejectionEvent,K=\"unhandledrejection\",X=\"rejectionhandled\",J=0,Y=1,Z=2,Q=1,tt=2,et=E(N,(function(){var t=b(R)!==String(R);if(!t){if(66===P)return!0;if(!I&&!G)return!0}if(c&&!R.prototype[\"finally\"])return!0;if(P>=51&&/native code/.test(R))return!1;var e=R.resolve(1),n=function(t){t((function(){}),(function(){}))},r=e.constructor={};return r[D]=n,!(e.then((function(){}))instanceof n)})),nt=et||!w((function(t){R.all(t)[\"catch\"]((function(){}))})),rt=function(t){var e;return!(!y(t)||\"function\"!=typeof(e=t.then))&&e},ot=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;A((function(){var r=t.value,o=t.state==Y,i=0;while(n.length>i){var a,s,c,u=n[i++],f=o?u.ok:u.fail,l=u.resolve,p=u.reject,d=u.domain;try{f?(o||(t.rejection===tt&&ct(t),t.rejection=Q),!0===f?a=r:(d&&d.enter(),a=f(r),d&&(d.exit(),c=!0)),a===u.promise?p(U(\"Promise-chain cycle\")):(s=rt(a))?s.call(a,l,p):l(a)):p(r)}catch(v){d&&!c&&d.exit(),p(v)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&at(t)}))}},it=function(t,e,n){var r,o;q?(r=z.createEvent(\"Event\"),r.promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},!G&&(o=u[\"on\"+t])?o(r):t===K&&$(\"Unhandled promise rejection\",n)},at=function(t){O.call(u,(function(){var e,n=t.facade,r=t.value,o=st(t);if(o&&(e=k((function(){I?B.emit(\"unhandledRejection\",r,n):it(K,n,r)})),t.rejection=I||st(t)?tt:Q,e.error))throw e.value}))},st=function(t){return t.rejection!==Q&&!t.parent},ct=function(t){O.call(u,(function(){var e=t.facade;I?B.emit(\"rejectionHandled\",e):it(X,e,t.value)}))},ut=function(t,e,n){return function(r){t(e,r,n)}},ft=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=Z,ot(t,!0))},lt=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw U(\"Promise can't be resolved itself\");var r=rt(e);r?A((function(){var n={done:!1};try{r.call(e,ut(lt,n,t),ut(ft,n,t))}catch(o){ft(n,o,t)}})):(t.value=e,t.state=Y,ot(t,!1))}catch(o){ft({done:!1},o,t)}}};et&&(R=function(t){g(this,R,N),m(t),r.call(this);var e=M(this);try{t(ut(lt,e),ut(ft,e))}catch(n){ft(e,n)}},r=function(t){F(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:J,value:void 0})},r.prototype=d(R.prototype,{then:function(t,e){var n=L(this),r=H(x(this,R));return r.ok=\"function\"!=typeof t||t,r.fail=\"function\"==typeof e&&e,r.domain=I?B.domain:void 0,n.parent=!0,n.reactions.push(r),n.state!=J&&ot(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=M(t);this.promise=t,this.resolve=ut(lt,e),this.reject=ut(ft,e)},S.f=H=function(t){return t===R||t===i?new o(t):W(t)},c||\"function\"!=typeof l||(a=l.prototype.then,p(l.prototype,\"then\",(function(t,e){var n=this;return new R((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),\"function\"==typeof V&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return C(R,V.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:et},{Promise:R}),v(R,N,!1,!0),h(N),i=f(N),s({target:N,stat:!0,forced:et},{reject:function(t){var e=H(this);return e.reject.call(void 0,t),e.promise}}),s({target:N,stat:!0,forced:c||et},{resolve:function(t){return C(c&&this===i?R:this,t)}}),s({target:N,stat:!0,forced:nt},{all:function(t){var e=this,n=H(e),r=n.resolve,o=n.reject,i=k((function(){var n=m(e.resolve),i=[],a=0,s=1;_(t,(function(t){var c=a++,u=!1;i.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,i[c]=t,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=H(e),r=n.reject,o=k((function(){var o=m(e.resolve);_(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},e893:function(t,e,n){var r=n(\"5135\"),o=n(\"56ef\"),i=n(\"06cf\"),a=n(\"9bf2\");t.exports=function(t,e){for(var n=o(e),s=a.f,c=i.f,u=0;u</2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},d1e7:function(t,e,n){\"use></\",d=\"prototype\",v=\"script\",h=f(\"IE_PROTO\"),y=function(){},m=function(t){return></41)}))},\"4d64\":function(t,e,n){var></o.length;s++){var></c;s++)if(a=t.options[s],o)i=F(r,ea(a))></e.length)t=t.concat(t);return></a&&u()}),i+1),t.addEventListener(s,f)}var></0&&(n.push(e),xi(t,e))}function></0&&t.setAttribute(\"class\",(n+e).trim())}}function></i;o++)t.style[r]=n[o];else></=0||t.target.ownerDocument!==document)return></=53);function></r;i++){var></0&&a[n].push(i):a[n]=[i]:a[n]=i}}var></i;r++)o(e=Qr(t[r]))&&\"\"!==e&&(n&&(n+=\"></r.length;o++)yr(t,n,r[o]);else></Un.length;Wn++)t=Un[Wn],t.before&&t.before(),e=t.id,Bn[e]=null,t.run();var></a;i++)ne(n[i],e,r,e,o)}return></i;r++)n[r]=e(t[r],r);else></r.length;o++){var></0||s<c)&&(a=!0)}if(void></n;e++)t[e].update()},ht.target=null;var></t.length;n++)t[n]&&T(e,t[n]);return></r.length;o++)n[r[o]]=!0;return></0?o(n+e,0):i(n,e)}},\"23e7\":function(t,e,n){var>"}],"PostAsset":[{"_id":"source/_posts/diff算法简介/HrGjhDp8ebSt62R.png","slug":"HrGjhDp8ebSt62R.png","post":"ckv28meqg0009h7vm1k1h3x74","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/WBQ8RSuH7norCs4.png","slug":"WBQ8RSuH7norCs4.png","post":"ckv28meqi000ch7vm5lp89zrw","modified":0,"renderable":0},{"_id":"source/_posts/js常用4种排序介绍/5z82iWpVIJbLfu7.gif","slug":"5z82iWpVIJbLfu7.gif","post":"ckv28meqj000fh7vmdb237flh","modified":0,"renderable":0},{"_id":"source/_posts/js常用4种排序介绍/DzWckAlLmVU9JuN.gif","slug":"DzWckAlLmVU9JuN.gif","post":"ckv28meqj000fh7vmdb237flh","modified":0,"renderable":0},{"_id":"source/_posts/js常用4种排序介绍/KWrN6slZTEFAuhv.gif","slug":"KWrN6slZTEFAuhv.gif","post":"ckv28meqj000fh7vmdb237flh","modified":0,"renderable":0},{"_id":"source/_posts/js常用4种排序介绍/ibLoIgDEnRJrUas.gif","slug":"ibLoIgDEnRJrUas.gif","post":"ckv28meqj000fh7vmdb237flh","modified":0,"renderable":0},{"_id":"source/_posts/webpack使用指南/EOzt1WTKBaXkgIr.png","slug":"EOzt1WTKBaXkgIr.png","post":"ckv28meqm000kh7vmgupp4560","modified":0,"renderable":0},{"_id":"source/_posts/使用css实现环状进度/E8CM6WZ1hRv7piy.gif","slug":"E8CM6WZ1hRv7piy.gif","post":"ckv28meqn000mh7vmb8lh74n7","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/2d6MCQ3TKquiVyF.png","slug":"2d6MCQ3TKquiVyF.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/4Wa2eSdZ3X98BfK.png","slug":"4Wa2eSdZ3X98BfK.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/BvYORyZgq9amV7A.png","slug":"BvYORyZgq9amV7A.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/Ia7qdlQ4PT1ws3j.png","slug":"Ia7qdlQ4PT1ws3j.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/KJPlgxfCpuGHndB.png","slug":"KJPlgxfCpuGHndB.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/MgVjFXxtsENKv4l.png","slug":"MgVjFXxtsENKv4l.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/Mi9vh214uZgD8z5.png","slug":"Mi9vh214uZgD8z5.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/NqjhKXn3kgIrDlS.png","slug":"NqjhKXn3kgIrDlS.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/TewXOIzalCK5Egh.png","slug":"TewXOIzalCK5Egh.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/bszNOfBKhiYaQv7.png","slug":"bszNOfBKhiYaQv7.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/n3kxjOqDQASw4Wz.png","slug":"n3kxjOqDQASw4Wz.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/p5kXGl2DtbcaSnW.png","slug":"p5kXGl2DtbcaSnW.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/upB4hvTydZ9IP1r.png","slug":"upB4hvTydZ9IP1r.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/旅行者1号/vTfbrW8JKkQFRcP.png","slug":"vTfbrW8JKkQFRcP.png","post":"ckv28meqs000zh7vmd491bnld","modified":0,"renderable":0},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程/YA4dIRbSgNVsvKE.png","slug":"YA4dIRbSgNVsvKE.png","post":"ckv28meqt0011h7vm9d12di75","modified":0,"renderable":0},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程/ZD6ML8tjkGXdeWf.png","slug":"ZD6ML8tjkGXdeWf.png","post":"ckv28meqt0011h7vm9d12di75","modified":0,"renderable":0},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程/grXvl26PoEtMFpa.png","slug":"grXvl26PoEtMFpa.png","post":"ckv28meqt0011h7vm9d12di75","modified":0,"renderable":0},{"_id":"source/_posts/真睡后收入-以太坊挖矿教程/rhvAF538ynVWtlY.png","slug":"rhvAF538ynVWtlY.png","post":"ckv28meqt0011h7vm9d12di75","modified":0,"renderable":0},{"_id":"source/_posts/面试题总结/FvAIM258yHCTQba.png","slug":"FvAIM258yHCTQba.png","post":"ckv28mero0025h7vmesbbf6ua","modified":0,"renderable":0},{"_id":"source/_posts/面试题总结/bB3Sj9h8nyoOIVs.png","slug":"bB3Sj9h8nyoOIVs.png","post":"ckv28mero0025h7vmesbbf6ua","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckv28meq30000h7vm5rn3gk6e","tag_id":"ckv28meqb0002h7vmgs8g2fdi","_id":"ckv28meqf0007h7vm07yj0ne3"},{"post_id":"ckv28meq90001h7vmf1jdgxqx","tag_id":"ckv28meqb0002h7vmgs8g2fdi","_id":"ckv28meqh000bh7vmbrj0914o"},{"post_id":"ckv28meqc0003h7vm99l5d130","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meql000gh7vm4q9bg436"},{"post_id":"ckv28meqi000dh7vm5ski2k4b","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meqm000ih7vmd9d56pb2"},{"post_id":"ckv28meqj000fh7vmdb237flh","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meqn000lh7vm6yxjath9"},{"post_id":"ckv28meqd0004h7vmbamohlwl","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meqn000nh7vmg5cdcpof"},{"post_id":"ckv28meql000hh7vmddh166rb","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meqo000qh7vm2vrp33m9"},{"post_id":"ckv28meqm000kh7vmgupp4560","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meqp000sh7vm97gy3rd4"},{"post_id":"ckv28meqd0005h7vmhe3m7dgl","tag_id":"ckv28meqm000jh7vm7avq6a3e","_id":"ckv28meqq000vh7vm3yf218k3"},{"post_id":"ckv28meqg0008h7vm3zoueve7","tag_id":"ckv28meqn000oh7vmgxfydz2b","_id":"ckv28meqr000xh7vm8mrv17j9"},{"post_id":"ckv28meqp000rh7vmdzex96l8","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meqt0010h7vm6h6rca0l"},{"post_id":"ckv28meqp000uh7vmd6ab7w6n","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28mequ0012h7vm45mr032a"},{"post_id":"ckv28meqg0009h7vm1k1h3x74","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meqv0015h7vmhgve0c8n"},{"post_id":"ckv28meqq000wh7vmhp6ug745","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28meqw0017h7vmco5w7zk2"},{"post_id":"ckv28meqs000zh7vmd491bnld","tag_id":"ckv28meqm000jh7vm7avq6a3e","_id":"ckv28meqx001ah7vm2mwp8e3f"},{"post_id":"ckv28meqi000ch7vm5lp89zrw","tag_id":"ckv28meqr000yh7vm4br20zt0","_id":"ckv28meqy001ch7vm0b3chmfi"},{"post_id":"ckv28meqn000mh7vmb8lh74n7","tag_id":"ckv28meqr000yh7vm4br20zt0","_id":"ckv28meqz001eh7vm4vq9cygt"},{"post_id":"ckv28meqo000ph7vmbwup4hvz","tag_id":"ckv28meqx0019h7vmby2k8e69","_id":"ckv28mer0001hh7vmexzybc1m"},{"post_id":"ckv28meqt0011h7vm9d12di75","tag_id":"ckv28meqz001fh7vmdopxcokk","_id":"ckv28mer2001lh7vmgp1m0lma"},{"post_id":"ckv28mequ0013h7vmfsdr18s2","tag_id":"ckv28mer1001jh7vm4mr73yxb","_id":"ckv28mer4001oh7vm7ealaxhu"},{"post_id":"ckv28mero0025h7vmesbbf6ua","tag_id":"ckv28meqh000ah7vm41d05npy","_id":"ckv28merq0027h7vm6j567xvs"}],"Tag":[{"name":"运维","_id":"ckv28meqb0002h7vmgs8g2fdi"},{"name":"前端","_id":"ckv28meqh000ah7vm41d05npy"},{"name":"天文","_id":"ckv28meqm000jh7vm7avq6a3e"},{"name":"Linux","_id":"ckv28meqn000oh7vmgxfydz2b"},{"name":"css","_id":"ckv28meqr000yh7vm4br20zt0"},{"name":"其他","_id":"ckv28meqx0019h7vmby2k8e69"},{"name":"虚拟货币","_id":"ckv28meqz001fh7vmdopxcokk"},{"name":"设计模式","_id":"ckv28mer1001jh7vm4mr73yxb"}]}}